
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c208  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0800c208  0c00c208  0001c208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  3 .ram_code     00000000  10000800  10000800  00020a84  2**0
                  CONTENTS
  4 PSRAM_DATA    00000000  10000800  10000800  00020a84  2**0
                  CONTENTS
  5 PSRAM_BSS     00000000  10000800  10000800  00020a84  2**0
                  CONTENTS
  6 .data         00000a84  20000000  0c00c210  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000010c  20000a84  0c00cc94  00020a84  2**2
                  ALLOC
  8 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  9 DSRAM2_DATA   00000000  30000000  30000000  00020a84  2**0
                  CONTENTS
 10 DSRAM2_BSS    00000000  30000000  30000000  00020a84  2**0
                  CONTENTS
 11 .stab         000000cc  00000000  00000000  00020a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .stabstr      000001b9  00000000  00000000  00020b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000648  00000000  00000000  00020d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00005e27  00000000  00000000  00021351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000d15  00000000  00000000  00027178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00003da3  00000000  00000000  00027e8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00003138  00000000  00000000  0002bc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c290  00000000  00000000  0002ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0000399c  00000000  00000000  000aaff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000005d8  00000000  00000000  000ae994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .build_attributes 00000dd4  00000000  00000000  000aef6c  2**0
                  CONTENTS, READONLY
 22 .debug_macro  00019b42  00000000  00000000  000afd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 89 07 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
 8000206:	4780      	blx	r0
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)
 800020c:	42ac      	cmp	r4, r5
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
 8000210:	6821      	ldr	r1, [r4, #0]
 8000212:	6862      	ldr	r2, [r4, #4]
 8000214:	68a3      	ldr	r3, [r4, #8]
 8000216:	3b04      	subs	r3, #4
 8000218:	bfa2      	ittt	ge
 800021a:	58c8      	ldrge	r0, [r1, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>
 8000220:	340c      	adds	r4, #12
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)
 8000228:	42a3      	cmp	r3, r4
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	2000      	movs	r0, #0
 8000232:	3a04      	subs	r2, #4
 8000234:	bfa4      	itt	ge
 8000236:	5088      	strge	r0, [r1, r2]
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>
 800023a:	3308      	adds	r3, #8
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
 8000240:	4780      	blx	r0
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00c210 	.word	0x0c00c210
 800024c:	20000000 	.word	0x20000000
 8000250:	00000a84 	.word	0x00000a84
 8000254:	0c00cc94 	.word	0x0c00cc94
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c00c210 	.word	0x0c00c210
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c00c210 	.word	0x0c00c210
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000a84 	.word	0x20000a84
 800027c:	00000108 	.word	0x00000108
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
 8000290:	10000800 	.word	0x10000800
 8000294:	08002dad 	.word	0x08002dad
 8000298:	08000248 	.word	0x08000248
 800029c:	08000278 	.word	0x08000278
 80002a0:	08000278 	.word	0x08000278
 80002a4:	08000290 	.word	0x08000290
 80002a8:	080031b9 	.word	0x080031b9
 80002ac:	08000631 	.word	0x08000631

080002b0 <BusFault_Handler>:
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	db0b      	blt.n	80002de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	f003 021f 	and.w	r2, r3, #31
 80002cc:	4907      	ldr	r1, [pc, #28]	; (80002ec <__NVIC_EnableIRQ+0x38>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	095b      	lsrs	r3, r3, #5
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	460b      	mov	r3, r1
 80002fa:	607a      	str	r2, [r7, #4]
 80002fc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	409a      	lsls	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	605a      	str	r2, [r3, #4]
}
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	fa22 f303 	lsr.w	r3, r2, r3
 800032a:	f003 0301 	and.w	r3, r3, #1
}
 800032e:	4618      	mov	r0, r3
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr

0800033a <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800033a:	b480      	push	{r7}
 800033c:	b083      	sub	sp, #12
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
 8000342:	460b      	mov	r3, r1
 8000344:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	68da      	ldr	r2, [r3, #12]
 800034a:	78fb      	ldrb	r3, [r7, #3]
 800034c:	2101      	movs	r1, #1
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	431a      	orrs	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	60da      	str	r2, [r3, #12]
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2201      	movs	r2, #1
 8000370:	60da      	str	r2, [r3, #12]
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr

0800037e <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 800037e:	b480      	push	{r7}
 8000380:	b083      	sub	sp, #12
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
 8000386:	460b      	mov	r3, r1
 8000388:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800038a:	887a      	ldrh	r2, [r7, #2]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr

0800039c <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	683a      	ldr	r2, [r7, #0]
 80003aa:	611a      	str	r2, [r3, #16]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80003ca:	78fb      	ldrb	r3, [r7, #3]
 80003cc:	2101      	movs	r1, #1
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	431a      	orrs	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
	...

080003e8 <get_morse>:
int time_counter = 0;
int pause_ticks = 50;// we set by prescaler one tick as 100 ms, so 5 sec should be 50 ticks
volatile uint32_t pre_time = 0;
volatile uint32_t cur_time = 0;

char * get_morse(char input_letter){
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    for (size_t i = 0; i < char_len; i++) {
 80003f2:	2300      	movs	r3, #0
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	e011      	b.n	800041c <get_morse+0x34>
        if (input_letter==letter[i]){
 80003f8:	4a0f      	ldr	r2, [pc, #60]	; (8000438 <get_morse+0x50>)
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	4413      	add	r3, r2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	79fa      	ldrb	r2, [r7, #7]
 8000402:	429a      	cmp	r2, r3
 8000404:	d107      	bne.n	8000416 <get_morse+0x2e>
        lookuptable_counter = 0;
 8000406:	4b0d      	ldr	r3, [pc, #52]	; (800043c <get_morse+0x54>)
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
        return morse_code[i];
 800040c:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <get_morse+0x58>)
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000414:	e009      	b.n	800042a <get_morse+0x42>
    for (size_t i = 0; i < char_len; i++) {
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	3301      	adds	r3, #1
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <get_morse+0x5c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	461a      	mov	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	4293      	cmp	r3, r2
 8000426:	d3e7      	bcc.n	80003f8 <get_morse+0x10>
        };
    };
  return "";
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <get_morse+0x60>)
}
 800042a:	4618      	mov	r0, r3
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000
 800043c:	20000a84 	.word	0x20000a84
 8000440:	20000028 	.word	0x20000028
 8000444:	200000bc 	.word	0x200000bc
 8000448:	0800bd7c 	.word	0x0800bd7c

0800044c <str_concat>:

//string concatenate function 
char* str_concat(const char *s1, const char *s2)
{
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	6039      	str	r1, [r7, #0]
    char *result = malloc(strlen(s1) + strlen(s2) + 1); // +1 for the null-terminator
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f003 fa72 	bl	8003940 <strlen>
 800045c:	4604      	mov	r4, r0
 800045e:	6838      	ldr	r0, [r7, #0]
 8000460:	f003 fa6e 	bl	8003940 <strlen>
 8000464:	4603      	mov	r3, r0
 8000466:	4423      	add	r3, r4
 8000468:	3301      	adds	r3, #1
 800046a:	4618      	mov	r0, r3
 800046c:	f002 fec8 	bl	8003200 <malloc>
 8000470:	4603      	mov	r3, r0
 8000472:	60fb      	str	r3, [r7, #12]
    // in real code you would check for errors in malloc here
    strcpy(result, s1);
 8000474:	6879      	ldr	r1, [r7, #4]
 8000476:	68f8      	ldr	r0, [r7, #12]
 8000478:	f003 f9fc 	bl	8003874 <strcpy>
    strcat(result, s2);
 800047c:	6839      	ldr	r1, [r7, #0]
 800047e:	68f8      	ldr	r0, [r7, #12]
 8000480:	f003 f9d8 	bl	8003834 <strcat>
    return result;
 8000484:	68fb      	ldr	r3, [r7, #12]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bd90      	pop	{r4, r7, pc}
	...

08000490 <creat_morse_code>:
//   }
//   return output_str;
// }


char * creat_morse_code(char * user_input_){
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  int i;
  char * output_str_ = "";
 8000498:	4b17      	ldr	r3, [pc, #92]	; (80004f8 <creat_morse_code+0x68>)
 800049a:	613b      	str	r3, [r7, #16]
  for (i = 0; i < strlen(user_input_); i++){
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	e01e      	b.n	80004e0 <creat_morse_code+0x50>

    char * return_value;
    return_value = get_morse(user_input_[i]);
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	4413      	add	r3, r2
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ff9c 	bl	80003e8 <get_morse>
 80004b0:	60f8      	str	r0, [r7, #12]
    output_str_ = str_concat(output_str_,return_value);
 80004b2:	68f9      	ldr	r1, [r7, #12]
 80004b4:	6938      	ldr	r0, [r7, #16]
 80004b6:	f7ff ffc9 	bl	800044c <str_concat>
 80004ba:	6138      	str	r0, [r7, #16]
    if(i<(strlen(user_input_)-1)){
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f003 fa3f 	bl	8003940 <strlen>
 80004c2:	4603      	mov	r3, r0
 80004c4:	1e5a      	subs	r2, r3, #1
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d906      	bls.n	80004da <creat_morse_code+0x4a>
        char * three_0 = "000";
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <creat_morse_code+0x6c>)
 80004ce:	60bb      	str	r3, [r7, #8]
        output_str_ = str_concat(output_str_,three_0);
 80004d0:	68b9      	ldr	r1, [r7, #8]
 80004d2:	6938      	ldr	r0, [r7, #16]
 80004d4:	f7ff ffba 	bl	800044c <str_concat>
 80004d8:	6138      	str	r0, [r7, #16]
  for (i = 0; i < strlen(user_input_); i++){
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	3301      	adds	r3, #1
 80004de:	617b      	str	r3, [r7, #20]
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f003 fa2d 	bl	8003940 <strlen>
 80004e6:	4602      	mov	r2, r0
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d8d9      	bhi.n	80004a2 <creat_morse_code+0x12>
    }
  }
  return output_str_;
 80004ee:	693b      	ldr	r3, [r7, #16]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	0800bd7c 	.word	0x0800bd7c
 80004fc:	0800bd80 	.word	0x0800bd80

08000500 <send_morse>:
    .timer_concatenation = 0U
    };



void send_morse(){
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0

if(autoreload_counter < str_len){
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <send_morse+0x64>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <send_morse+0x68>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	429a      	cmp	r2, r3
 800050e:	da14      	bge.n	800053a <send_morse+0x3a>
    if(output_str[autoreload_counter]=='1'){
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <send_morse+0x6c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a13      	ldr	r2, [pc, #76]	; (8000564 <send_morse+0x64>)
 8000516:	6812      	ldr	r2, [r2, #0]
 8000518:	4413      	add	r3, r2
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b31      	cmp	r3, #49	; 0x31
 800051e:	d105      	bne.n	800052c <send_morse+0x2c>
      XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_HIGH);//XMC_GPIO_OUTPUT_LEVEL_HIGH
 8000520:	2201      	movs	r2, #1
 8000522:	2101      	movs	r1, #1
 8000524:	4812      	ldr	r0, [pc, #72]	; (8000570 <send_morse+0x70>)
 8000526:	f7ff fee3 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
      autoreload_counter = 0;
    }
    
  };

};
 800052a:	e019      	b.n	8000560 <send_morse+0x60>
      XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_LOW);//XMC_GPIO_OUTPUT_LEVEL_HIGH
 800052c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000530:	2101      	movs	r1, #1
 8000532:	480f      	ldr	r0, [pc, #60]	; (8000570 <send_morse+0x70>)
 8000534:	f7ff fedc 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
};
 8000538:	e012      	b.n	8000560 <send_morse+0x60>
    if(autoreload_counter < (str_len+pause_ticks)){
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <send_morse+0x68>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <send_morse+0x74>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	441a      	add	r2, r3
 8000544:	4b07      	ldr	r3, [pc, #28]	; (8000564 <send_morse+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	429a      	cmp	r2, r3
 800054a:	dd06      	ble.n	800055a <send_morse+0x5a>
      XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_LOW);
 800054c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000550:	2101      	movs	r1, #1
 8000552:	4807      	ldr	r0, [pc, #28]	; (8000570 <send_morse+0x70>)
 8000554:	f7ff fecc 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
};
 8000558:	e002      	b.n	8000560 <send_morse+0x60>
      autoreload_counter = 0;
 800055a:	4b02      	ldr	r3, [pc, #8]	; (8000564 <send_morse+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
};
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000a90 	.word	0x20000a90
 8000568:	20000a88 	.word	0x20000a88
 800056c:	200000c8 	.word	0x200000c8
 8000570:	48028100 	.word	0x48028100
 8000574:	200000cc 	.word	0x200000cc

08000578 <send_time>:

void send_time(){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

if(autoreload_counter < time_string_len){
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <send_time+0x64>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <send_time+0x68>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	429a      	cmp	r2, r3
 8000586:	da14      	bge.n	80005b2 <send_time+0x3a>
    if(time_span[autoreload_counter]=='1'){
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <send_time+0x6c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <send_time+0x64>)
 800058e:	6812      	ldr	r2, [r2, #0]
 8000590:	4413      	add	r3, r2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b31      	cmp	r3, #49	; 0x31
 8000596:	d105      	bne.n	80005a4 <send_time+0x2c>
      XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_HIGH);//XMC_GPIO_OUTPUT_LEVEL_HIGH
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4812      	ldr	r0, [pc, #72]	; (80005e8 <send_time+0x70>)
 800059e:	f7ff fea7 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
      autoreload_counter = 0;
    }
    
  };
  
}
 80005a2:	e019      	b.n	80005d8 <send_time+0x60>
      XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_LOW);//XMC_GPIO_OUTPUT_LEVEL_HIGH
 80005a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a8:	2101      	movs	r1, #1
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <send_time+0x70>)
 80005ac:	f7ff fea0 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
}
 80005b0:	e012      	b.n	80005d8 <send_time+0x60>
    if(autoreload_counter < (time_string_len+pause_ticks)){
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <send_time+0x68>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <send_time+0x74>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	441a      	add	r2, r3
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <send_time+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dd06      	ble.n	80005d2 <send_time+0x5a>
      XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_LOW);
 80005c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005c8:	2101      	movs	r1, #1
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <send_time+0x70>)
 80005cc:	f7ff fe90 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
}
 80005d0:	e002      	b.n	80005d8 <send_time+0x60>
      autoreload_counter = 0;
 80005d2:	4b02      	ldr	r3, [pc, #8]	; (80005dc <send_time+0x64>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000a90 	.word	0x20000a90
 80005e0:	20000a8c 	.word	0x20000a8c
 80005e4:	200000c4 	.word	0x200000c4
 80005e8:	48028100 	.word	0x48028100
 80005ec:	200000cc 	.word	0x200000cc

080005f0 <time_span_trans>:

void time_span_trans(char * time_span_str){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  //output_str = creat_morse_code(user_input);
  time_span = "";//make it 0
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <time_span_trans+0x34>)
 80005fa:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <time_span_trans+0x38>)
 80005fc:	601a      	str	r2, [r3, #0]
  time_span = creat_morse_code(time_span_str);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff ff46 	bl	8000490 <creat_morse_code>
 8000604:	4603      	mov	r3, r0
 8000606:	4a07      	ldr	r2, [pc, #28]	; (8000624 <time_span_trans+0x34>)
 8000608:	6013      	str	r3, [r2, #0]
  time_string_len = strlen(time_span);
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <time_span_trans+0x34>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4618      	mov	r0, r3
 8000610:	f003 f996 	bl	8003940 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <time_span_trans+0x3c>)
 800061a:	601a      	str	r2, [r3, #0]

}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000c4 	.word	0x200000c4
 8000628:	0800bd7c 	.word	0x0800bd7c
 800062c:	20000a8c 	.word	0x20000a8c

08000630 <main>:


int main(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
   
  output_str = creat_morse_code(user_input);
 8000636:	4b43      	ldr	r3, [pc, #268]	; (8000744 <main+0x114>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff28 	bl	8000490 <creat_morse_code>
 8000640:	4603      	mov	r3, r0
 8000642:	4a41      	ldr	r2, [pc, #260]	; (8000748 <main+0x118>)
 8000644:	6013      	str	r3, [r2, #0]
  str_len = strlen(output_str);
 8000646:	4b40      	ldr	r3, [pc, #256]	; (8000748 <main+0x118>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f003 f978 	bl	8003940 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b3d      	ldr	r3, [pc, #244]	; (800074c <main+0x11c>)
 8000656:	601a      	str	r2, [r3, #0]
  //time_span = "1110111011101110111";
  time_span = "11111111111111111111111111111111111111111111111";
 8000658:	4b3d      	ldr	r3, [pc, #244]	; (8000750 <main+0x120>)
 800065a:	4a3e      	ldr	r2, [pc, #248]	; (8000754 <main+0x124>)
 800065c:	601a      	str	r2, [r3, #0]
  //->21:41
  // for calculation of the output string 
  int only_once = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  char * time_span_str = "0";
 8000662:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <main+0x128>)
 8000664:	613b      	str	r3, [r7, #16]
  // <- 21:41

  XMC_GPIO_Init(XMC_GPIO_PORT1 , 1 , & LED_config ) ;
 8000666:	4a3d      	ldr	r2, [pc, #244]	; (800075c <main+0x12c>)
 8000668:	2101      	movs	r1, #1
 800066a:	483d      	ldr	r0, [pc, #244]	; (8000760 <main+0x130>)
 800066c:	f000 f906 	bl	800087c <XMC_GPIO_Init>
  /* Initialize CCU40 , the MCMS transfer is irrelevant for our
  * application . Calls EnableModule ( SCU enable clock , SCU ungate
  * clock , SCU deassert reset ) and StartPrescaler ( GIDLC . SPRB ) */
  XMC_CCU4_Init( CCU40 , XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR ) ;
 8000670:	2100      	movs	r1, #0
 8000672:	483c      	ldr	r0, [pc, #240]	; (8000764 <main+0x134>)
 8000674:	f000 fa83 	bl	8000b7e <XMC_CCU4_Init>
  XMC_CCU4_SLICE_CompareInit ( CCU40_CC40 , & CCU_compare_config ) ;
 8000678:	493b      	ldr	r1, [pc, #236]	; (8000768 <main+0x138>)
 800067a:	483c      	ldr	r0, [pc, #240]	; (800076c <main+0x13c>)
 800067c:	f000 fad5 	bl	8000c2a <XMC_CCU4_SLICE_CompareInit>
  XMC_CCU4_SLICE_SetTimerPeriodMatch ( CCU40_CC40 , 0x2DC7 ) ;//1719 as 0x
 8000680:	f642 51c7 	movw	r1, #11719	; 0x2dc7
 8000684:	4839      	ldr	r0, [pc, #228]	; (800076c <main+0x13c>)
 8000686:	f7ff fe7a 	bl	800037e <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  XMC_CCU4_EnableShadowTransfer ( CCU40 , XMC_CCU4_SHADOW_TRANSFER_SLICE_0 ) ;
 800068a:	2101      	movs	r1, #1
 800068c:	4835      	ldr	r0, [pc, #212]	; (8000764 <main+0x134>)
 800068e:	f7ff fe85 	bl	800039c <XMC_CCU4_EnableShadowTransfer>
  /* Map IRQ to NVIC IRQ input , enable IRQ in CCU4 */
  XMC_CCU4_SLICE_SetInterruptNode( CCU40_CC40 ,\
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	4835      	ldr	r0, [pc, #212]	; (800076c <main+0x13c>)
 8000698:	f000 fea0 	bl	80013dc <XMC_CCU4_SLICE_SetInterruptNode>
      XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH ,\
      XMC_CCU4_SLICE_SR_ID_0 ) ;
  XMC_CCU4_SLICE_EnableEvent( CCU40_CC40 ,\
 800069c:	2100      	movs	r1, #0
 800069e:	4833      	ldr	r0, [pc, #204]	; (800076c <main+0x13c>)
 80006a0:	f7ff fe8a 	bl	80003b8 <XMC_CCU4_SLICE_EnableEvent>
      XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH ) ;
  /* Enable IRQ input in NVIC ( IRQ number from XMC4500 . h ) */
  NVIC_EnableIRQ( CCU40_0_IRQn ) ;
 80006a4:	202c      	movs	r0, #44	; 0x2c
 80006a6:	f7ff fe05 	bl	80002b4 <__NVIC_EnableIRQ>
  /* enable clock to slice CC40 */
  XMC_CCU4_EnableClock( CCU40 , 0) ;
 80006aa:	2100      	movs	r1, #0
 80006ac:	482d      	ldr	r0, [pc, #180]	; (8000764 <main+0x134>)
 80006ae:	f7ff fe44 	bl	800033a <XMC_CCU4_EnableClock>
  /* start timer */
  XMC_CCU4_SLICE_StartTimer( CCU40_CC40 ) ;
 80006b2:	482e      	ldr	r0, [pc, #184]	; (800076c <main+0x13c>)
 80006b4:	f7ff fe56 	bl	8000364 <XMC_CCU4_SLICE_StartTimer>
      // send_morse
  //else
      // autoreload_counter = 0;
  // 16:54 -->
  //time_span = creat_morse_code(user_input);
  if (XMC_GPIO_GetInput(GPIO_BUTTON1) == 0 ){
 80006b8:	210e      	movs	r1, #14
 80006ba:	4829      	ldr	r0, [pc, #164]	; (8000760 <main+0x130>)
 80006bc:	f7ff fe2a 	bl	8000314 <XMC_GPIO_GetInput>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d118      	bne.n	80006f8 <main+0xc8>
    
    pre_time = cur_time;
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <main+0x140>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a2a      	ldr	r2, [pc, #168]	; (8000774 <main+0x144>)
 80006cc:	6013      	str	r3, [r2, #0]
    cur_time = global_autoreload_counter;
 80006ce:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <main+0x148>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a27      	ldr	r2, [pc, #156]	; (8000770 <main+0x140>)
 80006d4:	6013      	str	r3, [r2, #0]
    char str_tem[10];
    sprintf(str_tem,"%ld",(cur_time-pre_time));
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <main+0x140>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <main+0x144>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	1ad2      	subs	r2, r2, r3
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4926      	ldr	r1, [pc, #152]	; (800077c <main+0x14c>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 f885 	bl	80037f4 <sprintf>
    time_span_str = str_tem;
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	613b      	str	r3, [r7, #16]
    only_once = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
    //time_span_trans(input);
    //time_span = creat_morse_code(user_input);
    //strcpy(time_span,str_tem);
    //time_string_len = strlen(time_span);
    send_morse();
 80006f2:	f7ff ff05 	bl	8000500 <send_morse>
 80006f6:	e7df      	b.n	80006b8 <main+0x88>
  }else if (XMC_GPIO_GetInput(GPIO_BUTTON2) == 0){   // 16:54 <--
 80006f8:	210f      	movs	r1, #15
 80006fa:	4819      	ldr	r0, [pc, #100]	; (8000760 <main+0x130>)
 80006fc:	f7ff fe0a 	bl	8000314 <XMC_GPIO_GetInput>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d10b      	bne.n	800071e <main+0xee>
  // is BUTTON2 is pressed 
    //XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_HIGH);
    time_string_len = strlen(time_span);
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <main+0x120>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f003 f918 	bl	8003940 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <main+0x150>)
 8000716:	601a      	str	r2, [r3, #0]
    send_time();
 8000718:	f7ff ff2e 	bl	8000578 <send_time>
 800071c:	e7cc      	b.n	80006b8 <main+0x88>
  }else{
    XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_LOW);
 800071e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000722:	2101      	movs	r1, #1
 8000724:	480e      	ldr	r0, [pc, #56]	; (8000760 <main+0x130>)
 8000726:	f7ff fde3 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
    if (!only_once){
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d104      	bne.n	800073a <main+0x10a>
    time_span_trans(time_span_str);
 8000730:	6938      	ldr	r0, [r7, #16]
 8000732:	f7ff ff5d 	bl	80005f0 <time_span_trans>
    only_once=1;
 8000736:	2301      	movs	r3, #1
 8000738:	617b      	str	r3, [r7, #20]
    }
    autoreload_counter = 0;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <main+0x154>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
  if (XMC_GPIO_GetInput(GPIO_BUTTON1) == 0 ){
 8000740:	e7ba      	b.n	80006b8 <main+0x88>
 8000742:	bf00      	nop
 8000744:	200000c0 	.word	0x200000c0
 8000748:	200000c8 	.word	0x200000c8
 800074c:	20000a88 	.word	0x20000a88
 8000750:	200000c4 	.word	0x200000c4
 8000754:	0800bd90 	.word	0x0800bd90
 8000758:	0800bbc0 	.word	0x0800bbc0
 800075c:	0800bd84 	.word	0x0800bd84
 8000760:	48028100 	.word	0x48028100
 8000764:	4000c000 	.word	0x4000c000
 8000768:	200000d0 	.word	0x200000d0
 800076c:	4000c100 	.word	0x4000c100
 8000770:	20000aa0 	.word	0x20000aa0
 8000774:	20000a9c 	.word	0x20000a9c
 8000778:	20000a94 	.word	0x20000a94
 800077c:	0800bdc0 	.word	0x0800bdc0
 8000780:	20000a8c 	.word	0x20000a8c
 8000784:	20000a90 	.word	0x20000a90

08000788 <CCU40_0_IRQHandler>:
}

return 0;
}

void CCU40_0_IRQHandler ( void ) {
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  autoreload_counter++;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <CCU40_0_IRQHandler+0x24>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a06      	ldr	r2, [pc, #24]	; (80007ac <CCU40_0_IRQHandler+0x24>)
 8000794:	6013      	str	r3, [r2, #0]
  global_autoreload_counter++;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <CCU40_0_IRQHandler+0x28>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <CCU40_0_IRQHandler+0x28>)
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000a90 	.word	0x20000a90
 80007b0:	20000a94 	.word	0x20000a94

080007b4 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]
 80007c0:	4613      	mov	r3, r2
 80007c2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	089b      	lsrs	r3, r3, #2
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	461a      	mov	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3204      	adds	r2, #4
 80007d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	f003 0303 	and.w	r3, r3, #3
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	21f8      	movs	r1, #248	; 0xf8
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43db      	mvns	r3, r3
 80007e4:	78f9      	ldrb	r1, [r7, #3]
 80007e6:	0889      	lsrs	r1, r1, #2
 80007e8:	b2c9      	uxtb	r1, r1
 80007ea:	4608      	mov	r0, r1
 80007ec:	ea02 0103 	and.w	r1, r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	1d02      	adds	r2, r0, #4
 80007f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	089b      	lsrs	r3, r3, #2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	461a      	mov	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3204      	adds	r2, #4
 8000804:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000808:	78b9      	ldrb	r1, [r7, #2]
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	78f9      	ldrb	r1, [r7, #3]
 8000818:	0889      	lsrs	r1, r1, #2
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	4608      	mov	r0, r1
 800081e:	ea42 0103 	orr.w	r1, r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1d02      	adds	r2, r0, #4
 8000826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	460b      	mov	r3, r1
 8000840:	70fb      	strb	r3, [r7, #3]
 8000842:	4613      	mov	r3, r2
 8000844:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	2103      	movs	r1, #3
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000860:	78b9      	ldrb	r1, [r7, #2]
 8000862:	78fb      	ldrb	r3, [r7, #3]
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	fa01 f303 	lsl.w	r3, r1, r3
 800086a:	431a      	orrs	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	460b      	mov	r3, r1
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800088a:	7afb      	ldrb	r3, [r7, #11]
 800088c:	089b      	lsrs	r3, r3, #2
 800088e:	b2db      	uxtb	r3, r3
 8000890:	461a      	mov	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3204      	adds	r2, #4
 8000896:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	21f8      	movs	r1, #248	; 0xf8
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	7af9      	ldrb	r1, [r7, #11]
 80008ac:	0889      	lsrs	r1, r1, #2
 80008ae:	b2c9      	uxtb	r1, r1
 80008b0:	4608      	mov	r0, r1
 80008b2:	ea02 0103 	and.w	r1, r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	1d02      	adds	r2, r0, #4
 80008ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80008c2:	7afb      	ldrb	r3, [r7, #11]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	2103      	movs	r1, #3
 80008c8:	fa01 f303 	lsl.w	r3, r1, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	401a      	ands	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	4a38      	ldr	r2, [pc, #224]	; (80009b8 <XMC_GPIO_Init+0x13c>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d003      	beq.n	80008e4 <XMC_GPIO_Init+0x68>
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4a37      	ldr	r2, [pc, #220]	; (80009bc <XMC_GPIO_Init+0x140>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d10a      	bne.n	80008fa <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008e8:	7afb      	ldrb	r3, [r7, #11]
 80008ea:	2101      	movs	r1, #1
 80008ec:	fa01 f303 	lsl.w	r3, r1, r3
 80008f0:	43db      	mvns	r3, r3
 80008f2:	401a      	ands	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	661a      	str	r2, [r3, #96]	; 0x60
 80008f8:	e03c      	b.n	8000974 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	685a      	ldr	r2, [r3, #4]
 80008fe:	7afb      	ldrb	r3, [r7, #11]
 8000900:	409a      	lsls	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000906:	7afb      	ldrb	r3, [r7, #11]
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	461a      	mov	r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	3210      	adds	r2, #16
 8000912:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000916:	7afb      	ldrb	r3, [r7, #11]
 8000918:	f003 0307 	and.w	r3, r3, #7
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	2107      	movs	r1, #7
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	7af9      	ldrb	r1, [r7, #11]
 8000928:	08c9      	lsrs	r1, r1, #3
 800092a:	b2c9      	uxtb	r1, r1
 800092c:	4608      	mov	r0, r1
 800092e:	ea02 0103 	and.w	r1, r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f100 0210 	add.w	r2, r0, #16
 8000938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800093c:	7afb      	ldrb	r3, [r7, #11]
 800093e:	08db      	lsrs	r3, r3, #3
 8000940:	b2db      	uxtb	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	3210      	adds	r2, #16
 8000948:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7a1b      	ldrb	r3, [r3, #8]
 8000950:	4619      	mov	r1, r3
 8000952:	7afb      	ldrb	r3, [r7, #11]
 8000954:	f003 0307 	and.w	r3, r3, #7
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	7af9      	ldrb	r1, [r7, #11]
 8000960:	08c9      	lsrs	r1, r1, #3
 8000962:	b2c9      	uxtb	r1, r1
 8000964:	4608      	mov	r0, r1
 8000966:	ea42 0103 	orr.w	r1, r2, r3
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	f100 0210 	add.w	r2, r0, #16
 8000970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000974:	7afb      	ldrb	r3, [r7, #11]
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	b2db      	uxtb	r3, r3
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	3204      	adds	r2, #4
 8000980:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	7afb      	ldrb	r3, [r7, #11]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	7af9      	ldrb	r1, [r7, #11]
 8000998:	0889      	lsrs	r1, r1, #2
 800099a:	b2c9      	uxtb	r1, r1
 800099c:	4608      	mov	r0, r1
 800099e:	ea42 0103 	orr.w	r1, r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	1d02      	adds	r2, r0, #4
 80009a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	48028e00 	.word	0x48028e00
 80009bc:	48028f00 	.word	0x48028f00

080009c0 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
 80009cc:	4613      	mov	r3, r2
 80009ce:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3210      	adds	r2, #16
 80009dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	2107      	movs	r1, #7
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	78f9      	ldrb	r1, [r7, #3]
 80009f2:	08c9      	lsrs	r1, r1, #3
 80009f4:	b2c9      	uxtb	r1, r1
 80009f6:	4608      	mov	r0, r1
 80009f8:	ea02 0103 	and.w	r1, r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f100 0210 	add.w	r2, r0, #16
 8000a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	08db      	lsrs	r3, r3, #3
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3210      	adds	r2, #16
 8000a12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a16:	78b9      	ldrb	r1, [r7, #2]
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	fa01 f303 	lsl.w	r3, r1, r3
 8000a24:	78f9      	ldrb	r1, [r7, #3]
 8000a26:	08c9      	lsrs	r1, r1, #3
 8000a28:	b2c9      	uxtb	r1, r1
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	ea42 0103 	orr.w	r1, r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f100 0210 	add.w	r2, r0, #16
 8000a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <XMC_CCU4_StartPrescaler>:
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60da      	str	r2, [r3, #12]
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <XMC_CCU4_SLICE_SetDitherCompareValue>:
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	70fb      	strb	r3, [r7, #3]
  slice->DITS = comp_val;
 8000a72:	78fa      	ldrb	r2, [r7, #3]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	621a      	str	r2, [r3, #32]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <XMC_CCU4_lAssertReset>:
/*********************************************************************************************************************
 * LOCAL ROUTINES
 ********************************************************************************************************************/
#if defined(PERIPHERAL_RESET_SUPPORTED)
__STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <XMC_CCU4_lAssertReset+0x50>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d103      	bne.n	8000a9c <XMC_CCU4_lAssertReset+0x18>
  {
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000a94:	2004      	movs	r0, #4
 8000a96:	f001 f8bd 	bl	8001c14 <XMC_SCU_RESET_AssertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}
 8000a9a:	e016      	b.n	8000aca <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU41)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <XMC_CCU4_lAssertReset+0x54>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d103      	bne.n	8000aac <XMC_CCU4_lAssertReset+0x28>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000aa4:	2008      	movs	r0, #8
 8000aa6:	f001 f8b5 	bl	8001c14 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8000aaa:	e00e      	b.n	8000aca <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU42)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <XMC_CCU4_lAssertReset+0x58>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d103      	bne.n	8000abc <XMC_CCU4_lAssertReset+0x38>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000ab4:	2010      	movs	r0, #16
 8000ab6:	f001 f8ad 	bl	8001c14 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8000aba:	e006      	b.n	8000aca <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU43)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <XMC_CCU4_lAssertReset+0x5c>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d102      	bne.n	8000aca <XMC_CCU4_lAssertReset+0x46>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000ac4:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <XMC_CCU4_lAssertReset+0x60>)
 8000ac6:	f001 f8a5 	bl	8001c14 <XMC_SCU_RESET_AssertPeripheralReset>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	4000c000 	.word	0x4000c000
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	40014000 	.word	0x40014000
 8000ae0:	48004000 	.word	0x48004000
 8000ae4:	10000001 	.word	0x10000001

08000ae8 <XMC_CCU4_lDeassertReset>:

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <XMC_CCU4_lDeassertReset+0x50>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d103      	bne.n	8000b00 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000af8:	2004      	movs	r0, #4
 8000afa:	f001 f8a9 	bl	8001c50 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000afe:	e016      	b.n	8000b2e <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU41)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <XMC_CCU4_lDeassertReset+0x54>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d103      	bne.n	8000b10 <XMC_CCU4_lDeassertReset+0x28>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000b08:	2008      	movs	r0, #8
 8000b0a:	f001 f8a1 	bl	8001c50 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8000b0e:	e00e      	b.n	8000b2e <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU42)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <XMC_CCU4_lDeassertReset+0x58>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d103      	bne.n	8000b20 <XMC_CCU4_lDeassertReset+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000b18:	2010      	movs	r0, #16
 8000b1a:	f001 f899 	bl	8001c50 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8000b1e:	e006      	b.n	8000b2e <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU43)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <XMC_CCU4_lDeassertReset+0x5c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d102      	bne.n	8000b2e <XMC_CCU4_lDeassertReset+0x46>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000b28:	4807      	ldr	r0, [pc, #28]	; (8000b48 <XMC_CCU4_lDeassertReset+0x60>)
 8000b2a:	f001 f891 	bl	8001c50 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	4000c000 	.word	0x4000c000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	40014000 	.word	0x40014000
 8000b44:	48004000 	.word	0x48004000
 8000b48:	10000001 	.word	0x10000001

08000b4c <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000b54:	2010      	movs	r0, #16
 8000b56:	f001 fb65 	bl	8002224 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffc4 	bl	8000ae8 <XMC_CCU4_lDeassertReset>
#endif
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <XMC_CCU4_DisableModule>:

void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_DisableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lAssertReset(module);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ff87 	bl	8000a84 <XMC_CCU4_lAssertReset>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lGateClock(module);
#endif
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <XMC_CCU4_Init>:

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b084      	sub	sp, #16
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffde 	bl	8000b4c <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff58 	bl	8000a46 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ba2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	039b      	lsls	r3, r3, #14
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000bd4:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	011b      	lsls	r3, r3, #4
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	601a      	str	r2, [r3, #0]
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <XMC_CCU4_SetMultiChannelShadowTransferMode>:

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b085      	sub	sp, #20
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	0c1b      	lsrs	r3, r3, #16
 8000c06:	43db      	mvns	r3, r3
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	601a      	str	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	795b      	ldrb	r3, [r3, #5]
 8000c40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	051a      	lsls	r2, r3, #20
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	791b      	ldrb	r3, [r3, #4]
 8000c50:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	795b      	ldrb	r3, [r3, #5]
 8000c60:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	795b      	ldrb	r3, [r3, #5]
 8000c70:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	461a      	mov	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	791b      	ldrb	r3, [r3, #4]
 8000c80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	461a      	mov	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	795b      	ldrb	r3, [r3, #5]
 8000cae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	051a      	lsls	r2, r3, #20
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	791b      	ldrb	r3, [r3, #4]
 8000cbe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	791b      	ldrb	r3, [r3, #4]
 8000cce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b085      	sub	sp, #20
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	70fb      	strb	r3, [r7, #3]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	f023 0303 	bic.w	r3, r3, #3
 8000d02:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8000d04:	78fb      	ldrb	r3, [r7, #3]
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8000d18:	78bb      	ldrb	r3, [r7, #2]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d104      	bne.n	8000d28 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e003      	b.n	8000d30 <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d2e:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	615a      	str	r2, [r3, #20]
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b085      	sub	sp, #20
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	70fb      	strb	r3, [r7, #3]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f023 030c 	bic.w	r3, r3, #12
 8000d5e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d7c:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 8000d7e:	78bb      	ldrb	r3, [r7, #2]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	615a      	str	r2, [r3, #20]
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b085      	sub	sp, #20
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db2:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8000db4:	78fb      	ldrb	r3, [r7, #3]
 8000db6:	031b      	lsls	r3, r3, #12
 8000db8:	68fa      	ldr	r2, [r7, #12]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	605a      	str	r2, [r3, #4]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	4608      	mov	r0, r1
 8000dda:	4611      	mov	r1, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4603      	mov	r3, r0
 8000de0:	70fb      	strb	r3, [r7, #3]
 8000de2:	460b      	mov	r3, r1
 8000de4:	70bb      	strb	r3, [r7, #2]
 8000de6:	4613      	mov	r3, r2
 8000de8:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000dfc:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	049b      	lsls	r3, r3, #18
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 8000e0e:	78bb      	ldrb	r3, [r7, #2]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d104      	bne.n	8000e1e <XMC_CCU4_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e003      	b.n	8000e26 <XMC_CCU4_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 8000e26:	787b      	ldrb	r3, [r7, #1]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <XMC_CCU4_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e003      	b.n	8000e3e <XMC_CCU4_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e3c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	615a      	str	r2, [r3, #20]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e68:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	039b      	lsls	r3, r3, #14
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	605a      	str	r2, [r3, #4]
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e9e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	605a      	str	r2, [r3, #4]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <XMC_CCU4_SLICE_Capture0Config>:

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ed4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	605a      	str	r2, [r3, #4]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <XMC_CCU4_SLICE_Capture1Config>:

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b085      	sub	sp, #20
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	460b      	mov	r3, r1
 8000efc:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f0a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	019b      	lsls	r3, r3, #6
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	605a      	str	r2, [r3, #4]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <XMC_CCU4_SLICE_DirectionConfig>:

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f40:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 8000f42:	78fb      	ldrb	r3, [r7, #3]
 8000f44:	029b      	lsls	r3, r3, #10
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	605a      	str	r2, [r3, #4]
}
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f72:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	605a      	str	r2, [r3, #4]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	70fb      	strb	r3, [r7, #3]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000faa:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
 8000fc0:	78bb      	ldrb	r3, [r7, #2]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <XMC_CCU4_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e003      	b.n	8000fd8 <XMC_CCU4_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000fd6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d104      	bne.n	8000fe8 <XMC_CCU4_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	e003      	b.n	8000ff0 <XMC_CCU4_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000fee:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	615a      	str	r2, [r3, #20]
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8001002:	b480      	push	{r7}
 8001004:	b087      	sub	sp, #28
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800101a:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	049b      	lsls	r3, r3, #18
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4313      	orrs	r3, r2
 8001026:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800102e:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	785b      	ldrb	r3, [r3, #1]
 8001034:	051b      	lsls	r3, r3, #20
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001042:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	789b      	ldrb	r3, [r3, #2]
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4313      	orrs	r3, r2
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001056:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	789b      	ldrb	r3, [r3, #2]
 800105c:	061b      	lsls	r3, r3, #24
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4313      	orrs	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 800106a:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	06db      	lsls	r3, r3, #27
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4313      	orrs	r3, r2
 8001076:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800107e:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	78db      	ldrb	r3, [r3, #3]
 8001084:	075b      	lsls	r3, r3, #29
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001092:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4313      	orrs	r3, r2
 800109e:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010a6:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	601a      	str	r2, [r3, #0]
#endif
}
 80010ba:	bf00      	nop
 80010bc:	371c      	adds	r7, #28
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b089      	sub	sp, #36	; 0x24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	460b      	mov	r3, r1
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80010d4:	7afb      	ldrb	r3, [r7, #11]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 80010e0:	7ffb      	ldrb	r3, [r7, #31]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	3310      	adds	r3, #16
 80010e8:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	461a      	mov	r2, r3
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 800110c:	7ffb      	ldrb	r3, [r7, #31]
 800110e:	3316      	adds	r3, #22
 8001110:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	2201      	movs	r2, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	789b      	ldrb	r3, [r3, #2]
 8001126:	461a      	mov	r2, r3
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8001134:	7ffb      	ldrb	r3, [r7, #31]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	3319      	adds	r3, #25
 800113c:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	78db      	ldrb	r3, [r3, #3]
 8001152:	461a      	mov	r2, r3
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8001160:	7ffb      	ldrb	r3, [r7, #31]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	220f      	movs	r2, #15
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	601a      	str	r2, [r3, #0]
#endif
}
 800118e:	bf00      	nop
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <XMC_CCU4_SLICE_SetInput>:

/* API to bind an input to a slice trigger event */
void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
                         const XMC_CCU4_SLICE_EVENT_t event,
                             const XMC_CCU4_SLICE_INPUT_t input)
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	70fb      	strb	r3, [r7, #3]
 80011a6:	4613      	mov	r3, r2
 80011a8:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(input));
  
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) input) << pos;

  slice->INS1 = ins;
#else
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	73bb      	strb	r3, [r7, #14]

  ins = slice->INS;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	60bb      	str	r3, [r7, #8]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  ins |= ((uint32_t) input) << pos;
 80011cc:	78ba      	ldrb	r2, [r7, #2]
 80011ce:	7bbb      	ldrb	r3, [r7, #14]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	60bb      	str	r3, [r7, #8]

  slice->INS = ins;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	601a      	str	r2, [r3, #0]
#endif
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <XMC_CCU4_SLICE_SetTimerRepeatMode>:

/* API to program timer repeat mode - Single shot vs repeat */
void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t mode)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
             ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
          (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
  
  if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d106      	bne.n	800120c <XMC_CCU4_SLICE_SetTimerRepeatMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f023 0202 	bic.w	r2, r3, #2
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	615a      	str	r2, [r3, #20]
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
  }
}
 800120a:	e005      	b.n	8001218 <XMC_CCU4_SLICE_SetTimerRepeatMode+0x2c>
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f043 0202 	orr.w	r2, r3, #2
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	615a      	str	r2, [r3, #20]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <XMC_CCU4_SLICE_SetTimerCountingMode>:

/* Programs timer counting mode */
void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_COUNT_MODE_t mode)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA) ||\
                                                                              (mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA)));
  
  if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <XMC_CCU4_SLICE_SetTimerCountingMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f023 0201 	bic.w	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	615a      	str	r2, [r3, #20]
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
  }
}
 8001242:	e005      	b.n	8001250 <XMC_CCU4_SLICE_SetTimerCountingMode+0x2c>
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	615a      	str	r2, [r3, #20]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <XMC_CCU4_SLICE_GetCaptureRegisterValue>:

/* Retrieves desired capture register value */
uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t reg_num)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
  return(slice->CV[reg_num]);
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	331c      	adds	r3, #28
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	685b      	ldr	r3, [r3, #4]
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <XMC_CCU4_SLICE_GetLastCapturedTimerValue>:

/* @brief Retrieves the latest captured timer value */
XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
                                                           const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                           uint32_t *val_ptr)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	460b      	mov	r3, r1
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	72fb      	strb	r3, [r7, #11]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Register Set", ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) ||\
                                                                               (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
  
  retval = XMC_CCU4_STATUS_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]

  /* First check if extended capture mode is enabled */
  if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f003 0310 	and.w	r3, r3, #16
 800129a:	2b00      	cmp	r3, #0
 800129c:	d004      	beq.n	80012a8 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x28>
  {
    /* Extended capture mode has been enabled. So start with the lowest capture register and work your way up */
    start = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	757b      	strb	r3, [r7, #21]
    end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 80012a2:	2304      	movs	r3, #4
 80012a4:	753b      	strb	r3, [r7, #20]
 80012a6:	e00b      	b.n	80012c0 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
  }
  else
  {
    /* Extended capture mode is not enabled */
    if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 80012a8:	7afb      	ldrb	r3, [r7, #11]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d104      	bne.n	80012b8 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x38>
    {
      start = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 80012ae:	2302      	movs	r3, #2
 80012b0:	757b      	strb	r3, [r7, #21]
      end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
 80012b2:	2304      	movs	r3, #4
 80012b4:	753b      	strb	r3, [r7, #20]
 80012b6:	e003      	b.n	80012c0 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
    }
    else
    {
      start = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	757b      	strb	r3, [r7, #21]
      end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 80012bc:	2302      	movs	r3, #2
 80012be:	753b      	strb	r3, [r7, #20]
    }
  }

  for(i=start; i < end; i++)
 80012c0:	7d7b      	ldrb	r3, [r7, #21]
 80012c2:	75bb      	strb	r3, [r7, #22]
 80012c4:	e017      	b.n	80012f6 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x76>
  {
    if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 80012c6:	7dbb      	ldrb	r3, [r7, #22]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	331c      	adds	r3, #28
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00a      	beq.n	80012f0 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x70>
    {
      *val_ptr = slice->CV[i];
 80012da:	7dbb      	ldrb	r3, [r7, #22]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	331c      	adds	r3, #28
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
      retval = XMC_CCU4_STATUS_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]
      break;
 80012ee:	e006      	b.n	80012fe <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x7e>
  for(i=start; i < end; i++)
 80012f0:	7dbb      	ldrb	r3, [r7, #22]
 80012f2:	3301      	adds	r3, #1
 80012f4:	75bb      	strb	r3, [r7, #22]
 80012f6:	7dba      	ldrb	r2, [r7, #22]
 80012f8:	7d3b      	ldrb	r3, [r7, #20]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3e3      	bcc.n	80012c6 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x46>
    }
  }

  return retval;
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001300:	4618      	mov	r0, r3
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <XMC_CCU4_GetCapturedValueFromFifo>:

/* Retrieves timer capture value from a FIFO made of capture registers */
#if defined(CCU4V1) /* Defined for XMC4500, XMC400, XMC4200, XMC4100 devices only */
int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
  uint32_t  extracted_slice;
  
  XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));

  /* First read the global fifo register */
  cap = (int32_t) module->ECRD;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131c:	60fb      	str	r3, [r7, #12]

  extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	0d1b      	lsrs	r3, r3, #20
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	60bb      	str	r3, [r7, #8]

  /* Return captured result only if it were applicable to this slice */
  if(extracted_slice != ((uint32_t)slice_number))
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	429a      	cmp	r2, r3
 800132e:	d002      	beq.n	8001336 <XMC_CCU4_GetCapturedValueFromFifo+0x2a>
  {
    cap = -1;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001334:	60fb      	str	r3, [r7, #12]
  }

  return (cap);
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <XMC_CCU4_SLICE_EnableDithering>:
/* Enables PWM dithering feature */
void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
                                    const bool period_dither,
                                    const bool duty_dither,
                                    const uint8_t spread)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	70fb      	strb	r3, [r7, #3]
 8001356:	460b      	mov	r3, r1
 8001358:	70bb      	strb	r3, [r7, #2]
 800135a:	4613      	mov	r3, r2
 800135c:	707b      	strb	r3, [r7, #1]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  tc = slice->TC;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	60fb      	str	r3, [r7, #12]
  tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800136a:	60fb      	str	r3, [r7, #12]

  if ((bool) true == period_dither)
 800136c:	78fb      	ldrb	r3, [r7, #3]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <XMC_CCU4_SLICE_EnableDithering+0x36>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001378:	60fb      	str	r3, [r7, #12]
  }
  if ((bool) true == duty_dither)
 800137a:	78bb      	ldrb	r3, [r7, #2]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <XMC_CCU4_SLICE_EnableDithering+0x44>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	615a      	str	r2, [r3, #20]
  
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
 800138e:	787b      	ldrb	r3, [r7, #1]
 8001390:	4619      	mov	r1, r3
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fb67 	bl	8000a66 <XMC_CCU4_SLICE_SetDitherCompareValue>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <XMC_CCU4_SLICE_SetPrescaler>:

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013b8:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 80013ba:	78fb      	ldrb	r3, [r7, #3]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 80013ca:	78fa      	ldrb	r2, [r7, #3]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
 80013e8:	4613      	mov	r3, r2
 80013ea:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80013f2:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	d82c      	bhi.n	8001454 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 80013fa:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 80013fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001400:	08001429 	.word	0x08001429
 8001404:	08001429 	.word	0x08001429
 8001408:	08001433 	.word	0x08001433
 800140c:	08001433 	.word	0x08001433
 8001410:	08001455 	.word	0x08001455
 8001414:	08001455 	.word	0x08001455
 8001418:	08001455 	.word	0x08001455
 800141c:	08001455 	.word	0x08001455
 8001420:	0800143d 	.word	0x0800143d
 8001424:	08001449 	.word	0x08001449
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001428:	2303      	movs	r3, #3
 800142a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
      break;
 8001430:	e016      	b.n	8001460 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8001432:	230c      	movs	r3, #12
 8001434:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001436:	2302      	movs	r3, #2
 8001438:	617b      	str	r3, [r7, #20]
      break;
 800143a:	e011      	b.n	8001460 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 800143c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001440:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8001442:	2308      	movs	r3, #8
 8001444:	617b      	str	r3, [r7, #20]
      break;
 8001446:	e00b      	b.n	8001460 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001448:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800144c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800144e:	230a      	movs	r3, #10
 8001450:	617b      	str	r3, [r7, #20]
      break;
 8001452:	e005      	b.n	8001460 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001454:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001458:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800145a:	230c      	movs	r3, #12
 800145c:	617b      	str	r3, [r7, #20]
      break;
 800145e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4013      	ands	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 800146a:	78ba      	ldrb	r2, [r7, #2]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <XMC_CCU4_SLICE_SetPassiveLevel>:

/* Asserts passive level for the slice output */
void XMC_CCU4_SLICE_SetPassiveLevel(XMC_CCU4_SLICE_t *const slice,
                                    const XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
                                                                      (level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
  
  psl = slice->PSL;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	60fb      	str	r3, [r7, #12]
  psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
  psl |= (uint32_t) level;
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  
  /* Program CC4 slice output passive level */
  slice->PSL = psl;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	619a      	str	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	50004600 	.word	0x50004600

080014dc <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	50004600 	.word	0x50004600

080014f8 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	b2db      	uxtb	r3, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	50004600 	.word	0x50004600

08001518 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	2000ffc0 	.word	0x2000ffc0
 800153c:	50004600 	.word	0x50004600

08001540 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000ffc0 	.word	0x2000ffc0

08001558 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <XMC_SCU_GetMirrorStatus+0x14>)
 800155e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	50004000 	.word	0x50004000

08001570 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8001578:	f001 fd68 	bl	800304c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <XMC_SCU_lDelay+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <XMC_SCU_lDelay+0x44>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0c9a      	lsrs	r2, r3, #18
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	e003      	b.n	800159e <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8001596:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	3301      	adds	r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d3f7      	bcc.n	8001596 <XMC_SCU_lDelay+0x26>
  }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000ffc0 	.word	0x2000ffc0
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	4904      	ldr	r1, [pc, #16]	; (80015d8 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	50004074 	.word	0x50004074

080015dc <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	4904      	ldr	r1, [pc, #16]	; (8001600 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	50004074 	.word	0x50004074

08001604 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	4904      	ldr	r1, [pc, #16]	; (8001624 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4313      	orrs	r3, r2
 8001616:	610b      	str	r3, [r1, #16]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	50004074 	.word	0x50004074

08001628 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800162e:	685b      	ldr	r3, [r3, #4]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	50004074 	.word	0x50004074

08001640 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60d3      	str	r3, [r2, #12]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	50004074 	.word	0x50004074

08001660 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <XMC_SCU_GetBootMode+0x18>)
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	50004000 	.word	0x50004000

0800167c <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <XMC_SCU_SetBootMode+0x1c>)
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	6113      	str	r3, [r2, #16]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	50004000 	.word	0x50004000

0800169c <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 80016a4:	4a05      	ldr	r2, [pc, #20]	; (80016bc <XMC_SCU_ReadGPR+0x20>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	330a      	adds	r3, #10
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	685b      	ldr	r3, [r3, #4]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	50004000 	.word	0x50004000

080016c0 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <XMC_SCU_WriteGPR+0x24>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	330a      	adds	r3, #10
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	605a      	str	r2, [r3, #4]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	50004000 	.word	0x50004000

080016e8 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3328      	adds	r3, #40	; 0x28
 80016f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016fc:	2101      	movs	r1, #1
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	4905      	ldr	r1, [pc, #20]	; (800171c <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3328      	adds	r3, #40	; 0x28
 800170c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	50004000 	.word	0x50004000

08001720 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3328      	adds	r3, #40	; 0x28
 8001730:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001734:	2101      	movs	r1, #1
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4906      	ldr	r1, [pc, #24]	; (8001758 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8001740:	401a      	ands	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3328      	adds	r3, #40	; 0x28
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	50004000 	.word	0x50004000

0800175c <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 800176e:	4313      	orrs	r3, r2
 8001770:	4a05      	ldr	r2, [pc, #20]	; (8001788 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8001772:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8001776:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	50004000 	.word	0x50004000

0800178c <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <XMC_SCU_EnableTemperatureSensor+0x20>)
 8001792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001796:	4a05      	ldr	r2, [pc, #20]	; (80017ac <XMC_SCU_EnableTemperatureSensor+0x20>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	50004000 	.word	0x50004000

080017b0 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <XMC_SCU_DisableTemperatureSensor+0x20>)
 80017b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <XMC_SCU_DisableTemperatureSensor+0x20>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	50004000 	.word	0x50004000

080017d4 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 80017da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf0c      	ite	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	2300      	movne	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	50004000 	.word	0x50004000

080017fc <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <XMC_SCU_IsTemperatureSensorReady+0x24>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	2b00      	cmp	r3, #0
 800180c:	bf14      	ite	ne
 800180e:	2301      	movne	r3, #1
 8001810:	2300      	moveq	r3, #0
 8001812:	b2db      	uxtb	r3, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	50004000 	.word	0x50004000

08001824 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 800182e:	f7ff ffd1 	bl	80017d4 <XMC_SCU_IsTemperatureSensorEnabled>
 8001832:	4603      	mov	r3, r0
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8001842:	f000 f831 	bl	80018a8 <XMC_SCU_IsTemperatureSensorBusy>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 800184c:	2302      	movs	r3, #2
 800184e:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8001852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 8001860:	79fb      	ldrb	r3, [r7, #7]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	50004000 	.word	0x50004000

08001870 <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8001876:	f7ff ffad 	bl	80017d4 <XMC_SCU_IsTemperatureSensorEnabled>
 800187a:	4603      	mov	r3, r0
 800187c:	f083 0301 	eor.w	r3, r3, #1
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 8001886:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	e005      	b.n	800189a <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 8001890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001898:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 800189a:	687b      	ldr	r3, [r7, #4]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	50004000 	.word	0x50004000

080018a8 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf14      	ite	ne
 80018ba:	2301      	movne	r3, #1
 80018bc:	2300      	moveq	r3, #0
 80018be:	b2db      	uxtb	r3, r3
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	50004000 	.word	0x50004000

080018d0 <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	041b      	lsls	r3, r3, #16
 80018de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018e2:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 80018ec:	4a0b      	ldr	r2, [pc, #44]	; (800191c <XMC_SCU_WriteToRetentionMemory+0x4c>)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <XMC_SCU_WriteToRetentionMemory+0x4c>)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 80018fc:	bf00      	nop
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <XMC_SCU_WriteToRetentionMemory+0x4c>)
 8001900:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f8      	bne.n	80018fe <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	50004000 	.word	0x50004000

08001920 <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	041b      	lsls	r3, r3, #16
 800192c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001930:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8001942:	bf00      	nop
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001946:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800194a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f8      	bne.n	8001944 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001954:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	50004000 	.word	0x50004000

08001968 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b085      	sub	sp, #20
 800196c:	af02      	add	r7, sp, #8
 800196e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8001970:	2000      	movs	r0, #0
 8001972:	f000 faf1 	bl	8001f58 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8001976:	f000 fd7f 	bl	8002478 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	79db      	ldrb	r3, [r3, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00a      	beq.n	8001998 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8001982:	f000 ff77 	bl	8002874 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8001986:	bf00      	nop
 8001988:	f000 ff62 	bl	8002850 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 800198c:	4603      	mov	r3, r0
 800198e:	f083 0301 	eor.w	r3, r3, #1
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f7      	bne.n	8001988 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7a5b      	ldrb	r3, [r3, #9]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fb6f 	bl	8002080 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80019a2:	bf00      	nop
 80019a4:	f7ff fdd8 	bl	8001558 <XMC_SCU_GetMirrorStatus>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1fa      	bne.n	80019a4 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7a1b      	ldrb	r3, [r3, #8]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 fd0c 	bl	80023d0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7c1b      	ldrb	r3, [r3, #16]
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fb7f 	bl	80020c0 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7c5b      	ldrb	r3, [r3, #17]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fba6 	bl	8002118 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7c9b      	ldrb	r3, [r3, #18]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fb8b 	bl	80020ec <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	7cdb      	ldrb	r3, [r3, #19]
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fbb2 	bl	8002144 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	799b      	ldrb	r3, [r3, #6]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00a      	beq.n	80019fe <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80019e8:	f000 ffd8 	bl	800299c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80019ec:	bf00      	nop
 80019ee:	f000 fffd 	bl	80029ec <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80019f2:	4603      	mov	r3, r0
 80019f4:	f083 0301 	eor.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f7      	bne.n	80019ee <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	78db      	ldrb	r3, [r3, #3]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8001a06:	f001 f855 	bl	8002ab4 <XMC_SCU_CLOCK_DisableSystemPll>
 8001a0a:	e011      	b.n	8001a30 <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8001a0c:	f001 f840 	bl	8002a90 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	8898      	ldrh	r0, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001a1c:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001a22:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	f001 f854 	bl	8002ad8 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a38:	d103      	bne.n	8001a42 <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8001a3a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001a3e:	f000 fa8b 	bl	8001f58 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8001a42:	f001 fb03 	bl	800304c <SystemCoreClockUpdate>
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}
	...

08001a50 <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <XMC_SCU_TRAP_Enable+0x24>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	4904      	ldr	r1, [pc, #16]	; (8001a74 <XMC_SCU_TRAP_Enable+0x24>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	50004160 	.word	0x50004160

08001a78 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <XMC_SCU_TRAP_Disable+0x20>)
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4904      	ldr	r1, [pc, #16]	; (8001a98 <XMC_SCU_TRAP_Disable+0x20>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	50004160 	.word	0x50004160

08001a9c <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <XMC_SCU_TRAP_GetStatus+0x14>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	50004160 	.word	0x50004160

08001ab4 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <XMC_SCU_TRAP_Trigger+0x1c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6113      	str	r3, [r2, #16]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	50004160 	.word	0x50004160

08001ad4 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 8001adc:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <XMC_SCU_TRAP_ClearStatus+0x1c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60d3      	str	r3, [r2, #12]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	50004160 	.word	0x50004160

08001af4 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	4904      	ldr	r1, [pc, #16]	; (8001b14 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	614b      	str	r3, [r1, #20]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	5000413c 	.word	0x5000413c

08001b18 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <XMC_SCU_PARITY_GetStatus+0x14>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
} 
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	5000413c 	.word	0x5000413c

08001b30 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <XMC_SCU_PARITY_Enable+0x20>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4904      	ldr	r1, [pc, #16]	; (8001b50 <XMC_SCU_PARITY_Enable+0x20>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	5000413c 	.word	0x5000413c

08001b54 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <XMC_SCU_PARITY_Disable+0x24>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4904      	ldr	r1, [pc, #16]	; (8001b78 <XMC_SCU_PARITY_Disable+0x24>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	5000413c 	.word	0x5000413c

08001b7c <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	5000413c 	.word	0x5000413c

08001ba0 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	4904      	ldr	r1, [pc, #16]	; (8001bc4 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	5000413c 	.word	0x5000413c

08001bc8 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	4904      	ldr	r1, [pc, #16]	; (8001be8 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	614b      	str	r3, [r1, #20]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	50004074 	.word	0x50004074

08001bec <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	4904      	ldr	r1, [pc, #16]	; (8001c10 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	614b      	str	r3, [r1, #20]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	50004074 	.word	0x50004074

08001c14 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	0f1b      	lsrs	r3, r3, #28
 8001c20:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c28:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 8001c38:	4413      	add	r3, r2
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	601a      	str	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	50004410 	.word	0x50004410

08001c50 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	0f1b      	lsrs	r3, r3, #28
 8001c5c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c64:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8001c74:	4413      	add	r3, r2
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	601a      	str	r2, [r3, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	50004414 	.word	0x50004414

08001c8c <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0f1b      	lsrs	r3, r3, #28
 8001c98:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ca0:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8001cb0:	4413      	add	r3, r2
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	bf14      	ite	ne
 8001cbc:	2301      	movne	r3, #1
 8001cbe:	2300      	moveq	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	5000440c 	.word	0x5000440c

08001cd4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 8001cda:	f000 f839 	bl	8001d50 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 8001cde:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d009      	beq.n	8001d00 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cf4:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e01f      	b.n	8001d40 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	0e1b      	lsrs	r3, r3, #24
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8001d0e:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d18:	3301      	adds	r3, #1
 8001d1a:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d26:	3301      	adds	r3, #1
 8001d28:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	fb03 f202 	mul.w	r2, r3, r2
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	6839      	ldr	r1, [r7, #0]
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 8001d40:	68fb      	ldr	r3, [r7, #12]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	50004710 	.word	0x50004710

08001d50 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d103      	bne.n	8001d6a <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 8001d62:	f001 f9dd 	bl	8003120 <OSCHP_GetFrequency>
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	e001      	b.n	8001d6e <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 8001d6c:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 8001d6e:	687b      	ldr	r3, [r7, #4]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	50004710 	.word	0x50004710
 8001d7c:	016e3600 	.word	0x016e3600

08001d80 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 8001d86:	f001 f9cb 	bl	8003120 <OSCHP_GetFrequency>
 8001d8a:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d116      	bne.n	8001dc6 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da2:	3301      	adds	r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	0e1b      	lsrs	r3, r3, #24
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	3301      	adds	r3, #1
 8001db2:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	fb03 f202 	mul.w	r2, r3, r2
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	50004710 	.word	0x50004710

08001dd4 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001dde:	f7ff fb9b 	bl	8001518 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001de2:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	50004600 	.word	0x50004600

08001e00 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 8001e0a:	f7ff fb59 	bl	80014c0 <XMC_SCU_CLOCK_GetUsbClockSource>
 8001e0e:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d103      	bne.n	8001e20 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001e18:	f7ff ff5c 	bl	8001cd4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	e005      	b.n	8001e2c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001e26:	f7ff ffab 	bl	8001d80 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001e2a:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8001e34:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	50004600 	.word	0x50004600

08001e48 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001e4e:	f7ff ff41 	bl	8001cd4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001e52:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8001e5c:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	50004600 	.word	0x50004600

08001e70 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 8001e7a:	f7ff fb2f 	bl	80014dc <XMC_SCU_CLOCK_GetWdtClockSource>
 8001e7e:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e86:	d103      	bne.n	8001e90 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001e88:	f7ff ff24 	bl	8001cd4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	e00c      	b.n	8001eaa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e006      	b.n	8001eaa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea2:	d102      	bne.n	8001eaa <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 8001ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea8:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8001eb0:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	016e3600 	.word	0x016e3600
 8001ec4:	50004600 	.word	0x50004600

08001ec8 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 8001ed2:	f7ff fb11 	bl	80014f8 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d10d      	bne.n	8001efc <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001ee0:	f7ff fef8 	bl	8001cd4 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001ee4:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	0c1b      	lsrs	r3, r3, #16
 8001eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001ef0:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	e016      	b.n	8001f2a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001f02:	f7ff fb09 	bl	8001518 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	e00f      	b.n	8001f2a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d10c      	bne.n	8001f2a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001f10:	f7ff ff36 	bl	8001d80 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001f14:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1a:	0c1b      	lsrs	r3, r3, #16
 8001f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001f20:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 8001f2a:	687b      	ldr	r3, [r7, #4]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	50004600 	.word	0x50004600

08001f38 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001f3c:	f7ff fb00 	bl	8001540 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8001f40:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8001f42:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001f4a:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	50004600 	.word	0x50004600

08001f58 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f68:	4904      	ldr	r1, [pc, #16]	; (8001f7c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	50004600 	.word	0x50004600

08001f80 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8001f88:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001f90:	4904      	ldr	r1, [pc, #16]	; (8001fa4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	50004600 	.word	0x50004600

08001fa8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fb8:	4904      	ldr	r1, [pc, #16]	; (8001fcc <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	50004600 	.word	0x50004600

08001fd0 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001fe4:	4904      	ldr	r1, [pc, #16]	; (8001ff8 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	50004600 	.word	0x50004600

08001ffc <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d108      	bne.n	800201e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8002012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 800201c:	e007      	b.n	800202e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	4a06      	ldr	r2, [pc, #24]	; (800203c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	60d3      	str	r3, [r2, #12]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	50004710 	.word	0x50004710

08002040 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800204a:	bf00      	nop
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 800204e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f8      	bne.n	800204c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8002062:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8002064:	4905      	ldr	r1, [pc, #20]	; (800207c <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8002066:	4313      	orrs	r3, r2
 8002068:	60cb      	str	r3, [r1, #12]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	50004000 	.word	0x50004000
 800207c:	50004300 	.word	0x50004300

08002080 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800208a:	bf00      	nop
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800208e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f8      	bne.n	800208c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80020a2:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80020a4:	4905      	ldr	r1, [pc, #20]	; (80020bc <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60cb      	str	r3, [r1, #12]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	50004000 	.word	0x50004000
 80020bc:	50004300 	.word	0x50004300

080020c0 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80020c8:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80020d4:	4904      	ldr	r1, [pc, #16]	; (80020e8 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60cb      	str	r3, [r1, #12]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	50004600 	.word	0x50004600

080020ec <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002100:	4904      	ldr	r1, [pc, #16]	; (8002114 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8002102:	4313      	orrs	r3, r2
 8002104:	620b      	str	r3, [r1, #32]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	50004600 	.word	0x50004600

08002118 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800212c:	4904      	ldr	r1, [pc, #16]	; (8002140 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 800212e:	4313      	orrs	r3, r2
 8002130:	610b      	str	r3, [r1, #16]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	50004600 	.word	0x50004600

08002144 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8002158:	4904      	ldr	r1, [pc, #16]	; (800216c <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 800215a:	4313      	orrs	r3, r2
 800215c:	614b      	str	r3, [r1, #20]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	50004600 	.word	0x50004600

08002170 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8002184:	4904      	ldr	r1, [pc, #16]	; (8002198 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8002186:	4313      	orrs	r3, r2
 8002188:	618b      	str	r3, [r1, #24]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	50004600 	.word	0x50004600

0800219c <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80021a4:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80021b0:	4904      	ldr	r1, [pc, #16]	; (80021c4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61cb      	str	r3, [r1, #28]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	50004600 	.word	0x50004600

080021c8 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80021dc:	4904      	ldr	r1, [pc, #16]	; (80021f0 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	50004600 	.word	0x50004600

080021f4 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	3a01      	subs	r2, #1
 800220c:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800220e:	4904      	ldr	r1, [pc, #16]	; (8002220 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8002210:	4313      	orrs	r3, r2
 8002212:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	50004600 	.word	0x50004600

08002224 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800222e:	4a04      	ldr	r2, [pc, #16]	; (8002240 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	6053      	str	r3, [r2, #4]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	50004600 	.word	0x50004600

08002244 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 800224e:	4a04      	ldr	r2, [pc, #16]	; (8002260 <XMC_SCU_CLOCK_DisableClock+0x1c>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	6093      	str	r3, [r2, #8]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	50004600 	.word	0x50004600

08002264 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	50004600 	.word	0x50004600

08002290 <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022bc <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 80022a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022aa:	ee17 3a90 	vmov	r3, s15
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	50004200 	.word	0x50004200
 80022bc:	3bbe0ded 	.word	0x3bbe0ded

080022c0 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022d4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022f0 <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 80022d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022dc:	ee17 3a90 	vmov	r3, s15
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	50004200 	.word	0x50004200
 80022f0:	3cb851ec 	.word	0x3cb851ec

080022f4 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	4a05      	ldr	r2, [pc, #20]	; (8002314 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002302:	f023 0302 	bic.w	r3, r3, #2
 8002306:	6153      	str	r3, [r2, #20]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	50004710 	.word	0x50004710

08002318 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	4a05      	ldr	r2, [pc, #20]	; (8002338 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8002322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	6153      	str	r3, [r2, #20]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	50004710 	.word	0x50004710

0800233c <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002352:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002358:	f043 0310 	orr.w	r3, r3, #16
 800235c:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	3b01      	subs	r3, #1
 8002362:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800236a:	4911      	ldr	r1, [pc, #68]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800236c:	4313      	orrs	r3, r2
 800236e:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800237a:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002382:	f023 0310 	bic.w	r3, r3, #16
 8002386:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800238e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002392:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8002394:	bf00      	nop
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f9      	beq.n	8002396 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	50004710 	.word	0x50004710

080023b4 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 80023ba:	4a04      	ldr	r2, [pc, #16]	; (80023cc <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 80023bc:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	50004710 	.word	0x50004710
 80023cc:	00010003 	.word	0x00010003

080023d0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80023e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023e4:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d10e      	bne.n	800240a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a09      	ldr	r2, [pc, #36]	; (8002418 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80023f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023f6:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80023f8:	2064      	movs	r0, #100	; 0x64
 80023fa:	f7ff f8b9 	bl	8001570 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8002404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002408:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 800240a:	2064      	movs	r0, #100	; 0x64
 800240c:	f7ff f8b0 	bl	8001570 <XMC_SCU_lDelay>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	50004710 	.word	0x50004710

0800241c <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <XMC_SCU_POWER_EnableUsb+0x18>)
 8002422:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002426:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	50004200 	.word	0x50004200

08002438 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <XMC_SCU_POWER_DisableUsb+0x18>)
 800243e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002442:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	50004200 	.word	0x50004200

08002454 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	50004710 	.word	0x50004710

08002478 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800248a:	2201      	movs	r2, #1
 800248c:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800248e:	bf00      	nop
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f9      	beq.n	8002490 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80024aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ae:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80024b0:	bf00      	nop
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f9      	bne.n	80024b2 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	50004200 	.word	0x50004200
 80024cc:	50004400 	.word	0x50004400

080024d0 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 80024d4:	4b05      	ldr	r3, [pc, #20]	; (80024ec <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 80024dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e0:	605a      	str	r2, [r3, #4]
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	50004200 	.word	0x50004200
 80024f0:	50004400 	.word	0x50004400

080024f4 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8002514:	2300      	movs	r3, #0
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	b2db      	uxtb	r3, r3
}
 800251c:	4618      	mov	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	50004200 	.word	0x50004200
 800252c:	50004400 	.word	0x50004400

08002530 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002534:	bf00      	nop
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8002538:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1f8      	bne.n	8002536 <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	4a05      	ldr	r2, [pc, #20]	; (8002560 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	6153      	str	r3, [r2, #20]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	50004000 	.word	0x50004000
 8002560:	50004300 	.word	0x50004300

08002564 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002568:	bf00      	nop
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 800256c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f8      	bne.n	800256a <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	4a05      	ldr	r2, [pc, #20]	; (8002594 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6153      	str	r3, [r2, #20]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	50004000 	.word	0x50004000
 8002594:	50004300 	.word	0x50004300

08002598 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 80025a0:	bf00      	nop
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 80025a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f8      	bne.n	80025a2 <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 80025b0:	4a05      	ldr	r2, [pc, #20]	; (80025c8 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6053      	str	r3, [r2, #4]
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	50004000 	.word	0x50004000
 80025c8:	50004300 	.word	0x50004300

080025cc <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80025d4:	bf00      	nop
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 80025d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f8      	bne.n	80025d6 <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 80025e4:	4a05      	ldr	r2, [pc, #20]	; (80025fc <XMC_SCU_HIB_TriggerEvent+0x30>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6093      	str	r3, [r2, #8]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	50004000 	.word	0x50004000
 80025fc:	50004300 	.word	0x50004300

08002600 <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002608:	bf00      	nop
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <XMC_SCU_HIB_EnableEvent+0x30>)
 800260c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f8      	bne.n	800260a <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <XMC_SCU_HIB_EnableEvent+0x34>)
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4905      	ldr	r1, [pc, #20]	; (8002634 <XMC_SCU_HIB_EnableEvent+0x34>)
 8002620:	4313      	orrs	r3, r2
 8002622:	60cb      	str	r3, [r1, #12]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	50004000 	.word	0x50004000
 8002634:	50004300 	.word	0x50004300

08002638 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002640:	bf00      	nop
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <XMC_SCU_HIB_DisableEvent+0x34>)
 8002644:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f8      	bne.n	8002642 <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <XMC_SCU_HIB_DisableEvent+0x38>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	43d2      	mvns	r2, r2
 8002658:	4611      	mov	r1, r2
 800265a:	4a05      	ldr	r2, [pc, #20]	; (8002670 <XMC_SCU_HIB_DisableEvent+0x38>)
 800265c:	400b      	ands	r3, r1
 800265e:	60d3      	str	r3, [r2, #12]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	50004000 	.word	0x50004000
 8002670:	50004300 	.word	0x50004300

08002674 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002678:	bf00      	nop
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 800267c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f8      	bne.n	800267a <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 800268e:	f043 0310 	orr.w	r3, r3, #16
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	50004000 	.word	0x50004000
 80026a4:	50004300 	.word	0x50004300

080026a8 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 80026b8:	f7ff ffdc 	bl	8002674 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80026ce:	bf00      	nop
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 80026d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f8      	bne.n	80026d0 <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ee:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 80026f0:	e005      	b.n	80026fe <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	4a06      	ldr	r2, [pc, #24]	; (8002710 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 80026f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026fc:	60d3      	str	r3, [r2, #12]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	50004000 	.word	0x50004000
 8002710:	50004300 	.word	0x50004300

08002714 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002720:	bf00      	nop
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <XMC_SCU_HIB_SetPinMode+0x4c>)
 8002724:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f8      	bne.n	8002722 <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <XMC_SCU_HIB_SetPinMode+0x50>)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 800274e:	4905      	ldr	r1, [pc, #20]	; (8002764 <XMC_SCU_HIB_SetPinMode+0x50>)
 8002750:	4313      	orrs	r3, r2
 8002752:	60cb      	str	r3, [r1, #12]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	50004000 	.word	0x50004000
 8002764:	50004300 	.word	0x50004300

08002768 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	460a      	mov	r2, r1
 8002772:	71fb      	strb	r3, [r7, #7]
 8002774:	4613      	mov	r3, r2
 8002776:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002778:	bf00      	nop
 800277a:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 800277c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f8      	bne.n	800277a <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	4013      	ands	r3, r2
                        (level << pin);
 800279a:	88b9      	ldrh	r1, [r7, #4]
 800279c:	79fa      	ldrb	r2, [r7, #7]
 800279e:	fa01 f202 	lsl.w	r2, r1, r2
 80027a2:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80027a4:	4a05      	ldr	r2, [pc, #20]	; (80027bc <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 80027a6:	430b      	orrs	r3, r1
 80027a8:	60d3      	str	r3, [r2, #12]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	50004000 	.word	0x50004000
 80027bc:	50004300 	.word	0x50004300

080027c0 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80027ca:	bf00      	nop
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <XMC_SCU_HIB_SetInput0+0x48>)
 80027ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f8      	bne.n	80027cc <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d106      	bne.n	80027ee <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <XMC_SCU_HIB_SetInput0+0x4c>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	4a09      	ldr	r2, [pc, #36]	; (800280c <XMC_SCU_HIB_SetInput0+0x4c>)
 80027e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ea:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 80027ec:	e005      	b.n	80027fa <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <XMC_SCU_HIB_SetInput0+0x4c>)
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	4a06      	ldr	r2, [pc, #24]	; (800280c <XMC_SCU_HIB_SetInput0+0x4c>)
 80027f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027f8:	60d3      	str	r3, [r2, #12]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	50004000 	.word	0x50004000
 800280c:	50004300 	.word	0x50004300

08002810 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800281a:	bf00      	nop
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <XMC_SCU_HIB_SetSR0Input+0x38>)
 800281e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f8      	bne.n	800281c <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <XMC_SCU_HIB_SetSR0Input+0x3c>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	4905      	ldr	r1, [pc, #20]	; (800284c <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8002836:	4313      	orrs	r3, r2
 8002838:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	50004000 	.word	0x50004000
 800284c:	50004300 	.word	0x50004300

08002850 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	50004300 	.word	0x50004300

08002874 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002878:	bf00      	nop
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 800287c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f8      	bne.n	800287a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4a13      	ldr	r2, [pc, #76]	; (80028dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800288e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002892:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002894:	bf00      	nop
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8002898:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f8      	bne.n	8002896 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80028a4:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a0c      	ldr	r2, [pc, #48]	; (80028dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80028aa:	f043 0308 	orr.w	r3, r3, #8
 80028ae:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80028b0:	bf00      	nop
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80028b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f8      	bne.n	80028b2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80028c2:	2208      	movs	r2, #8
 80028c4:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 80028c6:	bf00      	nop
 80028c8:	f7fe fe46 	bl	8001558 <XMC_SCU_GetMirrorStatus>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1fa      	bne.n	80028c8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 80028d2:	bf00      	nop
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	50004000 	.word	0x50004000
 80028dc:	50004300 	.word	0x50004300

080028e0 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80028e4:	bf00      	nop
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 80028e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80028ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f8      	bne.n	80028e6 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	4a05      	ldr	r2, [pc, #20]	; (8002910 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 80028fa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80028fe:	61d3      	str	r3, [r2, #28]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	50004000 	.word	0x50004000
 8002910:	50004300 	.word	0x50004300

08002914 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002918:	bf00      	nop
 800291a:	4b09      	ldr	r3, [pc, #36]	; (8002940 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 800291c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f8      	bne.n	800291a <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002928:	4b06      	ldr	r3, [pc, #24]	; (8002944 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	4a05      	ldr	r2, [pc, #20]	; (8002944 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800292e:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8002932:	61d3      	str	r3, [r2, #28]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	50004000 	.word	0x50004000
 8002944:	50004300 	.word	0x50004300

08002948 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 800294c:	bf00      	nop
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8002950:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f8      	bne.n	800294e <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8002964:	4a05      	ldr	r2, [pc, #20]	; (800297c <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8002966:	f043 0320 	orr.w	r3, r3, #32
 800296a:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	50004000 	.word	0x50004000
 800297c:	50004300 	.word	0x50004300

08002980 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0301 	and.w	r3, r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	50004300 	.word	0x50004300

0800299c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 800299c:	b598      	push	{r3, r4, r7, lr}
 800299e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80029ac:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 80029b4:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80029b8:	f000 fbb2 	bl	8003120 <OSCHP_GetFrequency>
 80029bc:	4603      	mov	r3, r0
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	0d1b      	lsrs	r3, r3, #20
 80029c6:	3b01      	subs	r3, #1
 80029c8:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80029ca:	4a06      	ldr	r2, [pc, #24]	; (80029e4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80029cc:	4323      	orrs	r3, r4
 80029ce:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4a02      	ldr	r2, [pc, #8]	; (80029e0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80029d6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80029da:	6053      	str	r3, [r2, #4]
}
 80029dc:	bf00      	nop
 80029de:	bd98      	pop	{r3, r4, r7, pc}
 80029e0:	50004710 	.word	0x50004710
 80029e4:	50004700 	.word	0x50004700
 80029e8:	6b5fca6b 	.word	0x6b5fca6b

080029ec <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80029f0:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80029f8:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	50004710 	.word	0x50004710

08002a14 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8002a1e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002a22:	6053      	str	r3, [r2, #4]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	50004700 	.word	0x50004700

08002a34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	6053      	str	r3, [r2, #4]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	50004700 	.word	0x50004700

08002a54 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6053      	str	r3, [r2, #4]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	50004700 	.word	0x50004700

08002a74 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	50004700 	.word	0x50004700

08002a90 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a05      	ldr	r2, [pc, #20]	; (8002ab0 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9e:	f023 0302 	bic.w	r3, r3, #2
 8002aa2:	6053      	str	r3, [r2, #4]
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	50004710 	.word	0x50004710

08002ab4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 8002abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac2:	f043 0302 	orr.w	r3, r3, #2
 8002ac6:	6053      	str	r3, [r2, #4]
}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	50004710 	.word	0x50004710

08002ad8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60ba      	str	r2, [r7, #8]
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	81fb      	strh	r3, [r7, #14]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8002aea:	89fb      	ldrh	r3, [r7, #14]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fa85 	bl	8001ffc <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002af2:	7b7b      	ldrb	r3, [r7, #13]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	f040 8084 	bne.w	8002c02 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002afa:	89fb      	ldrh	r3, [r7, #14]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8002b00:	f000 fb0e 	bl	8003120 <OSCHP_GetFrequency>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4a4c      	ldr	r2, [pc, #304]	; (8002c38 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8002b08:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0c:	0c9b      	lsrs	r3, r3, #18
 8002b0e:	059b      	lsls	r3, r3, #22
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	e002      	b.n	8002b1a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002b14:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002b18:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	fb03 f202 	mul.w	r2, r3, r2
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	4a43      	ldr	r2, [pc, #268]	; (8002c3c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	0d9b      	lsrs	r3, r3, #22
 8002b36:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002b38:	4b41      	ldr	r3, [pc, #260]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4a40      	ldr	r2, [pc, #256]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002b44:	4b3e      	ldr	r3, [pc, #248]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a3d      	ldr	r2, [pc, #244]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b4a:	f043 0310 	orr.w	r3, r3, #16
 8002b4e:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002b50:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8002b56:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	3a01      	subs	r2, #1
 8002b5c:	0212      	lsls	r2, r2, #8
 8002b5e:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002b66:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002b6e:	4934      	ldr	r1, [pc, #208]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002b74:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a31      	ldr	r2, [pc, #196]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b7e:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002b80:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b86:	f023 0310 	bic.w	r3, r3, #16
 8002b8a:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b96:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002b98:	bf00      	nop
 8002b9a:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f9      	beq.n	8002b9a <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002ba6:	4b26      	ldr	r3, [pc, #152]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002bb2:	bf00      	nop
 8002bb4:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f9      	bne.n	8002bb4 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	4a21      	ldr	r2, [pc, #132]	; (8002c48 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	0d9b      	lsrs	r3, r3, #22
 8002bcc:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d202      	bcs.n	8002bdc <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002bd6:	6938      	ldr	r0, [r7, #16]
 8002bd8:	f000 f84a 	bl	8002c70 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	4a1a      	ldr	r2, [pc, #104]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	0d9b      	lsrs	r3, r3, #22
 8002bea:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d202      	bcs.n	8002bfa <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002bf4:	6938      	ldr	r0, [r7, #16]
 8002bf6:	f000 f83b 	bl	8002c70 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002bfa:	6a38      	ldr	r0, [r7, #32]
 8002bfc:	f000 f838 	bl	8002c70 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8002c00:	e015      	b.n	8002c2e <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002c02:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002c0e:	490c      	ldr	r1, [pc, #48]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002c20:	bf00      	nop
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f9      	beq.n	8002c22 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	431bde83 	.word	0x431bde83
 8002c3c:	aaaaaaab 	.word	0xaaaaaaab
 8002c40:	50004710 	.word	0x50004710
 8002c44:	f08080ff 	.word	0xf08080ff
 8002c48:	88888889 	.word	0x88888889
 8002c4c:	b60b60b7 	.word	0xb60b60b7

08002c50 <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8002c5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5e:	6053      	str	r3, [r2, #4]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	50004710 	.word	0x50004710

08002c70 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002c86:	4905      	ldr	r1, [pc, #20]	; (8002c9c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 8002c8c:	2032      	movs	r0, #50	; 0x32
 8002c8e:	f7fe fc6f 	bl	8001570 <XMC_SCU_lDelay>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	50004710 	.word	0x50004710

08002ca0 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf14      	ite	ne
 8002cb0:	2301      	movne	r3, #1
 8002cb2:	2300      	moveq	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	50004710 	.word	0x50004710

08002cc4 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002cd2:	e002      	b.n	8002cda <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2b1f      	cmp	r3, #31
 8002cee:	d9f1      	bls.n	8002cd4 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d102      	bne.n	8002cfc <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	72fb      	strb	r3, [r7, #11]
 8002cfa:	e006      	b.n	8002d0a <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 8002cfc:	4906      	ldr	r1, [pc, #24]	; (8002d18 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8002d06:	2300      	movs	r3, #0
 8002d08:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 8002d0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	20000aa4 	.word	0x20000aa4

08002d1c <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8002d28:	f7fe fc7e 	bl	8001628 <XMC_SCU_INTERUPT_GetEventStatus>
 8002d2c:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8002d2e:	e01c      	b.n	8002d6a <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d011      	beq.n	8002d64 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <XMC_SCU_IRQHandler+0x60>)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d48:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8002d54:	2201      	movs	r2, #1
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fc6f 	bl	8001640 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 8002d62:	e006      	b.n	8002d72 <XMC_SCU_IRQHandler+0x56>
    }   
    index++;    
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	3301      	adds	r3, #1
 8002d68:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b1f      	cmp	r3, #31
 8002d6e:	d9df      	bls.n	8002d30 <XMC_SCU_IRQHandler+0x14>
  }
}
 8002d70:	bf00      	nop
 8002d72:	bf00      	nop
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000aa4 	.word	0x20000aa4

08002d80 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	e003      	b.n	8002d96 <delay+0x16>
  {
    __NOP();
 8002d8e:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3301      	adds	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d8f7      	bhi.n	8002d8e <delay+0xe>
  }
}
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8002dac:	b598      	push	{r3, r4, r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8002db0:	4a06      	ldr	r2, [pc, #24]	; (8002dcc <SystemInit+0x20>)
 8002db2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002db6:	4614      	mov	r4, r2
 8002db8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8002dbe:	f000 f807 	bl	8002dd0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8002dc2:	f000 f83f 	bl	8002e44 <SystemCoreClockSetup>
}
 8002dc6:	bf00      	nop
 8002dc8:	bd98      	pop	{r3, r4, r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000ffc4 	.word	0x2000ffc4

08002dd0 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dd6:	b672      	cpsid	i
}
 8002dd8:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <SystemCoreSetup+0x68>)
 8002ddc:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <SystemCoreSetup+0x6c>)
 8002dde:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002de0:	f3bf 8f4f 	dsb	sy
}
 8002de4:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002de6:	b662      	cpsie	i
}
 8002de8:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <SystemCoreSetup+0x68>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	4a11      	ldr	r2, [pc, #68]	; (8002e38 <SystemCoreSetup+0x68>)
 8002df2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <SystemCoreSetup+0x68>)
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <SystemCoreSetup+0x68>)
 8002e00:	f023 0308 	bic.w	r3, r3, #8
 8002e04:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8002e06:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <SystemCoreSetup+0x70>)
 8002e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f023 030f 	bic.w	r3, r3, #15
 8002e16:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f043 0303 	orr.w	r3, r3, #3
 8002e1e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <SystemCoreSetup+0x70>)
 8002e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e26:	461a      	mov	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6153      	str	r3, [r2, #20]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00
 8002e3c:	08000000 	.word	0x08000000
 8002e40:	58001000 	.word	0x58001000

08002e44 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002e48:	4b75      	ldr	r3, [pc, #468]	; (8003020 <SystemCoreClockSetup+0x1dc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10c      	bne.n	8002e6e <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8002e54:	4b72      	ldr	r3, [pc, #456]	; (8003020 <SystemCoreClockSetup+0x1dc>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a71      	ldr	r2, [pc, #452]	; (8003020 <SystemCoreClockSetup+0x1dc>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002e60:	bf00      	nop
 8002e62:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <SystemCoreClockSetup+0x1dc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f9      	beq.n	8002e62 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8002e6e:	4b6d      	ldr	r3, [pc, #436]	; (8003024 <SystemCoreClockSetup+0x1e0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8002e7a:	4b6a      	ldr	r3, [pc, #424]	; (8003024 <SystemCoreClockSetup+0x1e0>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	4a69      	ldr	r2, [pc, #420]	; (8003024 <SystemCoreClockSetup+0x1e0>)
 8002e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e84:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8002e86:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8002e8a:	f7ff ff79 	bl	8002d80 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8002e8e:	4b66      	ldr	r3, [pc, #408]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a65      	ldr	r2, [pc, #404]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002e94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e98:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8002e9a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002e9e:	f7ff ff6f 	bl	8002d80 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002ea2:	4b61      	ldr	r3, [pc, #388]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4a60      	ldr	r2, [pc, #384]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eac:	f023 0302 	bic.w	r3, r3, #2
 8002eb0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8002eb2:	4b5e      	ldr	r3, [pc, #376]	; (800302c <SystemCoreClockSetup+0x1e8>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d029      	beq.n	8002f12 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8002ebe:	4b5b      	ldr	r3, [pc, #364]	; (800302c <SystemCoreClockSetup+0x1e8>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a5a      	ldr	r2, [pc, #360]	; (800302c <SystemCoreClockSetup+0x1e8>)
 8002ec4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002ec8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ecc:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8002ece:	f000 f927 	bl	8003120 <OSCHP_GetFrequency>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4a56      	ldr	r2, [pc, #344]	; (8003030 <SystemCoreClockSetup+0x1ec>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	0d1b      	lsrs	r3, r3, #20
 8002edc:	3b01      	subs	r3, #1
 8002ede:	041a      	lsls	r2, r3, #16
 8002ee0:	4b52      	ldr	r3, [pc, #328]	; (800302c <SystemCoreClockSetup+0x1e8>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4951      	ldr	r1, [pc, #324]	; (800302c <SystemCoreClockSetup+0x1e8>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8002eea:	4b4f      	ldr	r3, [pc, #316]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	4a4e      	ldr	r2, [pc, #312]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002ef6:	4b4c      	ldr	r3, [pc, #304]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a4b      	ldr	r2, [pc, #300]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002efc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f00:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8002f02:	bf00      	nop
 8002f04:	4b48      	ldr	r3, [pc, #288]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002f0c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002f10:	d1f8      	bne.n	8002f04 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002f12:	4b45      	ldr	r3, [pc, #276]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4a44      	ldr	r2, [pc, #272]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8002f1e:	4b42      	ldr	r3, [pc, #264]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a41      	ldr	r2, [pc, #260]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f24:	f043 0310 	orr.w	r3, r3, #16
 8002f28:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f2c:	4a41      	ldr	r2, [pc, #260]	; (8003034 <SystemCoreClockSetup+0x1f0>)
 8002f2e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002f30:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a3c      	ldr	r2, [pc, #240]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002f3c:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a39      	ldr	r2, [pc, #228]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f42:	f023 0310 	bic.w	r3, r3, #16
 8002f46:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8002f48:	4b37      	ldr	r3, [pc, #220]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a36      	ldr	r2, [pc, #216]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f52:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002f54:	bf00      	nop
 8002f56:	4b34      	ldr	r3, [pc, #208]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f9      	beq.n	8002f56 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a30      	ldr	r2, [pc, #192]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002f6e:	bf00      	nop
 8002f70:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f9      	bne.n	8002f70 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8002f7c:	4b2e      	ldr	r3, [pc, #184]	; (8003038 <SystemCoreClockSetup+0x1f4>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4a2d      	ldr	r2, [pc, #180]	; (8003038 <SystemCoreClockSetup+0x1f4>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8002f88:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <SystemCoreClockSetup+0x1f4>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <SystemCoreClockSetup+0x1f4>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8002f94:	4b28      	ldr	r3, [pc, #160]	; (8003038 <SystemCoreClockSetup+0x1f4>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8002f9a:	4b27      	ldr	r3, [pc, #156]	; (8003038 <SystemCoreClockSetup+0x1f4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <SystemCoreClockSetup+0x1f4>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <SystemCoreClockSetup+0x1f4>)
 8002fa8:	2203      	movs	r2, #3
 8002faa:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002fac:	4b1e      	ldr	r3, [pc, #120]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb6:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002fb8:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002fba:	4a20      	ldr	r2, [pc, #128]	; (800303c <SystemCoreClockSetup+0x1f8>)
 8002fbc:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8002fbe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002fc2:	f7ff fedd 	bl	8002d80 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002fc6:	bf00      	nop
 8002fc8:	4b17      	ldr	r3, [pc, #92]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0f9      	beq.n	8002fc8 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002fd4:	4b14      	ldr	r3, [pc, #80]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002fd6:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <SystemCoreClockSetup+0x1fc>)
 8002fd8:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8002fda:	f241 1094 	movw	r0, #4500	; 0x1194
 8002fde:	f7ff fecf 	bl	8002d80 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002fe2:	bf00      	nop
 8002fe4:	4b10      	ldr	r3, [pc, #64]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f9      	beq.n	8002fe4 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8002ff2:	4a14      	ldr	r2, [pc, #80]	; (8003044 <SystemCoreClockSetup+0x200>)
 8002ff4:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8002ff6:	f241 7070 	movw	r0, #6000	; 0x1770
 8002ffa:	f7ff fec1 	bl	8002d80 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002ffe:	bf00      	nop
 8003000:	4b09      	ldr	r3, [pc, #36]	; (8003028 <SystemCoreClockSetup+0x1e4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f9      	beq.n	8003000 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <SystemCoreClockSetup+0x204>)
 800300e:	2205      	movs	r2, #5
 8003010:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <SystemCoreClockSetup+0x1f4>)
 8003014:	2200      	movs	r2, #0
 8003016:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8003018:	f000 f818 	bl	800304c <SystemCoreClockUpdate>
}
 800301c:	bf00      	nop
 800301e:	bd80      	pop	{r7, pc}
 8003020:	50004200 	.word	0x50004200
 8003024:	50004400 	.word	0x50004400
 8003028:	50004710 	.word	0x50004710
 800302c:	50004700 	.word	0x50004700
 8003030:	6b5fca6b 	.word	0x6b5fca6b
 8003034:	01134f00 	.word	0x01134f00
 8003038:	50004600 	.word	0x50004600
 800303c:	01074f00 	.word	0x01074f00
 8003040:	01044f00 	.word	0x01044f00
 8003044:	01034f00 	.word	0x01034f00
 8003048:	50004160 	.word	0x50004160

0800304c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8003052:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <SystemCoreClockUpdate+0xc4>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d03e      	beq.n	80030dc <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <SystemCoreClockUpdate+0xc8>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800306a:	4b2b      	ldr	r3, [pc, #172]	; (8003118 <SystemCoreClockUpdate+0xcc>)
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e002      	b.n	8003076 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8003070:	f000 f856 	bl	8003120 <OSCHP_GetFrequency>
 8003074:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8003076:	4b27      	ldr	r3, [pc, #156]	; (8003114 <SystemCoreClockUpdate+0xc8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d020      	beq.n	80030c4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <SystemCoreClockUpdate+0xc8>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0e1b      	lsrs	r3, r3, #24
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	3301      	adds	r3, #1
 800308e:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8003090:	4b20      	ldr	r3, [pc, #128]	; (8003114 <SystemCoreClockUpdate+0xc8>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800309a:	3301      	adds	r3, #1
 800309c:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <SystemCoreClockUpdate+0xc8>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0c1b      	lsrs	r3, r3, #16
 80030a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a8:	3301      	adds	r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	fb02 f303 	mul.w	r3, r2, r3
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	fb02 f303 	mul.w	r3, r2, r3
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e00d      	b.n	80030e0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80030c4:	4b13      	ldr	r3, [pc, #76]	; (8003114 <SystemCoreClockUpdate+0xc8>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030cc:	3301      	adds	r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e001      	b.n	80030e0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <SystemCoreClockUpdate+0xcc>)
 80030de:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <SystemCoreClockUpdate+0xc4>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ee:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <SystemCoreClockUpdate+0xc4>)
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	3301      	adds	r3, #1
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003100:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8003102:	4a06      	ldr	r2, [pc, #24]	; (800311c <SystemCoreClockUpdate+0xd0>)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	50004600 	.word	0x50004600
 8003114:	50004710 	.word	0x50004710
 8003118:	016e3600 	.word	0x016e3600
 800311c:	2000ffc0 	.word	0x2000ffc0

08003120 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8003124:	4b02      	ldr	r3, [pc, #8]	; (8003130 <OSCHP_GetFrequency+0x10>)
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	00b71b00 	.word	0x00b71b00

08003134 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 800313c:	4b14      	ldr	r3, [pc, #80]	; (8003190 <_sbrk+0x5c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <_sbrk+0x5c>)
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <_sbrk+0x60>)
 8003148:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <_sbrk+0x5c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3303      	adds	r3, #3
 8003154:	f023 0303 	bic.w	r3, r3, #3
 8003158:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <_sbrk+0x5c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <_sbrk+0x64>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d207      	bcs.n	8003178 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <_sbrk+0x5c>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	4a07      	ldr	r2, [pc, #28]	; (8003190 <_sbrk+0x5c>)
 8003172:	6013      	str	r3, [r2, #0]
    return (base);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	e006      	b.n	8003186 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8003178:	f000 f818 	bl	80031ac <__errno>
 800317c:	4603      	mov	r3, r0
 800317e:	220c      	movs	r2, #12
 8003180:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 8003182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000b28 	.word	0x20000b28
 8003194:	20000b90 	.word	0x20000b90
 8003198:	2000ffc0 	.word	0x2000ffc0

0800319c <_init>:

/* Init */
void _init(void)
{}
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <__errno>:
 80031ac:	4b01      	ldr	r3, [pc, #4]	; (80031b4 <__errno+0x8>)
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	200000d8 	.word	0x200000d8

080031b8 <__libc_init_array>:
 80031b8:	b570      	push	{r4, r5, r6, lr}
 80031ba:	4e0d      	ldr	r6, [pc, #52]	; (80031f0 <__libc_init_array+0x38>)
 80031bc:	4d0d      	ldr	r5, [pc, #52]	; (80031f4 <__libc_init_array+0x3c>)
 80031be:	1b76      	subs	r6, r6, r5
 80031c0:	10b6      	asrs	r6, r6, #2
 80031c2:	d006      	beq.n	80031d2 <__libc_init_array+0x1a>
 80031c4:	2400      	movs	r4, #0
 80031c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031ca:	3401      	adds	r4, #1
 80031cc:	4798      	blx	r3
 80031ce:	42a6      	cmp	r6, r4
 80031d0:	d1f9      	bne.n	80031c6 <__libc_init_array+0xe>
 80031d2:	4e09      	ldr	r6, [pc, #36]	; (80031f8 <__libc_init_array+0x40>)
 80031d4:	4d09      	ldr	r5, [pc, #36]	; (80031fc <__libc_init_array+0x44>)
 80031d6:	1b76      	subs	r6, r6, r5
 80031d8:	f7ff ffe0 	bl	800319c <_init>
 80031dc:	10b6      	asrs	r6, r6, #2
 80031de:	d006      	beq.n	80031ee <__libc_init_array+0x36>
 80031e0:	2400      	movs	r4, #0
 80031e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e6:	3401      	adds	r4, #1
 80031e8:	4798      	blx	r3
 80031ea:	42a6      	cmp	r6, r4
 80031ec:	d1f9      	bne.n	80031e2 <__libc_init_array+0x2a>
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	20000a84 	.word	0x20000a84
 80031f4:	20000a84 	.word	0x20000a84
 80031f8:	20000a84 	.word	0x20000a84
 80031fc:	20000a84 	.word	0x20000a84

08003200 <malloc>:
 8003200:	4b02      	ldr	r3, [pc, #8]	; (800320c <malloc+0xc>)
 8003202:	4601      	mov	r1, r0
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	f000 b80b 	b.w	8003220 <_malloc_r>
 800320a:	bf00      	nop
 800320c:	200000d8 	.word	0x200000d8

08003210 <free>:
 8003210:	4b02      	ldr	r3, [pc, #8]	; (800321c <free+0xc>)
 8003212:	4601      	mov	r1, r0
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	f003 b965 	b.w	80064e4 <_free_r>
 800321a:	bf00      	nop
 800321c:	200000d8 	.word	0x200000d8

08003220 <_malloc_r>:
 8003220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003224:	f101 060b 	add.w	r6, r1, #11
 8003228:	2e16      	cmp	r6, #22
 800322a:	b083      	sub	sp, #12
 800322c:	4604      	mov	r4, r0
 800322e:	d824      	bhi.n	800327a <_malloc_r+0x5a>
 8003230:	2910      	cmp	r1, #16
 8003232:	f200 80ba 	bhi.w	80033aa <_malloc_r+0x18a>
 8003236:	f000 faa3 	bl	8003780 <__malloc_lock>
 800323a:	2610      	movs	r6, #16
 800323c:	2218      	movs	r2, #24
 800323e:	2002      	movs	r0, #2
 8003240:	4fb5      	ldr	r7, [pc, #724]	; (8003518 <_malloc_r+0x2f8>)
 8003242:	443a      	add	r2, r7
 8003244:	f1a2 0108 	sub.w	r1, r2, #8
 8003248:	6853      	ldr	r3, [r2, #4]
 800324a:	428b      	cmp	r3, r1
 800324c:	f000 80ba 	beq.w	80033c4 <_malloc_r+0x1a4>
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	68d9      	ldr	r1, [r3, #12]
 8003254:	f022 0203 	bic.w	r2, r2, #3
 8003258:	441a      	add	r2, r3
 800325a:	689d      	ldr	r5, [r3, #8]
 800325c:	60e9      	str	r1, [r5, #12]
 800325e:	608d      	str	r5, [r1, #8]
 8003260:	6851      	ldr	r1, [r2, #4]
 8003262:	f041 0101 	orr.w	r1, r1, #1
 8003266:	4620      	mov	r0, r4
 8003268:	6051      	str	r1, [r2, #4]
 800326a:	f103 0508 	add.w	r5, r3, #8
 800326e:	f000 fa8d 	bl	800378c <__malloc_unlock>
 8003272:	4628      	mov	r0, r5
 8003274:	b003      	add	sp, #12
 8003276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800327a:	f036 0607 	bics.w	r6, r6, #7
 800327e:	f100 8094 	bmi.w	80033aa <_malloc_r+0x18a>
 8003282:	42b1      	cmp	r1, r6
 8003284:	f200 8091 	bhi.w	80033aa <_malloc_r+0x18a>
 8003288:	f000 fa7a 	bl	8003780 <__malloc_lock>
 800328c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 8003290:	f0c0 819a 	bcc.w	80035c8 <_malloc_r+0x3a8>
 8003294:	0a73      	lsrs	r3, r6, #9
 8003296:	f000 808f 	beq.w	80033b8 <_malloc_r+0x198>
 800329a:	2b04      	cmp	r3, #4
 800329c:	f200 816f 	bhi.w	800357e <_malloc_r+0x35e>
 80032a0:	09b3      	lsrs	r3, r6, #6
 80032a2:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80032a6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 80032aa:	00c3      	lsls	r3, r0, #3
 80032ac:	4f9a      	ldr	r7, [pc, #616]	; (8003518 <_malloc_r+0x2f8>)
 80032ae:	443b      	add	r3, r7
 80032b0:	f1a3 0508 	sub.w	r5, r3, #8
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	429d      	cmp	r5, r3
 80032b8:	d106      	bne.n	80032c8 <_malloc_r+0xa8>
 80032ba:	e00c      	b.n	80032d6 <_malloc_r+0xb6>
 80032bc:	2900      	cmp	r1, #0
 80032be:	f280 8127 	bge.w	8003510 <_malloc_r+0x2f0>
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	429d      	cmp	r5, r3
 80032c6:	d006      	beq.n	80032d6 <_malloc_r+0xb6>
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	f022 0203 	bic.w	r2, r2, #3
 80032ce:	1b91      	subs	r1, r2, r6
 80032d0:	290f      	cmp	r1, #15
 80032d2:	ddf3      	ble.n	80032bc <_malloc_r+0x9c>
 80032d4:	4660      	mov	r0, ip
 80032d6:	693d      	ldr	r5, [r7, #16]
 80032d8:	f8df c240 	ldr.w	ip, [pc, #576]	; 800351c <_malloc_r+0x2fc>
 80032dc:	4565      	cmp	r5, ip
 80032de:	d07c      	beq.n	80033da <_malloc_r+0x1ba>
 80032e0:	686a      	ldr	r2, [r5, #4]
 80032e2:	f022 0203 	bic.w	r2, r2, #3
 80032e6:	1b93      	subs	r3, r2, r6
 80032e8:	2b0f      	cmp	r3, #15
 80032ea:	f300 817b 	bgt.w	80035e4 <_malloc_r+0x3c4>
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 80032f4:	f280 816c 	bge.w	80035d0 <_malloc_r+0x3b0>
 80032f8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80032fc:	f080 811a 	bcs.w	8003534 <_malloc_r+0x314>
 8003300:	08d3      	lsrs	r3, r2, #3
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	3301      	adds	r3, #1
 8003306:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800330a:	2201      	movs	r2, #1
 800330c:	fa02 f20e 	lsl.w	r2, r2, lr
 8003310:	430a      	orrs	r2, r1
 8003312:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8003316:	f8c5 e008 	str.w	lr, [r5, #8]
 800331a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 800331e:	3908      	subs	r1, #8
 8003320:	60e9      	str	r1, [r5, #12]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8003328:	f8ce 500c 	str.w	r5, [lr, #12]
 800332c:	1083      	asrs	r3, r0, #2
 800332e:	2101      	movs	r1, #1
 8003330:	4099      	lsls	r1, r3
 8003332:	4291      	cmp	r1, r2
 8003334:	d857      	bhi.n	80033e6 <_malloc_r+0x1c6>
 8003336:	4211      	tst	r1, r2
 8003338:	d106      	bne.n	8003348 <_malloc_r+0x128>
 800333a:	f020 0003 	bic.w	r0, r0, #3
 800333e:	0049      	lsls	r1, r1, #1
 8003340:	4211      	tst	r1, r2
 8003342:	f100 0004 	add.w	r0, r0, #4
 8003346:	d0fa      	beq.n	800333e <_malloc_r+0x11e>
 8003348:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800334c:	464d      	mov	r5, r9
 800334e:	4686      	mov	lr, r0
 8003350:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8003354:	4545      	cmp	r5, r8
 8003356:	d108      	bne.n	800336a <_malloc_r+0x14a>
 8003358:	e11d      	b.n	8003596 <_malloc_r+0x376>
 800335a:	2b00      	cmp	r3, #0
 800335c:	f280 8124 	bge.w	80035a8 <_malloc_r+0x388>
 8003360:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8003364:	4545      	cmp	r5, r8
 8003366:	f000 8116 	beq.w	8003596 <_malloc_r+0x376>
 800336a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800336e:	f022 0203 	bic.w	r2, r2, #3
 8003372:	1b93      	subs	r3, r2, r6
 8003374:	2b0f      	cmp	r3, #15
 8003376:	ddf0      	ble.n	800335a <_malloc_r+0x13a>
 8003378:	4620      	mov	r0, r4
 800337a:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 800337e:	eb08 0106 	add.w	r1, r8, r6
 8003382:	f046 0601 	orr.w	r6, r6, #1
 8003386:	f8c8 6004 	str.w	r6, [r8, #4]
 800338a:	60ec      	str	r4, [r5, #12]
 800338c:	60a5      	str	r5, [r4, #8]
 800338e:	f043 0401 	orr.w	r4, r3, #1
 8003392:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8003396:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800339a:	604c      	str	r4, [r1, #4]
 800339c:	f848 3002 	str.w	r3, [r8, r2]
 80033a0:	f000 f9f4 	bl	800378c <__malloc_unlock>
 80033a4:	f108 0508 	add.w	r5, r8, #8
 80033a8:	e002      	b.n	80033b0 <_malloc_r+0x190>
 80033aa:	230c      	movs	r3, #12
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	2500      	movs	r5, #0
 80033b0:	4628      	mov	r0, r5
 80033b2:	b003      	add	sp, #12
 80033b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033bc:	2040      	movs	r0, #64	; 0x40
 80033be:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 80033c2:	e773      	b.n	80032ac <_malloc_r+0x8c>
 80033c4:	68d3      	ldr	r3, [r2, #12]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	bf08      	it	eq
 80033ca:	3002      	addeq	r0, #2
 80033cc:	f47f af40 	bne.w	8003250 <_malloc_r+0x30>
 80033d0:	693d      	ldr	r5, [r7, #16]
 80033d2:	f8df c148 	ldr.w	ip, [pc, #328]	; 800351c <_malloc_r+0x2fc>
 80033d6:	4565      	cmp	r5, ip
 80033d8:	d182      	bne.n	80032e0 <_malloc_r+0xc0>
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	1083      	asrs	r3, r0, #2
 80033de:	2101      	movs	r1, #1
 80033e0:	4099      	lsls	r1, r3
 80033e2:	4291      	cmp	r1, r2
 80033e4:	d9a7      	bls.n	8003336 <_malloc_r+0x116>
 80033e6:	68bd      	ldr	r5, [r7, #8]
 80033e8:	686b      	ldr	r3, [r5, #4]
 80033ea:	f023 0903 	bic.w	r9, r3, #3
 80033ee:	454e      	cmp	r6, r9
 80033f0:	d803      	bhi.n	80033fa <_malloc_r+0x1da>
 80033f2:	eba9 0306 	sub.w	r3, r9, r6
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	dc7a      	bgt.n	80034f0 <_malloc_r+0x2d0>
 80033fa:	f8df b124 	ldr.w	fp, [pc, #292]	; 8003520 <_malloc_r+0x300>
 80033fe:	4b49      	ldr	r3, [pc, #292]	; (8003524 <_malloc_r+0x304>)
 8003400:	f8db 2000 	ldr.w	r2, [fp]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3201      	adds	r2, #1
 8003408:	4433      	add	r3, r6
 800340a:	eb05 0a09 	add.w	sl, r5, r9
 800340e:	f000 8133 	beq.w	8003678 <_malloc_r+0x458>
 8003412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003416:	330f      	adds	r3, #15
 8003418:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
 800341c:	f028 080f 	bic.w	r8, r8, #15
 8003420:	4641      	mov	r1, r8
 8003422:	4620      	mov	r0, r4
 8003424:	f000 f9b8 	bl	8003798 <_sbrk_r>
 8003428:	1c41      	adds	r1, r0, #1
 800342a:	4602      	mov	r2, r0
 800342c:	f000 80f3 	beq.w	8003616 <_malloc_r+0x3f6>
 8003430:	4582      	cmp	sl, r0
 8003432:	f200 80ee 	bhi.w	8003612 <_malloc_r+0x3f2>
 8003436:	4b3c      	ldr	r3, [pc, #240]	; (8003528 <_malloc_r+0x308>)
 8003438:	6819      	ldr	r1, [r3, #0]
 800343a:	4441      	add	r1, r8
 800343c:	6019      	str	r1, [r3, #0]
 800343e:	4608      	mov	r0, r1
 8003440:	f000 814e 	beq.w	80036e0 <_malloc_r+0x4c0>
 8003444:	f8db 1000 	ldr.w	r1, [fp]
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	3101      	adds	r1, #1
 800344c:	bf1b      	ittet	ne
 800344e:	eba2 0a0a 	subne.w	sl, r2, sl
 8003452:	4450      	addne	r0, sl
 8003454:	f8cb 2000 	streq.w	r2, [fp]
 8003458:	6018      	strne	r0, [r3, #0]
 800345a:	f012 0b07 	ands.w	fp, r2, #7
 800345e:	f000 8117 	beq.w	8003690 <_malloc_r+0x470>
 8003462:	f1cb 0108 	rsb	r1, fp, #8
 8003466:	440a      	add	r2, r1
 8003468:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
 800346c:	4490      	add	r8, r2
 800346e:	3108      	adds	r1, #8
 8003470:	eba1 0108 	sub.w	r1, r1, r8
 8003474:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8003478:	4651      	mov	r1, sl
 800347a:	4620      	mov	r0, r4
 800347c:	9200      	str	r2, [sp, #0]
 800347e:	f000 f98b 	bl	8003798 <_sbrk_r>
 8003482:	1c42      	adds	r2, r0, #1
 8003484:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003488:	f000 814f 	beq.w	800372a <_malloc_r+0x50a>
 800348c:	1a80      	subs	r0, r0, r2
 800348e:	eb00 080a 	add.w	r8, r0, sl
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	60ba      	str	r2, [r7, #8]
 8003496:	f048 0001 	orr.w	r0, r8, #1
 800349a:	4451      	add	r1, sl
 800349c:	42bd      	cmp	r5, r7
 800349e:	6050      	str	r0, [r2, #4]
 80034a0:	6019      	str	r1, [r3, #0]
 80034a2:	f000 8129 	beq.w	80036f8 <_malloc_r+0x4d8>
 80034a6:	f1b9 0f0f 	cmp.w	r9, #15
 80034aa:	f240 8127 	bls.w	80036fc <_malloc_r+0x4dc>
 80034ae:	6868      	ldr	r0, [r5, #4]
 80034b0:	f1a9 0c0c 	sub.w	ip, r9, #12
 80034b4:	f02c 0c07 	bic.w	ip, ip, #7
 80034b8:	f000 0001 	and.w	r0, r0, #1
 80034bc:	ea40 000c 	orr.w	r0, r0, ip
 80034c0:	6068      	str	r0, [r5, #4]
 80034c2:	f04f 0e05 	mov.w	lr, #5
 80034c6:	eb05 000c 	add.w	r0, r5, ip
 80034ca:	f1bc 0f0f 	cmp.w	ip, #15
 80034ce:	e9c0 ee01 	strd	lr, lr, [r0, #4]
 80034d2:	f200 8132 	bhi.w	800373a <_malloc_r+0x51a>
 80034d6:	6850      	ldr	r0, [r2, #4]
 80034d8:	4615      	mov	r5, r2
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <_malloc_r+0x30c>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	428a      	cmp	r2, r1
 80034e0:	bf38      	it	cc
 80034e2:	6019      	strcc	r1, [r3, #0]
 80034e4:	4b12      	ldr	r3, [pc, #72]	; (8003530 <_malloc_r+0x310>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	428a      	cmp	r2, r1
 80034ea:	bf38      	it	cc
 80034ec:	6019      	strcc	r1, [r3, #0]
 80034ee:	e094      	b.n	800361a <_malloc_r+0x3fa>
 80034f0:	19aa      	adds	r2, r5, r6
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	f046 0601 	orr.w	r6, r6, #1
 80034fa:	606e      	str	r6, [r5, #4]
 80034fc:	4620      	mov	r0, r4
 80034fe:	60ba      	str	r2, [r7, #8]
 8003500:	6053      	str	r3, [r2, #4]
 8003502:	f000 f943 	bl	800378c <__malloc_unlock>
 8003506:	3508      	adds	r5, #8
 8003508:	4628      	mov	r0, r5
 800350a:	b003      	add	sp, #12
 800350c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003510:	68d9      	ldr	r1, [r3, #12]
 8003512:	441a      	add	r2, r3
 8003514:	e6a1      	b.n	800325a <_malloc_r+0x3a>
 8003516:	bf00      	nop
 8003518:	20000508 	.word	0x20000508
 800351c:	20000510 	.word	0x20000510
 8003520:	20000910 	.word	0x20000910
 8003524:	20000b5c 	.word	0x20000b5c
 8003528:	20000b2c 	.word	0x20000b2c
 800352c:	20000b54 	.word	0x20000b54
 8003530:	20000b58 	.word	0x20000b58
 8003534:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8003538:	ea4f 2352 	mov.w	r3, r2, lsr #9
 800353c:	d363      	bcc.n	8003606 <_malloc_r+0x3e6>
 800353e:	2b14      	cmp	r3, #20
 8003540:	f200 80b7 	bhi.w	80036b2 <_malloc_r+0x492>
 8003544:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003548:	00c9      	lsls	r1, r1, #3
 800354a:	335b      	adds	r3, #91	; 0x5b
 800354c:	eb07 0e01 	add.w	lr, r7, r1
 8003550:	5879      	ldr	r1, [r7, r1]
 8003552:	f1ae 0e08 	sub.w	lr, lr, #8
 8003556:	458e      	cmp	lr, r1
 8003558:	f000 8091 	beq.w	800367e <_malloc_r+0x45e>
 800355c:	684b      	ldr	r3, [r1, #4]
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	4293      	cmp	r3, r2
 8003564:	d902      	bls.n	800356c <_malloc_r+0x34c>
 8003566:	6889      	ldr	r1, [r1, #8]
 8003568:	458e      	cmp	lr, r1
 800356a:	d1f7      	bne.n	800355c <_malloc_r+0x33c>
 800356c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 8003576:	f8ce 5008 	str.w	r5, [lr, #8]
 800357a:	60cd      	str	r5, [r1, #12]
 800357c:	e6d6      	b.n	800332c <_malloc_r+0x10c>
 800357e:	2b14      	cmp	r3, #20
 8003580:	d959      	bls.n	8003636 <_malloc_r+0x416>
 8003582:	2b54      	cmp	r3, #84	; 0x54
 8003584:	f200 809d 	bhi.w	80036c2 <_malloc_r+0x4a2>
 8003588:	0b33      	lsrs	r3, r6, #12
 800358a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800358e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8003592:	00c3      	lsls	r3, r0, #3
 8003594:	e68a      	b.n	80032ac <_malloc_r+0x8c>
 8003596:	f10e 0e01 	add.w	lr, lr, #1
 800359a:	f01e 0f03 	tst.w	lr, #3
 800359e:	f105 0508 	add.w	r5, r5, #8
 80035a2:	f47f aed5 	bne.w	8003350 <_malloc_r+0x130>
 80035a6:	e051      	b.n	800364c <_malloc_r+0x42c>
 80035a8:	4442      	add	r2, r8
 80035aa:	4645      	mov	r5, r8
 80035ac:	6853      	ldr	r3, [r2, #4]
 80035ae:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6053      	str	r3, [r2, #4]
 80035b8:	f855 3f08 	ldr.w	r3, [r5, #8]!
 80035bc:	4620      	mov	r0, r4
 80035be:	60d9      	str	r1, [r3, #12]
 80035c0:	608b      	str	r3, [r1, #8]
 80035c2:	f000 f8e3 	bl	800378c <__malloc_unlock>
 80035c6:	e6f3      	b.n	80033b0 <_malloc_r+0x190>
 80035c8:	08f0      	lsrs	r0, r6, #3
 80035ca:	f106 0208 	add.w	r2, r6, #8
 80035ce:	e637      	b.n	8003240 <_malloc_r+0x20>
 80035d0:	442a      	add	r2, r5
 80035d2:	4620      	mov	r0, r4
 80035d4:	6853      	ldr	r3, [r2, #4]
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6053      	str	r3, [r2, #4]
 80035dc:	3508      	adds	r5, #8
 80035de:	f000 f8d5 	bl	800378c <__malloc_unlock>
 80035e2:	e6e5      	b.n	80033b0 <_malloc_r+0x190>
 80035e4:	19a9      	adds	r1, r5, r6
 80035e6:	4620      	mov	r0, r4
 80035e8:	f046 0601 	orr.w	r6, r6, #1
 80035ec:	f043 0401 	orr.w	r4, r3, #1
 80035f0:	606e      	str	r6, [r5, #4]
 80035f2:	e9c7 1104 	strd	r1, r1, [r7, #16]
 80035f6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 80035fa:	604c      	str	r4, [r1, #4]
 80035fc:	50ab      	str	r3, [r5, r2]
 80035fe:	f000 f8c5 	bl	800378c <__malloc_unlock>
 8003602:	3508      	adds	r5, #8
 8003604:	e6d4      	b.n	80033b0 <_malloc_r+0x190>
 8003606:	0993      	lsrs	r3, r2, #6
 8003608:	f103 0139 	add.w	r1, r3, #57	; 0x39
 800360c:	00c9      	lsls	r1, r1, #3
 800360e:	3338      	adds	r3, #56	; 0x38
 8003610:	e79c      	b.n	800354c <_malloc_r+0x32c>
 8003612:	42bd      	cmp	r5, r7
 8003614:	d05f      	beq.n	80036d6 <_malloc_r+0x4b6>
 8003616:	68bd      	ldr	r5, [r7, #8]
 8003618:	6868      	ldr	r0, [r5, #4]
 800361a:	f020 0803 	bic.w	r8, r0, #3
 800361e:	4546      	cmp	r6, r8
 8003620:	eba8 0306 	sub.w	r3, r8, r6
 8003624:	d802      	bhi.n	800362c <_malloc_r+0x40c>
 8003626:	2b0f      	cmp	r3, #15
 8003628:	f73f af62 	bgt.w	80034f0 <_malloc_r+0x2d0>
 800362c:	4620      	mov	r0, r4
 800362e:	f000 f8ad 	bl	800378c <__malloc_unlock>
 8003632:	2500      	movs	r5, #0
 8003634:	e6bc      	b.n	80033b0 <_malloc_r+0x190>
 8003636:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800363a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800363e:	00c3      	lsls	r3, r0, #3
 8003640:	e634      	b.n	80032ac <_malloc_r+0x8c>
 8003642:	f859 3908 	ldr.w	r3, [r9], #-8
 8003646:	454b      	cmp	r3, r9
 8003648:	f040 8096 	bne.w	8003778 <_malloc_r+0x558>
 800364c:	f010 0f03 	tst.w	r0, #3
 8003650:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8003654:	d1f5      	bne.n	8003642 <_malloc_r+0x422>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	ea23 0301 	bic.w	r3, r3, r1
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	0049      	lsls	r1, r1, #1
 8003660:	4299      	cmp	r1, r3
 8003662:	f63f aec0 	bhi.w	80033e6 <_malloc_r+0x1c6>
 8003666:	b919      	cbnz	r1, 8003670 <_malloc_r+0x450>
 8003668:	e6bd      	b.n	80033e6 <_malloc_r+0x1c6>
 800366a:	0049      	lsls	r1, r1, #1
 800366c:	f10e 0e04 	add.w	lr, lr, #4
 8003670:	4219      	tst	r1, r3
 8003672:	d0fa      	beq.n	800366a <_malloc_r+0x44a>
 8003674:	4670      	mov	r0, lr
 8003676:	e667      	b.n	8003348 <_malloc_r+0x128>
 8003678:	f103 0810 	add.w	r8, r3, #16
 800367c:	e6d0      	b.n	8003420 <_malloc_r+0x200>
 800367e:	109a      	asrs	r2, r3, #2
 8003680:	f04f 0801 	mov.w	r8, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	fa08 f202 	lsl.w	r2, r8, r2
 800368a:	431a      	orrs	r2, r3
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	e770      	b.n	8003572 <_malloc_r+0x352>
 8003690:	eb02 0108 	add.w	r1, r2, r8
 8003694:	4249      	negs	r1, r1
 8003696:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 800369a:	4651      	mov	r1, sl
 800369c:	4620      	mov	r0, r4
 800369e:	9200      	str	r2, [sp, #0]
 80036a0:	f000 f87a 	bl	8003798 <_sbrk_r>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80036aa:	f47f aeef 	bne.w	800348c <_malloc_r+0x26c>
 80036ae:	46da      	mov	sl, fp
 80036b0:	e6ef      	b.n	8003492 <_malloc_r+0x272>
 80036b2:	2b54      	cmp	r3, #84	; 0x54
 80036b4:	d825      	bhi.n	8003702 <_malloc_r+0x4e2>
 80036b6:	0b13      	lsrs	r3, r2, #12
 80036b8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 80036bc:	00c9      	lsls	r1, r1, #3
 80036be:	336e      	adds	r3, #110	; 0x6e
 80036c0:	e744      	b.n	800354c <_malloc_r+0x32c>
 80036c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80036c6:	d825      	bhi.n	8003714 <_malloc_r+0x4f4>
 80036c8:	0bf3      	lsrs	r3, r6, #15
 80036ca:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80036ce:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 80036d2:	00c3      	lsls	r3, r0, #3
 80036d4:	e5ea      	b.n	80032ac <_malloc_r+0x8c>
 80036d6:	4b29      	ldr	r3, [pc, #164]	; (800377c <_malloc_r+0x55c>)
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	4440      	add	r0, r8
 80036dc:	6018      	str	r0, [r3, #0]
 80036de:	e6b1      	b.n	8003444 <_malloc_r+0x224>
 80036e0:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 80036e4:	f1bc 0f00 	cmp.w	ip, #0
 80036e8:	f47f aeac 	bne.w	8003444 <_malloc_r+0x224>
 80036ec:	68bd      	ldr	r5, [r7, #8]
 80036ee:	44c8      	add	r8, r9
 80036f0:	f048 0001 	orr.w	r0, r8, #1
 80036f4:	6068      	str	r0, [r5, #4]
 80036f6:	e6f0      	b.n	80034da <_malloc_r+0x2ba>
 80036f8:	4615      	mov	r5, r2
 80036fa:	e6ee      	b.n	80034da <_malloc_r+0x2ba>
 80036fc:	2301      	movs	r3, #1
 80036fe:	6053      	str	r3, [r2, #4]
 8003700:	e794      	b.n	800362c <_malloc_r+0x40c>
 8003702:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003706:	d823      	bhi.n	8003750 <_malloc_r+0x530>
 8003708:	0bd3      	lsrs	r3, r2, #15
 800370a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800370e:	00c9      	lsls	r1, r1, #3
 8003710:	3377      	adds	r3, #119	; 0x77
 8003712:	e71b      	b.n	800354c <_malloc_r+0x32c>
 8003714:	f240 5254 	movw	r2, #1364	; 0x554
 8003718:	4293      	cmp	r3, r2
 800371a:	d823      	bhi.n	8003764 <_malloc_r+0x544>
 800371c:	0cb3      	lsrs	r3, r6, #18
 800371e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8003722:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8003726:	00c3      	lsls	r3, r0, #3
 8003728:	e5c0      	b.n	80032ac <_malloc_r+0x8c>
 800372a:	f1ab 0b08 	sub.w	fp, fp, #8
 800372e:	44d8      	add	r8, fp
 8003730:	eba8 0802 	sub.w	r8, r8, r2
 8003734:	f04f 0a00 	mov.w	sl, #0
 8003738:	e6ab      	b.n	8003492 <_malloc_r+0x272>
 800373a:	f105 0108 	add.w	r1, r5, #8
 800373e:	4620      	mov	r0, r4
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	f002 fecf 	bl	80064e4 <_free_r>
 8003746:	68bd      	ldr	r5, [r7, #8]
 8003748:	9b00      	ldr	r3, [sp, #0]
 800374a:	6868      	ldr	r0, [r5, #4]
 800374c:	6819      	ldr	r1, [r3, #0]
 800374e:	e6c4      	b.n	80034da <_malloc_r+0x2ba>
 8003750:	f240 5154 	movw	r1, #1364	; 0x554
 8003754:	428b      	cmp	r3, r1
 8003756:	d80b      	bhi.n	8003770 <_malloc_r+0x550>
 8003758:	0c93      	lsrs	r3, r2, #18
 800375a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 800375e:	00c9      	lsls	r1, r1, #3
 8003760:	337c      	adds	r3, #124	; 0x7c
 8003762:	e6f3      	b.n	800354c <_malloc_r+0x32c>
 8003764:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8003768:	207f      	movs	r0, #127	; 0x7f
 800376a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 800376e:	e59d      	b.n	80032ac <_malloc_r+0x8c>
 8003770:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8003774:	237e      	movs	r3, #126	; 0x7e
 8003776:	e6e9      	b.n	800354c <_malloc_r+0x32c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	e770      	b.n	800365e <_malloc_r+0x43e>
 800377c:	20000b2c 	.word	0x20000b2c

08003780 <__malloc_lock>:
 8003780:	4801      	ldr	r0, [pc, #4]	; (8003788 <__malloc_lock+0x8>)
 8003782:	f002 bfc9 	b.w	8006718 <__retarget_lock_acquire_recursive>
 8003786:	bf00      	nop
 8003788:	20000b74 	.word	0x20000b74

0800378c <__malloc_unlock>:
 800378c:	4801      	ldr	r0, [pc, #4]	; (8003794 <__malloc_unlock+0x8>)
 800378e:	f002 bfcb 	b.w	8006728 <__retarget_lock_release_recursive>
 8003792:	bf00      	nop
 8003794:	20000b74 	.word	0x20000b74

08003798 <_sbrk_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4d07      	ldr	r5, [pc, #28]	; (80037b8 <_sbrk_r+0x20>)
 800379c:	2200      	movs	r2, #0
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	602a      	str	r2, [r5, #0]
 80037a4:	f7ff fcc6 	bl	8003134 <_sbrk>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d000      	beq.n	80037ae <_sbrk_r+0x16>
 80037ac:	bd38      	pop	{r3, r4, r5, pc}
 80037ae:	682b      	ldr	r3, [r5, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0fb      	beq.n	80037ac <_sbrk_r+0x14>
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	20000b84 	.word	0x20000b84

080037bc <_sprintf_r>:
 80037bc:	b40c      	push	{r2, r3}
 80037be:	b510      	push	{r4, lr}
 80037c0:	b09c      	sub	sp, #112	; 0x70
 80037c2:	ab1e      	add	r3, sp, #120	; 0x78
 80037c4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80037c8:	e9cd 1406 	strd	r1, r4, [sp, #24]
 80037cc:	9102      	str	r1, [sp, #8]
 80037ce:	4908      	ldr	r1, [pc, #32]	; (80037f0 <_sprintf_r+0x34>)
 80037d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80037d4:	9105      	str	r1, [sp, #20]
 80037d6:	a902      	add	r1, sp, #8
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	9404      	str	r4, [sp, #16]
 80037dc:	f000 f91e 	bl	8003a1c <_svfprintf_r>
 80037e0:	9b02      	ldr	r3, [sp, #8]
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	b01c      	add	sp, #112	; 0x70
 80037e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ec:	b002      	add	sp, #8
 80037ee:	4770      	bx	lr
 80037f0:	ffff0208 	.word	0xffff0208

080037f4 <sprintf>:
 80037f4:	b40e      	push	{r1, r2, r3}
 80037f6:	b510      	push	{r4, lr}
 80037f8:	b09d      	sub	sp, #116	; 0x74
 80037fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037fe:	ab1f      	add	r3, sp, #124	; 0x7c
 8003800:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003804:	9104      	str	r1, [sp, #16]
 8003806:	4909      	ldr	r1, [pc, #36]	; (800382c <sprintf+0x38>)
 8003808:	f853 2b04 	ldr.w	r2, [r3], #4
 800380c:	9002      	str	r0, [sp, #8]
 800380e:	4c08      	ldr	r4, [pc, #32]	; (8003830 <sprintf+0x3c>)
 8003810:	6808      	ldr	r0, [r1, #0]
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	a902      	add	r1, sp, #8
 8003816:	9405      	str	r4, [sp, #20]
 8003818:	f000 f900 	bl	8003a1c <_svfprintf_r>
 800381c:	9b02      	ldr	r3, [sp, #8]
 800381e:	2200      	movs	r2, #0
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	b01d      	add	sp, #116	; 0x74
 8003824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003828:	b003      	add	sp, #12
 800382a:	4770      	bx	lr
 800382c:	200000d8 	.word	0x200000d8
 8003830:	ffff0208 	.word	0xffff0208

08003834 <strcat>:
 8003834:	0783      	lsls	r3, r0, #30
 8003836:	b510      	push	{r4, lr}
 8003838:	4604      	mov	r4, r0
 800383a:	d110      	bne.n	800385e <strcat+0x2a>
 800383c:	6802      	ldr	r2, [r0, #0]
 800383e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8003842:	ea23 0302 	bic.w	r3, r3, r2
 8003846:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800384a:	d108      	bne.n	800385e <strcat+0x2a>
 800384c:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003850:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 8003854:	ea23 0302 	bic.w	r3, r3, r2
 8003858:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800385c:	d0f6      	beq.n	800384c <strcat+0x18>
 800385e:	7803      	ldrb	r3, [r0, #0]
 8003860:	b11b      	cbz	r3, 800386a <strcat+0x36>
 8003862:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1fb      	bne.n	8003862 <strcat+0x2e>
 800386a:	f000 f803 	bl	8003874 <strcpy>
 800386e:	4620      	mov	r0, r4
 8003870:	bd10      	pop	{r4, pc}
 8003872:	bf00      	nop

08003874 <strcpy>:
 8003874:	ea80 0201 	eor.w	r2, r0, r1
 8003878:	4684      	mov	ip, r0
 800387a:	f012 0f03 	tst.w	r2, #3
 800387e:	d14f      	bne.n	8003920 <strcpy+0xac>
 8003880:	f011 0f03 	tst.w	r1, #3
 8003884:	d132      	bne.n	80038ec <strcpy+0x78>
 8003886:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800388a:	f011 0f04 	tst.w	r1, #4
 800388e:	f851 3b04 	ldr.w	r3, [r1], #4
 8003892:	d00b      	beq.n	80038ac <strcpy+0x38>
 8003894:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8003898:	439a      	bics	r2, r3
 800389a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800389e:	bf04      	itt	eq
 80038a0:	f84c 3b04 	streq.w	r3, [ip], #4
 80038a4:	f851 3b04 	ldreq.w	r3, [r1], #4
 80038a8:	d116      	bne.n	80038d8 <strcpy+0x64>
 80038aa:	bf00      	nop
 80038ac:	f851 4b04 	ldr.w	r4, [r1], #4
 80038b0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80038b4:	439a      	bics	r2, r3
 80038b6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80038ba:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80038be:	d10b      	bne.n	80038d8 <strcpy+0x64>
 80038c0:	f84c 3b04 	str.w	r3, [ip], #4
 80038c4:	43a2      	bics	r2, r4
 80038c6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80038ca:	bf04      	itt	eq
 80038cc:	f851 3b04 	ldreq.w	r3, [r1], #4
 80038d0:	f84c 4b04 	streq.w	r4, [ip], #4
 80038d4:	d0ea      	beq.n	80038ac <strcpy+0x38>
 80038d6:	4623      	mov	r3, r4
 80038d8:	f80c 3b01 	strb.w	r3, [ip], #1
 80038dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 80038e0:	ea4f 2333 	mov.w	r3, r3, ror #8
 80038e4:	d1f8      	bne.n	80038d8 <strcpy+0x64>
 80038e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	f011 0f01 	tst.w	r1, #1
 80038f0:	d006      	beq.n	8003900 <strcpy+0x8c>
 80038f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038f6:	f80c 2b01 	strb.w	r2, [ip], #1
 80038fa:	2a00      	cmp	r2, #0
 80038fc:	bf08      	it	eq
 80038fe:	4770      	bxeq	lr
 8003900:	f011 0f02 	tst.w	r1, #2
 8003904:	d0bf      	beq.n	8003886 <strcpy+0x12>
 8003906:	f831 2b02 	ldrh.w	r2, [r1], #2
 800390a:	f012 0fff 	tst.w	r2, #255	; 0xff
 800390e:	bf16      	itet	ne
 8003910:	f82c 2b02 	strhne.w	r2, [ip], #2
 8003914:	f88c 2000 	strbeq.w	r2, [ip]
 8003918:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800391c:	d1b3      	bne.n	8003886 <strcpy+0x12>
 800391e:	4770      	bx	lr
 8003920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003924:	f80c 2b01 	strb.w	r2, [ip], #1
 8003928:	2a00      	cmp	r2, #0
 800392a:	d1f9      	bne.n	8003920 <strcpy+0xac>
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
	...

08003940 <strlen>:
 8003940:	f890 f000 	pld	[r0]
 8003944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8003948:	f020 0107 	bic.w	r1, r0, #7
 800394c:	f06f 0c00 	mvn.w	ip, #0
 8003950:	f010 0407 	ands.w	r4, r0, #7
 8003954:	f891 f020 	pld	[r1, #32]
 8003958:	f040 8049 	bne.w	80039ee <strlen+0xae>
 800395c:	f04f 0400 	mov.w	r4, #0
 8003960:	f06f 0007 	mvn.w	r0, #7
 8003964:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003968:	f891 f040 	pld	[r1, #64]	; 0x40
 800396c:	f100 0008 	add.w	r0, r0, #8
 8003970:	fa82 f24c 	uadd8	r2, r2, ip
 8003974:	faa4 f28c 	sel	r2, r4, ip
 8003978:	fa83 f34c 	uadd8	r3, r3, ip
 800397c:	faa2 f38c 	sel	r3, r2, ip
 8003980:	bb4b      	cbnz	r3, 80039d6 <strlen+0x96>
 8003982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8003986:	fa82 f24c 	uadd8	r2, r2, ip
 800398a:	f100 0008 	add.w	r0, r0, #8
 800398e:	faa4 f28c 	sel	r2, r4, ip
 8003992:	fa83 f34c 	uadd8	r3, r3, ip
 8003996:	faa2 f38c 	sel	r3, r2, ip
 800399a:	b9e3      	cbnz	r3, 80039d6 <strlen+0x96>
 800399c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80039a0:	fa82 f24c 	uadd8	r2, r2, ip
 80039a4:	f100 0008 	add.w	r0, r0, #8
 80039a8:	faa4 f28c 	sel	r2, r4, ip
 80039ac:	fa83 f34c 	uadd8	r3, r3, ip
 80039b0:	faa2 f38c 	sel	r3, r2, ip
 80039b4:	b97b      	cbnz	r3, 80039d6 <strlen+0x96>
 80039b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80039ba:	f101 0120 	add.w	r1, r1, #32
 80039be:	fa82 f24c 	uadd8	r2, r2, ip
 80039c2:	f100 0008 	add.w	r0, r0, #8
 80039c6:	faa4 f28c 	sel	r2, r4, ip
 80039ca:	fa83 f34c 	uadd8	r3, r3, ip
 80039ce:	faa2 f38c 	sel	r3, r2, ip
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0c6      	beq.n	8003964 <strlen+0x24>
 80039d6:	2a00      	cmp	r2, #0
 80039d8:	bf04      	itt	eq
 80039da:	3004      	addeq	r0, #4
 80039dc:	461a      	moveq	r2, r3
 80039de:	ba12      	rev	r2, r2
 80039e0:	fab2 f282 	clz	r2, r2
 80039e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80039e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80039ec:	4770      	bx	lr
 80039ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80039f2:	f004 0503 	and.w	r5, r4, #3
 80039f6:	f1c4 0000 	rsb	r0, r4, #0
 80039fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80039fe:	f014 0f04 	tst.w	r4, #4
 8003a02:	f891 f040 	pld	[r1, #64]	; 0x40
 8003a06:	fa0c f505 	lsl.w	r5, ip, r5
 8003a0a:	ea62 0205 	orn	r2, r2, r5
 8003a0e:	bf1c      	itt	ne
 8003a10:	ea63 0305 	ornne	r3, r3, r5
 8003a14:	4662      	movne	r2, ip
 8003a16:	f04f 0400 	mov.w	r4, #0
 8003a1a:	e7a9      	b.n	8003970 <strlen+0x30>

08003a1c <_svfprintf_r>:
 8003a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a20:	b0d5      	sub	sp, #340	; 0x154
 8003a22:	460c      	mov	r4, r1
 8003a24:	910c      	str	r1, [sp, #48]	; 0x30
 8003a26:	4691      	mov	r9, r2
 8003a28:	930e      	str	r3, [sp, #56]	; 0x38
 8003a2a:	900a      	str	r0, [sp, #40]	; 0x28
 8003a2c:	f002 fe62 	bl	80066f4 <_localeconv_r>
 8003a30:	6803      	ldr	r3, [r0, #0]
 8003a32:	9317      	str	r3, [sp, #92]	; 0x5c
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff ff83 	bl	8003940 <strlen>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	9016      	str	r0, [sp, #88]	; 0x58
 8003a3e:	0619      	lsls	r1, r3, #24
 8003a40:	d503      	bpl.n	8003a4a <_svfprintf_r+0x2e>
 8003a42:	6923      	ldr	r3, [r4, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 878b 	beq.w	8004960 <_svfprintf_r+0xf44>
 8003a4a:	2400      	movs	r4, #0
 8003a4c:	ab2b      	add	r3, sp, #172	; 0xac
 8003a4e:	464d      	mov	r5, r9
 8003a50:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
 8003a54:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 8003a58:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 8003a5c:	9412      	str	r4, [sp, #72]	; 0x48
 8003a5e:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a60:	4698      	mov	r8, r3
 8003a62:	9418      	str	r4, [sp, #96]	; 0x60
 8003a64:	2300      	movs	r3, #0
 8003a66:	9408      	str	r4, [sp, #32]
 8003a68:	2400      	movs	r4, #0
 8003a6a:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8003a6e:	782b      	ldrb	r3, [r5, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 81dd 	beq.w	8003e30 <_svfprintf_r+0x414>
 8003a76:	46aa      	mov	sl, r5
 8003a78:	e004      	b.n	8003a84 <_svfprintf_r+0x68>
 8003a7a:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8116 	beq.w	8003cb0 <_svfprintf_r+0x294>
 8003a84:	2b25      	cmp	r3, #37	; 0x25
 8003a86:	d1f8      	bne.n	8003a7a <_svfprintf_r+0x5e>
 8003a88:	ebba 0605 	subs.w	r6, sl, r5
 8003a8c:	f040 8114 	bne.w	8003cb8 <_svfprintf_r+0x29c>
 8003a90:	f89a 3000 	ldrb.w	r3, [sl]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 81cb 	beq.w	8003e30 <_svfprintf_r+0x414>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003aa0:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8003aa4:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 8003aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aaa:	f10a 0a01 	add.w	sl, sl, #1
 8003aae:	9207      	str	r2, [sp, #28]
 8003ab0:	461f      	mov	r7, r3
 8003ab2:	242b      	movs	r4, #43	; 0x2b
 8003ab4:	f04f 0920 	mov.w	r9, #32
 8003ab8:	f10a 0a01 	add.w	sl, sl, #1
 8003abc:	f1a6 0320 	sub.w	r3, r6, #32
 8003ac0:	2b5a      	cmp	r3, #90	; 0x5a
 8003ac2:	f200 812d 	bhi.w	8003d20 <_svfprintf_r+0x304>
 8003ac6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003aca:	02ba      	.short	0x02ba
 8003acc:	012b012b 	.word	0x012b012b
 8003ad0:	012b02b5 	.word	0x012b02b5
 8003ad4:	012b012b 	.word	0x012b012b
 8003ad8:	012b006a 	.word	0x012b006a
 8003adc:	024f012b 	.word	0x024f012b
 8003ae0:	012b02e3 	.word	0x012b02e3
 8003ae4:	02c9025a 	.word	0x02c9025a
 8003ae8:	02c4012b 	.word	0x02c4012b
 8003aec:	005b005b 	.word	0x005b005b
 8003af0:	005b005b 	.word	0x005b005b
 8003af4:	005b005b 	.word	0x005b005b
 8003af8:	005b005b 	.word	0x005b005b
 8003afc:	012b005b 	.word	0x012b005b
 8003b00:	012b012b 	.word	0x012b012b
 8003b04:	012b012b 	.word	0x012b012b
 8003b08:	012b012b 	.word	0x012b012b
 8003b0c:	012b01bf 	.word	0x012b01bf
 8003b10:	0086021a 	.word	0x0086021a
 8003b14:	01bf01bf 	.word	0x01bf01bf
 8003b18:	012b01bf 	.word	0x012b01bf
 8003b1c:	012b012b 	.word	0x012b012b
 8003b20:	02b0012b 	.word	0x02b0012b
 8003b24:	012b012b 	.word	0x012b012b
 8003b28:	012b00c3 	.word	0x012b00c3
 8003b2c:	012b012b 	.word	0x012b012b
 8003b30:	012b0224 	.word	0x012b0224
 8003b34:	012b025f 	.word	0x012b025f
 8003b38:	073c012b 	.word	0x073c012b
 8003b3c:	012b012b 	.word	0x012b012b
 8003b40:	012b012b 	.word	0x012b012b
 8003b44:	012b012b 	.word	0x012b012b
 8003b48:	012b012b 	.word	0x012b012b
 8003b4c:	012b01bf 	.word	0x012b01bf
 8003b50:	0088021a 	.word	0x0088021a
 8003b54:	01bf01bf 	.word	0x01bf01bf
 8003b58:	02a301bf 	.word	0x02a301bf
 8003b5c:	00810088 	.word	0x00810088
 8003b60:	0296012b 	.word	0x0296012b
 8003b64:	0282012b 	.word	0x0282012b
 8003b68:	027000c5 	.word	0x027000c5
 8003b6c:	012b0081 	.word	0x012b0081
 8003b70:	007e0224 	.word	0x007e0224
 8003b74:	012b0739 	.word	0x012b0739
 8003b78:	0719012b 	.word	0x0719012b
 8003b7c:	007e012b 	.word	0x007e012b
 8003b80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003b84:	2200      	movs	r2, #0
 8003b86:	f81a 6b01 	ldrb.w	r6, [sl], #1
 8003b8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003b8e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8003b92:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8003b96:	2b09      	cmp	r3, #9
 8003b98:	d9f5      	bls.n	8003b86 <_svfprintf_r+0x16a>
 8003b9a:	9209      	str	r2, [sp, #36]	; 0x24
 8003b9c:	e78e      	b.n	8003abc <_svfprintf_r+0xa0>
 8003b9e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003ba2:	4658      	mov	r0, fp
 8003ba4:	f002 fda6 	bl	80066f4 <_localeconv_r>
 8003ba8:	6843      	ldr	r3, [r0, #4]
 8003baa:	931b      	str	r3, [sp, #108]	; 0x6c
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fec7 	bl	8003940 <strlen>
 8003bb2:	901c      	str	r0, [sp, #112]	; 0x70
 8003bb4:	4606      	mov	r6, r0
 8003bb6:	4658      	mov	r0, fp
 8003bb8:	f002 fd9c 	bl	80066f4 <_localeconv_r>
 8003bbc:	6883      	ldr	r3, [r0, #8]
 8003bbe:	9319      	str	r3, [sp, #100]	; 0x64
 8003bc0:	2e00      	cmp	r6, #0
 8003bc2:	f040 867a 	bne.w	80048ba <_svfprintf_r+0xe9e>
 8003bc6:	f89a 6000 	ldrb.w	r6, [sl]
 8003bca:	e775      	b.n	8003ab8 <_svfprintf_r+0x9c>
 8003bcc:	f89a 6000 	ldrb.w	r6, [sl]
 8003bd0:	f047 0720 	orr.w	r7, r7, #32
 8003bd4:	e770      	b.n	8003ab8 <_svfprintf_r+0x9c>
 8003bd6:	f047 0710 	orr.w	r7, r7, #16
 8003bda:	06ba      	lsls	r2, r7, #26
 8003bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bde:	f140 8180 	bpl.w	8003ee2 <_svfprintf_r+0x4c6>
 8003be2:	3307      	adds	r3, #7
 8003be4:	f023 0307 	bic.w	r3, r3, #7
 8003be8:	461a      	mov	r2, r3
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f852 4b08 	ldr.w	r4, [r2], #8
 8003bf0:	920e      	str	r2, [sp, #56]	; 0x38
 8003bf2:	4699      	mov	r9, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f2c0 855f 	blt.w	80046b8 <_svfprintf_r+0xc9c>
 8003bfa:	9b07      	ldr	r3, [sp, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f001 801f 	beq.w	8004c40 <_svfprintf_r+0x1224>
 8003c02:	ea54 0309 	orrs.w	r3, r4, r9
 8003c06:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
 8003c0a:	f000 84e3 	beq.w	80045d4 <_svfprintf_r+0xbb8>
 8003c0e:	2c0a      	cmp	r4, #10
 8003c10:	f179 0300 	sbcs.w	r3, r9, #0
 8003c14:	f080 8781 	bcs.w	8004b1a <_svfprintf_r+0x10fe>
 8003c18:	3430      	adds	r4, #48	; 0x30
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
 8003c20:	465f      	mov	r7, fp
 8003c22:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c24:	f20d 154f 	addw	r5, sp, #335	; 0x14f
 8003c28:	9907      	ldr	r1, [sp, #28]
 8003c2a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003c2c:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8003c30:	4281      	cmp	r1, r0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	bfb8      	it	lt
 8003c38:	4601      	movlt	r1, r0
 8003c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8003c3c:	9106      	str	r1, [sp, #24]
 8003c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c40:	9313      	str	r3, [sp, #76]	; 0x4c
 8003c42:	9310      	str	r3, [sp, #64]	; 0x40
 8003c44:	2a00      	cmp	r2, #0
 8003c46:	d07c      	beq.n	8003d42 <_svfprintf_r+0x326>
 8003c48:	9b06      	ldr	r3, [sp, #24]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	9306      	str	r3, [sp, #24]
 8003c4e:	e078      	b.n	8003d42 <_svfprintf_r+0x326>
 8003c50:	f047 0710 	orr.w	r7, r7, #16
 8003c54:	f017 0920 	ands.w	r9, r7, #32
 8003c58:	f000 8134 	beq.w	8003ec4 <_svfprintf_r+0x4a8>
 8003c5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c5e:	3307      	adds	r3, #7
 8003c60:	f023 0307 	bic.w	r3, r3, #7
 8003c64:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8003c68:	f853 4b08 	ldr.w	r4, [r3], #8
 8003c6c:	930e      	str	r3, [sp, #56]	; 0x38
 8003c6e:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
 8003c72:	2300      	movs	r3, #0
 8003c74:	2200      	movs	r2, #0
 8003c76:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8003c7a:	9a07      	ldr	r2, [sp, #28]
 8003c7c:	1c51      	adds	r1, r2, #1
 8003c7e:	f000 820d 	beq.w	800409c <_svfprintf_r+0x680>
 8003c82:	ea54 0109 	orrs.w	r1, r4, r9
 8003c86:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 8003c8a:	f040 8206 	bne.w	800409a <_svfprintf_r+0x67e>
 8003c8e:	2a00      	cmp	r2, #0
 8003c90:	f041 8010 	bne.w	8004cb4 <_svfprintf_r+0x1298>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f040 84a2 	bne.w	80045de <_svfprintf_r+0xbc2>
 8003c9a:	f01b 0301 	ands.w	r3, fp, #1
 8003c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ca0:	f000 8537 	beq.w	8004712 <_svfprintf_r+0xcf6>
 8003ca4:	2330      	movs	r3, #48	; 0x30
 8003ca6:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
 8003caa:	f20d 154f 	addw	r5, sp, #335	; 0x14f
 8003cae:	e7bb      	b.n	8003c28 <_svfprintf_r+0x20c>
 8003cb0:	ebba 0605 	subs.w	r6, sl, r5
 8003cb4:	f000 80bc 	beq.w	8003e30 <_svfprintf_r+0x414>
 8003cb8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003cba:	4433      	add	r3, r6
 8003cbc:	932a      	str	r3, [sp, #168]	; 0xa8
 8003cbe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	2b07      	cmp	r3, #7
 8003cc4:	e9c8 5600 	strd	r5, r6, [r8]
 8003cc8:	9329      	str	r3, [sp, #164]	; 0xa4
 8003cca:	dc05      	bgt.n	8003cd8 <_svfprintf_r+0x2bc>
 8003ccc:	f108 0808 	add.w	r8, r8, #8
 8003cd0:	9b08      	ldr	r3, [sp, #32]
 8003cd2:	4433      	add	r3, r6
 8003cd4:	9308      	str	r3, [sp, #32]
 8003cd6:	e6db      	b.n	8003a90 <_svfprintf_r+0x74>
 8003cd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003cdc:	aa28      	add	r2, sp, #160	; 0xa0
 8003cde:	f003 fc1d 	bl	800751c <__ssprint_r>
 8003ce2:	b980      	cbnz	r0, 8003d06 <_svfprintf_r+0x2ea>
 8003ce4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8003ce8:	e7f2      	b.n	8003cd0 <_svfprintf_r+0x2b4>
 8003cea:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003cee:	aa28      	add	r2, sp, #160	; 0xa0
 8003cf0:	f003 fc14 	bl	800751c <__ssprint_r>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	f000 808c 	beq.w	8003e12 <_svfprintf_r+0x3f6>
 8003cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cfc:	b11b      	cbz	r3, 8003d06 <_svfprintf_r+0x2ea>
 8003cfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003d00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d02:	f002 fbef 	bl	80064e4 <_free_r>
 8003d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d08:	899b      	ldrh	r3, [r3, #12]
 8003d0a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003d0e:	9b08      	ldr	r3, [sp, #32]
 8003d10:	bf18      	it	ne
 8003d12:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8003d16:	9308      	str	r3, [sp, #32]
 8003d18:	9808      	ldr	r0, [sp, #32]
 8003d1a:	b055      	add	sp, #340	; 0x154
 8003d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d20:	2e00      	cmp	r6, #0
 8003d22:	f000 8085 	beq.w	8003e30 <_svfprintf_r+0x414>
 8003d26:	2200      	movs	r2, #0
 8003d28:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
 8003d2c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8003d30:	2301      	movs	r3, #1
 8003d32:	9306      	str	r3, [sp, #24]
 8003d34:	920d      	str	r2, [sp, #52]	; 0x34
 8003d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d38:	9207      	str	r2, [sp, #28]
 8003d3a:	920f      	str	r2, [sp, #60]	; 0x3c
 8003d3c:	9213      	str	r2, [sp, #76]	; 0x4c
 8003d3e:	9210      	str	r2, [sp, #64]	; 0x40
 8003d40:	ad3b      	add	r5, sp, #236	; 0xec
 8003d42:	f017 0302 	ands.w	r3, r7, #2
 8003d46:	d002      	beq.n	8003d4e <_svfprintf_r+0x332>
 8003d48:	9906      	ldr	r1, [sp, #24]
 8003d4a:	3102      	adds	r1, #2
 8003d4c:	9106      	str	r1, [sp, #24]
 8003d4e:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
 8003d52:	d107      	bne.n	8003d64 <_svfprintf_r+0x348>
 8003d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d56:	9806      	ldr	r0, [sp, #24]
 8003d58:	eba1 0900 	sub.w	r9, r1, r0
 8003d5c:	f1b9 0f00 	cmp.w	r9, #0
 8003d60:	f300 8315 	bgt.w	800438e <_svfprintf_r+0x972>
 8003d64:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8003d66:	b18a      	cbz	r2, 8003d8c <_svfprintf_r+0x370>
 8003d68:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8003d6a:	f10d 0183 	add.w	r1, sp, #131	; 0x83
 8003d6e:	3201      	adds	r2, #1
 8003d70:	3401      	adds	r4, #1
 8003d72:	f8c8 1000 	str.w	r1, [r8]
 8003d76:	2a07      	cmp	r2, #7
 8003d78:	f04f 0101 	mov.w	r1, #1
 8003d7c:	942a      	str	r4, [sp, #168]	; 0xa8
 8003d7e:	9229      	str	r2, [sp, #164]	; 0xa4
 8003d80:	f8c8 1004 	str.w	r1, [r8, #4]
 8003d84:	f300 8346 	bgt.w	8004414 <_svfprintf_r+0x9f8>
 8003d88:	f108 0808 	add.w	r8, r8, #8
 8003d8c:	b183      	cbz	r3, 8003db0 <_svfprintf_r+0x394>
 8003d8e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003d90:	aa21      	add	r2, sp, #132	; 0x84
 8003d92:	3301      	adds	r3, #1
 8003d94:	3402      	adds	r4, #2
 8003d96:	f8c8 2000 	str.w	r2, [r8]
 8003d9a:	2b07      	cmp	r3, #7
 8003d9c:	f04f 0202 	mov.w	r2, #2
 8003da0:	942a      	str	r4, [sp, #168]	; 0xa8
 8003da2:	9329      	str	r3, [sp, #164]	; 0xa4
 8003da4:	f8c8 2004 	str.w	r2, [r8, #4]
 8003da8:	f300 8348 	bgt.w	800443c <_svfprintf_r+0xa20>
 8003dac:	f108 0808 	add.w	r8, r8, #8
 8003db0:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 8003db4:	f000 820e 	beq.w	80041d4 <_svfprintf_r+0x7b8>
 8003db8:	9b07      	ldr	r3, [sp, #28]
 8003dba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003dbc:	eba3 0b02 	sub.w	fp, r3, r2
 8003dc0:	f1bb 0f00 	cmp.w	fp, #0
 8003dc4:	f300 824f 	bgt.w	8004266 <_svfprintf_r+0x84a>
 8003dc8:	05fb      	lsls	r3, r7, #23
 8003dca:	f100 81a5 	bmi.w	8004118 <_svfprintf_r+0x6fc>
 8003dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dd0:	f8c8 3004 	str.w	r3, [r8, #4]
 8003dd4:	441c      	add	r4, r3
 8003dd6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003dd8:	f8c8 5000 	str.w	r5, [r8]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	2b07      	cmp	r3, #7
 8003de0:	942a      	str	r4, [sp, #168]	; 0xa8
 8003de2:	9329      	str	r3, [sp, #164]	; 0xa4
 8003de4:	f300 82c7 	bgt.w	8004376 <_svfprintf_r+0x95a>
 8003de8:	f108 0808 	add.w	r8, r8, #8
 8003dec:	077b      	lsls	r3, r7, #29
 8003dee:	d505      	bpl.n	8003dfc <_svfprintf_r+0x3e0>
 8003df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003df2:	9a06      	ldr	r2, [sp, #24]
 8003df4:	1a9d      	subs	r5, r3, r2
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	f300 832c 	bgt.w	8004454 <_svfprintf_r+0xa38>
 8003dfc:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8003e00:	9906      	ldr	r1, [sp, #24]
 8003e02:	428a      	cmp	r2, r1
 8003e04:	bfac      	ite	ge
 8003e06:	189b      	addge	r3, r3, r2
 8003e08:	185b      	addlt	r3, r3, r1
 8003e0a:	9308      	str	r3, [sp, #32]
 8003e0c:	2c00      	cmp	r4, #0
 8003e0e:	f47f af6c 	bne.w	8003cea <_svfprintf_r+0x2ce>
 8003e12:	2300      	movs	r3, #0
 8003e14:	9329      	str	r3, [sp, #164]	; 0xa4
 8003e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e18:	b11b      	cbz	r3, 8003e22 <_svfprintf_r+0x406>
 8003e1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003e1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e1e:	f002 fb61 	bl	80064e4 <_free_r>
 8003e22:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8003e26:	4655      	mov	r5, sl
 8003e28:	782b      	ldrb	r3, [r5, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f47f ae23 	bne.w	8003a76 <_svfprintf_r+0x5a>
 8003e30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f43f af67 	beq.w	8003d06 <_svfprintf_r+0x2ea>
 8003e38:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003e3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003e3c:	aa28      	add	r2, sp, #160	; 0xa0
 8003e3e:	4621      	mov	r1, r4
 8003e40:	f003 fb6c 	bl	800751c <__ssprint_r>
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	e760      	b.n	8003d0a <_svfprintf_r+0x2ee>
 8003e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e4a:	3307      	adds	r3, #7
 8003e4c:	f023 0207 	bic.w	r2, r3, #7
 8003e50:	e8f2 3402 	ldrd	r3, r4, [r2], #8
 8003e54:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8003e58:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 8003e5c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003e60:	920e      	str	r2, [sp, #56]	; 0x38
 8003e62:	4699      	mov	r9, r3
 8003e64:	4618      	mov	r0, r3
 8003e66:	4621      	mov	r1, r4
 8003e68:	4ba7      	ldr	r3, [pc, #668]	; (8004108 <_svfprintf_r+0x6ec>)
 8003e6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e6e:	f007 fca5 	bl	800b7bc <__aeabi_dcmpun>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	f040 8462 	bne.w	800473c <_svfprintf_r+0xd20>
 8003e78:	4ba3      	ldr	r3, [pc, #652]	; (8004108 <_svfprintf_r+0x6ec>)
 8003e7a:	4648      	mov	r0, r9
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e82:	f007 fc7d 	bl	800b780 <__aeabi_dcmple>
 8003e86:	2800      	cmp	r0, #0
 8003e88:	f040 8458 	bne.w	800473c <_svfprintf_r+0xd20>
 8003e8c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8003e90:	2200      	movs	r2, #0
 8003e92:	2300      	movs	r3, #0
 8003e94:	f007 fc6a 	bl	800b76c <__aeabi_dcmplt>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	f040 87ad 	bne.w	8004df8 <_svfprintf_r+0x13dc>
 8003e9e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8003ea2:	4d9a      	ldr	r5, [pc, #616]	; (800410c <_svfprintf_r+0x6f0>)
 8003ea4:	4b9a      	ldr	r3, [pc, #616]	; (8004110 <_svfprintf_r+0x6f4>)
 8003ea6:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8003eaa:	2103      	movs	r1, #3
 8003eac:	2e47      	cmp	r6, #71	; 0x47
 8003eae:	bfc8      	it	gt
 8003eb0:	461d      	movgt	r5, r3
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	930d      	str	r3, [sp, #52]	; 0x34
 8003eb6:	9106      	str	r1, [sp, #24]
 8003eb8:	910b      	str	r1, [sp, #44]	; 0x2c
 8003eba:	9307      	str	r3, [sp, #28]
 8003ebc:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ebe:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ec0:	9310      	str	r3, [sp, #64]	; 0x40
 8003ec2:	e6bf      	b.n	8003c44 <_svfprintf_r+0x228>
 8003ec4:	f017 0310 	ands.w	r3, r7, #16
 8003ec8:	f040 842e 	bne.w	8004728 <_svfprintf_r+0xd0c>
 8003ecc:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 8003ed0:	f000 8754 	beq.w	8004d7c <_svfprintf_r+0x1360>
 8003ed4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ed6:	f852 4b04 	ldr.w	r4, [r2], #4
 8003eda:	920e      	str	r2, [sp, #56]	; 0x38
 8003edc:	4699      	mov	r9, r3
 8003ede:	b2a4      	uxth	r4, r4
 8003ee0:	e6c5      	b.n	8003c6e <_svfprintf_r+0x252>
 8003ee2:	f853 4b04 	ldr.w	r4, [r3], #4
 8003ee6:	930e      	str	r3, [sp, #56]	; 0x38
 8003ee8:	06fb      	lsls	r3, r7, #27
 8003eea:	f100 8418 	bmi.w	800471e <_svfprintf_r+0xd02>
 8003eee:	067d      	lsls	r5, r7, #25
 8003ef0:	f140 8412 	bpl.w	8004718 <_svfprintf_r+0xcfc>
 8003ef4:	f344 39c0 	sbfx	r9, r4, #15, #1
 8003ef8:	464b      	mov	r3, r9
 8003efa:	b224      	sxth	r4, r4
 8003efc:	e67a      	b.n	8003bf4 <_svfprintf_r+0x1d8>
 8003efe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f00:	2200      	movs	r2, #0
 8003f02:	f853 1b04 	ldr.w	r1, [r3], #4
 8003f06:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8003f0a:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
 8003f0e:	930e      	str	r3, [sp, #56]	; 0x38
 8003f10:	e70e      	b.n	8003d30 <_svfprintf_r+0x314>
 8003f12:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003f14:	9b07      	ldr	r3, [sp, #28]
 8003f16:	f854 5b04 	ldr.w	r5, [r4], #4
 8003f1a:	f04f 0900 	mov.w	r9, #0
 8003f1e:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
 8003f22:	2d00      	cmp	r5, #0
 8003f24:	f000 86d5 	beq.w	8004cd2 <_svfprintf_r+0x12b6>
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	f000 8552 	beq.w	80049d2 <_svfprintf_r+0xfb6>
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4649      	mov	r1, r9
 8003f32:	4628      	mov	r0, r5
 8003f34:	f002 fbfc 	bl	8006730 <memchr>
 8003f38:	900d      	str	r0, [sp, #52]	; 0x34
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	f001 8057 	beq.w	8004fee <_svfprintf_r+0x15d2>
 8003f40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f42:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f46:	1b5b      	subs	r3, r3, r5
 8003f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f4a:	940e      	str	r4, [sp, #56]	; 0x38
 8003f4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003f50:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8003f54:	9306      	str	r3, [sp, #24]
 8003f56:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8003f5a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8003f5e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003f62:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8003f66:	e66d      	b.n	8003c44 <_svfprintf_r+0x228>
 8003f68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	f280 83c9 	bge.w	8004708 <_svfprintf_r+0xcec>
 8003f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f78:	930e      	str	r3, [sp, #56]	; 0x38
 8003f7a:	4252      	negs	r2, r2
 8003f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8003f7e:	f89a 6000 	ldrb.w	r6, [sl]
 8003f82:	f047 0704 	orr.w	r7, r7, #4
 8003f86:	e597      	b.n	8003ab8 <_svfprintf_r+0x9c>
 8003f88:	f047 0b10 	orr.w	fp, r7, #16
 8003f8c:	f01b 0920 	ands.w	r9, fp, #32
 8003f90:	f000 8381 	beq.w	8004696 <_svfprintf_r+0xc7a>
 8003f94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f96:	3307      	adds	r3, #7
 8003f98:	f023 0307 	bic.w	r3, r3, #7
 8003f9c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8003fa0:	f853 4b08 	ldr.w	r4, [r3], #8
 8003fa4:	930e      	str	r3, [sp, #56]	; 0x38
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e664      	b.n	8003c74 <_svfprintf_r+0x258>
 8003faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fac:	f853 4b04 	ldr.w	r4, [r3], #4
 8003fb0:	930e      	str	r3, [sp, #56]	; 0x38
 8003fb2:	2330      	movs	r3, #48	; 0x30
 8003fb4:	2678      	movs	r6, #120	; 0x78
 8003fb6:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8003fba:	4b56      	ldr	r3, [pc, #344]	; (8004114 <_svfprintf_r+0x6f8>)
 8003fbc:	9318      	str	r3, [sp, #96]	; 0x60
 8003fbe:	f047 0b02 	orr.w	fp, r7, #2
 8003fc2:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
 8003fc6:	f04f 0900 	mov.w	r9, #0
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e652      	b.n	8003c74 <_svfprintf_r+0x258>
 8003fce:	06bd      	lsls	r5, r7, #26
 8003fd0:	f100 8482 	bmi.w	80048d8 <_svfprintf_r+0xebc>
 8003fd4:	06fc      	lsls	r4, r7, #27
 8003fd6:	f100 8673 	bmi.w	8004cc0 <_svfprintf_r+0x12a4>
 8003fda:	0678      	lsls	r0, r7, #25
 8003fdc:	f100 873c 	bmi.w	8004e58 <_svfprintf_r+0x143c>
 8003fe0:	05b9      	lsls	r1, r7, #22
 8003fe2:	f140 866d 	bpl.w	8004cc0 <_svfprintf_r+0x12a4>
 8003fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fe8:	9908      	ldr	r1, [sp, #32]
 8003fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fee:	930e      	str	r3, [sp, #56]	; 0x38
 8003ff0:	7011      	strb	r1, [r2, #0]
 8003ff2:	4655      	mov	r5, sl
 8003ff4:	e718      	b.n	8003e28 <_svfprintf_r+0x40c>
 8003ff6:	f89a 6000 	ldrb.w	r6, [sl]
 8003ffa:	2e6c      	cmp	r6, #108	; 0x6c
 8003ffc:	bf03      	ittte	eq
 8003ffe:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
 8004002:	f047 0720 	orreq.w	r7, r7, #32
 8004006:	f10a 0a01 	addeq.w	sl, sl, #1
 800400a:	f047 0710 	orrne.w	r7, r7, #16
 800400e:	e553      	b.n	8003ab8 <_svfprintf_r+0x9c>
 8004010:	f89a 6000 	ldrb.w	r6, [sl]
 8004014:	2e68      	cmp	r6, #104	; 0x68
 8004016:	bf03      	ittte	eq
 8004018:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
 800401c:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
 8004020:	f10a 0a01 	addeq.w	sl, sl, #1
 8004024:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
 8004028:	e546      	b.n	8003ab8 <_svfprintf_r+0x9c>
 800402a:	f89a 6000 	ldrb.w	r6, [sl]
 800402e:	f047 0708 	orr.w	r7, r7, #8
 8004032:	e541      	b.n	8003ab8 <_svfprintf_r+0x9c>
 8004034:	f89a 6000 	ldrb.w	r6, [sl]
 8004038:	f047 0701 	orr.w	r7, r7, #1
 800403c:	e53c      	b.n	8003ab8 <_svfprintf_r+0x9c>
 800403e:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8004042:	2b00      	cmp	r3, #0
 8004044:	f47f adbf 	bne.w	8003bc6 <_svfprintf_r+0x1aa>
 8004048:	f89a 6000 	ldrb.w	r6, [sl]
 800404c:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
 8004050:	e532      	b.n	8003ab8 <_svfprintf_r+0x9c>
 8004052:	f89a 6000 	ldrb.w	r6, [sl]
 8004056:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 800405a:	e52d      	b.n	8003ab8 <_svfprintf_r+0x9c>
 800405c:	4652      	mov	r2, sl
 800405e:	f812 6b01 	ldrb.w	r6, [r2], #1
 8004062:	2e2a      	cmp	r6, #42	; 0x2a
 8004064:	f001 81cd 	beq.w	8005402 <_svfprintf_r+0x19e6>
 8004068:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800406c:	2b09      	cmp	r3, #9
 800406e:	4692      	mov	sl, r2
 8004070:	bf98      	it	ls
 8004072:	2200      	movls	r2, #0
 8004074:	f201 8088 	bhi.w	8005188 <_svfprintf_r+0x176c>
 8004078:	f81a 6b01 	ldrb.w	r6, [sl], #1
 800407c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004080:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004084:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004088:	2b09      	cmp	r3, #9
 800408a:	d9f5      	bls.n	8004078 <_svfprintf_r+0x65c>
 800408c:	9207      	str	r2, [sp, #28]
 800408e:	e515      	b.n	8003abc <_svfprintf_r+0xa0>
 8004090:	f89a 6000 	ldrb.w	r6, [sl]
 8004094:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
 8004098:	e50e      	b.n	8003ab8 <_svfprintf_r+0x9c>
 800409a:	46bb      	mov	fp, r7
 800409c:	2b01      	cmp	r3, #1
 800409e:	f43f adb6 	beq.w	8003c0e <_svfprintf_r+0x1f2>
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	ad54      	add	r5, sp, #336	; 0x150
 80040a6:	d112      	bne.n	80040ce <_svfprintf_r+0x6b2>
 80040a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80040aa:	f004 030f 	and.w	r3, r4, #15
 80040ae:	0924      	lsrs	r4, r4, #4
 80040b0:	5cd3      	ldrb	r3, [r2, r3]
 80040b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040b6:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
 80040ba:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80040be:	ea54 0309 	orrs.w	r3, r4, r9
 80040c2:	d1f2      	bne.n	80040aa <_svfprintf_r+0x68e>
 80040c4:	ab54      	add	r3, sp, #336	; 0x150
 80040c6:	1b5b      	subs	r3, r3, r5
 80040c8:	465f      	mov	r7, fp
 80040ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80040cc:	e5ac      	b.n	8003c28 <_svfprintf_r+0x20c>
 80040ce:	f004 0307 	and.w	r3, r4, #7
 80040d2:	08e4      	lsrs	r4, r4, #3
 80040d4:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
 80040d8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 80040dc:	3330      	adds	r3, #48	; 0x30
 80040de:	ea54 0109 	orrs.w	r1, r4, r9
 80040e2:	462a      	mov	r2, r5
 80040e4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040e8:	d1f1      	bne.n	80040ce <_svfprintf_r+0x6b2>
 80040ea:	f01b 0f01 	tst.w	fp, #1
 80040ee:	d0e9      	beq.n	80040c4 <_svfprintf_r+0x6a8>
 80040f0:	2b30      	cmp	r3, #48	; 0x30
 80040f2:	d0e7      	beq.n	80040c4 <_svfprintf_r+0x6a8>
 80040f4:	2330      	movs	r3, #48	; 0x30
 80040f6:	3a02      	subs	r2, #2
 80040f8:	f805 3c01 	strb.w	r3, [r5, #-1]
 80040fc:	ab54      	add	r3, sp, #336	; 0x150
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	465f      	mov	r7, fp
 8004102:	930b      	str	r3, [sp, #44]	; 0x2c
 8004104:	4615      	mov	r5, r2
 8004106:	e58f      	b.n	8003c28 <_svfprintf_r+0x20c>
 8004108:	7fefffff 	.word	0x7fefffff
 800410c:	0800bdc8 	.word	0x0800bdc8
 8004110:	0800bdcc 	.word	0x0800bdcc
 8004114:	0800bdd8 	.word	0x0800bdd8
 8004118:	2e65      	cmp	r6, #101	; 0x65
 800411a:	f340 80e6 	ble.w	80042ea <_svfprintf_r+0x8ce>
 800411e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004122:	2200      	movs	r2, #0
 8004124:	2300      	movs	r3, #0
 8004126:	f007 fb17 	bl	800b758 <__aeabi_dcmpeq>
 800412a:	2800      	cmp	r0, #0
 800412c:	f000 81cd 	beq.w	80044ca <_svfprintf_r+0xaae>
 8004130:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004132:	4abf      	ldr	r2, [pc, #764]	; (8004430 <_svfprintf_r+0xa14>)
 8004134:	f8c8 2000 	str.w	r2, [r8]
 8004138:	3301      	adds	r3, #1
 800413a:	3401      	adds	r4, #1
 800413c:	2201      	movs	r2, #1
 800413e:	2b07      	cmp	r3, #7
 8004140:	942a      	str	r4, [sp, #168]	; 0xa8
 8004142:	9329      	str	r3, [sp, #164]	; 0xa4
 8004144:	f8c8 2004 	str.w	r2, [r8, #4]
 8004148:	f300 857d 	bgt.w	8004c46 <_svfprintf_r+0x122a>
 800414c:	f108 0808 	add.w	r8, r8, #8
 8004150:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004152:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004154:	4293      	cmp	r3, r2
 8004156:	f280 82d3 	bge.w	8004700 <_svfprintf_r+0xce4>
 800415a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800415c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800415e:	441c      	add	r4, r3
 8004160:	e9c8 2300 	strd	r2, r3, [r8]
 8004164:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004166:	942a      	str	r4, [sp, #168]	; 0xa8
 8004168:	3301      	adds	r3, #1
 800416a:	2b07      	cmp	r3, #7
 800416c:	9329      	str	r3, [sp, #164]	; 0xa4
 800416e:	f300 83eb 	bgt.w	8004948 <_svfprintf_r+0xf2c>
 8004172:	f108 0808 	add.w	r8, r8, #8
 8004176:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004178:	1e5d      	subs	r5, r3, #1
 800417a:	2d00      	cmp	r5, #0
 800417c:	f77f ae36 	ble.w	8003dec <_svfprintf_r+0x3d0>
 8004180:	2d10      	cmp	r5, #16
 8004182:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004184:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8004434 <_svfprintf_r+0xa18>
 8004188:	f340 856e 	ble.w	8004c68 <_svfprintf_r+0x124c>
 800418c:	4649      	mov	r1, r9
 800418e:	4622      	mov	r2, r4
 8004190:	46b9      	mov	r9, r7
 8004192:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004196:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004198:	2610      	movs	r6, #16
 800419a:	460f      	mov	r7, r1
 800419c:	e005      	b.n	80041aa <_svfprintf_r+0x78e>
 800419e:	f108 0808 	add.w	r8, r8, #8
 80041a2:	3d10      	subs	r5, #16
 80041a4:	2d10      	cmp	r5, #16
 80041a6:	f340 855b 	ble.w	8004c60 <_svfprintf_r+0x1244>
 80041aa:	3301      	adds	r3, #1
 80041ac:	3210      	adds	r2, #16
 80041ae:	2b07      	cmp	r3, #7
 80041b0:	e9c8 7600 	strd	r7, r6, [r8]
 80041b4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80041b8:	ddf1      	ble.n	800419e <_svfprintf_r+0x782>
 80041ba:	aa28      	add	r2, sp, #160	; 0xa0
 80041bc:	4621      	mov	r1, r4
 80041be:	4658      	mov	r0, fp
 80041c0:	f003 f9ac 	bl	800751c <__ssprint_r>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	f47f ad98 	bne.w	8003cfa <_svfprintf_r+0x2de>
 80041ca:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80041ce:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80041d2:	e7e6      	b.n	80041a2 <_svfprintf_r+0x786>
 80041d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d6:	9a06      	ldr	r2, [sp, #24]
 80041d8:	eba3 0b02 	sub.w	fp, r3, r2
 80041dc:	f1bb 0f00 	cmp.w	fp, #0
 80041e0:	f77f adea 	ble.w	8003db8 <_svfprintf_r+0x39c>
 80041e4:	f1bb 0f10 	cmp.w	fp, #16
 80041e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80041ea:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8004434 <_svfprintf_r+0xa18>
 80041ee:	dd2c      	ble.n	800424a <_svfprintf_r+0x82e>
 80041f0:	961d      	str	r6, [sp, #116]	; 0x74
 80041f2:	4621      	mov	r1, r4
 80041f4:	464e      	mov	r6, r9
 80041f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80041f8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80041fc:	2310      	movs	r3, #16
 80041fe:	e006      	b.n	800420e <_svfprintf_r+0x7f2>
 8004200:	f1ab 0b10 	sub.w	fp, fp, #16
 8004204:	f1bb 0f10 	cmp.w	fp, #16
 8004208:	f108 0808 	add.w	r8, r8, #8
 800420c:	dd1a      	ble.n	8004244 <_svfprintf_r+0x828>
 800420e:	3201      	adds	r2, #1
 8004210:	3110      	adds	r1, #16
 8004212:	2a07      	cmp	r2, #7
 8004214:	e9c8 6300 	strd	r6, r3, [r8]
 8004218:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 800421c:	ddf0      	ble.n	8004200 <_svfprintf_r+0x7e4>
 800421e:	aa28      	add	r2, sp, #160	; 0xa0
 8004220:	4621      	mov	r1, r4
 8004222:	4648      	mov	r0, r9
 8004224:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004228:	f003 f978 	bl	800751c <__ssprint_r>
 800422c:	2800      	cmp	r0, #0
 800422e:	f47f ad64 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004232:	f1ab 0b10 	sub.w	fp, fp, #16
 8004236:	f1bb 0f10 	cmp.w	fp, #16
 800423a:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 800423e:	f04f 0310 	mov.w	r3, #16
 8004242:	dce4      	bgt.n	800420e <_svfprintf_r+0x7f2>
 8004244:	46b1      	mov	r9, r6
 8004246:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004248:	460c      	mov	r4, r1
 800424a:	3201      	adds	r2, #1
 800424c:	445c      	add	r4, fp
 800424e:	2a07      	cmp	r2, #7
 8004250:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
 8004254:	f8c8 9000 	str.w	r9, [r8]
 8004258:	f8c8 b004 	str.w	fp, [r8, #4]
 800425c:	f300 851d 	bgt.w	8004c9a <_svfprintf_r+0x127e>
 8004260:	f108 0808 	add.w	r8, r8, #8
 8004264:	e5a8      	b.n	8003db8 <_svfprintf_r+0x39c>
 8004266:	f1bb 0f10 	cmp.w	fp, #16
 800426a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800426c:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8004434 <_svfprintf_r+0xa18>
 8004270:	dd2d      	ble.n	80042ce <_svfprintf_r+0x8b2>
 8004272:	4641      	mov	r1, r8
 8004274:	4620      	mov	r0, r4
 8004276:	46a8      	mov	r8, r5
 8004278:	464c      	mov	r4, r9
 800427a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800427c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8004280:	2310      	movs	r3, #16
 8004282:	e006      	b.n	8004292 <_svfprintf_r+0x876>
 8004284:	f1ab 0b10 	sub.w	fp, fp, #16
 8004288:	f1bb 0f10 	cmp.w	fp, #16
 800428c:	f101 0108 	add.w	r1, r1, #8
 8004290:	dd19      	ble.n	80042c6 <_svfprintf_r+0x8aa>
 8004292:	3201      	adds	r2, #1
 8004294:	3010      	adds	r0, #16
 8004296:	2a07      	cmp	r2, #7
 8004298:	e9c1 4300 	strd	r4, r3, [r1]
 800429c:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
 80042a0:	ddf0      	ble.n	8004284 <_svfprintf_r+0x868>
 80042a2:	aa28      	add	r2, sp, #160	; 0xa0
 80042a4:	4629      	mov	r1, r5
 80042a6:	4648      	mov	r0, r9
 80042a8:	f003 f938 	bl	800751c <__ssprint_r>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f47f ad24 	bne.w	8003cfa <_svfprintf_r+0x2de>
 80042b2:	f1ab 0b10 	sub.w	fp, fp, #16
 80042b6:	f1bb 0f10 	cmp.w	fp, #16
 80042ba:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
 80042be:	a92b      	add	r1, sp, #172	; 0xac
 80042c0:	f04f 0310 	mov.w	r3, #16
 80042c4:	dce5      	bgt.n	8004292 <_svfprintf_r+0x876>
 80042c6:	4645      	mov	r5, r8
 80042c8:	46a1      	mov	r9, r4
 80042ca:	4688      	mov	r8, r1
 80042cc:	4604      	mov	r4, r0
 80042ce:	3201      	adds	r2, #1
 80042d0:	445c      	add	r4, fp
 80042d2:	2a07      	cmp	r2, #7
 80042d4:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
 80042d8:	f8c8 9000 	str.w	r9, [r8]
 80042dc:	f8c8 b004 	str.w	fp, [r8, #4]
 80042e0:	f300 81cc 	bgt.w	800467c <_svfprintf_r+0xc60>
 80042e4:	f108 0808 	add.w	r8, r8, #8
 80042e8:	e56e      	b.n	8003dc8 <_svfprintf_r+0x3ac>
 80042ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	f340 817c 	ble.w	80045ea <_svfprintf_r+0xbce>
 80042f2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80042f4:	f8c8 5000 	str.w	r5, [r8]
 80042f8:	3601      	adds	r6, #1
 80042fa:	3401      	adds	r4, #1
 80042fc:	2301      	movs	r3, #1
 80042fe:	2e07      	cmp	r6, #7
 8004300:	942a      	str	r4, [sp, #168]	; 0xa8
 8004302:	9629      	str	r6, [sp, #164]	; 0xa4
 8004304:	f8c8 3004 	str.w	r3, [r8, #4]
 8004308:	f300 81e0 	bgt.w	80046cc <_svfprintf_r+0xcb0>
 800430c:	f108 0808 	add.w	r8, r8, #8
 8004310:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004312:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004314:	3601      	adds	r6, #1
 8004316:	441c      	add	r4, r3
 8004318:	2e07      	cmp	r6, #7
 800431a:	e9c8 2300 	strd	r2, r3, [r8]
 800431e:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
 8004322:	f300 81e0 	bgt.w	80046e6 <_svfprintf_r+0xcca>
 8004326:	f108 0808 	add.w	r8, r8, #8
 800432a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800432e:	2200      	movs	r2, #0
 8004330:	2300      	movs	r3, #0
 8004332:	f007 fa11 	bl	800b758 <__aeabi_dcmpeq>
 8004336:	2800      	cmp	r0, #0
 8004338:	f040 8174 	bne.w	8004624 <_svfprintf_r+0xc08>
 800433c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800433e:	3601      	adds	r6, #1
 8004340:	3b01      	subs	r3, #1
 8004342:	3501      	adds	r5, #1
 8004344:	441c      	add	r4, r3
 8004346:	2e07      	cmp	r6, #7
 8004348:	f8c8 5000 	str.w	r5, [r8]
 800434c:	9629      	str	r6, [sp, #164]	; 0xa4
 800434e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004352:	942a      	str	r4, [sp, #168]	; 0xa8
 8004354:	f300 8159 	bgt.w	800460a <_svfprintf_r+0xbee>
 8004358:	f108 0808 	add.w	r8, r8, #8
 800435c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800435e:	f8c8 3004 	str.w	r3, [r8, #4]
 8004362:	3601      	adds	r6, #1
 8004364:	441c      	add	r4, r3
 8004366:	2e07      	cmp	r6, #7
 8004368:	ab24      	add	r3, sp, #144	; 0x90
 800436a:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
 800436e:	f8c8 3000 	str.w	r3, [r8]
 8004372:	f77f ad39 	ble.w	8003de8 <_svfprintf_r+0x3cc>
 8004376:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004378:	980a      	ldr	r0, [sp, #40]	; 0x28
 800437a:	aa28      	add	r2, sp, #160	; 0xa0
 800437c:	f003 f8ce 	bl	800751c <__ssprint_r>
 8004380:	2800      	cmp	r0, #0
 8004382:	f47f acba 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004386:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004388:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800438c:	e52e      	b.n	8003dec <_svfprintf_r+0x3d0>
 800438e:	f1b9 0f10 	cmp.w	r9, #16
 8004392:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 8004396:	dd2b      	ble.n	80043f0 <_svfprintf_r+0x9d4>
 8004398:	e9cd 3b1d 	strd	r3, fp, [sp, #116]	; 0x74
 800439c:	961f      	str	r6, [sp, #124]	; 0x7c
 800439e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80043a2:	464e      	mov	r6, r9
 80043a4:	2410      	movs	r4, #16
 80043a6:	46a9      	mov	r9, r5
 80043a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043aa:	e004      	b.n	80043b6 <_svfprintf_r+0x99a>
 80043ac:	3e10      	subs	r6, #16
 80043ae:	2e10      	cmp	r6, #16
 80043b0:	f108 0808 	add.w	r8, r8, #8
 80043b4:	dd17      	ble.n	80043e6 <_svfprintf_r+0x9ca>
 80043b6:	3201      	adds	r2, #1
 80043b8:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <_svfprintf_r+0xa1c>)
 80043ba:	3110      	adds	r1, #16
 80043bc:	2a07      	cmp	r2, #7
 80043be:	e9c8 3400 	strd	r3, r4, [r8]
 80043c2:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
 80043c6:	ddf1      	ble.n	80043ac <_svfprintf_r+0x990>
 80043c8:	aa28      	add	r2, sp, #160	; 0xa0
 80043ca:	4629      	mov	r1, r5
 80043cc:	4658      	mov	r0, fp
 80043ce:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80043d2:	f003 f8a3 	bl	800751c <__ssprint_r>
 80043d6:	2800      	cmp	r0, #0
 80043d8:	f47f ac8f 	bne.w	8003cfa <_svfprintf_r+0x2de>
 80043dc:	3e10      	subs	r6, #16
 80043de:	2e10      	cmp	r6, #16
 80043e0:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
 80043e4:	dce7      	bgt.n	80043b6 <_svfprintf_r+0x99a>
 80043e6:	e9dd 3b1d 	ldrd	r3, fp, [sp, #116]	; 0x74
 80043ea:	464d      	mov	r5, r9
 80043ec:	46b1      	mov	r9, r6
 80043ee:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80043f0:	f8c8 9004 	str.w	r9, [r8, #4]
 80043f4:	3201      	adds	r2, #1
 80043f6:	eb09 0401 	add.w	r4, r9, r1
 80043fa:	2a07      	cmp	r2, #7
 80043fc:	490e      	ldr	r1, [pc, #56]	; (8004438 <_svfprintf_r+0xa1c>)
 80043fe:	f8c8 1000 	str.w	r1, [r8]
 8004402:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
 8004406:	f300 83ff 	bgt.w	8004c08 <_svfprintf_r+0x11ec>
 800440a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 800440e:	f108 0808 	add.w	r8, r8, #8
 8004412:	e4a8      	b.n	8003d66 <_svfprintf_r+0x34a>
 8004414:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004416:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004418:	931d      	str	r3, [sp, #116]	; 0x74
 800441a:	aa28      	add	r2, sp, #160	; 0xa0
 800441c:	f003 f87e 	bl	800751c <__ssprint_r>
 8004420:	2800      	cmp	r0, #0
 8004422:	f47f ac6a 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004426:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004428:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800442a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800442e:	e4ad      	b.n	8003d8c <_svfprintf_r+0x370>
 8004430:	0800be08 	.word	0x0800be08
 8004434:	0800be1c 	.word	0x0800be1c
 8004438:	0800be0c 	.word	0x0800be0c
 800443c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800443e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004440:	aa28      	add	r2, sp, #160	; 0xa0
 8004442:	f003 f86b 	bl	800751c <__ssprint_r>
 8004446:	2800      	cmp	r0, #0
 8004448:	f47f ac57 	bne.w	8003cfa <_svfprintf_r+0x2de>
 800444c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800444e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004452:	e4ad      	b.n	8003db0 <_svfprintf_r+0x394>
 8004454:	2d10      	cmp	r5, #16
 8004456:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004458:	dd21      	ble.n	800449e <_svfprintf_r+0xa82>
 800445a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800445c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8004460:	2610      	movs	r6, #16
 8004462:	e004      	b.n	800446e <_svfprintf_r+0xa52>
 8004464:	3d10      	subs	r5, #16
 8004466:	2d10      	cmp	r5, #16
 8004468:	f108 0808 	add.w	r8, r8, #8
 800446c:	dd17      	ble.n	800449e <_svfprintf_r+0xa82>
 800446e:	3301      	adds	r3, #1
 8004470:	4ab0      	ldr	r2, [pc, #704]	; (8004734 <_svfprintf_r+0xd18>)
 8004472:	3410      	adds	r4, #16
 8004474:	2b07      	cmp	r3, #7
 8004476:	e9c8 2600 	strd	r2, r6, [r8]
 800447a:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 800447e:	ddf1      	ble.n	8004464 <_svfprintf_r+0xa48>
 8004480:	aa28      	add	r2, sp, #160	; 0xa0
 8004482:	4649      	mov	r1, r9
 8004484:	4638      	mov	r0, r7
 8004486:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800448a:	f003 f847 	bl	800751c <__ssprint_r>
 800448e:	2800      	cmp	r0, #0
 8004490:	f47f ac33 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004494:	3d10      	subs	r5, #16
 8004496:	2d10      	cmp	r5, #16
 8004498:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
 800449c:	dce7      	bgt.n	800446e <_svfprintf_r+0xa52>
 800449e:	3301      	adds	r3, #1
 80044a0:	4aa4      	ldr	r2, [pc, #656]	; (8004734 <_svfprintf_r+0xd18>)
 80044a2:	f8c8 5004 	str.w	r5, [r8, #4]
 80044a6:	442c      	add	r4, r5
 80044a8:	2b07      	cmp	r3, #7
 80044aa:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 80044ae:	f8c8 2000 	str.w	r2, [r8]
 80044b2:	f77f aca3 	ble.w	8003dfc <_svfprintf_r+0x3e0>
 80044b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80044ba:	aa28      	add	r2, sp, #160	; 0xa0
 80044bc:	f003 f82e 	bl	800751c <__ssprint_r>
 80044c0:	2800      	cmp	r0, #0
 80044c2:	f47f ac1a 	bne.w	8003cfa <_svfprintf_r+0x2de>
 80044c6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80044c8:	e498      	b.n	8003dfc <_svfprintf_r+0x3e0>
 80044ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80044cc:	2900      	cmp	r1, #0
 80044ce:	f340 8366 	ble.w	8004b9e <_svfprintf_r+0x1182>
 80044d2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80044d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044d8:	4599      	cmp	r9, r3
 80044da:	bfa8      	it	ge
 80044dc:	4699      	movge	r9, r3
 80044de:	f1b9 0f00 	cmp.w	r9, #0
 80044e2:	dd0b      	ble.n	80044fc <_svfprintf_r+0xae0>
 80044e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80044e6:	3301      	adds	r3, #1
 80044e8:	444c      	add	r4, r9
 80044ea:	2b07      	cmp	r3, #7
 80044ec:	e9c8 5900 	strd	r5, r9, [r8]
 80044f0:	942a      	str	r4, [sp, #168]	; 0xa8
 80044f2:	9329      	str	r3, [sp, #164]	; 0xa4
 80044f4:	f300 852f 	bgt.w	8004f56 <_svfprintf_r+0x153a>
 80044f8:	f108 0808 	add.w	r8, r8, #8
 80044fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80044fe:	f1b9 0f00 	cmp.w	r9, #0
 8004502:	bfa8      	it	ge
 8004504:	eba6 0609 	subge.w	r6, r6, r9
 8004508:	2e00      	cmp	r6, #0
 800450a:	f300 8238 	bgt.w	800497e <_svfprintf_r+0xf62>
 800450e:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8004512:	0578      	lsls	r0, r7, #21
 8004514:	44ab      	add	fp, r5
 8004516:	f100 8266 	bmi.w	80049e6 <_svfprintf_r+0xfca>
 800451a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800451c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800451e:	4293      	cmp	r3, r2
 8004520:	db02      	blt.n	8004528 <_svfprintf_r+0xb0c>
 8004522:	07f9      	lsls	r1, r7, #31
 8004524:	f140 848e 	bpl.w	8004e44 <_svfprintf_r+0x1428>
 8004528:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800452a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800452c:	4414      	add	r4, r2
 800452e:	e9c8 1200 	strd	r1, r2, [r8]
 8004532:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8004534:	942a      	str	r4, [sp, #168]	; 0xa8
 8004536:	3201      	adds	r2, #1
 8004538:	2a07      	cmp	r2, #7
 800453a:	9229      	str	r2, [sp, #164]	; 0xa4
 800453c:	f300 8518 	bgt.w	8004f70 <_svfprintf_r+0x1554>
 8004540:	f108 0808 	add.w	r8, r8, #8
 8004544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004546:	18ae      	adds	r6, r5, r2
 8004548:	eba6 060b 	sub.w	r6, r6, fp
 800454c:	1ad5      	subs	r5, r2, r3
 800454e:	42ae      	cmp	r6, r5
 8004550:	bfa8      	it	ge
 8004552:	462e      	movge	r6, r5
 8004554:	2e00      	cmp	r6, #0
 8004556:	dd0d      	ble.n	8004574 <_svfprintf_r+0xb58>
 8004558:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800455a:	f8c8 b000 	str.w	fp, [r8]
 800455e:	3301      	adds	r3, #1
 8004560:	4434      	add	r4, r6
 8004562:	2b07      	cmp	r3, #7
 8004564:	f8c8 6004 	str.w	r6, [r8, #4]
 8004568:	942a      	str	r4, [sp, #168]	; 0xa8
 800456a:	9329      	str	r3, [sp, #164]	; 0xa4
 800456c:	f300 861a 	bgt.w	80051a4 <_svfprintf_r+0x1788>
 8004570:	f108 0808 	add.w	r8, r8, #8
 8004574:	2e00      	cmp	r6, #0
 8004576:	bfa8      	it	ge
 8004578:	1bad      	subge	r5, r5, r6
 800457a:	2d00      	cmp	r5, #0
 800457c:	f77f ac36 	ble.w	8003dec <_svfprintf_r+0x3d0>
 8004580:	2d10      	cmp	r5, #16
 8004582:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004584:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8004738 <_svfprintf_r+0xd1c>
 8004588:	f340 836e 	ble.w	8004c68 <_svfprintf_r+0x124c>
 800458c:	4649      	mov	r1, r9
 800458e:	4622      	mov	r2, r4
 8004590:	46b9      	mov	r9, r7
 8004592:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004596:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004598:	2610      	movs	r6, #16
 800459a:	460f      	mov	r7, r1
 800459c:	e005      	b.n	80045aa <_svfprintf_r+0xb8e>
 800459e:	f108 0808 	add.w	r8, r8, #8
 80045a2:	3d10      	subs	r5, #16
 80045a4:	2d10      	cmp	r5, #16
 80045a6:	f340 835b 	ble.w	8004c60 <_svfprintf_r+0x1244>
 80045aa:	3301      	adds	r3, #1
 80045ac:	3210      	adds	r2, #16
 80045ae:	2b07      	cmp	r3, #7
 80045b0:	e9c8 7600 	strd	r7, r6, [r8]
 80045b4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 80045b8:	ddf1      	ble.n	800459e <_svfprintf_r+0xb82>
 80045ba:	aa28      	add	r2, sp, #160	; 0xa0
 80045bc:	4621      	mov	r1, r4
 80045be:	4658      	mov	r0, fp
 80045c0:	f002 ffac 	bl	800751c <__ssprint_r>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	f47f ab98 	bne.w	8003cfa <_svfprintf_r+0x2de>
 80045ca:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 80045ce:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80045d2:	e7e6      	b.n	80045a2 <_svfprintf_r+0xb86>
 80045d4:	9b07      	ldr	r3, [sp, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f47f ab1e 	bne.w	8003c18 <_svfprintf_r+0x1fc>
 80045dc:	465f      	mov	r7, fp
 80045de:	2300      	movs	r3, #0
 80045e0:	9307      	str	r3, [sp, #28]
 80045e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80045e4:	ad54      	add	r5, sp, #336	; 0x150
 80045e6:	f7ff bb1f 	b.w	8003c28 <_svfprintf_r+0x20c>
 80045ea:	07fa      	lsls	r2, r7, #31
 80045ec:	f53f ae81 	bmi.w	80042f2 <_svfprintf_r+0x8d6>
 80045f0:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80045f2:	f8c8 5000 	str.w	r5, [r8]
 80045f6:	3601      	adds	r6, #1
 80045f8:	3401      	adds	r4, #1
 80045fa:	2301      	movs	r3, #1
 80045fc:	2e07      	cmp	r6, #7
 80045fe:	942a      	str	r4, [sp, #168]	; 0xa8
 8004600:	9629      	str	r6, [sp, #164]	; 0xa4
 8004602:	f8c8 3004 	str.w	r3, [r8, #4]
 8004606:	f77f aea7 	ble.w	8004358 <_svfprintf_r+0x93c>
 800460a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800460c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800460e:	aa28      	add	r2, sp, #160	; 0xa0
 8004610:	f002 ff84 	bl	800751c <__ssprint_r>
 8004614:	2800      	cmp	r0, #0
 8004616:	f47f ab70 	bne.w	8003cfa <_svfprintf_r+0x2de>
 800461a:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
 800461e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004622:	e69b      	b.n	800435c <_svfprintf_r+0x940>
 8004624:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004626:	1e5d      	subs	r5, r3, #1
 8004628:	2d00      	cmp	r5, #0
 800462a:	f77f ae97 	ble.w	800435c <_svfprintf_r+0x940>
 800462e:	2d10      	cmp	r5, #16
 8004630:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8004738 <_svfprintf_r+0xd1c>
 8004634:	f340 8396 	ble.w	8004d64 <_svfprintf_r+0x1348>
 8004638:	4622      	mov	r2, r4
 800463a:	9707      	str	r7, [sp, #28]
 800463c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800463e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004640:	f04f 0b10 	mov.w	fp, #16
 8004644:	e005      	b.n	8004652 <_svfprintf_r+0xc36>
 8004646:	f108 0808 	add.w	r8, r8, #8
 800464a:	3d10      	subs	r5, #16
 800464c:	2d10      	cmp	r5, #16
 800464e:	f340 8387 	ble.w	8004d60 <_svfprintf_r+0x1344>
 8004652:	3601      	adds	r6, #1
 8004654:	3210      	adds	r2, #16
 8004656:	2e07      	cmp	r6, #7
 8004658:	e9c8 9b00 	strd	r9, fp, [r8]
 800465c:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
 8004660:	ddf1      	ble.n	8004646 <_svfprintf_r+0xc2a>
 8004662:	aa28      	add	r2, sp, #160	; 0xa0
 8004664:	4639      	mov	r1, r7
 8004666:	4620      	mov	r0, r4
 8004668:	f002 ff58 	bl	800751c <__ssprint_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	f47f ab44 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004672:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
 8004676:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800467a:	e7e6      	b.n	800464a <_svfprintf_r+0xc2e>
 800467c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800467e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004680:	aa28      	add	r2, sp, #160	; 0xa0
 8004682:	f002 ff4b 	bl	800751c <__ssprint_r>
 8004686:	2800      	cmp	r0, #0
 8004688:	f47f ab37 	bne.w	8003cfa <_svfprintf_r+0x2de>
 800468c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800468e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004692:	f7ff bb99 	b.w	8003dc8 <_svfprintf_r+0x3ac>
 8004696:	f01b 0310 	ands.w	r3, fp, #16
 800469a:	f040 8128 	bne.w	80048ee <_svfprintf_r+0xed2>
 800469e:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
 80046a2:	f000 8379 	beq.w	8004d98 <_svfprintf_r+0x137c>
 80046a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046a8:	f852 4b04 	ldr.w	r4, [r2], #4
 80046ac:	920e      	str	r2, [sp, #56]	; 0x38
 80046ae:	4699      	mov	r9, r3
 80046b0:	b2a4      	uxth	r4, r4
 80046b2:	2301      	movs	r3, #1
 80046b4:	f7ff bade 	b.w	8003c74 <_svfprintf_r+0x258>
 80046b8:	232d      	movs	r3, #45	; 0x2d
 80046ba:	4264      	negs	r4, r4
 80046bc:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
 80046c0:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 80046c4:	46bb      	mov	fp, r7
 80046c6:	2301      	movs	r3, #1
 80046c8:	f7ff bad7 	b.w	8003c7a <_svfprintf_r+0x25e>
 80046cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80046d0:	aa28      	add	r2, sp, #160	; 0xa0
 80046d2:	f002 ff23 	bl	800751c <__ssprint_r>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	f47f ab0f 	bne.w	8003cfa <_svfprintf_r+0x2de>
 80046dc:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
 80046e0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80046e4:	e614      	b.n	8004310 <_svfprintf_r+0x8f4>
 80046e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80046ea:	aa28      	add	r2, sp, #160	; 0xa0
 80046ec:	f002 ff16 	bl	800751c <__ssprint_r>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f47f ab02 	bne.w	8003cfa <_svfprintf_r+0x2de>
 80046f6:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
 80046fa:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80046fe:	e614      	b.n	800432a <_svfprintf_r+0x90e>
 8004700:	07fd      	lsls	r5, r7, #31
 8004702:	f57f ab73 	bpl.w	8003dec <_svfprintf_r+0x3d0>
 8004706:	e528      	b.n	800415a <_svfprintf_r+0x73e>
 8004708:	f89a 6000 	ldrb.w	r6, [sl]
 800470c:	930e      	str	r3, [sp, #56]	; 0x38
 800470e:	f7ff b9d3 	b.w	8003ab8 <_svfprintf_r+0x9c>
 8004712:	ad54      	add	r5, sp, #336	; 0x150
 8004714:	f7ff ba88 	b.w	8003c28 <_svfprintf_r+0x20c>
 8004718:	05b8      	lsls	r0, r7, #22
 800471a:	f100 83a6 	bmi.w	8004e6a <_svfprintf_r+0x144e>
 800471e:	ea4f 79e4 	mov.w	r9, r4, asr #31
 8004722:	464b      	mov	r3, r9
 8004724:	f7ff ba66 	b.w	8003bf4 <_svfprintf_r+0x1d8>
 8004728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800472a:	f853 4b04 	ldr.w	r4, [r3], #4
 800472e:	930e      	str	r3, [sp, #56]	; 0x38
 8004730:	f7ff ba9d 	b.w	8003c6e <_svfprintf_r+0x252>
 8004734:	0800be0c 	.word	0x0800be0c
 8004738:	0800be1c 	.word	0x0800be1c
 800473c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8004740:	4602      	mov	r2, r0
 8004742:	460b      	mov	r3, r1
 8004744:	f007 f83a 	bl	800b7bc <__aeabi_dcmpun>
 8004748:	2800      	cmp	r0, #0
 800474a:	f040 860f 	bne.w	800536c <_svfprintf_r+0x1950>
 800474e:	2e61      	cmp	r6, #97	; 0x61
 8004750:	f000 8545 	beq.w	80051de <_svfprintf_r+0x17c2>
 8004754:	2e41      	cmp	r6, #65	; 0x41
 8004756:	f000 846d 	beq.w	8005034 <_svfprintf_r+0x1618>
 800475a:	9b07      	ldr	r3, [sp, #28]
 800475c:	3301      	adds	r3, #1
 800475e:	f026 0320 	bic.w	r3, r6, #32
 8004762:	9306      	str	r3, [sp, #24]
 8004764:	f000 83a9 	beq.w	8004eba <_svfprintf_r+0x149e>
 8004768:	2b47      	cmp	r3, #71	; 0x47
 800476a:	f000 8588 	beq.w	800527e <_svfprintf_r+0x1862>
 800476e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8004772:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 8004776:	930f      	str	r3, [sp, #60]	; 0x3c
 8004778:	4613      	mov	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	f2c0 8592 	blt.w	80052a4 <_svfprintf_r+0x1888>
 8004780:	930b      	str	r3, [sp, #44]	; 0x2c
 8004782:	2300      	movs	r3, #0
 8004784:	931d      	str	r3, [sp, #116]	; 0x74
 8004786:	468b      	mov	fp, r1
 8004788:	930d      	str	r3, [sp, #52]	; 0x34
 800478a:	9b06      	ldr	r3, [sp, #24]
 800478c:	2b46      	cmp	r3, #70	; 0x46
 800478e:	f000 83fd 	beq.w	8004f8c <_svfprintf_r+0x1570>
 8004792:	2b45      	cmp	r3, #69	; 0x45
 8004794:	f000 8544 	beq.w	8005220 <_svfprintf_r+0x1804>
 8004798:	9907      	ldr	r1, [sp, #28]
 800479a:	9101      	str	r1, [sp, #4]
 800479c:	a926      	add	r1, sp, #152	; 0x98
 800479e:	9104      	str	r1, [sp, #16]
 80047a0:	a923      	add	r1, sp, #140	; 0x8c
 80047a2:	9103      	str	r1, [sp, #12]
 80047a4:	a922      	add	r1, sp, #136	; 0x88
 80047a6:	9102      	str	r1, [sp, #8]
 80047a8:	2102      	movs	r1, #2
 80047aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80047ae:	9100      	str	r1, [sp, #0]
 80047b0:	465a      	mov	r2, fp
 80047b2:	f000 fee5 	bl	8005580 <_dtoa_r>
 80047b6:	9b06      	ldr	r3, [sp, #24]
 80047b8:	2b47      	cmp	r3, #71	; 0x47
 80047ba:	4605      	mov	r5, r0
 80047bc:	f040 8631 	bne.w	8005422 <_svfprintf_r+0x1a06>
 80047c0:	f017 0f01 	tst.w	r7, #1
 80047c4:	46b9      	mov	r9, r7
 80047c6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80047c8:	f040 84fc 	bne.w	80051c4 <_svfprintf_r+0x17a8>
 80047cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80047ce:	1b5b      	subs	r3, r3, r5
 80047d0:	9312      	str	r3, [sp, #72]	; 0x48
 80047d2:	9b06      	ldr	r3, [sp, #24]
 80047d4:	2b47      	cmp	r3, #71	; 0x47
 80047d6:	f000 8382 	beq.w	8004ede <_svfprintf_r+0x14c2>
 80047da:	9b06      	ldr	r3, [sp, #24]
 80047dc:	2b46      	cmp	r3, #70	; 0x46
 80047de:	f000 8412 	beq.w	8005006 <_svfprintf_r+0x15ea>
 80047e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047e4:	9310      	str	r3, [sp, #64]	; 0x40
 80047e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047e8:	9a06      	ldr	r2, [sp, #24]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	2a41      	cmp	r2, #65	; 0x41
 80047ee:	9322      	str	r3, [sp, #136]	; 0x88
 80047f0:	f000 85ad 	beq.w	800534e <_svfprintf_r+0x1932>
 80047f4:	b2f2      	uxtb	r2, r6
 80047f6:	2100      	movs	r1, #0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bfb8      	it	lt
 80047fc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 80047fe:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8004802:	bfba      	itte	lt
 8004804:	f1c3 0301 	rsblt	r3, r3, #1
 8004808:	222d      	movlt	r2, #45	; 0x2d
 800480a:	222b      	movge	r2, #43	; 0x2b
 800480c:	2b09      	cmp	r3, #9
 800480e:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
 8004812:	f340 858d 	ble.w	8005330 <_svfprintf_r+0x1914>
 8004816:	f10d 049f 	add.w	r4, sp, #159	; 0x9f
 800481a:	4fb6      	ldr	r7, [pc, #728]	; (8004af4 <_svfprintf_r+0x10d8>)
 800481c:	4622      	mov	r2, r4
 800481e:	4610      	mov	r0, r2
 8004820:	fb87 2103 	smull	r2, r1, r7, r3
 8004824:	17da      	asrs	r2, r3, #31
 8004826:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800482a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800482e:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8004832:	3130      	adds	r1, #48	; 0x30
 8004834:	f800 1c01 	strb.w	r1, [r0, #-1]
 8004838:	4619      	mov	r1, r3
 800483a:	2963      	cmp	r1, #99	; 0x63
 800483c:	4613      	mov	r3, r2
 800483e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8004842:	dcec      	bgt.n	800481e <_svfprintf_r+0xe02>
 8004844:	3330      	adds	r3, #48	; 0x30
 8004846:	b2d9      	uxtb	r1, r3
 8004848:	1e83      	subs	r3, r0, #2
 800484a:	429c      	cmp	r4, r3
 800484c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004850:	f240 85f1 	bls.w	8005436 <_svfprintf_r+0x1a1a>
 8004854:	4613      	mov	r3, r2
 8004856:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 800485a:	e001      	b.n	8004860 <_svfprintf_r+0xe44>
 800485c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004860:	f802 1b01 	strb.w	r1, [r2], #1
 8004864:	429c      	cmp	r4, r3
 8004866:	d1f9      	bne.n	800485c <_svfprintf_r+0xe40>
 8004868:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
 800486c:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8004870:	1a1b      	subs	r3, r3, r0
 8004872:	4413      	add	r3, r2
 8004874:	aa24      	add	r2, sp, #144	; 0x90
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	931a      	str	r3, [sp, #104]	; 0x68
 800487a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800487c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800487e:	2b01      	cmp	r3, #1
 8004880:	441a      	add	r2, r3
 8004882:	920b      	str	r2, [sp, #44]	; 0x2c
 8004884:	f340 859e 	ble.w	80053c4 <_svfprintf_r+0x19a8>
 8004888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800488a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800488c:	4413      	add	r3, r2
 800488e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004892:	2300      	movs	r3, #0
 8004894:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
 8004898:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800489c:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 80048a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80048a2:	9206      	str	r2, [sp, #24]
 80048a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80048a6:	9310      	str	r3, [sp, #64]	; 0x40
 80048a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f040 833f 	bne.w	8004f2e <_svfprintf_r+0x1512>
 80048b0:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 80048b4:	9307      	str	r3, [sp, #28]
 80048b6:	f7ff b9c5 	b.w	8003c44 <_svfprintf_r+0x228>
 80048ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f43f a982 	beq.w	8003bc6 <_svfprintf_r+0x1aa>
 80048c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f43f a97d 	beq.w	8003bc6 <_svfprintf_r+0x1aa>
 80048cc:	f89a 6000 	ldrb.w	r6, [sl]
 80048d0:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
 80048d4:	f7ff b8f0 	b.w	8003ab8 <_svfprintf_r+0x9c>
 80048d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048da:	9808      	ldr	r0, [sp, #32]
 80048dc:	f853 1b04 	ldr.w	r1, [r3], #4
 80048e0:	930e      	str	r3, [sp, #56]	; 0x38
 80048e2:	17c2      	asrs	r2, r0, #31
 80048e4:	e9c1 0200 	strd	r0, r2, [r1]
 80048e8:	4655      	mov	r5, sl
 80048ea:	f7ff ba9d 	b.w	8003e28 <_svfprintf_r+0x40c>
 80048ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048f0:	f853 4b04 	ldr.w	r4, [r3], #4
 80048f4:	930e      	str	r3, [sp, #56]	; 0x38
 80048f6:	2301      	movs	r3, #1
 80048f8:	f7ff b9bc 	b.w	8003c74 <_svfprintf_r+0x258>
 80048fc:	4b7e      	ldr	r3, [pc, #504]	; (8004af8 <_svfprintf_r+0x10dc>)
 80048fe:	9318      	str	r3, [sp, #96]	; 0x60
 8004900:	f017 0920 	ands.w	r9, r7, #32
 8004904:	f000 80ec 	beq.w	8004ae0 <_svfprintf_r+0x10c4>
 8004908:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800490a:	3307      	adds	r3, #7
 800490c:	f023 0307 	bic.w	r3, r3, #7
 8004910:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8004914:	f853 4b08 	ldr.w	r4, [r3], #8
 8004918:	930e      	str	r3, [sp, #56]	; 0x38
 800491a:	07f8      	lsls	r0, r7, #31
 800491c:	d509      	bpl.n	8004932 <_svfprintf_r+0xf16>
 800491e:	ea54 0309 	orrs.w	r3, r4, r9
 8004922:	d006      	beq.n	8004932 <_svfprintf_r+0xf16>
 8004924:	2330      	movs	r3, #48	; 0x30
 8004926:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
 800492a:	f047 0702 	orr.w	r7, r7, #2
 800492e:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8004932:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
 8004936:	2302      	movs	r3, #2
 8004938:	f7ff b99c 	b.w	8003c74 <_svfprintf_r+0x258>
 800493c:	46bb      	mov	fp, r7
 800493e:	f7ff bb25 	b.w	8003f8c <_svfprintf_r+0x570>
 8004942:	4b6e      	ldr	r3, [pc, #440]	; (8004afc <_svfprintf_r+0x10e0>)
 8004944:	9318      	str	r3, [sp, #96]	; 0x60
 8004946:	e7db      	b.n	8004900 <_svfprintf_r+0xee4>
 8004948:	990c      	ldr	r1, [sp, #48]	; 0x30
 800494a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800494c:	aa28      	add	r2, sp, #160	; 0xa0
 800494e:	f002 fde5 	bl	800751c <__ssprint_r>
 8004952:	2800      	cmp	r0, #0
 8004954:	f47f a9d1 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004958:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800495a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800495e:	e40a      	b.n	8004176 <_svfprintf_r+0x75a>
 8004960:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004962:	2140      	movs	r1, #64	; 0x40
 8004964:	f7fe fc5c 	bl	8003220 <_malloc_r>
 8004968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800496a:	6018      	str	r0, [r3, #0]
 800496c:	6118      	str	r0, [r3, #16]
 800496e:	2800      	cmp	r0, #0
 8004970:	f000 8565 	beq.w	800543e <_svfprintf_r+0x1a22>
 8004974:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004976:	2340      	movs	r3, #64	; 0x40
 8004978:	6153      	str	r3, [r2, #20]
 800497a:	f7ff b866 	b.w	8003a4a <_svfprintf_r+0x2e>
 800497e:	2e10      	cmp	r6, #16
 8004980:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004982:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004b00 <_svfprintf_r+0x10e4>
 8004986:	f340 8229 	ble.w	8004ddc <_svfprintf_r+0x13c0>
 800498a:	4648      	mov	r0, r9
 800498c:	4642      	mov	r2, r8
 800498e:	4621      	mov	r1, r4
 8004990:	46a8      	mov	r8, r5
 8004992:	46b9      	mov	r9, r7
 8004994:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004998:	f04f 0b10 	mov.w	fp, #16
 800499c:	4607      	mov	r7, r0
 800499e:	e004      	b.n	80049aa <_svfprintf_r+0xf8e>
 80049a0:	3208      	adds	r2, #8
 80049a2:	3e10      	subs	r6, #16
 80049a4:	2e10      	cmp	r6, #16
 80049a6:	f340 8213 	ble.w	8004dd0 <_svfprintf_r+0x13b4>
 80049aa:	3301      	adds	r3, #1
 80049ac:	3110      	adds	r1, #16
 80049ae:	2b07      	cmp	r3, #7
 80049b0:	e9c2 7b00 	strd	r7, fp, [r2]
 80049b4:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
 80049b8:	ddf2      	ble.n	80049a0 <_svfprintf_r+0xf84>
 80049ba:	aa28      	add	r2, sp, #160	; 0xa0
 80049bc:	4629      	mov	r1, r5
 80049be:	4620      	mov	r0, r4
 80049c0:	f002 fdac 	bl	800751c <__ssprint_r>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f47f a998 	bne.w	8003cfa <_svfprintf_r+0x2de>
 80049ca:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
 80049ce:	aa2b      	add	r2, sp, #172	; 0xac
 80049d0:	e7e7      	b.n	80049a2 <_svfprintf_r+0xf86>
 80049d2:	4628      	mov	r0, r5
 80049d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80049d8:	940e      	str	r4, [sp, #56]	; 0x38
 80049da:	f7fe ffb1 	bl	8003940 <strlen>
 80049de:	4603      	mov	r3, r0
 80049e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80049e2:	f7ff bab3 	b.w	8003f4c <_svfprintf_r+0x530>
 80049e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049e8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80049ec:	4642      	mov	r2, r8
 80049ee:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80049f2:	9710      	str	r7, [sp, #64]	; 0x40
 80049f4:	18eb      	adds	r3, r5, r3
 80049f6:	9307      	str	r3, [sp, #28]
 80049f8:	465e      	mov	r6, fp
 80049fa:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80049fc:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8004a00:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004a04:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8004a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a0a:	9513      	str	r5, [sp, #76]	; 0x4c
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	f1b8 0f00 	cmp.w	r8, #0
 8004a12:	d02f      	beq.n	8004a74 <_svfprintf_r+0x1058>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d130      	bne.n	8004a7a <_svfprintf_r+0x105e>
 8004a18:	3f01      	subs	r7, #1
 8004a1a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004a1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a20:	e9c2 3900 	strd	r3, r9, [r2]
 8004a24:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004a26:	3301      	adds	r3, #1
 8004a28:	4449      	add	r1, r9
 8004a2a:	2b07      	cmp	r3, #7
 8004a2c:	912a      	str	r1, [sp, #168]	; 0xa8
 8004a2e:	9329      	str	r3, [sp, #164]	; 0xa4
 8004a30:	dc68      	bgt.n	8004b04 <_svfprintf_r+0x10e8>
 8004a32:	3208      	adds	r2, #8
 8004a34:	9b07      	ldr	r3, [sp, #28]
 8004a36:	7838      	ldrb	r0, [r7, #0]
 8004a38:	1b9b      	subs	r3, r3, r6
 8004a3a:	4283      	cmp	r3, r0
 8004a3c:	bfa8      	it	ge
 8004a3e:	4603      	movge	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	461c      	mov	r4, r3
 8004a44:	dd0b      	ble.n	8004a5e <_svfprintf_r+0x1042>
 8004a46:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8004a48:	3001      	adds	r0, #1
 8004a4a:	4419      	add	r1, r3
 8004a4c:	2807      	cmp	r0, #7
 8004a4e:	e9c2 6300 	strd	r6, r3, [r2]
 8004a52:	912a      	str	r1, [sp, #168]	; 0xa8
 8004a54:	9029      	str	r0, [sp, #164]	; 0xa4
 8004a56:	f300 8114 	bgt.w	8004c82 <_svfprintf_r+0x1266>
 8004a5a:	7838      	ldrb	r0, [r7, #0]
 8004a5c:	3208      	adds	r2, #8
 8004a5e:	2c00      	cmp	r4, #0
 8004a60:	bfac      	ite	ge
 8004a62:	1b05      	subge	r5, r0, r4
 8004a64:	4605      	movlt	r5, r0
 8004a66:	2d00      	cmp	r5, #0
 8004a68:	dc0b      	bgt.n	8004a82 <_svfprintf_r+0x1066>
 8004a6a:	4406      	add	r6, r0
 8004a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a6e:	f1b8 0f00 	cmp.w	r8, #0
 8004a72:	d1cf      	bne.n	8004a14 <_svfprintf_r+0xff8>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8223 	beq.w	8004ec0 <_svfprintf_r+0x14a4>
 8004a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a80:	e7cd      	b.n	8004a1e <_svfprintf_r+0x1002>
 8004a82:	2d10      	cmp	r5, #16
 8004a84:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8004a86:	dd1d      	ble.n	8004ac4 <_svfprintf_r+0x10a8>
 8004a88:	2410      	movs	r4, #16
 8004a8a:	e004      	b.n	8004a96 <_svfprintf_r+0x107a>
 8004a8c:	3d10      	subs	r5, #16
 8004a8e:	2d10      	cmp	r5, #16
 8004a90:	f102 0208 	add.w	r2, r2, #8
 8004a94:	dd16      	ble.n	8004ac4 <_svfprintf_r+0x10a8>
 8004a96:	3001      	adds	r0, #1
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <_svfprintf_r+0x10e4>)
 8004a9a:	3110      	adds	r1, #16
 8004a9c:	2807      	cmp	r0, #7
 8004a9e:	e9c2 3400 	strd	r3, r4, [r2]
 8004aa2:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
 8004aa6:	ddf1      	ble.n	8004a8c <_svfprintf_r+0x1070>
 8004aa8:	aa28      	add	r2, sp, #160	; 0xa0
 8004aaa:	4659      	mov	r1, fp
 8004aac:	4650      	mov	r0, sl
 8004aae:	f002 fd35 	bl	800751c <__ssprint_r>
 8004ab2:	2800      	cmp	r0, #0
 8004ab4:	f47f a921 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004ab8:	3d10      	subs	r5, #16
 8004aba:	2d10      	cmp	r5, #16
 8004abc:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
 8004ac0:	aa2b      	add	r2, sp, #172	; 0xac
 8004ac2:	dce8      	bgt.n	8004a96 <_svfprintf_r+0x107a>
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <_svfprintf_r+0x10e4>)
 8004ac8:	6055      	str	r5, [r2, #4]
 8004aca:	4429      	add	r1, r5
 8004acc:	2807      	cmp	r0, #7
 8004ace:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	f300 8232 	bgt.w	8004f3c <_svfprintf_r+0x1520>
 8004ad8:	7838      	ldrb	r0, [r7, #0]
 8004ada:	3208      	adds	r2, #8
 8004adc:	4406      	add	r6, r0
 8004ade:	e7c5      	b.n	8004a6c <_svfprintf_r+0x1050>
 8004ae0:	f017 0310 	ands.w	r3, r7, #16
 8004ae4:	f000 80a1 	beq.w	8004c2a <_svfprintf_r+0x120e>
 8004ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aea:	f853 4b04 	ldr.w	r4, [r3], #4
 8004aee:	930e      	str	r3, [sp, #56]	; 0x38
 8004af0:	e713      	b.n	800491a <_svfprintf_r+0xefe>
 8004af2:	bf00      	nop
 8004af4:	66666667 	.word	0x66666667
 8004af8:	0800bdd8 	.word	0x0800bdd8
 8004afc:	0800bdec 	.word	0x0800bdec
 8004b00:	0800be1c 	.word	0x0800be1c
 8004b04:	aa28      	add	r2, sp, #160	; 0xa0
 8004b06:	4659      	mov	r1, fp
 8004b08:	4650      	mov	r0, sl
 8004b0a:	f002 fd07 	bl	800751c <__ssprint_r>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	f47f a8f3 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004b14:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8004b16:	aa2b      	add	r2, sp, #172	; 0xac
 8004b18:	e78c      	b.n	8004a34 <_svfprintf_r+0x1018>
 8004b1a:	f40b 6380 	and.w	r3, fp, #1024	; 0x400
 8004b1e:	2200      	movs	r2, #0
 8004b20:	9606      	str	r6, [sp, #24]
 8004b22:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8004b26:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8004b2a:	af54      	add	r7, sp, #336	; 0x150
 8004b2c:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8004b30:	469a      	mov	sl, r3
 8004b32:	4616      	mov	r6, r2
 8004b34:	e00c      	b.n	8004b50 <_svfprintf_r+0x1134>
 8004b36:	2300      	movs	r3, #0
 8004b38:	4620      	mov	r0, r4
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	220a      	movs	r2, #10
 8004b3e:	f006 fe7b 	bl	800b838 <__aeabi_uldivmod>
 8004b42:	2c0a      	cmp	r4, #10
 8004b44:	f179 0300 	sbcs.w	r3, r9, #0
 8004b48:	d31b      	bcc.n	8004b82 <_svfprintf_r+0x1166>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4689      	mov	r9, r1
 8004b4e:	462f      	mov	r7, r5
 8004b50:	4620      	mov	r0, r4
 8004b52:	220a      	movs	r2, #10
 8004b54:	2300      	movs	r3, #0
 8004b56:	4649      	mov	r1, r9
 8004b58:	f006 fe6e 	bl	800b838 <__aeabi_uldivmod>
 8004b5c:	3230      	adds	r2, #48	; 0x30
 8004b5e:	1e7d      	subs	r5, r7, #1
 8004b60:	3601      	adds	r6, #1
 8004b62:	f807 2c01 	strb.w	r2, [r7, #-1]
 8004b66:	f1ba 0f00 	cmp.w	sl, #0
 8004b6a:	d0e4      	beq.n	8004b36 <_svfprintf_r+0x111a>
 8004b6c:	f898 3000 	ldrb.w	r3, [r8]
 8004b70:	429e      	cmp	r6, r3
 8004b72:	d1e0      	bne.n	8004b36 <_svfprintf_r+0x111a>
 8004b74:	2eff      	cmp	r6, #255	; 0xff
 8004b76:	d0de      	beq.n	8004b36 <_svfprintf_r+0x111a>
 8004b78:	2c0a      	cmp	r4, #10
 8004b7a:	f179 0300 	sbcs.w	r3, r9, #0
 8004b7e:	f080 8140 	bcs.w	8004e02 <_svfprintf_r+0x13e6>
 8004b82:	ab54      	add	r3, sp, #336	; 0x150
 8004b84:	1b5b      	subs	r3, r3, r5
 8004b86:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8004b8a:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 8004b8e:	9612      	str	r6, [sp, #72]	; 0x48
 8004b90:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8004b94:	9e06      	ldr	r6, [sp, #24]
 8004b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b98:	465f      	mov	r7, fp
 8004b9a:	f7ff b845 	b.w	8003c28 <_svfprintf_r+0x20c>
 8004b9e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004ba0:	4abc      	ldr	r2, [pc, #752]	; (8004e94 <_svfprintf_r+0x1478>)
 8004ba2:	f8c8 2000 	str.w	r2, [r8]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	3401      	adds	r4, #1
 8004baa:	2201      	movs	r2, #1
 8004bac:	2b07      	cmp	r3, #7
 8004bae:	942a      	str	r4, [sp, #168]	; 0xa8
 8004bb0:	9329      	str	r3, [sp, #164]	; 0xa4
 8004bb2:	f8c8 2004 	str.w	r2, [r8, #4]
 8004bb6:	f300 8138 	bgt.w	8004e2a <_svfprintf_r+0x140e>
 8004bba:	f108 0808 	add.w	r8, r8, #8
 8004bbe:	2900      	cmp	r1, #0
 8004bc0:	f040 8097 	bne.w	8004cf2 <_svfprintf_r+0x12d6>
 8004bc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004bc6:	f007 0301 	and.w	r3, r7, #1
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f43f a90e 	beq.w	8003dec <_svfprintf_r+0x3d0>
 8004bd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004bd2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004bd4:	191a      	adds	r2, r3, r4
 8004bd6:	e9c8 1300 	strd	r1, r3, [r8]
 8004bda:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004bdc:	922a      	str	r2, [sp, #168]	; 0xa8
 8004bde:	3301      	adds	r3, #1
 8004be0:	2b07      	cmp	r3, #7
 8004be2:	9329      	str	r3, [sp, #164]	; 0xa4
 8004be4:	f300 8147 	bgt.w	8004e76 <_svfprintf_r+0x145a>
 8004be8:	f108 0808 	add.w	r8, r8, #8
 8004bec:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004bee:	f8c8 5000 	str.w	r5, [r8]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	188c      	adds	r4, r1, r2
 8004bf6:	2b07      	cmp	r3, #7
 8004bf8:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8004bfc:	f8c8 1004 	str.w	r1, [r8, #4]
 8004c00:	f77f a8f2 	ble.w	8003de8 <_svfprintf_r+0x3cc>
 8004c04:	f7ff bbb7 	b.w	8004376 <_svfprintf_r+0x95a>
 8004c08:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c0c:	931d      	str	r3, [sp, #116]	; 0x74
 8004c0e:	aa28      	add	r2, sp, #160	; 0xa0
 8004c10:	f002 fc84 	bl	800751c <__ssprint_r>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	f47f a870 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004c1a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8004c1e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004c20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004c22:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004c26:	f7ff b89e 	b.w	8003d66 <_svfprintf_r+0x34a>
 8004c2a:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 8004c2e:	f000 80c2 	beq.w	8004db6 <_svfprintf_r+0x139a>
 8004c32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c34:	f852 4b04 	ldr.w	r4, [r2], #4
 8004c38:	920e      	str	r2, [sp, #56]	; 0x38
 8004c3a:	4699      	mov	r9, r3
 8004c3c:	b2a4      	uxth	r4, r4
 8004c3e:	e66c      	b.n	800491a <_svfprintf_r+0xefe>
 8004c40:	46bb      	mov	fp, r7
 8004c42:	f7fe bfe4 	b.w	8003c0e <_svfprintf_r+0x1f2>
 8004c46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c4a:	aa28      	add	r2, sp, #160	; 0xa0
 8004c4c:	f002 fc66 	bl	800751c <__ssprint_r>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	f47f a852 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004c56:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004c58:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004c5c:	f7ff ba78 	b.w	8004150 <_svfprintf_r+0x734>
 8004c60:	4614      	mov	r4, r2
 8004c62:	463a      	mov	r2, r7
 8004c64:	464f      	mov	r7, r9
 8004c66:	4691      	mov	r9, r2
 8004c68:	3301      	adds	r3, #1
 8004c6a:	442c      	add	r4, r5
 8004c6c:	2b07      	cmp	r3, #7
 8004c6e:	f8c8 9000 	str.w	r9, [r8]
 8004c72:	f8c8 5004 	str.w	r5, [r8, #4]
 8004c76:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8004c7a:	f77f a8b5 	ble.w	8003de8 <_svfprintf_r+0x3cc>
 8004c7e:	f7ff bb7a 	b.w	8004376 <_svfprintf_r+0x95a>
 8004c82:	aa28      	add	r2, sp, #160	; 0xa0
 8004c84:	4659      	mov	r1, fp
 8004c86:	4650      	mov	r0, sl
 8004c88:	f002 fc48 	bl	800751c <__ssprint_r>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	f47f a834 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004c92:	7838      	ldrb	r0, [r7, #0]
 8004c94:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8004c96:	aa2b      	add	r2, sp, #172	; 0xac
 8004c98:	e6e1      	b.n	8004a5e <_svfprintf_r+0x1042>
 8004c9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c9c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004c9e:	aa28      	add	r2, sp, #160	; 0xa0
 8004ca0:	f002 fc3c 	bl	800751c <__ssprint_r>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f47f a828 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004caa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004cac:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004cb0:	f7ff b882 	b.w	8003db8 <_svfprintf_r+0x39c>
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	46bb      	mov	fp, r7
 8004cb8:	f47f a9f3 	bne.w	80040a2 <_svfprintf_r+0x686>
 8004cbc:	f7fe bfac 	b.w	8003c18 <_svfprintf_r+0x1fc>
 8004cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cc2:	9908      	ldr	r1, [sp, #32]
 8004cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cc8:	4655      	mov	r5, sl
 8004cca:	6011      	str	r1, [r2, #0]
 8004ccc:	930e      	str	r3, [sp, #56]	; 0x38
 8004cce:	f7ff b8ab 	b.w	8003e28 <_svfprintf_r+0x40c>
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	bf28      	it	cs
 8004cd8:	2306      	movcs	r3, #6
 8004cda:	9507      	str	r5, [sp, #28]
 8004cdc:	950d      	str	r5, [sp, #52]	; 0x34
 8004cde:	462a      	mov	r2, r5
 8004ce0:	9306      	str	r3, [sp, #24]
 8004ce2:	4d6d      	ldr	r5, [pc, #436]	; (8004e98 <_svfprintf_r+0x147c>)
 8004ce4:	940e      	str	r4, [sp, #56]	; 0x38
 8004ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ce8:	910f      	str	r1, [sp, #60]	; 0x3c
 8004cea:	9113      	str	r1, [sp, #76]	; 0x4c
 8004cec:	9110      	str	r1, [sp, #64]	; 0x40
 8004cee:	f7fe bfa9 	b.w	8003c44 <_svfprintf_r+0x228>
 8004cf2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004cf4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004cf6:	191a      	adds	r2, r3, r4
 8004cf8:	e9c8 0300 	strd	r0, r3, [r8]
 8004cfc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8004cfe:	922a      	str	r2, [sp, #168]	; 0xa8
 8004d00:	3301      	adds	r3, #1
 8004d02:	2b07      	cmp	r3, #7
 8004d04:	9329      	str	r3, [sp, #164]	; 0xa4
 8004d06:	f300 80b6 	bgt.w	8004e76 <_svfprintf_r+0x145a>
 8004d0a:	f108 0808 	add.w	r8, r8, #8
 8004d0e:	2900      	cmp	r1, #0
 8004d10:	f6bf af6c 	bge.w	8004bec <_svfprintf_r+0x11d0>
 8004d14:	424e      	negs	r6, r1
 8004d16:	3110      	adds	r1, #16
 8004d18:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8004e9c <_svfprintf_r+0x1480>
 8004d1c:	f280 8297 	bge.w	800524e <_svfprintf_r+0x1832>
 8004d20:	4641      	mov	r1, r8
 8004d22:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004d26:	46a8      	mov	r8, r5
 8004d28:	2410      	movs	r4, #16
 8004d2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d2c:	e004      	b.n	8004d38 <_svfprintf_r+0x131c>
 8004d2e:	3108      	adds	r1, #8
 8004d30:	3e10      	subs	r6, #16
 8004d32:	2e10      	cmp	r6, #16
 8004d34:	f340 8289 	ble.w	800524a <_svfprintf_r+0x182e>
 8004d38:	3301      	adds	r3, #1
 8004d3a:	3210      	adds	r2, #16
 8004d3c:	2b07      	cmp	r3, #7
 8004d3e:	e9c1 9400 	strd	r9, r4, [r1]
 8004d42:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8004d46:	ddf2      	ble.n	8004d2e <_svfprintf_r+0x1312>
 8004d48:	aa28      	add	r2, sp, #160	; 0xa0
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4658      	mov	r0, fp
 8004d4e:	f002 fbe5 	bl	800751c <__ssprint_r>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	f47e afd1 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004d58:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8004d5c:	a92b      	add	r1, sp, #172	; 0xac
 8004d5e:	e7e7      	b.n	8004d30 <_svfprintf_r+0x1314>
 8004d60:	9f07      	ldr	r7, [sp, #28]
 8004d62:	4614      	mov	r4, r2
 8004d64:	3601      	adds	r6, #1
 8004d66:	442c      	add	r4, r5
 8004d68:	2e07      	cmp	r6, #7
 8004d6a:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
 8004d6e:	f8c8 9000 	str.w	r9, [r8]
 8004d72:	f8c8 5004 	str.w	r5, [r8, #4]
 8004d76:	f77f aaef 	ble.w	8004358 <_svfprintf_r+0x93c>
 8004d7a:	e446      	b.n	800460a <_svfprintf_r+0xbee>
 8004d7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d7e:	f417 7900 	ands.w	r9, r7, #512	; 0x200
 8004d82:	bf14      	ite	ne
 8004d84:	f853 4b04 	ldrne.w	r4, [r3], #4
 8004d88:	f853 4b04 	ldreq.w	r4, [r3], #4
 8004d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8004d8e:	bf1c      	itt	ne
 8004d90:	4691      	movne	r9, r2
 8004d92:	b2e4      	uxtbne	r4, r4
 8004d94:	f7fe bf6b 	b.w	8003c6e <_svfprintf_r+0x252>
 8004d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d9a:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
 8004d9e:	bf14      	ite	ne
 8004da0:	f853 4b04 	ldrne.w	r4, [r3], #4
 8004da4:	f853 4b04 	ldreq.w	r4, [r3], #4
 8004da8:	930e      	str	r3, [sp, #56]	; 0x38
 8004daa:	bf1c      	itt	ne
 8004dac:	4691      	movne	r9, r2
 8004dae:	b2e4      	uxtbne	r4, r4
 8004db0:	2301      	movs	r3, #1
 8004db2:	f7fe bf5f 	b.w	8003c74 <_svfprintf_r+0x258>
 8004db6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004db8:	f417 7900 	ands.w	r9, r7, #512	; 0x200
 8004dbc:	bf14      	ite	ne
 8004dbe:	f853 4b04 	ldrne.w	r4, [r3], #4
 8004dc2:	f853 4b04 	ldreq.w	r4, [r3], #4
 8004dc6:	930e      	str	r3, [sp, #56]	; 0x38
 8004dc8:	bf1c      	itt	ne
 8004dca:	4691      	movne	r9, r2
 8004dcc:	b2e4      	uxtbne	r4, r4
 8004dce:	e5a4      	b.n	800491a <_svfprintf_r+0xefe>
 8004dd0:	4645      	mov	r5, r8
 8004dd2:	4690      	mov	r8, r2
 8004dd4:	463a      	mov	r2, r7
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	464f      	mov	r7, r9
 8004dda:	4691      	mov	r9, r2
 8004ddc:	3301      	adds	r3, #1
 8004dde:	4434      	add	r4, r6
 8004de0:	2b07      	cmp	r3, #7
 8004de2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
 8004de6:	f8c8 9000 	str.w	r9, [r8]
 8004dea:	f8c8 6004 	str.w	r6, [r8, #4]
 8004dee:	dc57      	bgt.n	8004ea0 <_svfprintf_r+0x1484>
 8004df0:	f108 0808 	add.w	r8, r8, #8
 8004df4:	f7ff bb8b 	b.w	800450e <_svfprintf_r+0xaf2>
 8004df8:	222d      	movs	r2, #45	; 0x2d
 8004dfa:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8004dfe:	f7ff b850 	b.w	8003ea2 <_svfprintf_r+0x486>
 8004e02:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8004e04:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004e06:	1aed      	subs	r5, r5, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	f002 fb54 	bl	80074b8 <strncpy>
 8004e10:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004e14:	b10b      	cbz	r3, 8004e1a <_svfprintf_r+0x13fe>
 8004e16:	f108 0801 	add.w	r8, r8, #1
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	220a      	movs	r2, #10
 8004e20:	2300      	movs	r3, #0
 8004e22:	2600      	movs	r6, #0
 8004e24:	f006 fd08 	bl	800b838 <__aeabi_uldivmod>
 8004e28:	e68f      	b.n	8004b4a <_svfprintf_r+0x112e>
 8004e2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e2e:	aa28      	add	r2, sp, #160	; 0xa0
 8004e30:	f002 fb74 	bl	800751c <__ssprint_r>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	f47e af60 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004e3a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004e3c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004e3e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004e42:	e6bc      	b.n	8004bbe <_svfprintf_r+0x11a2>
 8004e44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e46:	18ae      	adds	r6, r5, r2
 8004e48:	eba6 060b 	sub.w	r6, r6, fp
 8004e4c:	1ad5      	subs	r5, r2, r3
 8004e4e:	42ae      	cmp	r6, r5
 8004e50:	bfa8      	it	ge
 8004e52:	462e      	movge	r6, r5
 8004e54:	f7ff bb8e 	b.w	8004574 <_svfprintf_r+0xb58>
 8004e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e5a:	9908      	ldr	r1, [sp, #32]
 8004e5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e60:	930e      	str	r3, [sp, #56]	; 0x38
 8004e62:	8011      	strh	r1, [r2, #0]
 8004e64:	4655      	mov	r5, sl
 8004e66:	f7fe bfdf 	b.w	8003e28 <_svfprintf_r+0x40c>
 8004e6a:	f344 19c0 	sbfx	r9, r4, #7, #1
 8004e6e:	464b      	mov	r3, r9
 8004e70:	b264      	sxtb	r4, r4
 8004e72:	f7fe bebf 	b.w	8003bf4 <_svfprintf_r+0x1d8>
 8004e76:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004e7a:	aa28      	add	r2, sp, #160	; 0xa0
 8004e7c:	f002 fb4e 	bl	800751c <__ssprint_r>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	f47e af3a 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004e86:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8004e8a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004e8c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004e90:	e73d      	b.n	8004d0e <_svfprintf_r+0x12f2>
 8004e92:	bf00      	nop
 8004e94:	0800be08 	.word	0x0800be08
 8004e98:	0800be00 	.word	0x0800be00
 8004e9c:	0800be1c 	.word	0x0800be1c
 8004ea0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004ea2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004ea4:	aa28      	add	r2, sp, #160	; 0xa0
 8004ea6:	f002 fb39 	bl	800751c <__ssprint_r>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	f47e af25 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004eb0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004eb2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004eb6:	f7ff bb2a 	b.w	800450e <_svfprintf_r+0xaf2>
 8004eba:	2306      	movs	r3, #6
 8004ebc:	9307      	str	r3, [sp, #28]
 8004ebe:	e456      	b.n	800476e <_svfprintf_r+0xd52>
 8004ec0:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
 8004ec4:	18eb      	adds	r3, r5, r3
 8004ec6:	429e      	cmp	r6, r3
 8004ec8:	9719      	str	r7, [sp, #100]	; 0x64
 8004eca:	46b3      	mov	fp, r6
 8004ecc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8004ed0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004ed2:	4690      	mov	r8, r2
 8004ed4:	460c      	mov	r4, r1
 8004ed6:	bf28      	it	cs
 8004ed8:	469b      	movcs	fp, r3
 8004eda:	f7ff bb1e 	b.w	800451a <_svfprintf_r+0xafe>
 8004ede:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ee0:	9310      	str	r3, [sp, #64]	; 0x40
 8004ee2:	1cda      	adds	r2, r3, #3
 8004ee4:	db02      	blt.n	8004eec <_svfprintf_r+0x14d0>
 8004ee6:	9a07      	ldr	r2, [sp, #28]
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	dd04      	ble.n	8004ef6 <_svfprintf_r+0x14da>
 8004eec:	3e02      	subs	r6, #2
 8004eee:	f026 0320 	bic.w	r3, r6, #32
 8004ef2:	9306      	str	r3, [sp, #24]
 8004ef4:	e477      	b.n	80047e6 <_svfprintf_r+0xdca>
 8004ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ef8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004efa:	4293      	cmp	r3, r2
 8004efc:	f2c0 8148 	blt.w	8005190 <_svfprintf_r+0x1774>
 8004f00:	f019 0f01 	tst.w	r9, #1
 8004f04:	f000 8211 	beq.w	800532a <_svfprintf_r+0x190e>
 8004f08:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004f0a:	4413      	add	r3, r2
 8004f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f0e:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8004f12:	d003      	beq.n	8004f1c <_svfprintf_r+0x1500>
 8004f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f300 81c7 	bgt.w	80052aa <_svfprintf_r+0x188e>
 8004f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004f22:	9306      	str	r3, [sp, #24]
 8004f24:	2667      	movs	r6, #103	; 0x67
 8004f26:	2300      	movs	r3, #0
 8004f28:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f2c:	e4bc      	b.n	80048a8 <_svfprintf_r+0xe8c>
 8004f2e:	222d      	movs	r2, #45	; 0x2d
 8004f30:	2300      	movs	r3, #0
 8004f32:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
 8004f36:	9307      	str	r3, [sp, #28]
 8004f38:	f7fe be86 	b.w	8003c48 <_svfprintf_r+0x22c>
 8004f3c:	aa28      	add	r2, sp, #160	; 0xa0
 8004f3e:	4659      	mov	r1, fp
 8004f40:	4650      	mov	r0, sl
 8004f42:	f002 faeb 	bl	800751c <__ssprint_r>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f47e aed7 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004f4c:	7838      	ldrb	r0, [r7, #0]
 8004f4e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8004f50:	aa2b      	add	r2, sp, #172	; 0xac
 8004f52:	4406      	add	r6, r0
 8004f54:	e58a      	b.n	8004a6c <_svfprintf_r+0x1050>
 8004f56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f58:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f5a:	aa28      	add	r2, sp, #160	; 0xa0
 8004f5c:	f002 fade 	bl	800751c <__ssprint_r>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	f47e aeca 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004f66:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004f68:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004f6c:	f7ff bac6 	b.w	80044fc <_svfprintf_r+0xae0>
 8004f70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004f74:	aa28      	add	r2, sp, #160	; 0xa0
 8004f76:	f002 fad1 	bl	800751c <__ssprint_r>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	f47e aebd 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8004f80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f82:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8004f84:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 8004f88:	f7ff badc 	b.w	8004544 <_svfprintf_r+0xb28>
 8004f8c:	9907      	ldr	r1, [sp, #28]
 8004f8e:	9101      	str	r1, [sp, #4]
 8004f90:	a926      	add	r1, sp, #152	; 0x98
 8004f92:	9104      	str	r1, [sp, #16]
 8004f94:	a923      	add	r1, sp, #140	; 0x8c
 8004f96:	9103      	str	r1, [sp, #12]
 8004f98:	a922      	add	r1, sp, #136	; 0x88
 8004f9a:	9102      	str	r1, [sp, #8]
 8004f9c:	2103      	movs	r1, #3
 8004f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fa0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004fa2:	9100      	str	r1, [sp, #0]
 8004fa4:	465a      	mov	r2, fp
 8004fa6:	f000 faeb 	bl	8005580 <_dtoa_r>
 8004faa:	7803      	ldrb	r3, [r0, #0]
 8004fac:	2b30      	cmp	r3, #48	; 0x30
 8004fae:	4605      	mov	r5, r0
 8004fb0:	f000 81f1 	beq.w	8005396 <_svfprintf_r+0x197a>
 8004fb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004fb6:	9a07      	ldr	r2, [sp, #28]
 8004fb8:	46b9      	mov	r9, r7
 8004fba:	4413      	add	r3, r2
 8004fbc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8004fbe:	18ec      	adds	r4, r5, r3
 8004fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fc2:	4658      	mov	r0, fp
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f006 fbc6 	bl	800b758 <__aeabi_dcmpeq>
 8004fcc:	b110      	cbz	r0, 8004fd4 <_svfprintf_r+0x15b8>
 8004fce:	4623      	mov	r3, r4
 8004fd0:	f7ff bbfd 	b.w	80047ce <_svfprintf_r+0xdb2>
 8004fd4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	f4bf abf9 	bcs.w	80047ce <_svfprintf_r+0xdb2>
 8004fdc:	2130      	movs	r1, #48	; 0x30
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	9226      	str	r2, [sp, #152]	; 0x98
 8004fe2:	7019      	strb	r1, [r3, #0]
 8004fe4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004fe6:	429c      	cmp	r4, r3
 8004fe8:	d8f9      	bhi.n	8004fde <_svfprintf_r+0x15c2>
 8004fea:	f7ff bbf0 	b.w	80047ce <_svfprintf_r+0xdb2>
 8004fee:	9b07      	ldr	r3, [sp, #28]
 8004ff0:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
 8004ff4:	940e      	str	r4, [sp, #56]	; 0x38
 8004ff6:	9306      	str	r3, [sp, #24]
 8004ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ffa:	9007      	str	r0, [sp, #28]
 8004ffc:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ffe:	9013      	str	r0, [sp, #76]	; 0x4c
 8005000:	9010      	str	r0, [sp, #64]	; 0x40
 8005002:	f7fe be1f 	b.w	8003c44 <_svfprintf_r+0x228>
 8005006:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005008:	9210      	str	r2, [sp, #64]	; 0x40
 800500a:	2a00      	cmp	r2, #0
 800500c:	f340 81e0 	ble.w	80053d0 <_svfprintf_r+0x19b4>
 8005010:	9907      	ldr	r1, [sp, #28]
 8005012:	f009 0301 	and.w	r3, r9, #1
 8005016:	430b      	orrs	r3, r1
 8005018:	f040 81b7 	bne.w	800538a <_svfprintf_r+0x196e>
 800501c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800501e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005020:	2666      	movs	r6, #102	; 0x66
 8005022:	f419 6f80 	tst.w	r9, #1024	; 0x400
 8005026:	f040 8141 	bne.w	80052ac <_svfprintf_r+0x1890>
 800502a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800502c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005030:	9306      	str	r3, [sp, #24]
 8005032:	e778      	b.n	8004f26 <_svfprintf_r+0x150a>
 8005034:	2330      	movs	r3, #48	; 0x30
 8005036:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800503a:	2358      	movs	r3, #88	; 0x58
 800503c:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
 8005040:	9b07      	ldr	r3, [sp, #28]
 8005042:	2b63      	cmp	r3, #99	; 0x63
 8005044:	f047 0402 	orr.w	r4, r7, #2
 8005048:	f300 80bf 	bgt.w	80051ca <_svfprintf_r+0x17ae>
 800504c:	2300      	movs	r3, #0
 800504e:	930d      	str	r3, [sp, #52]	; 0x34
 8005050:	ad3b      	add	r5, sp, #236	; 0xec
 8005052:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
 8005056:	f447 7381 	orr.w	r3, r7, #258	; 0x102
 800505a:	930f      	str	r3, [sp, #60]	; 0x3c
 800505c:	4613      	mov	r3, r2
 800505e:	2b00      	cmp	r3, #0
 8005060:	4627      	mov	r7, r4
 8005062:	f2c0 8085 	blt.w	8005170 <_svfprintf_r+0x1754>
 8005066:	930b      	str	r3, [sp, #44]	; 0x2c
 8005068:	f026 0320 	bic.w	r3, r6, #32
 800506c:	9306      	str	r3, [sp, #24]
 800506e:	2300      	movs	r3, #0
 8005070:	468b      	mov	fp, r1
 8005072:	931d      	str	r3, [sp, #116]	; 0x74
 8005074:	2e61      	cmp	r6, #97	; 0x61
 8005076:	f000 8140 	beq.w	80052fa <_svfprintf_r+0x18de>
 800507a:	2e41      	cmp	r6, #65	; 0x41
 800507c:	f47f ab85 	bne.w	800478a <_svfprintf_r+0xd6e>
 8005080:	aa22      	add	r2, sp, #136	; 0x88
 8005082:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005084:	4658      	mov	r0, fp
 8005086:	f002 f9df 	bl	8007448 <frexp>
 800508a:	2200      	movs	r2, #0
 800508c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005090:	f006 f8fa 	bl	800b288 <__aeabi_dmul>
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800509c:	2200      	movs	r2, #0
 800509e:	2300      	movs	r3, #0
 80050a0:	f006 fb5a 	bl	800b758 <__aeabi_dcmpeq>
 80050a4:	b108      	cbz	r0, 80050aa <_svfprintf_r+0x168e>
 80050a6:	2301      	movs	r3, #1
 80050a8:	9322      	str	r3, [sp, #136]	; 0x88
 80050aa:	4bac      	ldr	r3, [pc, #688]	; (800535c <_svfprintf_r+0x1940>)
 80050ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ae:	9b07      	ldr	r3, [sp, #28]
 80050b0:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
 80050b4:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
 80050b8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80050bc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80050c0:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 80050c4:	46ab      	mov	fp, r5
 80050c6:	9510      	str	r5, [sp, #64]	; 0x40
 80050c8:	e006      	b.n	80050d8 <_svfprintf_r+0x16bc>
 80050ca:	2200      	movs	r2, #0
 80050cc:	2300      	movs	r3, #0
 80050ce:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80050d2:	f006 fb41 	bl	800b758 <__aeabi_dcmpeq>
 80050d6:	b9e8      	cbnz	r0, 8005114 <_svfprintf_r+0x16f8>
 80050d8:	4ba1      	ldr	r3, [pc, #644]	; (8005360 <_svfprintf_r+0x1944>)
 80050da:	2200      	movs	r2, #0
 80050dc:	4630      	mov	r0, r6
 80050de:	4639      	mov	r1, r7
 80050e0:	f006 f8d2 	bl	800b288 <__aeabi_dmul>
 80050e4:	460f      	mov	r7, r1
 80050e6:	4606      	mov	r6, r0
 80050e8:	f006 fb7e 	bl	800b7e8 <__aeabi_d2iz>
 80050ec:	4604      	mov	r4, r0
 80050ee:	f006 f861 	bl	800b1b4 <__aeabi_i2d>
 80050f2:	460b      	mov	r3, r1
 80050f4:	4602      	mov	r2, r0
 80050f6:	4639      	mov	r1, r7
 80050f8:	4630      	mov	r0, r6
 80050fa:	f005 ff0d 	bl	800af18 <__aeabi_dsub>
 80050fe:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8005102:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005106:	46d8      	mov	r8, fp
 8005108:	464d      	mov	r5, r9
 800510a:	f80b 3b01 	strb.w	r3, [fp], #1
 800510e:	4606      	mov	r6, r0
 8005110:	460f      	mov	r7, r1
 8005112:	d1da      	bne.n	80050ca <_svfprintf_r+0x16ae>
 8005114:	4630      	mov	r0, r6
 8005116:	4639      	mov	r1, r7
 8005118:	4b92      	ldr	r3, [pc, #584]	; (8005364 <_svfprintf_r+0x1948>)
 800511a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800511e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8005120:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8005124:	2200      	movs	r2, #0
 8005126:	46a9      	mov	r9, r5
 8005128:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 800512c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800512e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8005130:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005134:	f006 fb38 	bl	800b7a8 <__aeabi_dcmpgt>
 8005138:	2800      	cmp	r0, #0
 800513a:	d155      	bne.n	80051e8 <_svfprintf_r+0x17cc>
 800513c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005140:	4b88      	ldr	r3, [pc, #544]	; (8005364 <_svfprintf_r+0x1948>)
 8005142:	2200      	movs	r2, #0
 8005144:	f006 fb08 	bl	800b758 <__aeabi_dcmpeq>
 8005148:	b108      	cbz	r0, 800514e <_svfprintf_r+0x1732>
 800514a:	07e1      	lsls	r1, r4, #31
 800514c:	d44c      	bmi.n	80051e8 <_svfprintf_r+0x17cc>
 800514e:	464b      	mov	r3, r9
 8005150:	2b00      	cmp	r3, #0
 8005152:	db06      	blt.n	8005162 <_svfprintf_r+0x1746>
 8005154:	3301      	adds	r3, #1
 8005156:	445b      	add	r3, fp
 8005158:	2230      	movs	r2, #48	; 0x30
 800515a:	f80b 2b01 	strb.w	r2, [fp], #1
 800515e:	455b      	cmp	r3, fp
 8005160:	d1fb      	bne.n	800515a <_svfprintf_r+0x173e>
 8005162:	ebab 0305 	sub.w	r3, fp, r5
 8005166:	46b9      	mov	r9, r7
 8005168:	9312      	str	r3, [sp, #72]	; 0x48
 800516a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800516c:	f7ff bb31 	b.w	80047d2 <_svfprintf_r+0xdb6>
 8005170:	f026 0320 	bic.w	r3, r6, #32
 8005174:	9306      	str	r3, [sp, #24]
 8005176:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
 800517a:	469b      	mov	fp, r3
 800517c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 8005180:	930b      	str	r3, [sp, #44]	; 0x2c
 8005182:	232d      	movs	r3, #45	; 0x2d
 8005184:	931d      	str	r3, [sp, #116]	; 0x74
 8005186:	e775      	b.n	8005074 <_svfprintf_r+0x1658>
 8005188:	2300      	movs	r3, #0
 800518a:	9307      	str	r3, [sp, #28]
 800518c:	f7fe bc96 	b.w	8003abc <_svfprintf_r+0xa0>
 8005190:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005192:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005194:	189a      	adds	r2, r3, r2
 8005196:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005198:	920b      	str	r2, [sp, #44]	; 0x2c
 800519a:	2b00      	cmp	r3, #0
 800519c:	f340 8109 	ble.w	80053b2 <_svfprintf_r+0x1996>
 80051a0:	2667      	movs	r6, #103	; 0x67
 80051a2:	e73e      	b.n	8005022 <_svfprintf_r+0x1606>
 80051a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051a8:	aa28      	add	r2, sp, #160	; 0xa0
 80051aa:	f002 f9b7 	bl	800751c <__ssprint_r>
 80051ae:	2800      	cmp	r0, #0
 80051b0:	f47e ada3 	bne.w	8003cfa <_svfprintf_r+0x2de>
 80051b4:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80051b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051b8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80051ba:	1b5d      	subs	r5, r3, r5
 80051bc:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 80051c0:	f7ff b9d8 	b.w	8004574 <_svfprintf_r+0xb58>
 80051c4:	9b07      	ldr	r3, [sp, #28]
 80051c6:	18ec      	adds	r4, r5, r3
 80051c8:	e6fa      	b.n	8004fc0 <_svfprintf_r+0x15a4>
 80051ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80051cc:	1c59      	adds	r1, r3, #1
 80051ce:	f7fe f827 	bl	8003220 <_malloc_r>
 80051d2:	4605      	mov	r5, r0
 80051d4:	2800      	cmp	r0, #0
 80051d6:	f000 8126 	beq.w	8005426 <_svfprintf_r+0x1a0a>
 80051da:	900d      	str	r0, [sp, #52]	; 0x34
 80051dc:	e739      	b.n	8005052 <_svfprintf_r+0x1636>
 80051de:	2330      	movs	r3, #48	; 0x30
 80051e0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80051e4:	2378      	movs	r3, #120	; 0x78
 80051e6:	e729      	b.n	800503c <_svfprintf_r+0x1620>
 80051e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051ea:	9326      	str	r3, [sp, #152]	; 0x98
 80051ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ee:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 80051f2:	7bd9      	ldrb	r1, [r3, #15]
 80051f4:	428a      	cmp	r2, r1
 80051f6:	465b      	mov	r3, fp
 80051f8:	d109      	bne.n	800520e <_svfprintf_r+0x17f2>
 80051fa:	2030      	movs	r0, #48	; 0x30
 80051fc:	f803 0c01 	strb.w	r0, [r3, #-1]
 8005200:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005202:	1e5a      	subs	r2, r3, #1
 8005204:	9226      	str	r2, [sp, #152]	; 0x98
 8005206:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800520a:	4291      	cmp	r1, r2
 800520c:	d0f6      	beq.n	80051fc <_svfprintf_r+0x17e0>
 800520e:	2a39      	cmp	r2, #57	; 0x39
 8005210:	bf0b      	itete	eq
 8005212:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
 8005214:	3201      	addne	r2, #1
 8005216:	7a92      	ldrbeq	r2, [r2, #10]
 8005218:	b2d2      	uxtbne	r2, r2
 800521a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800521e:	e7a0      	b.n	8005162 <_svfprintf_r+0x1746>
 8005220:	9907      	ldr	r1, [sp, #28]
 8005222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005224:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005226:	1c4c      	adds	r4, r1, #1
 8005228:	a926      	add	r1, sp, #152	; 0x98
 800522a:	9104      	str	r1, [sp, #16]
 800522c:	a923      	add	r1, sp, #140	; 0x8c
 800522e:	9103      	str	r1, [sp, #12]
 8005230:	a922      	add	r1, sp, #136	; 0x88
 8005232:	9102      	str	r1, [sp, #8]
 8005234:	2102      	movs	r1, #2
 8005236:	465a      	mov	r2, fp
 8005238:	9401      	str	r4, [sp, #4]
 800523a:	9100      	str	r1, [sp, #0]
 800523c:	f000 f9a0 	bl	8005580 <_dtoa_r>
 8005240:	4605      	mov	r5, r0
 8005242:	46b9      	mov	r9, r7
 8005244:	442c      	add	r4, r5
 8005246:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005248:	e6ba      	b.n	8004fc0 <_svfprintf_r+0x15a4>
 800524a:	4645      	mov	r5, r8
 800524c:	4688      	mov	r8, r1
 800524e:	3301      	adds	r3, #1
 8005250:	4432      	add	r2, r6
 8005252:	2b07      	cmp	r3, #7
 8005254:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
 8005258:	f8c8 9000 	str.w	r9, [r8]
 800525c:	f8c8 6004 	str.w	r6, [r8, #4]
 8005260:	f77f acc2 	ble.w	8004be8 <_svfprintf_r+0x11cc>
 8005264:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005266:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005268:	aa28      	add	r2, sp, #160	; 0xa0
 800526a:	f002 f957 	bl	800751c <__ssprint_r>
 800526e:	2800      	cmp	r0, #0
 8005270:	f47e ad43 	bne.w	8003cfa <_svfprintf_r+0x2de>
 8005274:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
 8005278:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
 800527c:	e4b6      	b.n	8004bec <_svfprintf_r+0x11d0>
 800527e:	9b07      	ldr	r3, [sp, #28]
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf08      	it	eq
 8005284:	2301      	moveq	r3, #1
 8005286:	9307      	str	r3, [sp, #28]
 8005288:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 800528c:	930f      	str	r3, [sp, #60]	; 0x3c
 800528e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005290:	2b00      	cmp	r3, #0
 8005292:	f2c0 80b1 	blt.w	80053f8 <_svfprintf_r+0x19dc>
 8005296:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800529a:	900d      	str	r0, [sp, #52]	; 0x34
 800529c:	930b      	str	r3, [sp, #44]	; 0x2c
 800529e:	901d      	str	r0, [sp, #116]	; 0x74
 80052a0:	f7ff ba7a 	b.w	8004798 <_svfprintf_r+0xd7c>
 80052a4:	2300      	movs	r3, #0
 80052a6:	930d      	str	r3, [sp, #52]	; 0x34
 80052a8:	e765      	b.n	8005176 <_svfprintf_r+0x175a>
 80052aa:	2667      	movs	r6, #103	; 0x67
 80052ac:	9919      	ldr	r1, [sp, #100]	; 0x64
 80052ae:	780b      	ldrb	r3, [r1, #0]
 80052b0:	2bff      	cmp	r3, #255	; 0xff
 80052b2:	f000 80b2 	beq.w	800541a <_svfprintf_r+0x19fe>
 80052b6:	2400      	movs	r4, #0
 80052b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052ba:	4620      	mov	r0, r4
 80052bc:	e003      	b.n	80052c6 <_svfprintf_r+0x18aa>
 80052be:	3001      	adds	r0, #1
 80052c0:	3101      	adds	r1, #1
 80052c2:	2bff      	cmp	r3, #255	; 0xff
 80052c4:	d008      	beq.n	80052d8 <_svfprintf_r+0x18bc>
 80052c6:	4293      	cmp	r3, r2
 80052c8:	da06      	bge.n	80052d8 <_svfprintf_r+0x18bc>
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	784b      	ldrb	r3, [r1, #1]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f5      	bne.n	80052be <_svfprintf_r+0x18a2>
 80052d2:	780b      	ldrb	r3, [r1, #0]
 80052d4:	3401      	adds	r4, #1
 80052d6:	e7f4      	b.n	80052c2 <_svfprintf_r+0x18a6>
 80052d8:	9119      	str	r1, [sp, #100]	; 0x64
 80052da:	9210      	str	r2, [sp, #64]	; 0x40
 80052dc:	9013      	str	r0, [sp, #76]	; 0x4c
 80052de:	940f      	str	r4, [sp, #60]	; 0x3c
 80052e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80052e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80052e4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80052e6:	4413      	add	r3, r2
 80052e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052ea:	fb01 2303 	mla	r3, r1, r3, r2
 80052ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80052f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80052f4:	9306      	str	r3, [sp, #24]
 80052f6:	f7ff bad7 	b.w	80048a8 <_svfprintf_r+0xe8c>
 80052fa:	aa22      	add	r2, sp, #136	; 0x88
 80052fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052fe:	4658      	mov	r0, fp
 8005300:	f002 f8a2 	bl	8007448 <frexp>
 8005304:	2200      	movs	r2, #0
 8005306:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800530a:	f005 ffbd 	bl	800b288 <__aeabi_dmul>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005316:	2200      	movs	r2, #0
 8005318:	2300      	movs	r3, #0
 800531a:	f006 fa1d 	bl	800b758 <__aeabi_dcmpeq>
 800531e:	b108      	cbz	r0, 8005324 <_svfprintf_r+0x1908>
 8005320:	2301      	movs	r3, #1
 8005322:	9322      	str	r3, [sp, #136]	; 0x88
 8005324:	4b10      	ldr	r3, [pc, #64]	; (8005368 <_svfprintf_r+0x194c>)
 8005326:	930b      	str	r3, [sp, #44]	; 0x2c
 8005328:	e6c1      	b.n	80050ae <_svfprintf_r+0x1692>
 800532a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800532c:	930b      	str	r3, [sp, #44]	; 0x2c
 800532e:	e5ee      	b.n	8004f0e <_svfprintf_r+0x14f2>
 8005330:	2900      	cmp	r1, #0
 8005332:	d163      	bne.n	80053fc <_svfprintf_r+0x19e0>
 8005334:	2230      	movs	r2, #48	; 0x30
 8005336:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
 800533a:	f10d 0293 	add.w	r2, sp, #147	; 0x93
 800533e:	3330      	adds	r3, #48	; 0x30
 8005340:	f802 3b01 	strb.w	r3, [r2], #1
 8005344:	ab24      	add	r3, sp, #144	; 0x90
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	931a      	str	r3, [sp, #104]	; 0x68
 800534a:	f7ff ba96 	b.w	800487a <_svfprintf_r+0xe5e>
 800534e:	f106 020f 	add.w	r2, r6, #15
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	2101      	movs	r1, #1
 8005356:	f7ff ba4f 	b.w	80047f8 <_svfprintf_r+0xddc>
 800535a:	bf00      	nop
 800535c:	0800bdec 	.word	0x0800bdec
 8005360:	40300000 	.word	0x40300000
 8005364:	3fe00000 	.word	0x3fe00000
 8005368:	0800bdd8 	.word	0x0800bdd8
 800536c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800536e:	4d38      	ldr	r5, [pc, #224]	; (8005450 <_svfprintf_r+0x1a34>)
 8005370:	2b00      	cmp	r3, #0
 8005372:	bfb4      	ite	lt
 8005374:	222d      	movlt	r2, #45	; 0x2d
 8005376:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
 800537a:	4b36      	ldr	r3, [pc, #216]	; (8005454 <_svfprintf_r+0x1a38>)
 800537c:	bfb8      	it	lt
 800537e:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
 8005382:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8005386:	f7fe bd90 	b.w	8003eaa <_svfprintf_r+0x48e>
 800538a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800538c:	18d3      	adds	r3, r2, r3
 800538e:	4419      	add	r1, r3
 8005390:	910b      	str	r1, [sp, #44]	; 0x2c
 8005392:	2666      	movs	r6, #102	; 0x66
 8005394:	e645      	b.n	8005022 <_svfprintf_r+0x1606>
 8005396:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005398:	4658      	mov	r0, fp
 800539a:	2200      	movs	r2, #0
 800539c:	2300      	movs	r3, #0
 800539e:	f006 f9db 	bl	800b758 <__aeabi_dcmpeq>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	f47f ae06 	bne.w	8004fb4 <_svfprintf_r+0x1598>
 80053a8:	9b07      	ldr	r3, [sp, #28]
 80053aa:	f1c3 0301 	rsb	r3, r3, #1
 80053ae:	9322      	str	r3, [sp, #136]	; 0x88
 80053b0:	e601      	b.n	8004fb6 <_svfprintf_r+0x159a>
 80053b2:	f1c3 0301 	rsb	r3, r3, #1
 80053b6:	441a      	add	r2, r3
 80053b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80053bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80053be:	9306      	str	r3, [sp, #24]
 80053c0:	2667      	movs	r6, #103	; 0x67
 80053c2:	e5b0      	b.n	8004f26 <_svfprintf_r+0x150a>
 80053c4:	f019 0f01 	tst.w	r9, #1
 80053c8:	f43f aa62 	beq.w	8004890 <_svfprintf_r+0xe74>
 80053cc:	f7ff ba5c 	b.w	8004888 <_svfprintf_r+0xe6c>
 80053d0:	9a07      	ldr	r2, [sp, #28]
 80053d2:	f009 0901 	and.w	r9, r9, #1
 80053d6:	ea59 0302 	orrs.w	r3, r9, r2
 80053da:	d104      	bne.n	80053e6 <_svfprintf_r+0x19ca>
 80053dc:	2301      	movs	r3, #1
 80053de:	9306      	str	r3, [sp, #24]
 80053e0:	2666      	movs	r6, #102	; 0x66
 80053e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80053e4:	e59f      	b.n	8004f26 <_svfprintf_r+0x150a>
 80053e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80053e8:	3301      	adds	r3, #1
 80053ea:	441a      	add	r2, r3
 80053ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80053f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80053f2:	9306      	str	r3, [sp, #24]
 80053f4:	2666      	movs	r6, #102	; 0x66
 80053f6:	e596      	b.n	8004f26 <_svfprintf_r+0x150a>
 80053f8:	900d      	str	r0, [sp, #52]	; 0x34
 80053fa:	e6bc      	b.n	8005176 <_svfprintf_r+0x175a>
 80053fc:	f10d 0292 	add.w	r2, sp, #146	; 0x92
 8005400:	e79d      	b.n	800533e <_svfprintf_r+0x1922>
 8005402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005404:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8005408:	4692      	mov	sl, r2
 800540a:	f853 2b04 	ldr.w	r2, [r3], #4
 800540e:	930e      	str	r3, [sp, #56]	; 0x38
 8005410:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8005414:	9207      	str	r2, [sp, #28]
 8005416:	f7fe bb4f 	b.w	8003ab8 <_svfprintf_r+0x9c>
 800541a:	2300      	movs	r3, #0
 800541c:	930f      	str	r3, [sp, #60]	; 0x3c
 800541e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005420:	e75e      	b.n	80052e0 <_svfprintf_r+0x18c4>
 8005422:	9c07      	ldr	r4, [sp, #28]
 8005424:	e70d      	b.n	8005242 <_svfprintf_r+0x1826>
 8005426:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005428:	898b      	ldrh	r3, [r1, #12]
 800542a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800542e:	4613      	mov	r3, r2
 8005430:	818a      	strh	r2, [r1, #12]
 8005432:	f7fe bc6a 	b.w	8003d0a <_svfprintf_r+0x2ee>
 8005436:	2302      	movs	r3, #2
 8005438:	931a      	str	r3, [sp, #104]	; 0x68
 800543a:	f7ff ba1e 	b.w	800487a <_svfprintf_r+0xe5e>
 800543e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005440:	230c      	movs	r3, #12
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005448:	9308      	str	r3, [sp, #32]
 800544a:	f7fe bc65 	b.w	8003d18 <_svfprintf_r+0x2fc>
 800544e:	bf00      	nop
 8005450:	0800bdd0 	.word	0x0800bdd0
 8005454:	0800bdd4 	.word	0x0800bdd4

08005458 <quorem>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	6903      	ldr	r3, [r0, #16]
 800545e:	690c      	ldr	r4, [r1, #16]
 8005460:	42a3      	cmp	r3, r4
 8005462:	b083      	sub	sp, #12
 8005464:	f2c0 8086 	blt.w	8005574 <quorem+0x11c>
 8005468:	3c01      	subs	r4, #1
 800546a:	f101 0514 	add.w	r5, r1, #20
 800546e:	00a3      	lsls	r3, r4, #2
 8005470:	f100 0814 	add.w	r8, r0, #20
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800547a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800547e:	3301      	adds	r3, #1
 8005480:	468a      	mov	sl, r1
 8005482:	429a      	cmp	r2, r3
 8005484:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8005488:	4681      	mov	r9, r0
 800548a:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 800548e:	9101      	str	r1, [sp, #4]
 8005490:	fbb2 f6f3 	udiv	r6, r2, r3
 8005494:	d338      	bcc.n	8005508 <quorem+0xb0>
 8005496:	2300      	movs	r3, #0
 8005498:	46ae      	mov	lr, r5
 800549a:	4640      	mov	r0, r8
 800549c:	469b      	mov	fp, r3
 800549e:	f85e 1b04 	ldr.w	r1, [lr], #4
 80054a2:	6802      	ldr	r2, [r0, #0]
 80054a4:	fa1f fc81 	uxth.w	ip, r1
 80054a8:	fb06 330c 	mla	r3, r6, ip, r3
 80054ac:	0c09      	lsrs	r1, r1, #16
 80054ae:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80054b2:	fb06 cc01 	mla	ip, r6, r1, ip
 80054b6:	b299      	uxth	r1, r3
 80054b8:	ebab 0101 	sub.w	r1, fp, r1
 80054bc:	fa1f f38c 	uxth.w	r3, ip
 80054c0:	fa11 f182 	uxtah	r1, r1, r2
 80054c4:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
 80054c8:	eb02 4221 	add.w	r2, r2, r1, asr #16
 80054cc:	b289      	uxth	r1, r1
 80054ce:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80054d2:	4577      	cmp	r7, lr
 80054d4:	f840 1b04 	str.w	r1, [r0], #4
 80054d8:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80054dc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80054e0:	d2dd      	bcs.n	800549e <quorem+0x46>
 80054e2:	9b00      	ldr	r3, [sp, #0]
 80054e4:	f858 3003 	ldr.w	r3, [r8, r3]
 80054e8:	b973      	cbnz	r3, 8005508 <quorem+0xb0>
 80054ea:	9b01      	ldr	r3, [sp, #4]
 80054ec:	3b04      	subs	r3, #4
 80054ee:	4598      	cmp	r8, r3
 80054f0:	d304      	bcc.n	80054fc <quorem+0xa4>
 80054f2:	e007      	b.n	8005504 <quorem+0xac>
 80054f4:	4598      	cmp	r8, r3
 80054f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80054fa:	d203      	bcs.n	8005504 <quorem+0xac>
 80054fc:	f853 2904 	ldr.w	r2, [r3], #-4
 8005500:	2a00      	cmp	r2, #0
 8005502:	d0f7      	beq.n	80054f4 <quorem+0x9c>
 8005504:	f8c9 4010 	str.w	r4, [r9, #16]
 8005508:	4651      	mov	r1, sl
 800550a:	4648      	mov	r0, r9
 800550c:	f001 fcd6 	bl	8006ebc <__mcmp>
 8005510:	2800      	cmp	r0, #0
 8005512:	db2b      	blt.n	800556c <quorem+0x114>
 8005514:	3601      	adds	r6, #1
 8005516:	4640      	mov	r0, r8
 8005518:	2300      	movs	r3, #0
 800551a:	f855 1b04 	ldr.w	r1, [r5], #4
 800551e:	f8d0 c000 	ldr.w	ip, [r0]
 8005522:	b28a      	uxth	r2, r1
 8005524:	1a9a      	subs	r2, r3, r2
 8005526:	0c0b      	lsrs	r3, r1, #16
 8005528:	fa12 f28c 	uxtah	r2, r2, ip
 800552c:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
 8005530:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005534:	b292      	uxth	r2, r2
 8005536:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800553a:	42af      	cmp	r7, r5
 800553c:	f840 2b04 	str.w	r2, [r0], #4
 8005540:	ea4f 4323 	mov.w	r3, r3, asr #16
 8005544:	d2e9      	bcs.n	800551a <quorem+0xc2>
 8005546:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800554a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800554e:	b96a      	cbnz	r2, 800556c <quorem+0x114>
 8005550:	3b04      	subs	r3, #4
 8005552:	4598      	cmp	r8, r3
 8005554:	d304      	bcc.n	8005560 <quorem+0x108>
 8005556:	e007      	b.n	8005568 <quorem+0x110>
 8005558:	4598      	cmp	r8, r3
 800555a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800555e:	d203      	bcs.n	8005568 <quorem+0x110>
 8005560:	f853 2904 	ldr.w	r2, [r3], #-4
 8005564:	2a00      	cmp	r2, #0
 8005566:	d0f7      	beq.n	8005558 <quorem+0x100>
 8005568:	f8c9 4010 	str.w	r4, [r9, #16]
 800556c:	4630      	mov	r0, r6
 800556e:	b003      	add	sp, #12
 8005570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005574:	2000      	movs	r0, #0
 8005576:	b003      	add	sp, #12
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	0000      	movs	r0, r0
	...

08005580 <_dtoa_r>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005586:	b099      	sub	sp, #100	; 0x64
 8005588:	4690      	mov	r8, r2
 800558a:	4699      	mov	r9, r3
 800558c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8005590:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8005592:	4604      	mov	r4, r0
 8005594:	b141      	cbz	r1, 80055a8 <_dtoa_r+0x28>
 8005596:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005598:	604a      	str	r2, [r1, #4]
 800559a:	2301      	movs	r3, #1
 800559c:	4093      	lsls	r3, r2
 800559e:	608b      	str	r3, [r1, #8]
 80055a0:	f001 f9d6 	bl	8006950 <_Bfree>
 80055a4:	2300      	movs	r3, #0
 80055a6:	6423      	str	r3, [r4, #64]	; 0x40
 80055a8:	f1b9 0a00 	subs.w	sl, r9, #0
 80055ac:	bfb4      	ite	lt
 80055ae:	2301      	movlt	r3, #1
 80055b0:	2300      	movge	r3, #0
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	4b76      	ldr	r3, [pc, #472]	; (8005790 <_dtoa_r+0x210>)
 80055b6:	bfbc      	itt	lt
 80055b8:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
 80055bc:	f8cd a014 	strlt.w	sl, [sp, #20]
 80055c0:	ea33 030a 	bics.w	r3, r3, sl
 80055c4:	f000 80aa 	beq.w	800571c <_dtoa_r+0x19c>
 80055c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055cc:	4610      	mov	r0, r2
 80055ce:	4619      	mov	r1, r3
 80055d0:	2200      	movs	r2, #0
 80055d2:	2300      	movs	r3, #0
 80055d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80055d8:	f006 f8be 	bl	800b758 <__aeabi_dcmpeq>
 80055dc:	4607      	mov	r7, r0
 80055de:	b170      	cbz	r0, 80055fe <_dtoa_r+0x7e>
 80055e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80055e2:	2301      	movs	r3, #1
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 82e4 	beq.w	8005bb6 <_dtoa_r+0x636>
 80055ee:	4869      	ldr	r0, [pc, #420]	; (8005794 <_dtoa_r+0x214>)
 80055f0:	6018      	str	r0, [r3, #0]
 80055f2:	1e43      	subs	r3, r0, #1
 80055f4:	9303      	str	r3, [sp, #12]
 80055f6:	9803      	ldr	r0, [sp, #12]
 80055f8:	b019      	add	sp, #100	; 0x64
 80055fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fe:	ab16      	add	r3, sp, #88	; 0x58
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	ab17      	add	r3, sp, #92	; 0x5c
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	4620      	mov	r0, r4
 8005608:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800560c:	f001 fda6 	bl	800715c <__d2b>
 8005610:	ea5f 561a 	movs.w	r6, sl, lsr #20
 8005614:	4605      	mov	r5, r0
 8005616:	f040 8097 	bne.w	8005748 <_dtoa_r+0x1c8>
 800561a:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
 800561e:	443e      	add	r6, r7
 8005620:	f206 4032 	addw	r0, r6, #1074	; 0x432
 8005624:	2820      	cmp	r0, #32
 8005626:	f340 83b5 	ble.w	8005d94 <_dtoa_r+0x814>
 800562a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800562e:	fa0a fa00 	lsl.w	sl, sl, r0
 8005632:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8005636:	fa28 f000 	lsr.w	r0, r8, r0
 800563a:	ea4a 0000 	orr.w	r0, sl, r0
 800563e:	f005 fda9 	bl	800b194 <__aeabi_ui2d>
 8005642:	2301      	movs	r3, #1
 8005644:	3e01      	subs	r6, #1
 8005646:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800564a:	930f      	str	r3, [sp, #60]	; 0x3c
 800564c:	4b52      	ldr	r3, [pc, #328]	; (8005798 <_dtoa_r+0x218>)
 800564e:	2200      	movs	r2, #0
 8005650:	f005 fc62 	bl	800af18 <__aeabi_dsub>
 8005654:	a348      	add	r3, pc, #288	; (adr r3, 8005778 <_dtoa_r+0x1f8>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f005 fe15 	bl	800b288 <__aeabi_dmul>
 800565e:	a348      	add	r3, pc, #288	; (adr r3, 8005780 <_dtoa_r+0x200>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f005 fc5a 	bl	800af1c <__adddf3>
 8005668:	4680      	mov	r8, r0
 800566a:	4630      	mov	r0, r6
 800566c:	4689      	mov	r9, r1
 800566e:	f005 fda1 	bl	800b1b4 <__aeabi_i2d>
 8005672:	a345      	add	r3, pc, #276	; (adr r3, 8005788 <_dtoa_r+0x208>)
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f005 fe06 	bl	800b288 <__aeabi_dmul>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4640      	mov	r0, r8
 8005682:	4649      	mov	r1, r9
 8005684:	f005 fc4a 	bl	800af1c <__adddf3>
 8005688:	4680      	mov	r8, r0
 800568a:	4689      	mov	r9, r1
 800568c:	f006 f8ac 	bl	800b7e8 <__aeabi_d2iz>
 8005690:	2200      	movs	r2, #0
 8005692:	4683      	mov	fp, r0
 8005694:	2300      	movs	r3, #0
 8005696:	4640      	mov	r0, r8
 8005698:	4649      	mov	r1, r9
 800569a:	f006 f867 	bl	800b76c <__aeabi_dcmplt>
 800569e:	2800      	cmp	r0, #0
 80056a0:	f040 827c 	bne.w	8005b9c <_dtoa_r+0x61c>
 80056a4:	f1bb 0f16 	cmp.w	fp, #22
 80056a8:	f200 826b 	bhi.w	8005b82 <_dtoa_r+0x602>
 80056ac:	4b3b      	ldr	r3, [pc, #236]	; (800579c <_dtoa_r+0x21c>)
 80056ae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056ba:	f006 f857 	bl	800b76c <__aeabi_dcmplt>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d072      	beq.n	80057a8 <_dtoa_r+0x228>
 80056c2:	2300      	movs	r3, #0
 80056c4:	1bbe      	subs	r6, r7, r6
 80056c6:	930e      	str	r3, [sp, #56]	; 0x38
 80056c8:	1e73      	subs	r3, r6, #1
 80056ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80056ce:	9306      	str	r3, [sp, #24]
 80056d0:	f100 825e 	bmi.w	8005b90 <_dtoa_r+0x610>
 80056d4:	2300      	movs	r3, #0
 80056d6:	9309      	str	r3, [sp, #36]	; 0x24
 80056d8:	f1bb 0f00 	cmp.w	fp, #0
 80056dc:	da6b      	bge.n	80057b6 <_dtoa_r+0x236>
 80056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e0:	f8cd b01c 	str.w	fp, [sp, #28]
 80056e4:	eba3 030b 	sub.w	r3, r3, fp
 80056e8:	9309      	str	r3, [sp, #36]	; 0x24
 80056ea:	f1cb 0300 	rsb	r3, fp, #0
 80056ee:	930d      	str	r3, [sp, #52]	; 0x34
 80056f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056f2:	2b09      	cmp	r3, #9
 80056f4:	f04f 0b00 	mov.w	fp, #0
 80056f8:	d866      	bhi.n	80057c8 <_dtoa_r+0x248>
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	f340 8348 	ble.w	8005d90 <_dtoa_r+0x810>
 8005700:	3b04      	subs	r3, #4
 8005702:	9322      	str	r3, [sp, #136]	; 0x88
 8005704:	2600      	movs	r6, #0
 8005706:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005708:	3b02      	subs	r3, #2
 800570a:	2b03      	cmp	r3, #3
 800570c:	f200 8668 	bhi.w	80063e0 <_dtoa_r+0xe60>
 8005710:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005714:	0459045c 	.word	0x0459045c
 8005718:	04330450 	.word	0x04330450
 800571c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800571e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005722:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	ea5a 0308 	orrs.w	r3, sl, r8
 800572c:	d11a      	bne.n	8005764 <_dtoa_r+0x1e4>
 800572e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8664 	beq.w	80063fe <_dtoa_r+0xe7e>
 8005736:	4b1a      	ldr	r3, [pc, #104]	; (80057a0 <_dtoa_r+0x220>)
 8005738:	9303      	str	r3, [sp, #12]
 800573a:	3308      	adds	r3, #8
 800573c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800573e:	9803      	ldr	r0, [sp, #12]
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	b019      	add	sp, #100	; 0x64
 8005744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005748:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800574c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8005750:	4608      	mov	r0, r1
 8005752:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005756:	970f      	str	r7, [sp, #60]	; 0x3c
 8005758:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800575c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800575e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005762:	e773      	b.n	800564c <_dtoa_r+0xcc>
 8005764:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005766:	2b00      	cmp	r3, #0
 8005768:	f040 83ea 	bne.w	8005f40 <_dtoa_r+0x9c0>
 800576c:	4b0d      	ldr	r3, [pc, #52]	; (80057a4 <_dtoa_r+0x224>)
 800576e:	9303      	str	r3, [sp, #12]
 8005770:	e741      	b.n	80055f6 <_dtoa_r+0x76>
 8005772:	bf00      	nop
 8005774:	f3af 8000 	nop.w
 8005778:	636f4361 	.word	0x636f4361
 800577c:	3fd287a7 	.word	0x3fd287a7
 8005780:	8b60c8b3 	.word	0x8b60c8b3
 8005784:	3fc68a28 	.word	0x3fc68a28
 8005788:	509f79fb 	.word	0x509f79fb
 800578c:	3fd34413 	.word	0x3fd34413
 8005790:	7ff00000 	.word	0x7ff00000
 8005794:	0800be09 	.word	0x0800be09
 8005798:	3ff80000 	.word	0x3ff80000
 800579c:	0800bf78 	.word	0x0800bf78
 80057a0:	0800be30 	.word	0x0800be30
 80057a4:	0800be2c 	.word	0x0800be2c
 80057a8:	1bbe      	subs	r6, r7, r6
 80057aa:	1e73      	subs	r3, r6, #1
 80057ac:	9306      	str	r3, [sp, #24]
 80057ae:	f100 8485 	bmi.w	80060bc <_dtoa_r+0xb3c>
 80057b2:	900e      	str	r0, [sp, #56]	; 0x38
 80057b4:	9009      	str	r0, [sp, #36]	; 0x24
 80057b6:	9b06      	ldr	r3, [sp, #24]
 80057b8:	445b      	add	r3, fp
 80057ba:	e9cd 3b06 	strd	r3, fp, [sp, #24]
 80057be:	2300      	movs	r3, #0
 80057c0:	930d      	str	r3, [sp, #52]	; 0x34
 80057c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057c4:	2b09      	cmp	r3, #9
 80057c6:	d998      	bls.n	80056fa <_dtoa_r+0x17a>
 80057c8:	2300      	movs	r3, #0
 80057ca:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
 80057ce:	2601      	movs	r6, #1
 80057d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057d4:	960c      	str	r6, [sp, #48]	; 0x30
 80057d6:	9308      	str	r3, [sp, #32]
 80057d8:	9b08      	ldr	r3, [sp, #32]
 80057da:	9312      	str	r3, [sp, #72]	; 0x48
 80057dc:	2100      	movs	r1, #0
 80057de:	6461      	str	r1, [r4, #68]	; 0x44
 80057e0:	4620      	mov	r0, r4
 80057e2:	f001 f88f 	bl	8006904 <_Balloc>
 80057e6:	9003      	str	r0, [sp, #12]
 80057e8:	2800      	cmp	r0, #0
 80057ea:	f000 8601 	beq.w	80063f0 <_dtoa_r+0xe70>
 80057ee:	9b03      	ldr	r3, [sp, #12]
 80057f0:	6423      	str	r3, [r4, #64]	; 0x40
 80057f2:	9b08      	ldr	r3, [sp, #32]
 80057f4:	2b0e      	cmp	r3, #14
 80057f6:	f200 8113 	bhi.w	8005a20 <_dtoa_r+0x4a0>
 80057fa:	2e00      	cmp	r6, #0
 80057fc:	f000 8110 	beq.w	8005a20 <_dtoa_r+0x4a0>
 8005800:	9907      	ldr	r1, [sp, #28]
 8005802:	2900      	cmp	r1, #0
 8005804:	f340 845c 	ble.w	80060c0 <_dtoa_r+0xb40>
 8005808:	4bae      	ldr	r3, [pc, #696]	; (8005ac4 <_dtoa_r+0x544>)
 800580a:	f001 020f 	and.w	r2, r1, #15
 800580e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005812:	ea4f 1821 	mov.w	r8, r1, asr #4
 8005816:	05c9      	lsls	r1, r1, #23
 8005818:	e9d3 6700 	ldrd	r6, r7, [r3]
 800581c:	f140 8414 	bpl.w	8006048 <_dtoa_r+0xac8>
 8005820:	4ba9      	ldr	r3, [pc, #676]	; (8005ac8 <_dtoa_r+0x548>)
 8005822:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005826:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800582a:	f005 fe57 	bl	800b4dc <__aeabi_ddiv>
 800582e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005832:	f008 080f 	and.w	r8, r8, #15
 8005836:	f04f 0a03 	mov.w	sl, #3
 800583a:	f1b8 0f00 	cmp.w	r8, #0
 800583e:	d013      	beq.n	8005868 <_dtoa_r+0x2e8>
 8005840:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8005ac8 <_dtoa_r+0x548>
 8005844:	f018 0f01 	tst.w	r8, #1
 8005848:	d009      	beq.n	800585e <_dtoa_r+0x2de>
 800584a:	4630      	mov	r0, r6
 800584c:	4639      	mov	r1, r7
 800584e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005852:	f005 fd19 	bl	800b288 <__aeabi_dmul>
 8005856:	f10a 0a01 	add.w	sl, sl, #1
 800585a:	4606      	mov	r6, r0
 800585c:	460f      	mov	r7, r1
 800585e:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005862:	f109 0908 	add.w	r9, r9, #8
 8005866:	d1ed      	bne.n	8005844 <_dtoa_r+0x2c4>
 8005868:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800586c:	4632      	mov	r2, r6
 800586e:	463b      	mov	r3, r7
 8005870:	f005 fe34 	bl	800b4dc <__aeabi_ddiv>
 8005874:	4680      	mov	r8, r0
 8005876:	4689      	mov	r9, r1
 8005878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800587a:	b143      	cbz	r3, 800588e <_dtoa_r+0x30e>
 800587c:	4b93      	ldr	r3, [pc, #588]	; (8005acc <_dtoa_r+0x54c>)
 800587e:	2200      	movs	r2, #0
 8005880:	4640      	mov	r0, r8
 8005882:	4649      	mov	r1, r9
 8005884:	f005 ff72 	bl	800b76c <__aeabi_dcmplt>
 8005888:	2800      	cmp	r0, #0
 800588a:	f040 8530 	bne.w	80062ee <_dtoa_r+0xd6e>
 800588e:	4650      	mov	r0, sl
 8005890:	f005 fc90 	bl	800b1b4 <__aeabi_i2d>
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	f005 fcf6 	bl	800b288 <__aeabi_dmul>
 800589c:	4b8c      	ldr	r3, [pc, #560]	; (8005ad0 <_dtoa_r+0x550>)
 800589e:	2200      	movs	r2, #0
 80058a0:	f005 fb3c 	bl	800af1c <__adddf3>
 80058a4:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80058a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058ac:	9311      	str	r3, [sp, #68]	; 0x44
 80058ae:	9b08      	ldr	r3, [sp, #32]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8097 	beq.w	80059e4 <_dtoa_r+0x464>
 80058b6:	9b07      	ldr	r3, [sp, #28]
 80058b8:	9314      	str	r3, [sp, #80]	; 0x50
 80058ba:	9b08      	ldr	r3, [sp, #32]
 80058bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80058be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 84a5 	beq.w	8006210 <_dtoa_r+0xc90>
 80058c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058c8:	4b7e      	ldr	r3, [pc, #504]	; (8005ac4 <_dtoa_r+0x544>)
 80058ca:	4982      	ldr	r1, [pc, #520]	; (8005ad4 <_dtoa_r+0x554>)
 80058cc:	9e03      	ldr	r6, [sp, #12]
 80058ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058d6:	2000      	movs	r0, #0
 80058d8:	f005 fe00 	bl	800b4dc <__aeabi_ddiv>
 80058dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058e0:	f005 fb1a 	bl	800af18 <__aeabi_dsub>
 80058e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058e8:	4649      	mov	r1, r9
 80058ea:	4640      	mov	r0, r8
 80058ec:	f005 ff7c 	bl	800b7e8 <__aeabi_d2iz>
 80058f0:	4607      	mov	r7, r0
 80058f2:	f005 fc5f 	bl	800b1b4 <__aeabi_i2d>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4640      	mov	r0, r8
 80058fc:	4649      	mov	r1, r9
 80058fe:	f005 fb0b 	bl	800af18 <__aeabi_dsub>
 8005902:	3730      	adds	r7, #48	; 0x30
 8005904:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005908:	f806 7b01 	strb.w	r7, [r6], #1
 800590c:	4680      	mov	r8, r0
 800590e:	4689      	mov	r9, r1
 8005910:	f005 ff2c 	bl	800b76c <__aeabi_dcmplt>
 8005914:	2800      	cmp	r0, #0
 8005916:	f040 8529 	bne.w	800636c <_dtoa_r+0xdec>
 800591a:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
 800591e:	2700      	movs	r7, #0
 8005920:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
 8005924:	9510      	str	r5, [sp, #64]	; 0x40
 8005926:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005928:	9413      	str	r4, [sp, #76]	; 0x4c
 800592a:	e02a      	b.n	8005982 <_dtoa_r+0x402>
 800592c:	3701      	adds	r7, #1
 800592e:	42af      	cmp	r7, r5
 8005930:	f280 852c 	bge.w	800638c <_dtoa_r+0xe0c>
 8005934:	4b68      	ldr	r3, [pc, #416]	; (8005ad8 <_dtoa_r+0x558>)
 8005936:	4650      	mov	r0, sl
 8005938:	4659      	mov	r1, fp
 800593a:	2200      	movs	r2, #0
 800593c:	f005 fca4 	bl	800b288 <__aeabi_dmul>
 8005940:	4b65      	ldr	r3, [pc, #404]	; (8005ad8 <_dtoa_r+0x558>)
 8005942:	2200      	movs	r2, #0
 8005944:	4682      	mov	sl, r0
 8005946:	468b      	mov	fp, r1
 8005948:	4640      	mov	r0, r8
 800594a:	4649      	mov	r1, r9
 800594c:	f005 fc9c 	bl	800b288 <__aeabi_dmul>
 8005950:	4689      	mov	r9, r1
 8005952:	4680      	mov	r8, r0
 8005954:	f005 ff48 	bl	800b7e8 <__aeabi_d2iz>
 8005958:	4604      	mov	r4, r0
 800595a:	f005 fc2b 	bl	800b1b4 <__aeabi_i2d>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4640      	mov	r0, r8
 8005964:	4649      	mov	r1, r9
 8005966:	f005 fad7 	bl	800af18 <__aeabi_dsub>
 800596a:	3430      	adds	r4, #48	; 0x30
 800596c:	f806 4b01 	strb.w	r4, [r6], #1
 8005970:	4652      	mov	r2, sl
 8005972:	465b      	mov	r3, fp
 8005974:	4680      	mov	r8, r0
 8005976:	4689      	mov	r9, r1
 8005978:	f005 fef8 	bl	800b76c <__aeabi_dcmplt>
 800597c:	2800      	cmp	r0, #0
 800597e:	f040 84f3 	bne.w	8006368 <_dtoa_r+0xde8>
 8005982:	4642      	mov	r2, r8
 8005984:	464b      	mov	r3, r9
 8005986:	4951      	ldr	r1, [pc, #324]	; (8005acc <_dtoa_r+0x54c>)
 8005988:	2000      	movs	r0, #0
 800598a:	f005 fac5 	bl	800af18 <__aeabi_dsub>
 800598e:	4652      	mov	r2, sl
 8005990:	465b      	mov	r3, fp
 8005992:	f005 feeb 	bl	800b76c <__aeabi_dcmplt>
 8005996:	2800      	cmp	r0, #0
 8005998:	d0c8      	beq.n	800592c <_dtoa_r+0x3ac>
 800599a:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
 800599e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80059a0:	9a03      	ldr	r2, [sp, #12]
 80059a2:	9307      	str	r3, [sp, #28]
 80059a4:	e002      	b.n	80059ac <_dtoa_r+0x42c>
 80059a6:	4296      	cmp	r6, r2
 80059a8:	f000 84c8 	beq.w	800633c <_dtoa_r+0xdbc>
 80059ac:	46b2      	mov	sl, r6
 80059ae:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
 80059b2:	2b39      	cmp	r3, #57	; 0x39
 80059b4:	d0f7      	beq.n	80059a6 <_dtoa_r+0x426>
 80059b6:	3301      	adds	r3, #1
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	7033      	strb	r3, [r6, #0]
 80059bc:	9b07      	ldr	r3, [sp, #28]
 80059be:	3301      	adds	r3, #1
 80059c0:	9307      	str	r3, [sp, #28]
 80059c2:	e1c8      	b.n	8005d56 <_dtoa_r+0x7d6>
 80059c4:	4650      	mov	r0, sl
 80059c6:	f005 fbf5 	bl	800b1b4 <__aeabi_i2d>
 80059ca:	4642      	mov	r2, r8
 80059cc:	464b      	mov	r3, r9
 80059ce:	f005 fc5b 	bl	800b288 <__aeabi_dmul>
 80059d2:	4b3f      	ldr	r3, [pc, #252]	; (8005ad0 <_dtoa_r+0x550>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	f005 faa1 	bl	800af1c <__adddf3>
 80059da:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80059de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059e2:	9311      	str	r3, [sp, #68]	; 0x44
 80059e4:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <_dtoa_r+0x55c>)
 80059e6:	4640      	mov	r0, r8
 80059e8:	4649      	mov	r1, r9
 80059ea:	2200      	movs	r2, #0
 80059ec:	f005 fa94 	bl	800af18 <__aeabi_dsub>
 80059f0:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80059f4:	464b      	mov	r3, r9
 80059f6:	4642      	mov	r2, r8
 80059f8:	4606      	mov	r6, r0
 80059fa:	460f      	mov	r7, r1
 80059fc:	f005 fed4 	bl	800b7a8 <__aeabi_dcmpgt>
 8005a00:	4681      	mov	r9, r0
 8005a02:	2800      	cmp	r0, #0
 8005a04:	f040 84aa 	bne.w	800635c <_dtoa_r+0xddc>
 8005a08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a12:	4630      	mov	r0, r6
 8005a14:	4639      	mov	r1, r7
 8005a16:	f005 fea9 	bl	800b76c <__aeabi_dcmplt>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	f040 8345 	bne.w	80060aa <_dtoa_r+0xb2a>
 8005a20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f2c0 808c 	blt.w	8005b40 <_dtoa_r+0x5c0>
 8005a28:	9a07      	ldr	r2, [sp, #28]
 8005a2a:	2a0e      	cmp	r2, #14
 8005a2c:	f300 8088 	bgt.w	8005b40 <_dtoa_r+0x5c0>
 8005a30:	4b24      	ldr	r3, [pc, #144]	; (8005ac4 <_dtoa_r+0x544>)
 8005a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a36:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8005a3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	da1b      	bge.n	8005a78 <_dtoa_r+0x4f8>
 8005a40:	9b08      	ldr	r3, [sp, #32]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dc18      	bgt.n	8005a78 <_dtoa_r+0x4f8>
 8005a46:	f040 832e 	bne.w	80060a6 <_dtoa_r+0xb26>
 8005a4a:	4b24      	ldr	r3, [pc, #144]	; (8005adc <_dtoa_r+0x55c>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4650      	mov	r0, sl
 8005a50:	4659      	mov	r1, fp
 8005a52:	f005 fc19 	bl	800b288 <__aeabi_dmul>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a5e:	f005 fe8f 	bl	800b780 <__aeabi_dcmple>
 8005a62:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a66:	464e      	mov	r6, r9
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	f000 82c7 	beq.w	8005ffc <_dtoa_r+0xa7c>
 8005a6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a74:	43df      	mvns	r7, r3
 8005a76:	e2c9      	b.n	800600c <_dtoa_r+0xa8c>
 8005a78:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 8005a7c:	4652      	mov	r2, sl
 8005a7e:	465b      	mov	r3, fp
 8005a80:	4638      	mov	r0, r7
 8005a82:	4641      	mov	r1, r8
 8005a84:	f005 fd2a 	bl	800b4dc <__aeabi_ddiv>
 8005a88:	f005 feae 	bl	800b7e8 <__aeabi_d2iz>
 8005a8c:	4681      	mov	r9, r0
 8005a8e:	9009      	str	r0, [sp, #36]	; 0x24
 8005a90:	f005 fb90 	bl	800b1b4 <__aeabi_i2d>
 8005a94:	4652      	mov	r2, sl
 8005a96:	465b      	mov	r3, fp
 8005a98:	f005 fbf6 	bl	800b288 <__aeabi_dmul>
 8005a9c:	9e03      	ldr	r6, [sp, #12]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	4641      	mov	r1, r8
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f005 fa37 	bl	800af18 <__aeabi_dsub>
 8005aaa:	f109 0330 	add.w	r3, r9, #48	; 0x30
 8005aae:	f806 3b01 	strb.w	r3, [r6], #1
 8005ab2:	9b08      	ldr	r3, [sp, #32]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	f000 835c 	beq.w	8006172 <_dtoa_r+0xbf2>
 8005aba:	9406      	str	r4, [sp, #24]
 8005abc:	2701      	movs	r7, #1
 8005abe:	9504      	str	r5, [sp, #16]
 8005ac0:	461c      	mov	r4, r3
 8005ac2:	e02a      	b.n	8005b1a <_dtoa_r+0x59a>
 8005ac4:	0800bf78 	.word	0x0800bf78
 8005ac8:	0800bf50 	.word	0x0800bf50
 8005acc:	3ff00000 	.word	0x3ff00000
 8005ad0:	401c0000 	.word	0x401c0000
 8005ad4:	3fe00000 	.word	0x3fe00000
 8005ad8:	40240000 	.word	0x40240000
 8005adc:	40140000 	.word	0x40140000
 8005ae0:	4652      	mov	r2, sl
 8005ae2:	465b      	mov	r3, fp
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	f005 fcf8 	bl	800b4dc <__aeabi_ddiv>
 8005aec:	f005 fe7c 	bl	800b7e8 <__aeabi_d2iz>
 8005af0:	4605      	mov	r5, r0
 8005af2:	f005 fb5f 	bl	800b1b4 <__aeabi_i2d>
 8005af6:	4652      	mov	r2, sl
 8005af8:	465b      	mov	r3, fp
 8005afa:	f005 fbc5 	bl	800b288 <__aeabi_dmul>
 8005afe:	3701      	adds	r7, #1
 8005b00:	460b      	mov	r3, r1
 8005b02:	4602      	mov	r2, r0
 8005b04:	4649      	mov	r1, r9
 8005b06:	4640      	mov	r0, r8
 8005b08:	f005 fa06 	bl	800af18 <__aeabi_dsub>
 8005b0c:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8005b10:	42a7      	cmp	r7, r4
 8005b12:	f806 3b01 	strb.w	r3, [r6], #1
 8005b16:	f000 8329 	beq.w	800616c <_dtoa_r+0xbec>
 8005b1a:	4bac      	ldr	r3, [pc, #688]	; (8005dcc <_dtoa_r+0x84c>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f005 fbb3 	bl	800b288 <__aeabi_dmul>
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	4680      	mov	r8, r0
 8005b28:	4689      	mov	r9, r1
 8005b2a:	f005 fe15 	bl	800b758 <__aeabi_dcmpeq>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d0d6      	beq.n	8005ae0 <_dtoa_r+0x560>
 8005b32:	9d04      	ldr	r5, [sp, #16]
 8005b34:	9c06      	ldr	r4, [sp, #24]
 8005b36:	9b07      	ldr	r3, [sp, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	9307      	str	r3, [sp, #28]
 8005b3c:	46b2      	mov	sl, r6
 8005b3e:	e10a      	b.n	8005d56 <_dtoa_r+0x7d6>
 8005b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b42:	2a00      	cmp	r2, #0
 8005b44:	d03d      	beq.n	8005bc2 <_dtoa_r+0x642>
 8005b46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b48:	2a01      	cmp	r2, #1
 8005b4a:	f340 829c 	ble.w	8006086 <_dtoa_r+0xb06>
 8005b4e:	9b08      	ldr	r3, [sp, #32]
 8005b50:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005b54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b56:	4543      	cmp	r3, r8
 8005b58:	f2c0 826d 	blt.w	8006036 <_dtoa_r+0xab6>
 8005b5c:	eba3 0808 	sub.w	r8, r3, r8
 8005b60:	9b08      	ldr	r3, [sp, #32]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f2c0 833c 	blt.w	80061e0 <_dtoa_r+0xc60>
 8005b68:	9a06      	ldr	r2, [sp, #24]
 8005b6a:	441a      	add	r2, r3
 8005b6c:	9206      	str	r2, [sp, #24]
 8005b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b70:	4617      	mov	r7, r2
 8005b72:	441a      	add	r2, r3
 8005b74:	9209      	str	r2, [sp, #36]	; 0x24
 8005b76:	2101      	movs	r1, #1
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 ffeb 	bl	8006b54 <__i2b>
 8005b7e:	4606      	mov	r6, r0
 8005b80:	e023      	b.n	8005bca <_dtoa_r+0x64a>
 8005b82:	2301      	movs	r3, #1
 8005b84:	1bbe      	subs	r6, r7, r6
 8005b86:	930e      	str	r3, [sp, #56]	; 0x38
 8005b88:	1e73      	subs	r3, r6, #1
 8005b8a:	9306      	str	r3, [sp, #24]
 8005b8c:	f57f ada2 	bpl.w	80056d4 <_dtoa_r+0x154>
 8005b90:	f1c6 0301 	rsb	r3, r6, #1
 8005b94:	9309      	str	r3, [sp, #36]	; 0x24
 8005b96:	2300      	movs	r3, #0
 8005b98:	9306      	str	r3, [sp, #24]
 8005b9a:	e59d      	b.n	80056d8 <_dtoa_r+0x158>
 8005b9c:	4658      	mov	r0, fp
 8005b9e:	f005 fb09 	bl	800b1b4 <__aeabi_i2d>
 8005ba2:	4642      	mov	r2, r8
 8005ba4:	464b      	mov	r3, r9
 8005ba6:	f005 fdd7 	bl	800b758 <__aeabi_dcmpeq>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	f47f ad7a 	bne.w	80056a4 <_dtoa_r+0x124>
 8005bb0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005bb4:	e576      	b.n	80056a4 <_dtoa_r+0x124>
 8005bb6:	4b86      	ldr	r3, [pc, #536]	; (8005dd0 <_dtoa_r+0x850>)
 8005bb8:	9303      	str	r3, [sp, #12]
 8005bba:	9803      	ldr	r0, [sp, #12]
 8005bbc:	b019      	add	sp, #100	; 0x64
 8005bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8005bc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005bc8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005bca:	2f00      	cmp	r7, #0
 8005bcc:	dd0c      	ble.n	8005be8 <_dtoa_r+0x668>
 8005bce:	9906      	ldr	r1, [sp, #24]
 8005bd0:	2900      	cmp	r1, #0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	dd08      	ble.n	8005be8 <_dtoa_r+0x668>
 8005bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd8:	42b9      	cmp	r1, r7
 8005bda:	bfa8      	it	ge
 8005bdc:	463b      	movge	r3, r7
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	1aff      	subs	r7, r7, r3
 8005be2:	1acb      	subs	r3, r1, r3
 8005be4:	9209      	str	r2, [sp, #36]	; 0x24
 8005be6:	9306      	str	r3, [sp, #24]
 8005be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bea:	b1db      	cbz	r3, 8005c24 <_dtoa_r+0x6a4>
 8005bec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 825d 	beq.w	80060ae <_dtoa_r+0xb2e>
 8005bf4:	f1b8 0f00 	cmp.w	r8, #0
 8005bf8:	dd0f      	ble.n	8005c1a <_dtoa_r+0x69a>
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f001 f884 	bl	8006d0c <__pow5mult>
 8005c04:	462a      	mov	r2, r5
 8005c06:	4601      	mov	r1, r0
 8005c08:	4606      	mov	r6, r0
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f000 ffd0 	bl	8006bb0 <__multiply>
 8005c10:	4629      	mov	r1, r5
 8005c12:	4605      	mov	r5, r0
 8005c14:	4620      	mov	r0, r4
 8005c16:	f000 fe9b 	bl	8006950 <_Bfree>
 8005c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c1c:	ebb3 0208 	subs.w	r2, r3, r8
 8005c20:	f040 82d8 	bne.w	80061d4 <_dtoa_r+0xc54>
 8005c24:	2101      	movs	r1, #1
 8005c26:	4620      	mov	r0, r4
 8005c28:	f000 ff94 	bl	8006b54 <__i2b>
 8005c2c:	f1bb 0f00 	cmp.w	fp, #0
 8005c30:	4681      	mov	r9, r0
 8005c32:	f300 80b4 	bgt.w	8005d9e <_dtoa_r+0x81e>
 8005c36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	f340 8186 	ble.w	8005f4a <_dtoa_r+0x9ca>
 8005c3e:	f04f 0a00 	mov.w	sl, #0
 8005c42:	2001      	movs	r0, #1
 8005c44:	f1bb 0f00 	cmp.w	fp, #0
 8005c48:	f040 80b5 	bne.w	8005db6 <_dtoa_r+0x836>
 8005c4c:	9a06      	ldr	r2, [sp, #24]
 8005c4e:	4410      	add	r0, r2
 8005c50:	f010 001f 	ands.w	r0, r0, #31
 8005c54:	f000 8093 	beq.w	8005d7e <_dtoa_r+0x7fe>
 8005c58:	f1c0 0320 	rsb	r3, r0, #32
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	f340 83d2 	ble.w	8006406 <_dtoa_r+0xe86>
 8005c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c64:	f1c0 001c 	rsb	r0, r0, #28
 8005c68:	4403      	add	r3, r0
 8005c6a:	4402      	add	r2, r0
 8005c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6e:	4407      	add	r7, r0
 8005c70:	9206      	str	r2, [sp, #24]
 8005c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dd05      	ble.n	8005c84 <_dtoa_r+0x704>
 8005c78:	4629      	mov	r1, r5
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	f001 f8a5 	bl	8006dcc <__lshift>
 8005c82:	4605      	mov	r5, r0
 8005c84:	9b06      	ldr	r3, [sp, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	dd05      	ble.n	8005c96 <_dtoa_r+0x716>
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f001 f89c 	bl	8006dcc <__lshift>
 8005c94:	4681      	mov	r9, r0
 8005c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f040 8136 	bne.w	8005f0a <_dtoa_r+0x98a>
 8005c9e:	9b08      	ldr	r3, [sp, #32]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f340 811d 	ble.w	8005ee0 <_dtoa_r+0x960>
 8005ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f040 80a0 	bne.w	8005dee <_dtoa_r+0x86e>
 8005cae:	9b07      	ldr	r3, [sp, #28]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	9307      	str	r3, [sp, #28]
 8005cb4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005cb8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005cbc:	2701      	movs	r7, #1
 8005cbe:	e007      	b.n	8005cd0 <_dtoa_r+0x750>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	220a      	movs	r2, #10
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f000 fe4c 	bl	8006964 <__multadd>
 8005ccc:	3701      	adds	r7, #1
 8005cce:	4605      	mov	r5, r0
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f7ff fbc0 	bl	8005458 <quorem>
 8005cd8:	4557      	cmp	r7, sl
 8005cda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005cde:	f808 3b01 	strb.w	r3, [r8], #1
 8005ce2:	dbed      	blt.n	8005cc0 <_dtoa_r+0x740>
 8005ce4:	9a08      	ldr	r2, [sp, #32]
 8005ce6:	2a00      	cmp	r2, #0
 8005ce8:	bfc8      	it	gt
 8005cea:	4693      	movgt	fp, r2
 8005cec:	9a03      	ldr	r2, [sp, #12]
 8005cee:	bfd8      	it	le
 8005cf0:	f04f 0b01 	movle.w	fp, #1
 8005cf4:	4493      	add	fp, r2
 8005cf6:	2700      	movs	r7, #0
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	9304      	str	r3, [sp, #16]
 8005d00:	f001 f864 	bl	8006dcc <__lshift>
 8005d04:	4649      	mov	r1, r9
 8005d06:	4605      	mov	r5, r0
 8005d08:	f001 f8d8 	bl	8006ebc <__mcmp>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f340 81a8 	ble.w	8006062 <_dtoa_r+0xae2>
 8005d12:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 8005d16:	9a03      	ldr	r2, [sp, #12]
 8005d18:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005d1c:	e004      	b.n	8005d28 <_dtoa_r+0x7a8>
 8005d1e:	455a      	cmp	r2, fp
 8005d20:	f000 81aa 	beq.w	8006078 <_dtoa_r+0xaf8>
 8005d24:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8005d28:	2b39      	cmp	r3, #57	; 0x39
 8005d2a:	f10b 0a01 	add.w	sl, fp, #1
 8005d2e:	d0f6      	beq.n	8005d1e <_dtoa_r+0x79e>
 8005d30:	3301      	adds	r3, #1
 8005d32:	f88b 3000 	strb.w	r3, [fp]
 8005d36:	4649      	mov	r1, r9
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 fe09 	bl	8006950 <_Bfree>
 8005d3e:	b156      	cbz	r6, 8005d56 <_dtoa_r+0x7d6>
 8005d40:	b12f      	cbz	r7, 8005d4e <_dtoa_r+0x7ce>
 8005d42:	42b7      	cmp	r7, r6
 8005d44:	d003      	beq.n	8005d4e <_dtoa_r+0x7ce>
 8005d46:	4639      	mov	r1, r7
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 fe01 	bl	8006950 <_Bfree>
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 fdfd 	bl	8006950 <_Bfree>
 8005d56:	4629      	mov	r1, r5
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 fdf9 	bl	8006950 <_Bfree>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f88a 3000 	strb.w	r3, [sl]
 8005d64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005d66:	9a07      	ldr	r2, [sp, #28]
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f43f ac42 	beq.w	80055f6 <_dtoa_r+0x76>
 8005d72:	9803      	ldr	r0, [sp, #12]
 8005d74:	f8c3 a000 	str.w	sl, [r3]
 8005d78:	b019      	add	sp, #100	; 0x64
 8005d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7e:	201c      	movs	r0, #28
 8005d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d82:	4403      	add	r3, r0
 8005d84:	9309      	str	r3, [sp, #36]	; 0x24
 8005d86:	9b06      	ldr	r3, [sp, #24]
 8005d88:	4403      	add	r3, r0
 8005d8a:	4407      	add	r7, r0
 8005d8c:	9306      	str	r3, [sp, #24]
 8005d8e:	e770      	b.n	8005c72 <_dtoa_r+0x6f2>
 8005d90:	2601      	movs	r6, #1
 8005d92:	e4b8      	b.n	8005706 <_dtoa_r+0x186>
 8005d94:	f1c0 0020 	rsb	r0, r0, #32
 8005d98:	fa08 f000 	lsl.w	r0, r8, r0
 8005d9c:	e44f      	b.n	800563e <_dtoa_r+0xbe>
 8005d9e:	4601      	mov	r1, r0
 8005da0:	465a      	mov	r2, fp
 8005da2:	4620      	mov	r0, r4
 8005da4:	f000 ffb2 	bl	8006d0c <__pow5mult>
 8005da8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	4681      	mov	r9, r0
 8005dae:	f340 81b3 	ble.w	8006118 <_dtoa_r+0xb98>
 8005db2:	f04f 0a00 	mov.w	sl, #0
 8005db6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005dba:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8005dbe:	6918      	ldr	r0, [r3, #16]
 8005dc0:	f000 fe7a 	bl	8006ab8 <__hi0bits>
 8005dc4:	f1c0 0020 	rsb	r0, r0, #32
 8005dc8:	e740      	b.n	8005c4c <_dtoa_r+0x6cc>
 8005dca:	bf00      	nop
 8005dcc:	40240000 	.word	0x40240000
 8005dd0:	0800be08 	.word	0x0800be08
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	220a      	movs	r2, #10
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f000 fdc2 	bl	8006964 <__multadd>
 8005de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	4606      	mov	r6, r0
 8005de6:	f340 82e7 	ble.w	80063b8 <_dtoa_r+0xe38>
 8005dea:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8005dee:	2f00      	cmp	r7, #0
 8005df0:	f300 811a 	bgt.w	8006028 <_dtoa_r+0xaa8>
 8005df4:	f1ba 0f00 	cmp.w	sl, #0
 8005df8:	f040 81d5 	bne.w	80061a6 <_dtoa_r+0xc26>
 8005dfc:	46b0      	mov	r8, r6
 8005dfe:	9b04      	ldr	r3, [sp, #16]
 8005e00:	9f03      	ldr	r7, [sp, #12]
 8005e02:	9908      	ldr	r1, [sp, #32]
 8005e04:	f003 0201 	and.w	r2, r3, #1
 8005e08:	1e7b      	subs	r3, r7, #1
 8005e0a:	4419      	add	r1, r3
 8005e0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e0e:	920c      	str	r2, [sp, #48]	; 0x30
 8005e10:	4313      	orrs	r3, r2
 8005e12:	9109      	str	r1, [sp, #36]	; 0x24
 8005e14:	930a      	str	r3, [sp, #40]	; 0x28
 8005e16:	4649      	mov	r1, r9
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f7ff fb1d 	bl	8005458 <quorem>
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4683      	mov	fp, r0
 8005e22:	4628      	mov	r0, r5
 8005e24:	f001 f84a 	bl	8006ebc <__mcmp>
 8005e28:	4642      	mov	r2, r8
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	4682      	mov	sl, r0
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f001 f864 	bl	8006efc <__mdiff>
 8005e34:	68c2      	ldr	r2, [r0, #12]
 8005e36:	4601      	mov	r1, r0
 8005e38:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8005e3c:	2a00      	cmp	r2, #0
 8005e3e:	d142      	bne.n	8005ec6 <_dtoa_r+0x946>
 8005e40:	9006      	str	r0, [sp, #24]
 8005e42:	4628      	mov	r0, r5
 8005e44:	9308      	str	r3, [sp, #32]
 8005e46:	f001 f839 	bl	8006ebc <__mcmp>
 8005e4a:	9906      	ldr	r1, [sp, #24]
 8005e4c:	9004      	str	r0, [sp, #16]
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 fd7e 	bl	8006950 <_Bfree>
 8005e54:	9a04      	ldr	r2, [sp, #16]
 8005e56:	9b08      	ldr	r3, [sp, #32]
 8005e58:	b91a      	cbnz	r2, 8005e62 <_dtoa_r+0x8e2>
 8005e5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e5c:	2900      	cmp	r1, #0
 8005e5e:	f000 829b 	beq.w	8006398 <_dtoa_r+0xe18>
 8005e62:	f1ba 0f00 	cmp.w	sl, #0
 8005e66:	f2c0 8163 	blt.w	8006130 <_dtoa_r+0xbb0>
 8005e6a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005e6c:	ea4a 0a01 	orr.w	sl, sl, r1
 8005e70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e72:	ea51 010a 	orrs.w	r1, r1, sl
 8005e76:	f000 815b 	beq.w	8006130 <_dtoa_r+0xbb0>
 8005e7a:	2a00      	cmp	r2, #0
 8005e7c:	f300 81b4 	bgt.w	80061e8 <_dtoa_r+0xc68>
 8005e80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e82:	703b      	strb	r3, [r7, #0]
 8005e84:	f107 0a01 	add.w	sl, r7, #1
 8005e88:	4297      	cmp	r7, r2
 8005e8a:	46d3      	mov	fp, sl
 8005e8c:	f000 81b2 	beq.w	80061f4 <_dtoa_r+0xc74>
 8005e90:	4629      	mov	r1, r5
 8005e92:	2300      	movs	r3, #0
 8005e94:	220a      	movs	r2, #10
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 fd64 	bl	8006964 <__multadd>
 8005e9c:	4546      	cmp	r6, r8
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	f04f 0300 	mov.w	r3, #0
 8005ea6:	f04f 020a 	mov.w	r2, #10
 8005eaa:	4620      	mov	r0, r4
 8005eac:	d012      	beq.n	8005ed4 <_dtoa_r+0x954>
 8005eae:	f000 fd59 	bl	8006964 <__multadd>
 8005eb2:	4641      	mov	r1, r8
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	220a      	movs	r2, #10
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 fd52 	bl	8006964 <__multadd>
 8005ec0:	4657      	mov	r7, sl
 8005ec2:	4680      	mov	r8, r0
 8005ec4:	e7a7      	b.n	8005e16 <_dtoa_r+0x896>
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	f000 fd41 	bl	8006950 <_Bfree>
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	e7c6      	b.n	8005e62 <_dtoa_r+0x8e2>
 8005ed4:	f000 fd46 	bl	8006964 <__multadd>
 8005ed8:	4657      	mov	r7, sl
 8005eda:	4606      	mov	r6, r0
 8005edc:	4680      	mov	r8, r0
 8005ede:	e79a      	b.n	8005e16 <_dtoa_r+0x896>
 8005ee0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	dc79      	bgt.n	8005fda <_dtoa_r+0xa5a>
 8005ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d180      	bne.n	8005dee <_dtoa_r+0x86e>
 8005eec:	9b07      	ldr	r3, [sp, #28]
 8005eee:	4649      	mov	r1, r9
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	9307      	str	r3, [sp, #28]
 8005ef6:	f7ff faaf 	bl	8005458 <quorem>
 8005efa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005efe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f02:	f80b 3b01 	strb.w	r3, [fp], #1
 8005f06:	2700      	movs	r7, #0
 8005f08:	e6f6      	b.n	8005cf8 <_dtoa_r+0x778>
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	f000 ffd5 	bl	8006ebc <__mcmp>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	f6bf aec3 	bge.w	8005c9e <_dtoa_r+0x71e>
 8005f18:	4629      	mov	r1, r5
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	220a      	movs	r2, #10
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f000 fd20 	bl	8006964 <__multadd>
 8005f24:	9b07      	ldr	r3, [sp, #28]
 8005f26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f47f af50 	bne.w	8005dd4 <_dtoa_r+0x854>
 8005f34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f340 8235 	ble.w	80063a6 <_dtoa_r+0xe26>
 8005f3c:	9308      	str	r3, [sp, #32]
 8005f3e:	e6b9      	b.n	8005cb4 <_dtoa_r+0x734>
 8005f40:	4baf      	ldr	r3, [pc, #700]	; (8006200 <_dtoa_r+0xc80>)
 8005f42:	9303      	str	r3, [sp, #12]
 8005f44:	3303      	adds	r3, #3
 8005f46:	f7ff bbf9 	b.w	800573c <_dtoa_r+0x1bc>
 8005f4a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8005f4e:	2900      	cmp	r1, #0
 8005f50:	f47f ae75 	bne.w	8005c3e <_dtoa_r+0x6be>
 8005f54:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f47f ae70 	bne.w	8005c3e <_dtoa_r+0x6be>
 8005f5e:	4ba9      	ldr	r3, [pc, #676]	; (8006204 <_dtoa_r+0xc84>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 81fe 	beq.w	8006364 <_dtoa_r+0xde4>
 8005f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f6e:	9b06      	ldr	r3, [sp, #24]
 8005f70:	3301      	adds	r3, #1
 8005f72:	9306      	str	r3, [sp, #24]
 8005f74:	f04f 0a01 	mov.w	sl, #1
 8005f78:	e663      	b.n	8005c42 <_dtoa_r+0x6c2>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	930c      	str	r3, [sp, #48]	; 0x30
 8005f7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f80:	9a07      	ldr	r2, [sp, #28]
 8005f82:	4413      	add	r3, r2
 8005f84:	9312      	str	r3, [sp, #72]	; 0x48
 8005f86:	3301      	adds	r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	461f      	mov	r7, r3
 8005f8c:	9308      	str	r3, [sp, #32]
 8005f8e:	bfb8      	it	lt
 8005f90:	2701      	movlt	r7, #1
 8005f92:	2100      	movs	r1, #0
 8005f94:	2f17      	cmp	r7, #23
 8005f96:	6461      	str	r1, [r4, #68]	; 0x44
 8005f98:	f77f ac22 	ble.w	80057e0 <_dtoa_r+0x260>
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	2304      	movs	r3, #4
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	f103 0014 	add.w	r0, r3, #20
 8005fa6:	42b8      	cmp	r0, r7
 8005fa8:	4611      	mov	r1, r2
 8005faa:	f102 0201 	add.w	r2, r2, #1
 8005fae:	d9f7      	bls.n	8005fa0 <_dtoa_r+0xa20>
 8005fb0:	6461      	str	r1, [r4, #68]	; 0x44
 8005fb2:	e415      	b.n	80057e0 <_dtoa_r+0x260>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8005fb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dd4c      	ble.n	8006058 <_dtoa_r+0xad8>
 8005fbe:	9312      	str	r3, [sp, #72]	; 0x48
 8005fc0:	9308      	str	r3, [sp, #32]
 8005fc2:	461f      	mov	r7, r3
 8005fc4:	e7e5      	b.n	8005f92 <_dtoa_r+0xa12>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8005fca:	e7d8      	b.n	8005f7e <_dtoa_r+0x9fe>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	930c      	str	r3, [sp, #48]	; 0x30
 8005fd0:	e7f2      	b.n	8005fb8 <_dtoa_r+0xa38>
 8005fd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fd4:	f8cd 801c 	str.w	r8, [sp, #28]
 8005fd8:	9308      	str	r3, [sp, #32]
 8005fda:	9b08      	ldr	r3, [sp, #32]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f47f ad46 	bne.w	8005a6e <_dtoa_r+0x4ee>
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	2205      	movs	r2, #5
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 fcbc 	bl	8006964 <__multadd>
 8005fec:	4601      	mov	r1, r0
 8005fee:	4681      	mov	r9, r0
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f000 ff63 	bl	8006ebc <__mcmp>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	f77f ad39 	ble.w	8005a6e <_dtoa_r+0x4ee>
 8005ffc:	9803      	ldr	r0, [sp, #12]
 8005ffe:	9f07      	ldr	r7, [sp, #28]
 8006000:	2331      	movs	r3, #49	; 0x31
 8006002:	4680      	mov	r8, r0
 8006004:	f800 3b01 	strb.w	r3, [r0], #1
 8006008:	3701      	adds	r7, #1
 800600a:	9003      	str	r0, [sp, #12]
 800600c:	4649      	mov	r1, r9
 800600e:	4620      	mov	r0, r4
 8006010:	f000 fc9e 	bl	8006950 <_Bfree>
 8006014:	1c7b      	adds	r3, r7, #1
 8006016:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800601a:	9307      	str	r3, [sp, #28]
 800601c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006020:	2e00      	cmp	r6, #0
 8006022:	f47f ae94 	bne.w	8005d4e <_dtoa_r+0x7ce>
 8006026:	e696      	b.n	8005d56 <_dtoa_r+0x7d6>
 8006028:	4631      	mov	r1, r6
 800602a:	463a      	mov	r2, r7
 800602c:	4620      	mov	r0, r4
 800602e:	f000 fecd 	bl	8006dcc <__lshift>
 8006032:	4606      	mov	r6, r0
 8006034:	e6de      	b.n	8005df4 <_dtoa_r+0x874>
 8006036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006038:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800603c:	eba8 0303 	sub.w	r3, r8, r3
 8006040:	449b      	add	fp, r3
 8006042:	f04f 0800 	mov.w	r8, #0
 8006046:	e58b      	b.n	8005b60 <_dtoa_r+0x5e0>
 8006048:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800604c:	f04f 0a02 	mov.w	sl, #2
 8006050:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006054:	f7ff bbf1 	b.w	800583a <_dtoa_r+0x2ba>
 8006058:	2301      	movs	r3, #1
 800605a:	9323      	str	r3, [sp, #140]	; 0x8c
 800605c:	9308      	str	r3, [sp, #32]
 800605e:	f7ff bbbb 	b.w	80057d8 <_dtoa_r+0x258>
 8006062:	d103      	bne.n	800606c <_dtoa_r+0xaec>
 8006064:	9b04      	ldr	r3, [sp, #16]
 8006066:	07db      	lsls	r3, r3, #31
 8006068:	f53f ae53 	bmi.w	8005d12 <_dtoa_r+0x792>
 800606c:	46da      	mov	sl, fp
 800606e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 8006072:	2b30      	cmp	r3, #48	; 0x30
 8006074:	d0fa      	beq.n	800606c <_dtoa_r+0xaec>
 8006076:	e65e      	b.n	8005d36 <_dtoa_r+0x7b6>
 8006078:	9b07      	ldr	r3, [sp, #28]
 800607a:	9a03      	ldr	r2, [sp, #12]
 800607c:	3301      	adds	r3, #1
 800607e:	9307      	str	r3, [sp, #28]
 8006080:	2331      	movs	r3, #49	; 0x31
 8006082:	7013      	strb	r3, [r2, #0]
 8006084:	e657      	b.n	8005d36 <_dtoa_r+0x7b6>
 8006086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006088:	2a00      	cmp	r2, #0
 800608a:	f000 8126 	beq.w	80062da <_dtoa_r+0xd5a>
 800608e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006092:	9a06      	ldr	r2, [sp, #24]
 8006094:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8006098:	441a      	add	r2, r3
 800609a:	9206      	str	r2, [sp, #24]
 800609c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800609e:	4617      	mov	r7, r2
 80060a0:	441a      	add	r2, r3
 80060a2:	9209      	str	r2, [sp, #36]	; 0x24
 80060a4:	e567      	b.n	8005b76 <_dtoa_r+0x5f6>
 80060a6:	f04f 0900 	mov.w	r9, #0
 80060aa:	464e      	mov	r6, r9
 80060ac:	e4df      	b.n	8005a6e <_dtoa_r+0x4ee>
 80060ae:	4629      	mov	r1, r5
 80060b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 fe2a 	bl	8006d0c <__pow5mult>
 80060b8:	4605      	mov	r5, r0
 80060ba:	e5b3      	b.n	8005c24 <_dtoa_r+0x6a4>
 80060bc:	900e      	str	r0, [sp, #56]	; 0x38
 80060be:	e567      	b.n	8005b90 <_dtoa_r+0x610>
 80060c0:	f000 810f 	beq.w	80062e2 <_dtoa_r+0xd62>
 80060c4:	9a07      	ldr	r2, [sp, #28]
 80060c6:	4b50      	ldr	r3, [pc, #320]	; (8006208 <_dtoa_r+0xc88>)
 80060c8:	4256      	negs	r6, r2
 80060ca:	f006 020f 	and.w	r2, r6, #15
 80060ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060da:	f005 f8d5 	bl	800b288 <__aeabi_dmul>
 80060de:	1136      	asrs	r6, r6, #4
 80060e0:	4680      	mov	r8, r0
 80060e2:	4689      	mov	r9, r1
 80060e4:	f000 8171 	beq.w	80063ca <_dtoa_r+0xe4a>
 80060e8:	4f48      	ldr	r7, [pc, #288]	; (800620c <_dtoa_r+0xc8c>)
 80060ea:	2300      	movs	r3, #0
 80060ec:	f04f 0a02 	mov.w	sl, #2
 80060f0:	07f2      	lsls	r2, r6, #31
 80060f2:	d506      	bpl.n	8006102 <_dtoa_r+0xb82>
 80060f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f8:	f005 f8c6 	bl	800b288 <__aeabi_dmul>
 80060fc:	f10a 0a01 	add.w	sl, sl, #1
 8006100:	2301      	movs	r3, #1
 8006102:	1076      	asrs	r6, r6, #1
 8006104:	f107 0708 	add.w	r7, r7, #8
 8006108:	d1f2      	bne.n	80060f0 <_dtoa_r+0xb70>
 800610a:	2b00      	cmp	r3, #0
 800610c:	f43f abb4 	beq.w	8005878 <_dtoa_r+0x2f8>
 8006110:	4680      	mov	r8, r0
 8006112:	4689      	mov	r9, r1
 8006114:	f7ff bbb0 	b.w	8005878 <_dtoa_r+0x2f8>
 8006118:	9b04      	ldr	r3, [sp, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f47f ae49 	bne.w	8005db2 <_dtoa_r+0x832>
 8006120:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8006124:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8006128:	2b00      	cmp	r3, #0
 800612a:	f43f af18 	beq.w	8005f5e <_dtoa_r+0x9de>
 800612e:	e640      	b.n	8005db2 <_dtoa_r+0x832>
 8006130:	2a00      	cmp	r2, #0
 8006132:	dd12      	ble.n	800615a <_dtoa_r+0xbda>
 8006134:	4629      	mov	r1, r5
 8006136:	2201      	movs	r2, #1
 8006138:	4620      	mov	r0, r4
 800613a:	9304      	str	r3, [sp, #16]
 800613c:	f000 fe46 	bl	8006dcc <__lshift>
 8006140:	4649      	mov	r1, r9
 8006142:	4605      	mov	r5, r0
 8006144:	f000 feba 	bl	8006ebc <__mcmp>
 8006148:	2800      	cmp	r0, #0
 800614a:	9b04      	ldr	r3, [sp, #16]
 800614c:	f340 8118 	ble.w	8006380 <_dtoa_r+0xe00>
 8006150:	2b39      	cmp	r3, #57	; 0x39
 8006152:	f000 80f9 	beq.w	8006348 <_dtoa_r+0xdc8>
 8006156:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 800615a:	46ba      	mov	sl, r7
 800615c:	f80a 3b01 	strb.w	r3, [sl], #1
 8006160:	9b07      	ldr	r3, [sp, #28]
 8006162:	3301      	adds	r3, #1
 8006164:	4637      	mov	r7, r6
 8006166:	9307      	str	r3, [sp, #28]
 8006168:	4646      	mov	r6, r8
 800616a:	e5e4      	b.n	8005d36 <_dtoa_r+0x7b6>
 800616c:	9509      	str	r5, [sp, #36]	; 0x24
 800616e:	9c06      	ldr	r4, [sp, #24]
 8006170:	9d04      	ldr	r5, [sp, #16]
 8006172:	4602      	mov	r2, r0
 8006174:	460b      	mov	r3, r1
 8006176:	f004 fed1 	bl	800af1c <__adddf3>
 800617a:	4652      	mov	r2, sl
 800617c:	465b      	mov	r3, fp
 800617e:	4680      	mov	r8, r0
 8006180:	4689      	mov	r9, r1
 8006182:	f005 fb11 	bl	800b7a8 <__aeabi_dcmpgt>
 8006186:	b960      	cbnz	r0, 80061a2 <_dtoa_r+0xc22>
 8006188:	4652      	mov	r2, sl
 800618a:	465b      	mov	r3, fp
 800618c:	4640      	mov	r0, r8
 800618e:	4649      	mov	r1, r9
 8006190:	f005 fae2 	bl	800b758 <__aeabi_dcmpeq>
 8006194:	2800      	cmp	r0, #0
 8006196:	f43f acce 	beq.w	8005b36 <_dtoa_r+0x5b6>
 800619a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800619c:	07d9      	lsls	r1, r3, #31
 800619e:	f57f acca 	bpl.w	8005b36 <_dtoa_r+0x5b6>
 80061a2:	9a03      	ldr	r2, [sp, #12]
 80061a4:	e402      	b.n	80059ac <_dtoa_r+0x42c>
 80061a6:	6871      	ldr	r1, [r6, #4]
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fbab 	bl	8006904 <_Balloc>
 80061ae:	4607      	mov	r7, r0
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f000 810e 	beq.w	80063d2 <_dtoa_r+0xe52>
 80061b6:	6933      	ldr	r3, [r6, #16]
 80061b8:	3302      	adds	r3, #2
 80061ba:	009a      	lsls	r2, r3, #2
 80061bc:	f106 010c 	add.w	r1, r6, #12
 80061c0:	300c      	adds	r0, #12
 80061c2:	f000 fb05 	bl	80067d0 <memcpy>
 80061c6:	4639      	mov	r1, r7
 80061c8:	2201      	movs	r2, #1
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 fdfe 	bl	8006dcc <__lshift>
 80061d0:	4680      	mov	r8, r0
 80061d2:	e614      	b.n	8005dfe <_dtoa_r+0x87e>
 80061d4:	4629      	mov	r1, r5
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 fd98 	bl	8006d0c <__pow5mult>
 80061dc:	4605      	mov	r5, r0
 80061de:	e521      	b.n	8005c24 <_dtoa_r+0x6a4>
 80061e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061e4:	1a9f      	subs	r7, r3, r2
 80061e6:	e4c6      	b.n	8005b76 <_dtoa_r+0x5f6>
 80061e8:	2b39      	cmp	r3, #57	; 0x39
 80061ea:	f000 80ad 	beq.w	8006348 <_dtoa_r+0xdc8>
 80061ee:	46ba      	mov	sl, r7
 80061f0:	3301      	adds	r3, #1
 80061f2:	e7b3      	b.n	800615c <_dtoa_r+0xbdc>
 80061f4:	9a07      	ldr	r2, [sp, #28]
 80061f6:	3201      	adds	r2, #1
 80061f8:	4637      	mov	r7, r6
 80061fa:	9207      	str	r2, [sp, #28]
 80061fc:	4646      	mov	r6, r8
 80061fe:	e57b      	b.n	8005cf8 <_dtoa_r+0x778>
 8006200:	0800be2c 	.word	0x0800be2c
 8006204:	7ff00000 	.word	0x7ff00000
 8006208:	0800bf78 	.word	0x0800bf78
 800620c:	0800bf50 	.word	0x0800bf50
 8006210:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006214:	4984      	ldr	r1, [pc, #528]	; (8006428 <_dtoa_r+0xea8>)
 8006216:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800621a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800621e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8006222:	f005 f831 	bl	800b288 <__aeabi_dmul>
 8006226:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800622a:	4649      	mov	r1, r9
 800622c:	4640      	mov	r0, r8
 800622e:	f005 fadb 	bl	800b7e8 <__aeabi_d2iz>
 8006232:	4606      	mov	r6, r0
 8006234:	f004 ffbe 	bl	800b1b4 <__aeabi_i2d>
 8006238:	460b      	mov	r3, r1
 800623a:	4602      	mov	r2, r0
 800623c:	4649      	mov	r1, r9
 800623e:	4640      	mov	r0, r8
 8006240:	f004 fe6a 	bl	800af18 <__aeabi_dsub>
 8006244:	9f03      	ldr	r7, [sp, #12]
 8006246:	4653      	mov	r3, sl
 8006248:	3630      	adds	r6, #48	; 0x30
 800624a:	2b01      	cmp	r3, #1
 800624c:	f807 6b01 	strb.w	r6, [r7], #1
 8006250:	4680      	mov	r8, r0
 8006252:	4689      	mov	r9, r1
 8006254:	f000 80ae 	beq.w	80063b4 <_dtoa_r+0xe34>
 8006258:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800625a:	9b03      	ldr	r3, [sp, #12]
 800625c:	441e      	add	r6, r3
 800625e:	4b73      	ldr	r3, [pc, #460]	; (800642c <_dtoa_r+0xeac>)
 8006260:	2200      	movs	r2, #0
 8006262:	4640      	mov	r0, r8
 8006264:	4649      	mov	r1, r9
 8006266:	f005 f80f 	bl	800b288 <__aeabi_dmul>
 800626a:	4689      	mov	r9, r1
 800626c:	4680      	mov	r8, r0
 800626e:	f005 fabb 	bl	800b7e8 <__aeabi_d2iz>
 8006272:	4682      	mov	sl, r0
 8006274:	f004 ff9e 	bl	800b1b4 <__aeabi_i2d>
 8006278:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4640      	mov	r0, r8
 8006282:	4649      	mov	r1, r9
 8006284:	f004 fe48 	bl	800af18 <__aeabi_dsub>
 8006288:	f807 ab01 	strb.w	sl, [r7], #1
 800628c:	42b7      	cmp	r7, r6
 800628e:	4680      	mov	r8, r0
 8006290:	4689      	mov	r9, r1
 8006292:	d1e4      	bne.n	800625e <_dtoa_r+0xcde>
 8006294:	4b66      	ldr	r3, [pc, #408]	; (8006430 <_dtoa_r+0xeb0>)
 8006296:	2200      	movs	r2, #0
 8006298:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800629c:	f004 fe3e 	bl	800af1c <__adddf3>
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	f005 fa62 	bl	800b76c <__aeabi_dcmplt>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d164      	bne.n	8006376 <_dtoa_r+0xdf6>
 80062ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062b0:	495f      	ldr	r1, [pc, #380]	; (8006430 <_dtoa_r+0xeb0>)
 80062b2:	2000      	movs	r0, #0
 80062b4:	f004 fe30 	bl	800af18 <__aeabi_dsub>
 80062b8:	4642      	mov	r2, r8
 80062ba:	464b      	mov	r3, r9
 80062bc:	f005 fa74 	bl	800b7a8 <__aeabi_dcmpgt>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	f43f abad 	beq.w	8005a20 <_dtoa_r+0x4a0>
 80062c6:	46b2      	mov	sl, r6
 80062c8:	3e01      	subs	r6, #1
 80062ca:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
 80062ce:	2b30      	cmp	r3, #48	; 0x30
 80062d0:	d0f9      	beq.n	80062c6 <_dtoa_r+0xd46>
 80062d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062d4:	3301      	adds	r3, #1
 80062d6:	9307      	str	r3, [sp, #28]
 80062d8:	e53d      	b.n	8005d56 <_dtoa_r+0x7d6>
 80062da:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062dc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062e0:	e6d7      	b.n	8006092 <_dtoa_r+0xb12>
 80062e2:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80062e6:	f04f 0a02 	mov.w	sl, #2
 80062ea:	f7ff bac5 	b.w	8005878 <_dtoa_r+0x2f8>
 80062ee:	9b08      	ldr	r3, [sp, #32]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f43f ab67 	beq.w	80059c4 <_dtoa_r+0x444>
 80062f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f77f ab91 	ble.w	8005a20 <_dtoa_r+0x4a0>
 80062fe:	9a07      	ldr	r2, [sp, #28]
 8006300:	3a01      	subs	r2, #1
 8006302:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
 8006306:	4640      	mov	r0, r8
 8006308:	4b48      	ldr	r3, [pc, #288]	; (800642c <_dtoa_r+0xeac>)
 800630a:	2200      	movs	r2, #0
 800630c:	4649      	mov	r1, r9
 800630e:	f004 ffbb 	bl	800b288 <__aeabi_dmul>
 8006312:	4680      	mov	r8, r0
 8006314:	4689      	mov	r9, r1
 8006316:	f10a 0001 	add.w	r0, sl, #1
 800631a:	f004 ff4b 	bl	800b1b4 <__aeabi_i2d>
 800631e:	4642      	mov	r2, r8
 8006320:	464b      	mov	r3, r9
 8006322:	f004 ffb1 	bl	800b288 <__aeabi_dmul>
 8006326:	4b43      	ldr	r3, [pc, #268]	; (8006434 <_dtoa_r+0xeb4>)
 8006328:	2200      	movs	r2, #0
 800632a:	f004 fdf7 	bl	800af1c <__adddf3>
 800632e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006332:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006336:	9311      	str	r3, [sp, #68]	; 0x44
 8006338:	f7ff bac1 	b.w	80058be <_dtoa_r+0x33e>
 800633c:	9b07      	ldr	r3, [sp, #28]
 800633e:	3301      	adds	r3, #1
 8006340:	9307      	str	r3, [sp, #28]
 8006342:	2331      	movs	r3, #49	; 0x31
 8006344:	f7ff bb39 	b.w	80059ba <_dtoa_r+0x43a>
 8006348:	9b07      	ldr	r3, [sp, #28]
 800634a:	46bb      	mov	fp, r7
 800634c:	3301      	adds	r3, #1
 800634e:	9307      	str	r3, [sp, #28]
 8006350:	2339      	movs	r3, #57	; 0x39
 8006352:	4637      	mov	r7, r6
 8006354:	f80b 3b01 	strb.w	r3, [fp], #1
 8006358:	4646      	mov	r6, r8
 800635a:	e4dc      	b.n	8005d16 <_dtoa_r+0x796>
 800635c:	f04f 0900 	mov.w	r9, #0
 8006360:	464e      	mov	r6, r9
 8006362:	e64b      	b.n	8005ffc <_dtoa_r+0xa7c>
 8006364:	469a      	mov	sl, r3
 8006366:	e46c      	b.n	8005c42 <_dtoa_r+0x6c2>
 8006368:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800636a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800636c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800636e:	3301      	adds	r3, #1
 8006370:	9307      	str	r3, [sp, #28]
 8006372:	46b2      	mov	sl, r6
 8006374:	e4ef      	b.n	8005d56 <_dtoa_r+0x7d6>
 8006376:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006378:	9a03      	ldr	r2, [sp, #12]
 800637a:	9307      	str	r3, [sp, #28]
 800637c:	f7ff bb16 	b.w	80059ac <_dtoa_r+0x42c>
 8006380:	f47f aeeb 	bne.w	800615a <_dtoa_r+0xbda>
 8006384:	07da      	lsls	r2, r3, #31
 8006386:	f57f aee8 	bpl.w	800615a <_dtoa_r+0xbda>
 800638a:	e6e1      	b.n	8006150 <_dtoa_r+0xbd0>
 800638c:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8006390:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006392:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006394:	f7ff bb44 	b.w	8005a20 <_dtoa_r+0x4a0>
 8006398:	2b39      	cmp	r3, #57	; 0x39
 800639a:	d0d5      	beq.n	8006348 <_dtoa_r+0xdc8>
 800639c:	f1ba 0f00 	cmp.w	sl, #0
 80063a0:	f73f aed9 	bgt.w	8006156 <_dtoa_r+0xbd6>
 80063a4:	e6d9      	b.n	800615a <_dtoa_r+0xbda>
 80063a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	f73f ae12 	bgt.w	8005fd2 <_dtoa_r+0xa52>
 80063ae:	f8cd 801c 	str.w	r8, [sp, #28]
 80063b2:	e59b      	b.n	8005eec <_dtoa_r+0x96c>
 80063b4:	463e      	mov	r6, r7
 80063b6:	e76d      	b.n	8006294 <_dtoa_r+0xd14>
 80063b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	f73f ae09 	bgt.w	8005fd2 <_dtoa_r+0xa52>
 80063c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063c2:	f8cd 801c 	str.w	r8, [sp, #28]
 80063c6:	9308      	str	r3, [sp, #32]
 80063c8:	e511      	b.n	8005dee <_dtoa_r+0x86e>
 80063ca:	f04f 0a02 	mov.w	sl, #2
 80063ce:	f7ff ba53 	b.w	8005878 <_dtoa_r+0x2f8>
 80063d2:	4b19      	ldr	r3, [pc, #100]	; (8006438 <_dtoa_r+0xeb8>)
 80063d4:	4819      	ldr	r0, [pc, #100]	; (800643c <_dtoa_r+0xebc>)
 80063d6:	463a      	mov	r2, r7
 80063d8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80063dc:	f001 febc 	bl	8008158 <__assert_func>
 80063e0:	2600      	movs	r6, #0
 80063e2:	6466      	str	r6, [r4, #68]	; 0x44
 80063e4:	4631      	mov	r1, r6
 80063e6:	4620      	mov	r0, r4
 80063e8:	f000 fa8c 	bl	8006904 <_Balloc>
 80063ec:	9003      	str	r0, [sp, #12]
 80063ee:	b978      	cbnz	r0, 8006410 <_dtoa_r+0xe90>
 80063f0:	4b11      	ldr	r3, [pc, #68]	; (8006438 <_dtoa_r+0xeb8>)
 80063f2:	4812      	ldr	r0, [pc, #72]	; (800643c <_dtoa_r+0xebc>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063fa:	f001 fead 	bl	8008158 <__assert_func>
 80063fe:	4b10      	ldr	r3, [pc, #64]	; (8006440 <_dtoa_r+0xec0>)
 8006400:	9303      	str	r3, [sp, #12]
 8006402:	f7ff b8f8 	b.w	80055f6 <_dtoa_r+0x76>
 8006406:	f43f ac34 	beq.w	8005c72 <_dtoa_r+0x6f2>
 800640a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800640e:	e4b7      	b.n	8005d80 <_dtoa_r+0x800>
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	6423      	str	r3, [r4, #64]	; 0x40
 8006414:	2201      	movs	r2, #1
 8006416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800641a:	9623      	str	r6, [sp, #140]	; 0x8c
 800641c:	9312      	str	r3, [sp, #72]	; 0x48
 800641e:	920c      	str	r2, [sp, #48]	; 0x30
 8006420:	9308      	str	r3, [sp, #32]
 8006422:	f7ff bafd 	b.w	8005a20 <_dtoa_r+0x4a0>
 8006426:	bf00      	nop
 8006428:	0800bf78 	.word	0x0800bf78
 800642c:	40240000 	.word	0x40240000
 8006430:	3fe00000 	.word	0x3fe00000
 8006434:	401c0000 	.word	0x401c0000
 8006438:	0800be3c 	.word	0x0800be3c
 800643c:	0800be50 	.word	0x0800be50
 8006440:	0800be30 	.word	0x0800be30

08006444 <_malloc_trim_r>:
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	4f24      	ldr	r7, [pc, #144]	; (80064d8 <_malloc_trim_r+0x94>)
 8006448:	460c      	mov	r4, r1
 800644a:	4606      	mov	r6, r0
 800644c:	f7fd f998 	bl	8003780 <__malloc_lock>
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	6855      	ldr	r5, [r2, #4]
 8006454:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 8006458:	330f      	adds	r3, #15
 800645a:	f025 0503 	bic.w	r5, r5, #3
 800645e:	442b      	add	r3, r5
 8006460:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006464:	f023 030f 	bic.w	r3, r3, #15
 8006468:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 800646c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8006470:	db07      	blt.n	8006482 <_malloc_trim_r+0x3e>
 8006472:	2100      	movs	r1, #0
 8006474:	4630      	mov	r0, r6
 8006476:	f7fd f98f 	bl	8003798 <_sbrk_r>
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	442b      	add	r3, r5
 800647e:	4298      	cmp	r0, r3
 8006480:	d004      	beq.n	800648c <_malloc_trim_r+0x48>
 8006482:	4630      	mov	r0, r6
 8006484:	f7fd f982 	bl	800378c <__malloc_unlock>
 8006488:	2000      	movs	r0, #0
 800648a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800648c:	4261      	negs	r1, r4
 800648e:	4630      	mov	r0, r6
 8006490:	f7fd f982 	bl	8003798 <_sbrk_r>
 8006494:	3001      	adds	r0, #1
 8006496:	d00d      	beq.n	80064b4 <_malloc_trim_r+0x70>
 8006498:	4a10      	ldr	r2, [pc, #64]	; (80064dc <_malloc_trim_r+0x98>)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	1b2d      	subs	r5, r5, r4
 800649e:	f045 0501 	orr.w	r5, r5, #1
 80064a2:	605d      	str	r5, [r3, #4]
 80064a4:	6813      	ldr	r3, [r2, #0]
 80064a6:	4630      	mov	r0, r6
 80064a8:	1b1b      	subs	r3, r3, r4
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	f7fd f96e 	bl	800378c <__malloc_unlock>
 80064b0:	2001      	movs	r0, #1
 80064b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b4:	2100      	movs	r1, #0
 80064b6:	4630      	mov	r0, r6
 80064b8:	f7fd f96e 	bl	8003798 <_sbrk_r>
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	1a83      	subs	r3, r0, r2
 80064c0:	2b0f      	cmp	r3, #15
 80064c2:	ddde      	ble.n	8006482 <_malloc_trim_r+0x3e>
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	6053      	str	r3, [r2, #4]
 80064ca:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <_malloc_trim_r+0x9c>)
 80064cc:	4903      	ldr	r1, [pc, #12]	; (80064dc <_malloc_trim_r+0x98>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	1ac0      	subs	r0, r0, r3
 80064d2:	6008      	str	r0, [r1, #0]
 80064d4:	e7d5      	b.n	8006482 <_malloc_trim_r+0x3e>
 80064d6:	bf00      	nop
 80064d8:	20000508 	.word	0x20000508
 80064dc:	20000b2c 	.word	0x20000b2c
 80064e0:	20000910 	.word	0x20000910

080064e4 <_free_r>:
 80064e4:	2900      	cmp	r1, #0
 80064e6:	d061      	beq.n	80065ac <_free_r+0xc8>
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ea:	460c      	mov	r4, r1
 80064ec:	4606      	mov	r6, r0
 80064ee:	f7fd f947 	bl	8003780 <__malloc_lock>
 80064f2:	f854 2c04 	ldr.w	r2, [r4, #-4]
 80064f6:	4f7b      	ldr	r7, [pc, #492]	; (80066e4 <_free_r+0x200>)
 80064f8:	f1a4 0508 	sub.w	r5, r4, #8
 80064fc:	f022 0101 	bic.w	r1, r2, #1
 8006500:	eb05 0c01 	add.w	ip, r5, r1
 8006504:	68b8      	ldr	r0, [r7, #8]
 8006506:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800650a:	4560      	cmp	r0, ip
 800650c:	f023 0303 	bic.w	r3, r3, #3
 8006510:	f000 808b 	beq.w	800662a <_free_r+0x146>
 8006514:	07d2      	lsls	r2, r2, #31
 8006516:	f8cc 3004 	str.w	r3, [ip, #4]
 800651a:	d432      	bmi.n	8006582 <_free_r+0x9e>
 800651c:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8006520:	1aad      	subs	r5, r5, r2
 8006522:	4411      	add	r1, r2
 8006524:	68aa      	ldr	r2, [r5, #8]
 8006526:	f107 0008 	add.w	r0, r7, #8
 800652a:	4282      	cmp	r2, r0
 800652c:	d06a      	beq.n	8006604 <_free_r+0x120>
 800652e:	eb0c 0403 	add.w	r4, ip, r3
 8006532:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8006536:	68ec      	ldr	r4, [r5, #12]
 8006538:	60d4      	str	r4, [r2, #12]
 800653a:	f01e 0f01 	tst.w	lr, #1
 800653e:	60a2      	str	r2, [r4, #8]
 8006540:	f000 8097 	beq.w	8006672 <_free_r+0x18e>
 8006544:	f041 0301 	orr.w	r3, r1, #1
 8006548:	606b      	str	r3, [r5, #4]
 800654a:	f8cc 1000 	str.w	r1, [ip]
 800654e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006552:	d235      	bcs.n	80065c0 <_free_r+0xdc>
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	08cb      	lsrs	r3, r1, #3
 8006558:	0948      	lsrs	r0, r1, #5
 800655a:	2101      	movs	r1, #1
 800655c:	3301      	adds	r3, #1
 800655e:	4081      	lsls	r1, r0
 8006560:	4311      	orrs	r1, r2
 8006562:	6079      	str	r1, [r7, #4]
 8006564:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8006568:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 800656c:	3a08      	subs	r2, #8
 800656e:	e9c5 1202 	strd	r1, r2, [r5, #8]
 8006572:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8006576:	60cd      	str	r5, [r1, #12]
 8006578:	4630      	mov	r0, r6
 800657a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800657e:	f7fd b905 	b.w	800378c <__malloc_unlock>
 8006582:	eb0c 0203 	add.w	r2, ip, r3
 8006586:	6852      	ldr	r2, [r2, #4]
 8006588:	07d0      	lsls	r0, r2, #31
 800658a:	d410      	bmi.n	80065ae <_free_r+0xca>
 800658c:	4419      	add	r1, r3
 800658e:	f107 0008 	add.w	r0, r7, #8
 8006592:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8006596:	4283      	cmp	r3, r0
 8006598:	d073      	beq.n	8006682 <_free_r+0x19e>
 800659a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800659e:	60da      	str	r2, [r3, #12]
 80065a0:	6093      	str	r3, [r2, #8]
 80065a2:	f041 0301 	orr.w	r3, r1, #1
 80065a6:	606b      	str	r3, [r5, #4]
 80065a8:	5069      	str	r1, [r5, r1]
 80065aa:	e7d0      	b.n	800654e <_free_r+0x6a>
 80065ac:	4770      	bx	lr
 80065ae:	f041 0301 	orr.w	r3, r1, #1
 80065b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80065b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80065ba:	f8cc 1000 	str.w	r1, [ip]
 80065be:	d3c9      	bcc.n	8006554 <_free_r+0x70>
 80065c0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 80065c4:	ea4f 2351 	mov.w	r3, r1, lsr #9
 80065c8:	d248      	bcs.n	800665c <_free_r+0x178>
 80065ca:	098b      	lsrs	r3, r1, #6
 80065cc:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80065d0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80065d4:	00c3      	lsls	r3, r0, #3
 80065d6:	18f8      	adds	r0, r7, r3
 80065d8:	58fb      	ldr	r3, [r7, r3]
 80065da:	3808      	subs	r0, #8
 80065dc:	4298      	cmp	r0, r3
 80065de:	d059      	beq.n	8006694 <_free_r+0x1b0>
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	f022 0203 	bic.w	r2, r2, #3
 80065e6:	428a      	cmp	r2, r1
 80065e8:	d902      	bls.n	80065f0 <_free_r+0x10c>
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4298      	cmp	r0, r3
 80065ee:	d1f7      	bne.n	80065e0 <_free_r+0xfc>
 80065f0:	68d8      	ldr	r0, [r3, #12]
 80065f2:	e9c5 3002 	strd	r3, r0, [r5, #8]
 80065f6:	6085      	str	r5, [r0, #8]
 80065f8:	60dd      	str	r5, [r3, #12]
 80065fa:	4630      	mov	r0, r6
 80065fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006600:	f7fd b8c4 	b.w	800378c <__malloc_unlock>
 8006604:	eb0c 0203 	add.w	r2, ip, r3
 8006608:	6852      	ldr	r2, [r2, #4]
 800660a:	07d2      	lsls	r2, r2, #31
 800660c:	d463      	bmi.n	80066d6 <_free_r+0x1f2>
 800660e:	440b      	add	r3, r1
 8006610:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8006614:	60ca      	str	r2, [r1, #12]
 8006616:	6091      	str	r1, [r2, #8]
 8006618:	f043 0201 	orr.w	r2, r3, #1
 800661c:	606a      	str	r2, [r5, #4]
 800661e:	4630      	mov	r0, r6
 8006620:	50eb      	str	r3, [r5, r3]
 8006622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006626:	f7fd b8b1 	b.w	800378c <__malloc_unlock>
 800662a:	440b      	add	r3, r1
 800662c:	07d1      	lsls	r1, r2, #31
 800662e:	d407      	bmi.n	8006640 <_free_r+0x15c>
 8006630:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8006634:	1aad      	subs	r5, r5, r2
 8006636:	4413      	add	r3, r2
 8006638:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 800663c:	60ca      	str	r2, [r1, #12]
 800663e:	6091      	str	r1, [r2, #8]
 8006640:	f043 0201 	orr.w	r2, r3, #1
 8006644:	606a      	str	r2, [r5, #4]
 8006646:	4a28      	ldr	r2, [pc, #160]	; (80066e8 <_free_r+0x204>)
 8006648:	60bd      	str	r5, [r7, #8]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d893      	bhi.n	8006578 <_free_r+0x94>
 8006650:	4b26      	ldr	r3, [pc, #152]	; (80066ec <_free_r+0x208>)
 8006652:	4630      	mov	r0, r6
 8006654:	6819      	ldr	r1, [r3, #0]
 8006656:	f7ff fef5 	bl	8006444 <_malloc_trim_r>
 800665a:	e78d      	b.n	8006578 <_free_r+0x94>
 800665c:	2b14      	cmp	r3, #20
 800665e:	d90a      	bls.n	8006676 <_free_r+0x192>
 8006660:	2b54      	cmp	r3, #84	; 0x54
 8006662:	d81f      	bhi.n	80066a4 <_free_r+0x1c0>
 8006664:	0b0b      	lsrs	r3, r1, #12
 8006666:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800666a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800666e:	00c3      	lsls	r3, r0, #3
 8006670:	e7b1      	b.n	80065d6 <_free_r+0xf2>
 8006672:	4419      	add	r1, r3
 8006674:	e78d      	b.n	8006592 <_free_r+0xae>
 8006676:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800667a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800667e:	00c3      	lsls	r3, r0, #3
 8006680:	e7a9      	b.n	80065d6 <_free_r+0xf2>
 8006682:	f041 0301 	orr.w	r3, r1, #1
 8006686:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800668a:	e9c5 0002 	strd	r0, r0, [r5, #8]
 800668e:	606b      	str	r3, [r5, #4]
 8006690:	5069      	str	r1, [r5, r1]
 8006692:	e771      	b.n	8006578 <_free_r+0x94>
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	1092      	asrs	r2, r2, #2
 8006698:	2401      	movs	r4, #1
 800669a:	fa04 f202 	lsl.w	r2, r4, r2
 800669e:	430a      	orrs	r2, r1
 80066a0:	607a      	str	r2, [r7, #4]
 80066a2:	e7a6      	b.n	80065f2 <_free_r+0x10e>
 80066a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80066a8:	d806      	bhi.n	80066b8 <_free_r+0x1d4>
 80066aa:	0bcb      	lsrs	r3, r1, #15
 80066ac:	f103 0078 	add.w	r0, r3, #120	; 0x78
 80066b0:	f103 0277 	add.w	r2, r3, #119	; 0x77
 80066b4:	00c3      	lsls	r3, r0, #3
 80066b6:	e78e      	b.n	80065d6 <_free_r+0xf2>
 80066b8:	f240 5254 	movw	r2, #1364	; 0x554
 80066bc:	4293      	cmp	r3, r2
 80066be:	d806      	bhi.n	80066ce <_free_r+0x1ea>
 80066c0:	0c8b      	lsrs	r3, r1, #18
 80066c2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80066c6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80066ca:	00c3      	lsls	r3, r0, #3
 80066cc:	e783      	b.n	80065d6 <_free_r+0xf2>
 80066ce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80066d2:	227e      	movs	r2, #126	; 0x7e
 80066d4:	e77f      	b.n	80065d6 <_free_r+0xf2>
 80066d6:	f041 0301 	orr.w	r3, r1, #1
 80066da:	606b      	str	r3, [r5, #4]
 80066dc:	f8cc 1000 	str.w	r1, [ip]
 80066e0:	e74a      	b.n	8006578 <_free_r+0x94>
 80066e2:	bf00      	nop
 80066e4:	20000508 	.word	0x20000508
 80066e8:	20000914 	.word	0x20000914
 80066ec:	20000b5c 	.word	0x20000b5c

080066f0 <__localeconv_l>:
 80066f0:	30f0      	adds	r0, #240	; 0xf0
 80066f2:	4770      	bx	lr

080066f4 <_localeconv_r>:
 80066f4:	4800      	ldr	r0, [pc, #0]	; (80066f8 <_localeconv_r+0x4>)
 80066f6:	4770      	bx	lr
 80066f8:	20000a08 	.word	0x20000a08

080066fc <localeconv>:
 80066fc:	4800      	ldr	r0, [pc, #0]	; (8006700 <localeconv+0x4>)
 80066fe:	4770      	bx	lr
 8006700:	20000a08 	.word	0x20000a08

08006704 <__retarget_lock_init>:
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop

08006708 <__retarget_lock_init_recursive>:
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop

0800670c <__retarget_lock_close>:
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop

08006710 <__retarget_lock_close_recursive>:
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop

08006714 <__retarget_lock_acquire>:
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop

08006718 <__retarget_lock_acquire_recursive>:
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop

0800671c <__retarget_lock_try_acquire>:
 800671c:	2001      	movs	r0, #1
 800671e:	4770      	bx	lr

08006720 <__retarget_lock_try_acquire_recursive>:
 8006720:	2001      	movs	r0, #1
 8006722:	4770      	bx	lr

08006724 <__retarget_lock_release>:
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop

08006728 <__retarget_lock_release_recursive>:
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	0000      	movs	r0, r0
	...

08006730 <memchr>:
 8006730:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006734:	2a10      	cmp	r2, #16
 8006736:	db2b      	blt.n	8006790 <memchr+0x60>
 8006738:	f010 0f07 	tst.w	r0, #7
 800673c:	d008      	beq.n	8006750 <memchr+0x20>
 800673e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006742:	3a01      	subs	r2, #1
 8006744:	428b      	cmp	r3, r1
 8006746:	d02d      	beq.n	80067a4 <memchr+0x74>
 8006748:	f010 0f07 	tst.w	r0, #7
 800674c:	b342      	cbz	r2, 80067a0 <memchr+0x70>
 800674e:	d1f6      	bne.n	800673e <memchr+0xe>
 8006750:	b4f0      	push	{r4, r5, r6, r7}
 8006752:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8006756:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800675a:	f022 0407 	bic.w	r4, r2, #7
 800675e:	f07f 0700 	mvns.w	r7, #0
 8006762:	2300      	movs	r3, #0
 8006764:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8006768:	3c08      	subs	r4, #8
 800676a:	ea85 0501 	eor.w	r5, r5, r1
 800676e:	ea86 0601 	eor.w	r6, r6, r1
 8006772:	fa85 f547 	uadd8	r5, r5, r7
 8006776:	faa3 f587 	sel	r5, r3, r7
 800677a:	fa86 f647 	uadd8	r6, r6, r7
 800677e:	faa5 f687 	sel	r6, r5, r7
 8006782:	b98e      	cbnz	r6, 80067a8 <memchr+0x78>
 8006784:	d1ee      	bne.n	8006764 <memchr+0x34>
 8006786:	bcf0      	pop	{r4, r5, r6, r7}
 8006788:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800678c:	f002 0207 	and.w	r2, r2, #7
 8006790:	b132      	cbz	r2, 80067a0 <memchr+0x70>
 8006792:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006796:	3a01      	subs	r2, #1
 8006798:	ea83 0301 	eor.w	r3, r3, r1
 800679c:	b113      	cbz	r3, 80067a4 <memchr+0x74>
 800679e:	d1f8      	bne.n	8006792 <memchr+0x62>
 80067a0:	2000      	movs	r0, #0
 80067a2:	4770      	bx	lr
 80067a4:	3801      	subs	r0, #1
 80067a6:	4770      	bx	lr
 80067a8:	2d00      	cmp	r5, #0
 80067aa:	bf06      	itte	eq
 80067ac:	4635      	moveq	r5, r6
 80067ae:	3803      	subeq	r0, #3
 80067b0:	3807      	subne	r0, #7
 80067b2:	f015 0f01 	tst.w	r5, #1
 80067b6:	d107      	bne.n	80067c8 <memchr+0x98>
 80067b8:	3001      	adds	r0, #1
 80067ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80067be:	bf02      	ittt	eq
 80067c0:	3001      	addeq	r0, #1
 80067c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80067c6:	3001      	addeq	r0, #1
 80067c8:	bcf0      	pop	{r4, r5, r6, r7}
 80067ca:	3801      	subs	r0, #1
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop

080067d0 <memcpy>:
 80067d0:	4684      	mov	ip, r0
 80067d2:	ea41 0300 	orr.w	r3, r1, r0
 80067d6:	f013 0303 	ands.w	r3, r3, #3
 80067da:	d16d      	bne.n	80068b8 <memcpy+0xe8>
 80067dc:	3a40      	subs	r2, #64	; 0x40
 80067de:	d341      	bcc.n	8006864 <memcpy+0x94>
 80067e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80067e4:	f840 3b04 	str.w	r3, [r0], #4
 80067e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80067ec:	f840 3b04 	str.w	r3, [r0], #4
 80067f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80067f4:	f840 3b04 	str.w	r3, [r0], #4
 80067f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80067fc:	f840 3b04 	str.w	r3, [r0], #4
 8006800:	f851 3b04 	ldr.w	r3, [r1], #4
 8006804:	f840 3b04 	str.w	r3, [r0], #4
 8006808:	f851 3b04 	ldr.w	r3, [r1], #4
 800680c:	f840 3b04 	str.w	r3, [r0], #4
 8006810:	f851 3b04 	ldr.w	r3, [r1], #4
 8006814:	f840 3b04 	str.w	r3, [r0], #4
 8006818:	f851 3b04 	ldr.w	r3, [r1], #4
 800681c:	f840 3b04 	str.w	r3, [r0], #4
 8006820:	f851 3b04 	ldr.w	r3, [r1], #4
 8006824:	f840 3b04 	str.w	r3, [r0], #4
 8006828:	f851 3b04 	ldr.w	r3, [r1], #4
 800682c:	f840 3b04 	str.w	r3, [r0], #4
 8006830:	f851 3b04 	ldr.w	r3, [r1], #4
 8006834:	f840 3b04 	str.w	r3, [r0], #4
 8006838:	f851 3b04 	ldr.w	r3, [r1], #4
 800683c:	f840 3b04 	str.w	r3, [r0], #4
 8006840:	f851 3b04 	ldr.w	r3, [r1], #4
 8006844:	f840 3b04 	str.w	r3, [r0], #4
 8006848:	f851 3b04 	ldr.w	r3, [r1], #4
 800684c:	f840 3b04 	str.w	r3, [r0], #4
 8006850:	f851 3b04 	ldr.w	r3, [r1], #4
 8006854:	f840 3b04 	str.w	r3, [r0], #4
 8006858:	f851 3b04 	ldr.w	r3, [r1], #4
 800685c:	f840 3b04 	str.w	r3, [r0], #4
 8006860:	3a40      	subs	r2, #64	; 0x40
 8006862:	d2bd      	bcs.n	80067e0 <memcpy+0x10>
 8006864:	3230      	adds	r2, #48	; 0x30
 8006866:	d311      	bcc.n	800688c <memcpy+0xbc>
 8006868:	f851 3b04 	ldr.w	r3, [r1], #4
 800686c:	f840 3b04 	str.w	r3, [r0], #4
 8006870:	f851 3b04 	ldr.w	r3, [r1], #4
 8006874:	f840 3b04 	str.w	r3, [r0], #4
 8006878:	f851 3b04 	ldr.w	r3, [r1], #4
 800687c:	f840 3b04 	str.w	r3, [r0], #4
 8006880:	f851 3b04 	ldr.w	r3, [r1], #4
 8006884:	f840 3b04 	str.w	r3, [r0], #4
 8006888:	3a10      	subs	r2, #16
 800688a:	d2ed      	bcs.n	8006868 <memcpy+0x98>
 800688c:	320c      	adds	r2, #12
 800688e:	d305      	bcc.n	800689c <memcpy+0xcc>
 8006890:	f851 3b04 	ldr.w	r3, [r1], #4
 8006894:	f840 3b04 	str.w	r3, [r0], #4
 8006898:	3a04      	subs	r2, #4
 800689a:	d2f9      	bcs.n	8006890 <memcpy+0xc0>
 800689c:	3204      	adds	r2, #4
 800689e:	d008      	beq.n	80068b2 <memcpy+0xe2>
 80068a0:	07d2      	lsls	r2, r2, #31
 80068a2:	bf1c      	itt	ne
 80068a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80068a8:	f800 3b01 	strbne.w	r3, [r0], #1
 80068ac:	d301      	bcc.n	80068b2 <memcpy+0xe2>
 80068ae:	880b      	ldrh	r3, [r1, #0]
 80068b0:	8003      	strh	r3, [r0, #0]
 80068b2:	4660      	mov	r0, ip
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	2a08      	cmp	r2, #8
 80068ba:	d313      	bcc.n	80068e4 <memcpy+0x114>
 80068bc:	078b      	lsls	r3, r1, #30
 80068be:	d08d      	beq.n	80067dc <memcpy+0xc>
 80068c0:	f010 0303 	ands.w	r3, r0, #3
 80068c4:	d08a      	beq.n	80067dc <memcpy+0xc>
 80068c6:	f1c3 0304 	rsb	r3, r3, #4
 80068ca:	1ad2      	subs	r2, r2, r3
 80068cc:	07db      	lsls	r3, r3, #31
 80068ce:	bf1c      	itt	ne
 80068d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80068d4:	f800 3b01 	strbne.w	r3, [r0], #1
 80068d8:	d380      	bcc.n	80067dc <memcpy+0xc>
 80068da:	f831 3b02 	ldrh.w	r3, [r1], #2
 80068de:	f820 3b02 	strh.w	r3, [r0], #2
 80068e2:	e77b      	b.n	80067dc <memcpy+0xc>
 80068e4:	3a04      	subs	r2, #4
 80068e6:	d3d9      	bcc.n	800689c <memcpy+0xcc>
 80068e8:	3a01      	subs	r2, #1
 80068ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068ee:	f800 3b01 	strb.w	r3, [r0], #1
 80068f2:	d2f9      	bcs.n	80068e8 <memcpy+0x118>
 80068f4:	780b      	ldrb	r3, [r1, #0]
 80068f6:	7003      	strb	r3, [r0, #0]
 80068f8:	784b      	ldrb	r3, [r1, #1]
 80068fa:	7043      	strb	r3, [r0, #1]
 80068fc:	788b      	ldrb	r3, [r1, #2]
 80068fe:	7083      	strb	r3, [r0, #2]
 8006900:	4660      	mov	r0, ip
 8006902:	4770      	bx	lr

08006904 <_Balloc>:
 8006904:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006906:	b570      	push	{r4, r5, r6, lr}
 8006908:	4605      	mov	r5, r0
 800690a:	460c      	mov	r4, r1
 800690c:	b14b      	cbz	r3, 8006922 <_Balloc+0x1e>
 800690e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006912:	b180      	cbz	r0, 8006936 <_Balloc+0x32>
 8006914:	6802      	ldr	r2, [r0, #0]
 8006916:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800691a:	2300      	movs	r3, #0
 800691c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006920:	bd70      	pop	{r4, r5, r6, pc}
 8006922:	2221      	movs	r2, #33	; 0x21
 8006924:	2104      	movs	r1, #4
 8006926:	f001 fc3d 	bl	80081a4 <_calloc_r>
 800692a:	4603      	mov	r3, r0
 800692c:	64e8      	str	r0, [r5, #76]	; 0x4c
 800692e:	2800      	cmp	r0, #0
 8006930:	d1ed      	bne.n	800690e <_Balloc+0xa>
 8006932:	2000      	movs	r0, #0
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	2101      	movs	r1, #1
 8006938:	fa01 f604 	lsl.w	r6, r1, r4
 800693c:	1d72      	adds	r2, r6, #5
 800693e:	0092      	lsls	r2, r2, #2
 8006940:	4628      	mov	r0, r5
 8006942:	f001 fc2f 	bl	80081a4 <_calloc_r>
 8006946:	2800      	cmp	r0, #0
 8006948:	d0f3      	beq.n	8006932 <_Balloc+0x2e>
 800694a:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800694e:	e7e4      	b.n	800691a <_Balloc+0x16>

08006950 <_Bfree>:
 8006950:	b131      	cbz	r1, 8006960 <_Bfree+0x10>
 8006952:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006954:	684a      	ldr	r2, [r1, #4]
 8006956:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800695a:	6008      	str	r0, [r1, #0]
 800695c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop

08006964 <__multadd>:
 8006964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006968:	690d      	ldr	r5, [r1, #16]
 800696a:	4607      	mov	r7, r0
 800696c:	460e      	mov	r6, r1
 800696e:	461c      	mov	r4, r3
 8006970:	f101 0e14 	add.w	lr, r1, #20
 8006974:	2000      	movs	r0, #0
 8006976:	f8de 1000 	ldr.w	r1, [lr]
 800697a:	b28b      	uxth	r3, r1
 800697c:	fb02 4303 	mla	r3, r2, r3, r4
 8006980:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8006984:	0c09      	lsrs	r1, r1, #16
 8006986:	fb02 cc01 	mla	ip, r2, r1, ip
 800698a:	3001      	adds	r0, #1
 800698c:	b29b      	uxth	r3, r3
 800698e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 8006992:	4285      	cmp	r5, r0
 8006994:	f84e 3b04 	str.w	r3, [lr], #4
 8006998:	ea4f 441c 	mov.w	r4, ip, lsr #16
 800699c:	dceb      	bgt.n	8006976 <__multadd+0x12>
 800699e:	b13c      	cbz	r4, 80069b0 <__multadd+0x4c>
 80069a0:	68b3      	ldr	r3, [r6, #8]
 80069a2:	42ab      	cmp	r3, r5
 80069a4:	dd07      	ble.n	80069b6 <__multadd+0x52>
 80069a6:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80069aa:	3501      	adds	r5, #1
 80069ac:	615c      	str	r4, [r3, #20]
 80069ae:	6135      	str	r5, [r6, #16]
 80069b0:	4630      	mov	r0, r6
 80069b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b6:	6871      	ldr	r1, [r6, #4]
 80069b8:	4638      	mov	r0, r7
 80069ba:	3101      	adds	r1, #1
 80069bc:	f7ff ffa2 	bl	8006904 <_Balloc>
 80069c0:	4680      	mov	r8, r0
 80069c2:	b1a8      	cbz	r0, 80069f0 <__multadd+0x8c>
 80069c4:	6932      	ldr	r2, [r6, #16]
 80069c6:	3202      	adds	r2, #2
 80069c8:	f106 010c 	add.w	r1, r6, #12
 80069cc:	0092      	lsls	r2, r2, #2
 80069ce:	300c      	adds	r0, #12
 80069d0:	f7ff fefe 	bl	80067d0 <memcpy>
 80069d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d6:	6872      	ldr	r2, [r6, #4]
 80069d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069dc:	6031      	str	r1, [r6, #0]
 80069de:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80069e2:	4646      	mov	r6, r8
 80069e4:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80069e8:	3501      	adds	r5, #1
 80069ea:	615c      	str	r4, [r3, #20]
 80069ec:	6135      	str	r5, [r6, #16]
 80069ee:	e7df      	b.n	80069b0 <__multadd+0x4c>
 80069f0:	4b02      	ldr	r3, [pc, #8]	; (80069fc <__multadd+0x98>)
 80069f2:	4803      	ldr	r0, [pc, #12]	; (8006a00 <__multadd+0x9c>)
 80069f4:	4642      	mov	r2, r8
 80069f6:	21b5      	movs	r1, #181	; 0xb5
 80069f8:	f001 fbae 	bl	8008158 <__assert_func>
 80069fc:	0800be3c 	.word	0x0800be3c
 8006a00:	0800bed0 	.word	0x0800bed0

08006a04 <__s2b>:
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	460c      	mov	r4, r1
 8006a0a:	4928      	ldr	r1, [pc, #160]	; (8006aac <__s2b+0xa8>)
 8006a0c:	461e      	mov	r6, r3
 8006a0e:	4617      	mov	r7, r2
 8006a10:	f103 0208 	add.w	r2, r3, #8
 8006a14:	fb81 3102 	smull	r3, r1, r1, r2
 8006a18:	2e09      	cmp	r6, #9
 8006a1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8006a1e:	4605      	mov	r5, r0
 8006a20:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 8006a24:	dd39      	ble.n	8006a9a <__s2b+0x96>
 8006a26:	f04f 0c01 	mov.w	ip, #1
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8006a30:	4563      	cmp	r3, ip
 8006a32:	f101 0101 	add.w	r1, r1, #1
 8006a36:	dcf9      	bgt.n	8006a2c <__s2b+0x28>
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f7ff ff63 	bl	8006904 <_Balloc>
 8006a3e:	4601      	mov	r1, r0
 8006a40:	b368      	cbz	r0, 8006a9e <__s2b+0x9a>
 8006a42:	9b08      	ldr	r3, [sp, #32]
 8006a44:	6143      	str	r3, [r0, #20]
 8006a46:	2f09      	cmp	r7, #9
 8006a48:	f04f 0301 	mov.w	r3, #1
 8006a4c:	6103      	str	r3, [r0, #16]
 8006a4e:	dc12      	bgt.n	8006a76 <__s2b+0x72>
 8006a50:	340a      	adds	r4, #10
 8006a52:	2709      	movs	r7, #9
 8006a54:	42be      	cmp	r6, r7
 8006a56:	dd0b      	ble.n	8006a70 <__s2b+0x6c>
 8006a58:	1bf6      	subs	r6, r6, r7
 8006a5a:	4426      	add	r6, r4
 8006a5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a60:	220a      	movs	r2, #10
 8006a62:	3b30      	subs	r3, #48	; 0x30
 8006a64:	4628      	mov	r0, r5
 8006a66:	f7ff ff7d 	bl	8006964 <__multadd>
 8006a6a:	42a6      	cmp	r6, r4
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	d1f5      	bne.n	8006a5c <__s2b+0x58>
 8006a70:	4608      	mov	r0, r1
 8006a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a76:	f104 0909 	add.w	r9, r4, #9
 8006a7a:	46c8      	mov	r8, r9
 8006a7c:	443c      	add	r4, r7
 8006a7e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006a82:	220a      	movs	r2, #10
 8006a84:	3b30      	subs	r3, #48	; 0x30
 8006a86:	4628      	mov	r0, r5
 8006a88:	f7ff ff6c 	bl	8006964 <__multadd>
 8006a8c:	45a0      	cmp	r8, r4
 8006a8e:	4601      	mov	r1, r0
 8006a90:	d1f5      	bne.n	8006a7e <__s2b+0x7a>
 8006a92:	f1a7 0408 	sub.w	r4, r7, #8
 8006a96:	444c      	add	r4, r9
 8006a98:	e7dc      	b.n	8006a54 <__s2b+0x50>
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	e7cc      	b.n	8006a38 <__s2b+0x34>
 8006a9e:	460a      	mov	r2, r1
 8006aa0:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <__s2b+0xac>)
 8006aa2:	4804      	ldr	r0, [pc, #16]	; (8006ab4 <__s2b+0xb0>)
 8006aa4:	21ce      	movs	r1, #206	; 0xce
 8006aa6:	f001 fb57 	bl	8008158 <__assert_func>
 8006aaa:	bf00      	nop
 8006aac:	38e38e39 	.word	0x38e38e39
 8006ab0:	0800be3c 	.word	0x0800be3c
 8006ab4:	0800bed0 	.word	0x0800bed0

08006ab8 <__hi0bits>:
 8006ab8:	0c02      	lsrs	r2, r0, #16
 8006aba:	0412      	lsls	r2, r2, #16
 8006abc:	4603      	mov	r3, r0
 8006abe:	b9ca      	cbnz	r2, 8006af4 <__hi0bits+0x3c>
 8006ac0:	0403      	lsls	r3, r0, #16
 8006ac2:	2010      	movs	r0, #16
 8006ac4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ac8:	bf04      	itt	eq
 8006aca:	021b      	lsleq	r3, r3, #8
 8006acc:	3008      	addeq	r0, #8
 8006ace:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006ad2:	bf04      	itt	eq
 8006ad4:	011b      	lsleq	r3, r3, #4
 8006ad6:	3004      	addeq	r0, #4
 8006ad8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006adc:	bf04      	itt	eq
 8006ade:	009b      	lsleq	r3, r3, #2
 8006ae0:	3002      	addeq	r0, #2
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	db05      	blt.n	8006af2 <__hi0bits+0x3a>
 8006ae6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006aea:	f100 0001 	add.w	r0, r0, #1
 8006aee:	bf08      	it	eq
 8006af0:	2020      	moveq	r0, #32
 8006af2:	4770      	bx	lr
 8006af4:	2000      	movs	r0, #0
 8006af6:	e7e5      	b.n	8006ac4 <__hi0bits+0xc>

08006af8 <__lo0bits>:
 8006af8:	6803      	ldr	r3, [r0, #0]
 8006afa:	4602      	mov	r2, r0
 8006afc:	f013 0007 	ands.w	r0, r3, #7
 8006b00:	d007      	beq.n	8006b12 <__lo0bits+0x1a>
 8006b02:	07d9      	lsls	r1, r3, #31
 8006b04:	d41d      	bmi.n	8006b42 <__lo0bits+0x4a>
 8006b06:	0798      	lsls	r0, r3, #30
 8006b08:	d51f      	bpl.n	8006b4a <__lo0bits+0x52>
 8006b0a:	085b      	lsrs	r3, r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	2001      	movs	r0, #1
 8006b10:	4770      	bx	lr
 8006b12:	b299      	uxth	r1, r3
 8006b14:	b909      	cbnz	r1, 8006b1a <__lo0bits+0x22>
 8006b16:	0c1b      	lsrs	r3, r3, #16
 8006b18:	2010      	movs	r0, #16
 8006b1a:	b2d9      	uxtb	r1, r3
 8006b1c:	b909      	cbnz	r1, 8006b22 <__lo0bits+0x2a>
 8006b1e:	3008      	adds	r0, #8
 8006b20:	0a1b      	lsrs	r3, r3, #8
 8006b22:	0719      	lsls	r1, r3, #28
 8006b24:	bf04      	itt	eq
 8006b26:	091b      	lsreq	r3, r3, #4
 8006b28:	3004      	addeq	r0, #4
 8006b2a:	0799      	lsls	r1, r3, #30
 8006b2c:	bf04      	itt	eq
 8006b2e:	089b      	lsreq	r3, r3, #2
 8006b30:	3002      	addeq	r0, #2
 8006b32:	07d9      	lsls	r1, r3, #31
 8006b34:	d403      	bmi.n	8006b3e <__lo0bits+0x46>
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	f100 0001 	add.w	r0, r0, #1
 8006b3c:	d003      	beq.n	8006b46 <__lo0bits+0x4e>
 8006b3e:	6013      	str	r3, [r2, #0]
 8006b40:	4770      	bx	lr
 8006b42:	2000      	movs	r0, #0
 8006b44:	4770      	bx	lr
 8006b46:	2020      	movs	r0, #32
 8006b48:	4770      	bx	lr
 8006b4a:	089b      	lsrs	r3, r3, #2
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	2002      	movs	r0, #2
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop

08006b54 <__i2b>:
 8006b54:	b538      	push	{r3, r4, r5, lr}
 8006b56:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006b58:	4604      	mov	r4, r0
 8006b5a:	460d      	mov	r5, r1
 8006b5c:	b14b      	cbz	r3, 8006b72 <__i2b+0x1e>
 8006b5e:	6858      	ldr	r0, [r3, #4]
 8006b60:	b1b0      	cbz	r0, 8006b90 <__i2b+0x3c>
 8006b62:	6802      	ldr	r2, [r0, #0]
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b6e:	60c2      	str	r2, [r0, #12]
 8006b70:	bd38      	pop	{r3, r4, r5, pc}
 8006b72:	2221      	movs	r2, #33	; 0x21
 8006b74:	2104      	movs	r1, #4
 8006b76:	f001 fb15 	bl	80081a4 <_calloc_r>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d1ed      	bne.n	8006b5e <__i2b+0xa>
 8006b82:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <__i2b+0x54>)
 8006b84:	4809      	ldr	r0, [pc, #36]	; (8006bac <__i2b+0x58>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b8c:	f001 fae4 	bl	8008158 <__assert_func>
 8006b90:	221c      	movs	r2, #28
 8006b92:	2101      	movs	r1, #1
 8006b94:	4620      	mov	r0, r4
 8006b96:	f001 fb05 	bl	80081a4 <_calloc_r>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	d0f1      	beq.n	8006b82 <__i2b+0x2e>
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e9c0 2301 	strd	r2, r3, [r0, #4]
 8006ba6:	e7de      	b.n	8006b66 <__i2b+0x12>
 8006ba8:	0800be3c 	.word	0x0800be3c
 8006bac:	0800bed0 	.word	0x0800bed0

08006bb0 <__multiply>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	690e      	ldr	r6, [r1, #16]
 8006bb6:	6915      	ldr	r5, [r2, #16]
 8006bb8:	42ae      	cmp	r6, r5
 8006bba:	b085      	sub	sp, #20
 8006bbc:	4688      	mov	r8, r1
 8006bbe:	4614      	mov	r4, r2
 8006bc0:	db05      	blt.n	8006bce <__multiply+0x1e>
 8006bc2:	462a      	mov	r2, r5
 8006bc4:	4623      	mov	r3, r4
 8006bc6:	4635      	mov	r5, r6
 8006bc8:	460c      	mov	r4, r1
 8006bca:	4616      	mov	r6, r2
 8006bcc:	4698      	mov	r8, r3
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	6861      	ldr	r1, [r4, #4]
 8006bd2:	19af      	adds	r7, r5, r6
 8006bd4:	42bb      	cmp	r3, r7
 8006bd6:	bfb8      	it	lt
 8006bd8:	3101      	addlt	r1, #1
 8006bda:	f7ff fe93 	bl	8006904 <_Balloc>
 8006bde:	9001      	str	r0, [sp, #4]
 8006be0:	2800      	cmp	r0, #0
 8006be2:	f000 8087 	beq.w	8006cf4 <__multiply+0x144>
 8006be6:	9b01      	ldr	r3, [sp, #4]
 8006be8:	f103 0914 	add.w	r9, r3, #20
 8006bec:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 8006bf0:	45d1      	cmp	r9, sl
 8006bf2:	d205      	bcs.n	8006c00 <__multiply+0x50>
 8006bf4:	464b      	mov	r3, r9
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f843 2b04 	str.w	r2, [r3], #4
 8006bfc:	459a      	cmp	sl, r3
 8006bfe:	d8fb      	bhi.n	8006bf8 <__multiply+0x48>
 8006c00:	f108 0814 	add.w	r8, r8, #20
 8006c04:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 8006c08:	f104 0314 	add.w	r3, r4, #20
 8006c0c:	45d8      	cmp	r8, fp
 8006c0e:	461a      	mov	r2, r3
 8006c10:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006c14:	d25f      	bcs.n	8006cd6 <__multiply+0x126>
 8006c16:	1b2b      	subs	r3, r5, r4
 8006c18:	3b15      	subs	r3, #21
 8006c1a:	f023 0303 	bic.w	r3, r3, #3
 8006c1e:	3304      	adds	r3, #4
 8006c20:	3415      	adds	r4, #21
 8006c22:	42a5      	cmp	r5, r4
 8006c24:	bf38      	it	cc
 8006c26:	2304      	movcc	r3, #4
 8006c28:	e9cd a702 	strd	sl, r7, [sp, #8]
 8006c2c:	46ac      	mov	ip, r5
 8006c2e:	461f      	mov	r7, r3
 8006c30:	4692      	mov	sl, r2
 8006c32:	e005      	b.n	8006c40 <__multiply+0x90>
 8006c34:	0c00      	lsrs	r0, r0, #16
 8006c36:	d129      	bne.n	8006c8c <__multiply+0xdc>
 8006c38:	45c3      	cmp	fp, r8
 8006c3a:	f109 0904 	add.w	r9, r9, #4
 8006c3e:	d948      	bls.n	8006cd2 <__multiply+0x122>
 8006c40:	f858 0b04 	ldr.w	r0, [r8], #4
 8006c44:	b285      	uxth	r5, r0
 8006c46:	2d00      	cmp	r5, #0
 8006c48:	d0f4      	beq.n	8006c34 <__multiply+0x84>
 8006c4a:	4656      	mov	r6, sl
 8006c4c:	464c      	mov	r4, r9
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f856 0b04 	ldr.w	r0, [r6], #4
 8006c54:	6821      	ldr	r1, [r4, #0]
 8006c56:	b282      	uxth	r2, r0
 8006c58:	fa1f fe81 	uxth.w	lr, r1
 8006c5c:	fb05 ee02 	mla	lr, r5, r2, lr
 8006c60:	0c00      	lsrs	r0, r0, #16
 8006c62:	0c0a      	lsrs	r2, r1, #16
 8006c64:	4473      	add	r3, lr
 8006c66:	fb05 2200 	mla	r2, r5, r0, r2
 8006c6a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c74:	45b4      	cmp	ip, r6
 8006c76:	f844 3b04 	str.w	r3, [r4], #4
 8006c7a:	ea4f 4312 	mov.w	r3, r2, lsr #16
 8006c7e:	d8e7      	bhi.n	8006c50 <__multiply+0xa0>
 8006c80:	f849 3007 	str.w	r3, [r9, r7]
 8006c84:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8006c88:	0c00      	lsrs	r0, r0, #16
 8006c8a:	d0d5      	beq.n	8006c38 <__multiply+0x88>
 8006c8c:	f8d9 3000 	ldr.w	r3, [r9]
 8006c90:	4654      	mov	r4, sl
 8006c92:	4619      	mov	r1, r3
 8006c94:	464d      	mov	r5, r9
 8006c96:	2200      	movs	r2, #0
 8006c98:	8826      	ldrh	r6, [r4, #0]
 8006c9a:	0c09      	lsrs	r1, r1, #16
 8006c9c:	fb00 1106 	mla	r1, r0, r6, r1
 8006ca0:	440a      	add	r2, r1
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ca8:	f845 3b04 	str.w	r3, [r5], #4
 8006cac:	f854 6b04 	ldr.w	r6, [r4], #4
 8006cb0:	6829      	ldr	r1, [r5, #0]
 8006cb2:	0c36      	lsrs	r6, r6, #16
 8006cb4:	b28b      	uxth	r3, r1
 8006cb6:	fb00 3306 	mla	r3, r0, r6, r3
 8006cba:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006cbe:	45a4      	cmp	ip, r4
 8006cc0:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8006cc4:	d8e8      	bhi.n	8006c98 <__multiply+0xe8>
 8006cc6:	45c3      	cmp	fp, r8
 8006cc8:	f849 3007 	str.w	r3, [r9, r7]
 8006ccc:	f109 0904 	add.w	r9, r9, #4
 8006cd0:	d8b6      	bhi.n	8006c40 <__multiply+0x90>
 8006cd2:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 8006cd6:	2f00      	cmp	r7, #0
 8006cd8:	dc02      	bgt.n	8006ce0 <__multiply+0x130>
 8006cda:	e005      	b.n	8006ce8 <__multiply+0x138>
 8006cdc:	3f01      	subs	r7, #1
 8006cde:	d003      	beq.n	8006ce8 <__multiply+0x138>
 8006ce0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f9      	beq.n	8006cdc <__multiply+0x12c>
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	4618      	mov	r0, r3
 8006cec:	611f      	str	r7, [r3, #16]
 8006cee:	b005      	add	sp, #20
 8006cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf4:	4b03      	ldr	r3, [pc, #12]	; (8006d04 <__multiply+0x154>)
 8006cf6:	4804      	ldr	r0, [pc, #16]	; (8006d08 <__multiply+0x158>)
 8006cf8:	9a01      	ldr	r2, [sp, #4]
 8006cfa:	f240 115d 	movw	r1, #349	; 0x15d
 8006cfe:	f001 fa2b 	bl	8008158 <__assert_func>
 8006d02:	bf00      	nop
 8006d04:	0800be3c 	.word	0x0800be3c
 8006d08:	0800bed0 	.word	0x0800bed0

08006d0c <__pow5mult>:
 8006d0c:	f012 0303 	ands.w	r3, r2, #3
 8006d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d14:	4614      	mov	r4, r2
 8006d16:	4606      	mov	r6, r0
 8006d18:	d132      	bne.n	8006d80 <__pow5mult+0x74>
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	10a4      	asrs	r4, r4, #2
 8006d1e:	d020      	beq.n	8006d62 <__pow5mult+0x56>
 8006d20:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 8006d24:	f1b8 0f00 	cmp.w	r8, #0
 8006d28:	d033      	beq.n	8006d92 <__pow5mult+0x86>
 8006d2a:	07e3      	lsls	r3, r4, #31
 8006d2c:	f04f 0700 	mov.w	r7, #0
 8006d30:	d407      	bmi.n	8006d42 <__pow5mult+0x36>
 8006d32:	1064      	asrs	r4, r4, #1
 8006d34:	d015      	beq.n	8006d62 <__pow5mult+0x56>
 8006d36:	f8d8 0000 	ldr.w	r0, [r8]
 8006d3a:	b1a8      	cbz	r0, 8006d68 <__pow5mult+0x5c>
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	07e3      	lsls	r3, r4, #31
 8006d40:	d5f7      	bpl.n	8006d32 <__pow5mult+0x26>
 8006d42:	4642      	mov	r2, r8
 8006d44:	4629      	mov	r1, r5
 8006d46:	4630      	mov	r0, r6
 8006d48:	f7ff ff32 	bl	8006bb0 <__multiply>
 8006d4c:	b1b5      	cbz	r5, 8006d7c <__pow5mult+0x70>
 8006d4e:	6869      	ldr	r1, [r5, #4]
 8006d50:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8006d52:	1064      	asrs	r4, r4, #1
 8006d54:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8006d58:	602a      	str	r2, [r5, #0]
 8006d5a:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 8006d5e:	4605      	mov	r5, r0
 8006d60:	d1e9      	bne.n	8006d36 <__pow5mult+0x2a>
 8006d62:	4628      	mov	r0, r5
 8006d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d68:	4642      	mov	r2, r8
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f7ff ff1f 	bl	8006bb0 <__multiply>
 8006d72:	f8c8 0000 	str.w	r0, [r8]
 8006d76:	6007      	str	r7, [r0, #0]
 8006d78:	4680      	mov	r8, r0
 8006d7a:	e7e0      	b.n	8006d3e <__pow5mult+0x32>
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	e7d8      	b.n	8006d32 <__pow5mult+0x26>
 8006d80:	3b01      	subs	r3, #1
 8006d82:	4a0f      	ldr	r2, [pc, #60]	; (8006dc0 <__pow5mult+0xb4>)
 8006d84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f7ff fdeb 	bl	8006964 <__multadd>
 8006d8e:	4605      	mov	r5, r0
 8006d90:	e7c4      	b.n	8006d1c <__pow5mult+0x10>
 8006d92:	2101      	movs	r1, #1
 8006d94:	4630      	mov	r0, r6
 8006d96:	f7ff fdb5 	bl	8006904 <_Balloc>
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	b140      	cbz	r0, 8006db0 <__pow5mult+0xa4>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f240 2271 	movw	r2, #625	; 0x271
 8006da4:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8006da8:	2300      	movs	r3, #0
 8006daa:	64b0      	str	r0, [r6, #72]	; 0x48
 8006dac:	6003      	str	r3, [r0, #0]
 8006dae:	e7bc      	b.n	8006d2a <__pow5mult+0x1e>
 8006db0:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <__pow5mult+0xb8>)
 8006db2:	4805      	ldr	r0, [pc, #20]	; (8006dc8 <__pow5mult+0xbc>)
 8006db4:	4642      	mov	r2, r8
 8006db6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006dba:	f001 f9cd 	bl	8008158 <__assert_func>
 8006dbe:	bf00      	nop
 8006dc0:	0800c068 	.word	0x0800c068
 8006dc4:	0800be3c 	.word	0x0800be3c
 8006dc8:	0800bed0 	.word	0x0800bed0

08006dcc <__lshift>:
 8006dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	4690      	mov	r8, r2
 8006dd4:	6926      	ldr	r6, [r4, #16]
 8006dd6:	68a3      	ldr	r3, [r4, #8]
 8006dd8:	6849      	ldr	r1, [r1, #4]
 8006dda:	eb06 1662 	add.w	r6, r6, r2, asr #5
 8006dde:	1c75      	adds	r5, r6, #1
 8006de0:	429d      	cmp	r5, r3
 8006de2:	4607      	mov	r7, r0
 8006de4:	ea4f 1962 	mov.w	r9, r2, asr #5
 8006de8:	dd04      	ble.n	8006df4 <__lshift+0x28>
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	429d      	cmp	r5, r3
 8006dee:	f101 0101 	add.w	r1, r1, #1
 8006df2:	dcfa      	bgt.n	8006dea <__lshift+0x1e>
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff fd85 	bl	8006904 <_Balloc>
 8006dfa:	4684      	mov	ip, r0
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d051      	beq.n	8006ea4 <__lshift+0xd8>
 8006e00:	f1b9 0f00 	cmp.w	r9, #0
 8006e04:	f100 0014 	add.w	r0, r0, #20
 8006e08:	dd0e      	ble.n	8006e28 <__lshift+0x5c>
 8006e0a:	f109 0205 	add.w	r2, r9, #5
 8006e0e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8006e12:	4603      	mov	r3, r0
 8006e14:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8006e18:	2100      	movs	r1, #0
 8006e1a:	f843 1b04 	str.w	r1, [r3], #4
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d1fb      	bne.n	8006e1a <__lshift+0x4e>
 8006e22:	f1ae 0314 	sub.w	r3, lr, #20
 8006e26:	4418      	add	r0, r3
 8006e28:	6921      	ldr	r1, [r4, #16]
 8006e2a:	f104 0314 	add.w	r3, r4, #20
 8006e2e:	f018 081f 	ands.w	r8, r8, #31
 8006e32:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006e36:	d02d      	beq.n	8006e94 <__lshift+0xc8>
 8006e38:	f1c8 0920 	rsb	r9, r8, #32
 8006e3c:	4686      	mov	lr, r0
 8006e3e:	f04f 0a00 	mov.w	sl, #0
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	fa02 f208 	lsl.w	r2, r2, r8
 8006e48:	ea42 020a 	orr.w	r2, r2, sl
 8006e4c:	f84e 2b04 	str.w	r2, [lr], #4
 8006e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e54:	4299      	cmp	r1, r3
 8006e56:	fa22 fa09 	lsr.w	sl, r2, r9
 8006e5a:	d8f2      	bhi.n	8006e42 <__lshift+0x76>
 8006e5c:	1b0b      	subs	r3, r1, r4
 8006e5e:	3b15      	subs	r3, #21
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	3304      	adds	r3, #4
 8006e66:	f104 0215 	add.w	r2, r4, #21
 8006e6a:	4291      	cmp	r1, r2
 8006e6c:	bf38      	it	cc
 8006e6e:	2304      	movcc	r3, #4
 8006e70:	f1ba 0f00 	cmp.w	sl, #0
 8006e74:	bf18      	it	ne
 8006e76:	462e      	movne	r6, r5
 8006e78:	f840 a003 	str.w	sl, [r0, r3]
 8006e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7e:	6862      	ldr	r2, [r4, #4]
 8006e80:	f8cc 6010 	str.w	r6, [ip, #16]
 8006e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e88:	6021      	str	r1, [r4, #0]
 8006e8a:	4660      	mov	r0, ip
 8006e8c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e94:	3804      	subs	r0, #4
 8006e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e9a:	f840 2f04 	str.w	r2, [r0, #4]!
 8006e9e:	4299      	cmp	r1, r3
 8006ea0:	d8f9      	bhi.n	8006e96 <__lshift+0xca>
 8006ea2:	e7eb      	b.n	8006e7c <__lshift+0xb0>
 8006ea4:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <__lshift+0xe8>)
 8006ea6:	4804      	ldr	r0, [pc, #16]	; (8006eb8 <__lshift+0xec>)
 8006ea8:	4662      	mov	r2, ip
 8006eaa:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006eae:	f001 f953 	bl	8008158 <__assert_func>
 8006eb2:	bf00      	nop
 8006eb4:	0800be3c 	.word	0x0800be3c
 8006eb8:	0800bed0 	.word	0x0800bed0

08006ebc <__mcmp>:
 8006ebc:	690b      	ldr	r3, [r1, #16]
 8006ebe:	4684      	mov	ip, r0
 8006ec0:	6900      	ldr	r0, [r0, #16]
 8006ec2:	1ac0      	subs	r0, r0, r3
 8006ec4:	d115      	bne.n	8006ef2 <__mcmp+0x36>
 8006ec6:	f10c 0c14 	add.w	ip, ip, #20
 8006eca:	3114      	adds	r1, #20
 8006ecc:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8006ed0:	b410      	push	{r4}
 8006ed2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006ed6:	e001      	b.n	8006edc <__mcmp+0x20>
 8006ed8:	4594      	cmp	ip, r2
 8006eda:	d208      	bcs.n	8006eee <__mcmp+0x32>
 8006edc:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8006ee0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ee4:	428c      	cmp	r4, r1
 8006ee6:	d0f7      	beq.n	8006ed8 <__mcmp+0x1c>
 8006ee8:	d204      	bcs.n	8006ef4 <__mcmp+0x38>
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eee:	bc10      	pop	{r4}
 8006ef0:	4770      	bx	lr
 8006ef2:	4770      	bx	lr
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	bc10      	pop	{r4}
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop

08006efc <__mdiff>:
 8006efc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f00:	690f      	ldr	r7, [r1, #16]
 8006f02:	6913      	ldr	r3, [r2, #16]
 8006f04:	1aff      	subs	r7, r7, r3
 8006f06:	2f00      	cmp	r7, #0
 8006f08:	460e      	mov	r6, r1
 8006f0a:	4690      	mov	r8, r2
 8006f0c:	d17a      	bne.n	8007004 <__mdiff+0x108>
 8006f0e:	f101 0514 	add.w	r5, r1, #20
 8006f12:	3214      	adds	r2, #20
 8006f14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006f18:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006f1c:	e001      	b.n	8006f22 <__mdiff+0x26>
 8006f1e:	429d      	cmp	r5, r3
 8006f20:	d273      	bcs.n	800700a <__mdiff+0x10e>
 8006f22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f26:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8006f2a:	42a1      	cmp	r1, r4
 8006f2c:	d0f7      	beq.n	8006f1e <__mdiff+0x22>
 8006f2e:	d364      	bcc.n	8006ffa <__mdiff+0xfe>
 8006f30:	6871      	ldr	r1, [r6, #4]
 8006f32:	f7ff fce7 	bl	8006904 <_Balloc>
 8006f36:	4681      	mov	r9, r0
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d072      	beq.n	8007022 <__mdiff+0x126>
 8006f3c:	6935      	ldr	r5, [r6, #16]
 8006f3e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006f42:	60c7      	str	r7, [r0, #12]
 8006f44:	f108 0e14 	add.w	lr, r8, #20
 8006f48:	f106 0014 	add.w	r0, r6, #20
 8006f4c:	f109 0a14 	add.w	sl, r9, #20
 8006f50:	f106 0c10 	add.w	ip, r6, #16
 8006f54:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 8006f58:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 8006f5c:	4656      	mov	r6, sl
 8006f5e:	2100      	movs	r1, #0
 8006f60:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006f64:	f85c bf04 	ldr.w	fp, [ip, #4]!
 8006f68:	b2a3      	uxth	r3, r4
 8006f6a:	fa11 f18b 	uxtah	r1, r1, fp
 8006f6e:	1acb      	subs	r3, r1, r3
 8006f70:	0c21      	lsrs	r1, r4, #16
 8006f72:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 8006f76:	eb01 4123 	add.w	r1, r1, r3, asr #16
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006f80:	4572      	cmp	r2, lr
 8006f82:	f846 3b04 	str.w	r3, [r6], #4
 8006f86:	ea4f 4121 	mov.w	r1, r1, asr #16
 8006f8a:	d8e9      	bhi.n	8006f60 <__mdiff+0x64>
 8006f8c:	eba2 0408 	sub.w	r4, r2, r8
 8006f90:	3c15      	subs	r4, #21
 8006f92:	f108 0815 	add.w	r8, r8, #21
 8006f96:	4542      	cmp	r2, r8
 8006f98:	f024 0603 	bic.w	r6, r4, #3
 8006f9c:	f106 0604 	add.w	r6, r6, #4
 8006fa0:	bf38      	it	cc
 8006fa2:	2604      	movcc	r6, #4
 8006fa4:	4430      	add	r0, r6
 8006fa6:	f024 0203 	bic.w	r2, r4, #3
 8006faa:	bf38      	it	cc
 8006fac:	2200      	movcc	r2, #0
 8006fae:	4287      	cmp	r7, r0
 8006fb0:	4452      	add	r2, sl
 8006fb2:	44b2      	add	sl, r6
 8006fb4:	d916      	bls.n	8006fe4 <__mdiff+0xe8>
 8006fb6:	4656      	mov	r6, sl
 8006fb8:	4604      	mov	r4, r0
 8006fba:	f854 3b04 	ldr.w	r3, [r4], #4
 8006fbe:	fa11 f183 	uxtah	r1, r1, r3
 8006fc2:	140a      	asrs	r2, r1, #16
 8006fc4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006fc8:	b289      	uxth	r1, r1
 8006fca:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 8006fce:	42a7      	cmp	r7, r4
 8006fd0:	f846 3b04 	str.w	r3, [r6], #4
 8006fd4:	ea4f 4122 	mov.w	r1, r2, asr #16
 8006fd8:	d8ef      	bhi.n	8006fba <__mdiff+0xbe>
 8006fda:	1e7a      	subs	r2, r7, #1
 8006fdc:	1a10      	subs	r0, r2, r0
 8006fde:	f020 0203 	bic.w	r2, r0, #3
 8006fe2:	4452      	add	r2, sl
 8006fe4:	b923      	cbnz	r3, 8006ff0 <__mdiff+0xf4>
 8006fe6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006fea:	3d01      	subs	r5, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0fa      	beq.n	8006fe6 <__mdiff+0xea>
 8006ff0:	f8c9 5010 	str.w	r5, [r9, #16]
 8006ff4:	4648      	mov	r0, r9
 8006ff6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffa:	4633      	mov	r3, r6
 8006ffc:	2701      	movs	r7, #1
 8006ffe:	4646      	mov	r6, r8
 8007000:	4698      	mov	r8, r3
 8007002:	e795      	b.n	8006f30 <__mdiff+0x34>
 8007004:	dbf9      	blt.n	8006ffa <__mdiff+0xfe>
 8007006:	2700      	movs	r7, #0
 8007008:	e792      	b.n	8006f30 <__mdiff+0x34>
 800700a:	2100      	movs	r1, #0
 800700c:	f7ff fc7a 	bl	8006904 <_Balloc>
 8007010:	4681      	mov	r9, r0
 8007012:	b168      	cbz	r0, 8007030 <__mdiff+0x134>
 8007014:	2201      	movs	r2, #1
 8007016:	2300      	movs	r3, #0
 8007018:	e9c9 2304 	strd	r2, r3, [r9, #16]
 800701c:	4648      	mov	r0, r9
 800701e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007022:	4b07      	ldr	r3, [pc, #28]	; (8007040 <__mdiff+0x144>)
 8007024:	4807      	ldr	r0, [pc, #28]	; (8007044 <__mdiff+0x148>)
 8007026:	464a      	mov	r2, r9
 8007028:	f44f 7110 	mov.w	r1, #576	; 0x240
 800702c:	f001 f894 	bl	8008158 <__assert_func>
 8007030:	4b03      	ldr	r3, [pc, #12]	; (8007040 <__mdiff+0x144>)
 8007032:	4804      	ldr	r0, [pc, #16]	; (8007044 <__mdiff+0x148>)
 8007034:	464a      	mov	r2, r9
 8007036:	f240 2132 	movw	r1, #562	; 0x232
 800703a:	f001 f88d 	bl	8008158 <__assert_func>
 800703e:	bf00      	nop
 8007040:	0800be3c 	.word	0x0800be3c
 8007044:	0800bed0 	.word	0x0800bed0

08007048 <__ulp>:
 8007048:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <__ulp+0x40>)
 800704a:	400b      	ands	r3, r1
 800704c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007050:	2b00      	cmp	r3, #0
 8007052:	dd02      	ble.n	800705a <__ulp+0x12>
 8007054:	2000      	movs	r0, #0
 8007056:	4619      	mov	r1, r3
 8007058:	4770      	bx	lr
 800705a:	425b      	negs	r3, r3
 800705c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007060:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007064:	da05      	bge.n	8007072 <__ulp+0x2a>
 8007066:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800706a:	2000      	movs	r0, #0
 800706c:	fa43 f102 	asr.w	r1, r3, r2
 8007070:	4770      	bx	lr
 8007072:	3a14      	subs	r2, #20
 8007074:	2a1e      	cmp	r2, #30
 8007076:	bfda      	itte	le
 8007078:	f04f 4300 	movle.w	r3, #2147483648	; 0x80000000
 800707c:	fa23 f202 	lsrle.w	r2, r3, r2
 8007080:	2201      	movgt	r2, #1
 8007082:	2100      	movs	r1, #0
 8007084:	4610      	mov	r0, r2
 8007086:	4770      	bx	lr
 8007088:	7ff00000 	.word	0x7ff00000

0800708c <__b2d>:
 800708c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007090:	6906      	ldr	r6, [r0, #16]
 8007092:	f100 0814 	add.w	r8, r0, #20
 8007096:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800709a:	f1a6 0904 	sub.w	r9, r6, #4
 800709e:	f856 7c04 	ldr.w	r7, [r6, #-4]
 80070a2:	4638      	mov	r0, r7
 80070a4:	f7ff fd08 	bl	8006ab8 <__hi0bits>
 80070a8:	f1c0 0320 	rsb	r3, r0, #32
 80070ac:	280a      	cmp	r0, #10
 80070ae:	600b      	str	r3, [r1, #0]
 80070b0:	dd36      	ble.n	8007120 <__b2d+0x94>
 80070b2:	45c8      	cmp	r8, r9
 80070b4:	d21e      	bcs.n	80070f4 <__b2d+0x68>
 80070b6:	f1b0 030b 	subs.w	r3, r0, #11
 80070ba:	f856 2c08 	ldr.w	r2, [r6, #-8]
 80070be:	d026      	beq.n	800710e <__b2d+0x82>
 80070c0:	f1c3 0c20 	rsb	ip, r3, #32
 80070c4:	fa22 f10c 	lsr.w	r1, r2, ip
 80070c8:	409f      	lsls	r7, r3
 80070ca:	430f      	orrs	r7, r1
 80070cc:	f1a6 0108 	sub.w	r1, r6, #8
 80070d0:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
 80070d4:	4588      	cmp	r8, r1
 80070d6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070da:	d23a      	bcs.n	8007152 <__b2d+0xc6>
 80070dc:	fa02 f003 	lsl.w	r0, r2, r3
 80070e0:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80070e4:	fa23 f30c 	lsr.w	r3, r3, ip
 80070e8:	4303      	orrs	r3, r0
 80070ea:	461c      	mov	r4, r3
 80070ec:	4620      	mov	r0, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070f4:	f1b0 030b 	subs.w	r3, r0, #11
 80070f8:	d008      	beq.n	800710c <__b2d+0x80>
 80070fa:	fa07 f303 	lsl.w	r3, r7, r3
 80070fe:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8007102:	2300      	movs	r3, #0
 8007104:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007108:	461c      	mov	r4, r3
 800710a:	e7ef      	b.n	80070ec <__b2d+0x60>
 800710c:	461a      	mov	r2, r3
 800710e:	f047 557f 	orr.w	r5, r7, #1069547520	; 0x3fc00000
 8007112:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007116:	4614      	mov	r4, r2
 8007118:	4620      	mov	r0, r4
 800711a:	4629      	mov	r1, r5
 800711c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007120:	f1c0 030b 	rsb	r3, r0, #11
 8007124:	fa27 f203 	lsr.w	r2, r7, r3
 8007128:	45c8      	cmp	r8, r9
 800712a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800712e:	bf3c      	itt	cc
 8007130:	f856 2c08 	ldrcc.w	r2, [r6, #-8]
 8007134:	40da      	lsrcc	r2, r3
 8007136:	f100 0315 	add.w	r3, r0, #21
 800713a:	bf28      	it	cs
 800713c:	2200      	movcs	r2, #0
 800713e:	fa07 f303 	lsl.w	r3, r7, r3
 8007142:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007146:	ea43 0402 	orr.w	r4, r3, r2
 800714a:	4620      	mov	r0, r4
 800714c:	4629      	mov	r1, r5
 800714e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	461c      	mov	r4, r3
 8007158:	e7c8      	b.n	80070ec <__b2d+0x60>
 800715a:	bf00      	nop

0800715c <__d2b>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	2101      	movs	r1, #1
 8007160:	b082      	sub	sp, #8
 8007162:	4616      	mov	r6, r2
 8007164:	461d      	mov	r5, r3
 8007166:	f7ff fbcd 	bl	8006904 <_Balloc>
 800716a:	4604      	mov	r4, r0
 800716c:	2800      	cmp	r0, #0
 800716e:	d04b      	beq.n	8007208 <__d2b+0xac>
 8007170:	462b      	mov	r3, r5
 8007172:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800717a:	b10d      	cbz	r5, 8007180 <__d2b+0x24>
 800717c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007180:	2e00      	cmp	r6, #0
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	d022      	beq.n	80071cc <__d2b+0x70>
 8007186:	4668      	mov	r0, sp
 8007188:	9600      	str	r6, [sp, #0]
 800718a:	f7ff fcb5 	bl	8006af8 <__lo0bits>
 800718e:	2800      	cmp	r0, #0
 8007190:	d036      	beq.n	8007200 <__d2b+0xa4>
 8007192:	9b01      	ldr	r3, [sp, #4]
 8007194:	9900      	ldr	r1, [sp, #0]
 8007196:	f1c0 0220 	rsb	r2, r0, #32
 800719a:	fa03 f202 	lsl.w	r2, r3, r2
 800719e:	430a      	orrs	r2, r1
 80071a0:	40c3      	lsrs	r3, r0
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	6162      	str	r2, [r4, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bf14      	ite	ne
 80071aa:	2102      	movne	r1, #2
 80071ac:	2101      	moveq	r1, #1
 80071ae:	61a3      	str	r3, [r4, #24]
 80071b0:	6121      	str	r1, [r4, #16]
 80071b2:	b1ad      	cbz	r5, 80071e0 <__d2b+0x84>
 80071b4:	9a06      	ldr	r2, [sp, #24]
 80071b6:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
 80071ba:	4403      	add	r3, r0
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	9b07      	ldr	r3, [sp, #28]
 80071c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071c4:	6018      	str	r0, [r3, #0]
 80071c6:	4620      	mov	r0, r4
 80071c8:	b002      	add	sp, #8
 80071ca:	bd70      	pop	{r4, r5, r6, pc}
 80071cc:	a801      	add	r0, sp, #4
 80071ce:	f7ff fc93 	bl	8006af8 <__lo0bits>
 80071d2:	9b01      	ldr	r3, [sp, #4]
 80071d4:	2101      	movs	r1, #1
 80071d6:	e9c4 1304 	strd	r1, r3, [r4, #16]
 80071da:	3020      	adds	r0, #32
 80071dc:	2d00      	cmp	r5, #0
 80071de:	d1e9      	bne.n	80071b4 <__d2b+0x58>
 80071e0:	eb04 0281 	add.w	r2, r4, r1, lsl #2
 80071e4:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
 80071e8:	6910      	ldr	r0, [r2, #16]
 80071ea:	9a06      	ldr	r2, [sp, #24]
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	f7ff fc63 	bl	8006ab8 <__hi0bits>
 80071f2:	9b07      	ldr	r3, [sp, #28]
 80071f4:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80071f8:	4620      	mov	r0, r4
 80071fa:	6019      	str	r1, [r3, #0]
 80071fc:	b002      	add	sp, #8
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007204:	6162      	str	r2, [r4, #20]
 8007206:	e7ce      	b.n	80071a6 <__d2b+0x4a>
 8007208:	4b03      	ldr	r3, [pc, #12]	; (8007218 <__d2b+0xbc>)
 800720a:	4804      	ldr	r0, [pc, #16]	; (800721c <__d2b+0xc0>)
 800720c:	4622      	mov	r2, r4
 800720e:	f240 310a 	movw	r1, #778	; 0x30a
 8007212:	f000 ffa1 	bl	8008158 <__assert_func>
 8007216:	bf00      	nop
 8007218:	0800be3c 	.word	0x0800be3c
 800721c:	0800bed0 	.word	0x0800bed0

08007220 <__ratio>:
 8007220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007224:	b083      	sub	sp, #12
 8007226:	460f      	mov	r7, r1
 8007228:	4669      	mov	r1, sp
 800722a:	4680      	mov	r8, r0
 800722c:	f7ff ff2e 	bl	800708c <__b2d>
 8007230:	4604      	mov	r4, r0
 8007232:	460d      	mov	r5, r1
 8007234:	4638      	mov	r0, r7
 8007236:	a901      	add	r1, sp, #4
 8007238:	f7ff ff28 	bl	800708c <__b2d>
 800723c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	460f      	mov	r7, r1
 8007244:	1a9a      	subs	r2, r3, r2
 8007246:	e9dd 1300 	ldrd	r1, r3, [sp]
 800724a:	1acb      	subs	r3, r1, r3
 800724c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8007250:	2b00      	cmp	r3, #0
 8007252:	4606      	mov	r6, r0
 8007254:	dd0b      	ble.n	800726e <__ratio+0x4e>
 8007256:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 800725a:	464d      	mov	r5, r9
 800725c:	4632      	mov	r2, r6
 800725e:	463b      	mov	r3, r7
 8007260:	4620      	mov	r0, r4
 8007262:	4629      	mov	r1, r5
 8007264:	f004 f93a 	bl	800b4dc <__aeabi_ddiv>
 8007268:	b003      	add	sp, #12
 800726a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800726e:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 8007272:	eb07 5103 	add.w	r1, r7, r3, lsl #20
 8007276:	460f      	mov	r7, r1
 8007278:	e7f0      	b.n	800725c <__ratio+0x3c>
 800727a:	bf00      	nop

0800727c <_mprec_log10>:
 800727c:	2817      	cmp	r0, #23
 800727e:	b570      	push	{r4, r5, r6, lr}
 8007280:	4606      	mov	r6, r0
 8007282:	dd0a      	ble.n	800729a <_mprec_log10+0x1e>
 8007284:	4908      	ldr	r1, [pc, #32]	; (80072a8 <_mprec_log10+0x2c>)
 8007286:	4d09      	ldr	r5, [pc, #36]	; (80072ac <_mprec_log10+0x30>)
 8007288:	2000      	movs	r0, #0
 800728a:	2400      	movs	r4, #0
 800728c:	4622      	mov	r2, r4
 800728e:	462b      	mov	r3, r5
 8007290:	f003 fffa 	bl	800b288 <__aeabi_dmul>
 8007294:	3e01      	subs	r6, #1
 8007296:	d1f9      	bne.n	800728c <_mprec_log10+0x10>
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <_mprec_log10+0x34>)
 800729c:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
 80072a0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80072a4:	bd70      	pop	{r4, r5, r6, pc}
 80072a6:	bf00      	nop
 80072a8:	3ff00000 	.word	0x3ff00000
 80072ac:	40240000 	.word	0x40240000
 80072b0:	0800bf78 	.word	0x0800bf78

080072b4 <__copybits>:
 80072b4:	3901      	subs	r1, #1
 80072b6:	1149      	asrs	r1, r1, #5
 80072b8:	f101 0c01 	add.w	ip, r1, #1
 80072bc:	6911      	ldr	r1, [r2, #16]
 80072be:	f102 0314 	add.w	r3, r2, #20
 80072c2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80072c6:	428b      	cmp	r3, r1
 80072c8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80072cc:	d216      	bcs.n	80072fc <__copybits+0x48>
 80072ce:	b510      	push	{r4, lr}
 80072d0:	f1a0 0e04 	sub.w	lr, r0, #4
 80072d4:	f853 4b04 	ldr.w	r4, [r3], #4
 80072d8:	f84e 4f04 	str.w	r4, [lr, #4]!
 80072dc:	4299      	cmp	r1, r3
 80072de:	d8f9      	bhi.n	80072d4 <__copybits+0x20>
 80072e0:	1a8b      	subs	r3, r1, r2
 80072e2:	3b15      	subs	r3, #21
 80072e4:	f023 0303 	bic.w	r3, r3, #3
 80072e8:	3304      	adds	r3, #4
 80072ea:	4418      	add	r0, r3
 80072ec:	4584      	cmp	ip, r0
 80072ee:	d904      	bls.n	80072fa <__copybits+0x46>
 80072f0:	2300      	movs	r3, #0
 80072f2:	f840 3b04 	str.w	r3, [r0], #4
 80072f6:	4584      	cmp	ip, r0
 80072f8:	d8fb      	bhi.n	80072f2 <__copybits+0x3e>
 80072fa:	bd10      	pop	{r4, pc}
 80072fc:	4584      	cmp	ip, r0
 80072fe:	d905      	bls.n	800730c <__copybits+0x58>
 8007300:	2300      	movs	r3, #0
 8007302:	f840 3b04 	str.w	r3, [r0], #4
 8007306:	4584      	cmp	ip, r0
 8007308:	d8fb      	bhi.n	8007302 <__copybits+0x4e>
 800730a:	4770      	bx	lr
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop

08007310 <__any_on>:
 8007310:	6903      	ldr	r3, [r0, #16]
 8007312:	114a      	asrs	r2, r1, #5
 8007314:	4293      	cmp	r3, r2
 8007316:	f100 0014 	add.w	r0, r0, #20
 800731a:	da09      	bge.n	8007330 <__any_on+0x20>
 800731c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007320:	e002      	b.n	8007328 <__any_on+0x18>
 8007322:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007326:	b9c2      	cbnz	r2, 800735a <__any_on+0x4a>
 8007328:	4283      	cmp	r3, r0
 800732a:	d8fa      	bhi.n	8007322 <__any_on+0x12>
 800732c:	2000      	movs	r0, #0
 800732e:	4770      	bx	lr
 8007330:	dd10      	ble.n	8007354 <__any_on+0x44>
 8007332:	f011 011f 	ands.w	r1, r1, #31
 8007336:	d00d      	beq.n	8007354 <__any_on+0x44>
 8007338:	b410      	push	{r4}
 800733a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800733e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8007342:	fa24 f201 	lsr.w	r2, r4, r1
 8007346:	fa02 f101 	lsl.w	r1, r2, r1
 800734a:	428c      	cmp	r4, r1
 800734c:	d00b      	beq.n	8007366 <__any_on+0x56>
 800734e:	2001      	movs	r0, #1
 8007350:	bc10      	pop	{r4}
 8007352:	4770      	bx	lr
 8007354:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8007358:	e7e6      	b.n	8007328 <__any_on+0x18>
 800735a:	2001      	movs	r0, #1
 800735c:	4770      	bx	lr
 800735e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007362:	2a00      	cmp	r2, #0
 8007364:	d1f3      	bne.n	800734e <__any_on+0x3e>
 8007366:	4283      	cmp	r3, r0
 8007368:	d8f9      	bhi.n	800735e <__any_on+0x4e>
 800736a:	2000      	movs	r0, #0
 800736c:	bc10      	pop	{r4}
 800736e:	4770      	bx	lr

08007370 <cleanup_glue>:
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	680e      	ldr	r6, [r1, #0]
 8007376:	460c      	mov	r4, r1
 8007378:	4605      	mov	r5, r0
 800737a:	b1be      	cbz	r6, 80073ac <cleanup_glue+0x3c>
 800737c:	6837      	ldr	r7, [r6, #0]
 800737e:	b18f      	cbz	r7, 80073a4 <cleanup_glue+0x34>
 8007380:	f8d7 8000 	ldr.w	r8, [r7]
 8007384:	f1b8 0f00 	cmp.w	r8, #0
 8007388:	d008      	beq.n	800739c <cleanup_glue+0x2c>
 800738a:	f8d8 1000 	ldr.w	r1, [r8]
 800738e:	b109      	cbz	r1, 8007394 <cleanup_glue+0x24>
 8007390:	f7ff ffee 	bl	8007370 <cleanup_glue>
 8007394:	4641      	mov	r1, r8
 8007396:	4628      	mov	r0, r5
 8007398:	f7ff f8a4 	bl	80064e4 <_free_r>
 800739c:	4639      	mov	r1, r7
 800739e:	4628      	mov	r0, r5
 80073a0:	f7ff f8a0 	bl	80064e4 <_free_r>
 80073a4:	4631      	mov	r1, r6
 80073a6:	4628      	mov	r0, r5
 80073a8:	f7ff f89c 	bl	80064e4 <_free_r>
 80073ac:	4621      	mov	r1, r4
 80073ae:	4628      	mov	r0, r5
 80073b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073b4:	f7ff b896 	b.w	80064e4 <_free_r>

080073b8 <_reclaim_reent>:
 80073b8:	4b22      	ldr	r3, [pc, #136]	; (8007444 <_reclaim_reent+0x8c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4283      	cmp	r3, r0
 80073be:	d040      	beq.n	8007442 <_reclaim_reent+0x8a>
 80073c0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80073c2:	b570      	push	{r4, r5, r6, lr}
 80073c4:	4605      	mov	r5, r0
 80073c6:	b181      	cbz	r1, 80073ea <_reclaim_reent+0x32>
 80073c8:	2600      	movs	r6, #0
 80073ca:	598c      	ldr	r4, [r1, r6]
 80073cc:	b13c      	cbz	r4, 80073de <_reclaim_reent+0x26>
 80073ce:	4621      	mov	r1, r4
 80073d0:	6824      	ldr	r4, [r4, #0]
 80073d2:	4628      	mov	r0, r5
 80073d4:	f7ff f886 	bl	80064e4 <_free_r>
 80073d8:	2c00      	cmp	r4, #0
 80073da:	d1f8      	bne.n	80073ce <_reclaim_reent+0x16>
 80073dc:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80073de:	3604      	adds	r6, #4
 80073e0:	2e80      	cmp	r6, #128	; 0x80
 80073e2:	d1f2      	bne.n	80073ca <_reclaim_reent+0x12>
 80073e4:	4628      	mov	r0, r5
 80073e6:	f7ff f87d 	bl	80064e4 <_free_r>
 80073ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80073ec:	b111      	cbz	r1, 80073f4 <_reclaim_reent+0x3c>
 80073ee:	4628      	mov	r0, r5
 80073f0:	f7ff f878 	bl	80064e4 <_free_r>
 80073f4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80073f8:	b154      	cbz	r4, 8007410 <_reclaim_reent+0x58>
 80073fa:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 80073fe:	42b4      	cmp	r4, r6
 8007400:	d006      	beq.n	8007410 <_reclaim_reent+0x58>
 8007402:	4621      	mov	r1, r4
 8007404:	6824      	ldr	r4, [r4, #0]
 8007406:	4628      	mov	r0, r5
 8007408:	f7ff f86c 	bl	80064e4 <_free_r>
 800740c:	42a6      	cmp	r6, r4
 800740e:	d1f8      	bne.n	8007402 <_reclaim_reent+0x4a>
 8007410:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007412:	b111      	cbz	r1, 800741a <_reclaim_reent+0x62>
 8007414:	4628      	mov	r0, r5
 8007416:	f7ff f865 	bl	80064e4 <_free_r>
 800741a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800741c:	b183      	cbz	r3, 8007440 <_reclaim_reent+0x88>
 800741e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8007420:	4628      	mov	r0, r5
 8007422:	4798      	blx	r3
 8007424:	f8d5 42e0 	ldr.w	r4, [r5, #736]	; 0x2e0
 8007428:	b154      	cbz	r4, 8007440 <_reclaim_reent+0x88>
 800742a:	6821      	ldr	r1, [r4, #0]
 800742c:	b111      	cbz	r1, 8007434 <_reclaim_reent+0x7c>
 800742e:	4628      	mov	r0, r5
 8007430:	f7ff ff9e 	bl	8007370 <cleanup_glue>
 8007434:	4621      	mov	r1, r4
 8007436:	4628      	mov	r0, r5
 8007438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800743c:	f7ff b852 	b.w	80064e4 <_free_r>
 8007440:	bd70      	pop	{r4, r5, r6, pc}
 8007442:	4770      	bx	lr
 8007444:	200000d8 	.word	0x200000d8

08007448 <frexp>:
 8007448:	f8df c060 	ldr.w	ip, [pc, #96]	; 80074ac <frexp+0x64>
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007452:	2700      	movs	r7, #0
 8007454:	4563      	cmp	r3, ip
 8007456:	4604      	mov	r4, r0
 8007458:	460d      	mov	r5, r1
 800745a:	4616      	mov	r6, r2
 800745c:	6017      	str	r7, [r2, #0]
 800745e:	dc22      	bgt.n	80074a6 <frexp+0x5e>
 8007460:	4684      	mov	ip, r0
 8007462:	ea53 0c0c 	orrs.w	ip, r3, ip
 8007466:	d01e      	beq.n	80074a6 <frexp+0x5e>
 8007468:	f8df c044 	ldr.w	ip, [pc, #68]	; 80074b0 <frexp+0x68>
 800746c:	ea01 0c0c 	and.w	ip, r1, ip
 8007470:	460a      	mov	r2, r1
 8007472:	f1bc 0f00 	cmp.w	ip, #0
 8007476:	d109      	bne.n	800748c <frexp+0x44>
 8007478:	4b0e      	ldr	r3, [pc, #56]	; (80074b4 <frexp+0x6c>)
 800747a:	2200      	movs	r2, #0
 800747c:	f003 ff04 	bl	800b288 <__aeabi_dmul>
 8007480:	f06f 0735 	mvn.w	r7, #53	; 0x35
 8007484:	4604      	mov	r4, r0
 8007486:	460a      	mov	r2, r1
 8007488:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800748c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007490:	151b      	asrs	r3, r3, #20
 8007492:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8007496:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800749a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800749e:	443b      	add	r3, r7
 80074a0:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80074a4:	6033      	str	r3, [r6, #0]
 80074a6:	4620      	mov	r0, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ac:	7fefffff 	.word	0x7fefffff
 80074b0:	7ff00000 	.word	0x7ff00000
 80074b4:	43500000 	.word	0x43500000

080074b8 <strncpy>:
 80074b8:	b530      	push	{r4, r5, lr}
 80074ba:	ea40 0401 	orr.w	r4, r0, r1
 80074be:	07a3      	lsls	r3, r4, #30
 80074c0:	d101      	bne.n	80074c6 <strncpy+0xe>
 80074c2:	2a03      	cmp	r2, #3
 80074c4:	d80f      	bhi.n	80074e6 <strncpy+0x2e>
 80074c6:	4684      	mov	ip, r0
 80074c8:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80074cc:	e007      	b.n	80074de <strncpy+0x26>
 80074ce:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 80074d2:	f803 1b01 	strb.w	r1, [r3], #1
 80074d6:	1e54      	subs	r4, r2, #1
 80074d8:	b1c1      	cbz	r1, 800750c <strncpy+0x54>
 80074da:	469c      	mov	ip, r3
 80074dc:	4622      	mov	r2, r4
 80074de:	4663      	mov	r3, ip
 80074e0:	2a00      	cmp	r2, #0
 80074e2:	d1f4      	bne.n	80074ce <strncpy+0x16>
 80074e4:	bd30      	pop	{r4, r5, pc}
 80074e6:	460b      	mov	r3, r1
 80074e8:	4684      	mov	ip, r0
 80074ea:	4619      	mov	r1, r3
 80074ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80074f0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 80074f4:	ea24 0405 	bic.w	r4, r4, r5
 80074f8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80074fc:	d1e4      	bne.n	80074c8 <strncpy+0x10>
 80074fe:	3a04      	subs	r2, #4
 8007500:	2a03      	cmp	r2, #3
 8007502:	f84c 5b04 	str.w	r5, [ip], #4
 8007506:	4619      	mov	r1, r3
 8007508:	d8ef      	bhi.n	80074ea <strncpy+0x32>
 800750a:	e7dd      	b.n	80074c8 <strncpy+0x10>
 800750c:	4462      	add	r2, ip
 800750e:	2c00      	cmp	r4, #0
 8007510:	d0e8      	beq.n	80074e4 <strncpy+0x2c>
 8007512:	f803 1b01 	strb.w	r1, [r3], #1
 8007516:	4293      	cmp	r3, r2
 8007518:	d1fb      	bne.n	8007512 <strncpy+0x5a>
 800751a:	bd30      	pop	{r4, r5, pc}

0800751c <__ssprint_r>:
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	6893      	ldr	r3, [r2, #8]
 8007522:	b083      	sub	sp, #12
 8007524:	4691      	mov	r9, r2
 8007526:	2b00      	cmp	r3, #0
 8007528:	d06d      	beq.n	8007606 <__ssprint_r+0xea>
 800752a:	6817      	ldr	r7, [r2, #0]
 800752c:	688d      	ldr	r5, [r1, #8]
 800752e:	4680      	mov	r8, r0
 8007530:	460c      	mov	r4, r1
 8007532:	6808      	ldr	r0, [r1, #0]
 8007534:	3708      	adds	r7, #8
 8007536:	e043      	b.n	80075c0 <__ssprint_r+0xa4>
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800753e:	d02e      	beq.n	800759e <__ssprint_r+0x82>
 8007540:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 8007544:	eba0 0a01 	sub.w	sl, r0, r1
 8007548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800754c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007550:	eb0a 0006 	add.w	r0, sl, r6
 8007554:	106d      	asrs	r5, r5, #1
 8007556:	3001      	adds	r0, #1
 8007558:	42a8      	cmp	r0, r5
 800755a:	462a      	mov	r2, r5
 800755c:	bf84      	itt	hi
 800755e:	4605      	movhi	r5, r0
 8007560:	462a      	movhi	r2, r5
 8007562:	055b      	lsls	r3, r3, #21
 8007564:	d536      	bpl.n	80075d4 <__ssprint_r+0xb8>
 8007566:	4611      	mov	r1, r2
 8007568:	4640      	mov	r0, r8
 800756a:	f7fb fe59 	bl	8003220 <_malloc_r>
 800756e:	2800      	cmp	r0, #0
 8007570:	d03a      	beq.n	80075e8 <__ssprint_r+0xcc>
 8007572:	4652      	mov	r2, sl
 8007574:	6921      	ldr	r1, [r4, #16]
 8007576:	9001      	str	r0, [sp, #4]
 8007578:	f7ff f92a 	bl	80067d0 <memcpy>
 800757c:	89a2      	ldrh	r2, [r4, #12]
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007584:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007588:	81a2      	strh	r2, [r4, #12]
 800758a:	eba5 020a 	sub.w	r2, r5, sl
 800758e:	eb03 000a 	add.w	r0, r3, sl
 8007592:	6165      	str	r5, [r4, #20]
 8007594:	60a2      	str	r2, [r4, #8]
 8007596:	6123      	str	r3, [r4, #16]
 8007598:	6020      	str	r0, [r4, #0]
 800759a:	4635      	mov	r5, r6
 800759c:	46b2      	mov	sl, r6
 800759e:	4659      	mov	r1, fp
 80075a0:	4652      	mov	r2, sl
 80075a2:	f000 fec3 	bl	800832c <memmove>
 80075a6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80075aa:	68a1      	ldr	r1, [r4, #8]
 80075ac:	6820      	ldr	r0, [r4, #0]
 80075ae:	1b4d      	subs	r5, r1, r5
 80075b0:	4450      	add	r0, sl
 80075b2:	1b9e      	subs	r6, r3, r6
 80075b4:	60a5      	str	r5, [r4, #8]
 80075b6:	6020      	str	r0, [r4, #0]
 80075b8:	f8c9 6008 	str.w	r6, [r9, #8]
 80075bc:	b31e      	cbz	r6, 8007606 <__ssprint_r+0xea>
 80075be:	3708      	adds	r7, #8
 80075c0:	e957 b602 	ldrd	fp, r6, [r7, #-8]
 80075c4:	2e00      	cmp	r6, #0
 80075c6:	d0fa      	beq.n	80075be <__ssprint_r+0xa2>
 80075c8:	42b5      	cmp	r5, r6
 80075ca:	46aa      	mov	sl, r5
 80075cc:	d9b4      	bls.n	8007538 <__ssprint_r+0x1c>
 80075ce:	4635      	mov	r5, r6
 80075d0:	46b2      	mov	sl, r6
 80075d2:	e7e4      	b.n	800759e <__ssprint_r+0x82>
 80075d4:	4640      	mov	r0, r8
 80075d6:	f000 ff77 	bl	80084c8 <_realloc_r>
 80075da:	4603      	mov	r3, r0
 80075dc:	2800      	cmp	r0, #0
 80075de:	d1d4      	bne.n	800758a <__ssprint_r+0x6e>
 80075e0:	6921      	ldr	r1, [r4, #16]
 80075e2:	4640      	mov	r0, r8
 80075e4:	f7fe ff7e 	bl	80064e4 <_free_r>
 80075e8:	230c      	movs	r3, #12
 80075ea:	f8c8 3000 	str.w	r3, [r8]
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	e9c9 2201 	strd	r2, r2, [r9, #4]
 8007600:	b003      	add	sp, #12
 8007602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007606:	2000      	movs	r0, #0
 8007608:	f8c9 0004 	str.w	r0, [r9, #4]
 800760c:	b003      	add	sp, #12
 800760e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007612:	bf00      	nop

08007614 <_svfiprintf_r>:
 8007614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007618:	b0bd      	sub	sp, #244	; 0xf4
 800761a:	e9cd 1004 	strd	r1, r0, [sp, #16]
 800761e:	9303      	str	r3, [sp, #12]
 8007620:	898b      	ldrh	r3, [r1, #12]
 8007622:	061c      	lsls	r4, r3, #24
 8007624:	4691      	mov	r9, r2
 8007626:	d503      	bpl.n	8007630 <_svfiprintf_r+0x1c>
 8007628:	690b      	ldr	r3, [r1, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 84d0 	beq.w	8007fd0 <_svfiprintf_r+0x9bc>
 8007630:	ab13      	add	r3, sp, #76	; 0x4c
 8007632:	9310      	str	r3, [sp, #64]	; 0x40
 8007634:	2300      	movs	r3, #0
 8007636:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 800763a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800763e:	9308      	str	r3, [sp, #32]
 8007640:	af13      	add	r7, sp, #76	; 0x4c
 8007642:	9309      	str	r3, [sp, #36]	; 0x24
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	f899 3000 	ldrb.w	r3, [r9]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 8136 	beq.w	80078bc <_svfiprintf_r+0x2a8>
 8007650:	464c      	mov	r4, r9
 8007652:	e004      	b.n	800765e <_svfiprintf_r+0x4a>
 8007654:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 8115 	beq.w	8007888 <_svfiprintf_r+0x274>
 800765e:	2b25      	cmp	r3, #37	; 0x25
 8007660:	d1f8      	bne.n	8007654 <_svfiprintf_r+0x40>
 8007662:	ebb4 0509 	subs.w	r5, r4, r9
 8007666:	f040 8112 	bne.w	800788e <_svfiprintf_r+0x27a>
 800766a:	7823      	ldrb	r3, [r4, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 8125 	beq.w	80078bc <_svfiprintf_r+0x2a8>
 8007672:	f04f 0300 	mov.w	r3, #0
 8007676:	f04f 0b00 	mov.w	fp, #0
 800767a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800767e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8007682:	f104 0901 	add.w	r9, r4, #1
 8007686:	7863      	ldrb	r3, [r4, #1]
 8007688:	f8cd b008 	str.w	fp, [sp, #8]
 800768c:	9200      	str	r2, [sp, #0]
 800768e:	242b      	movs	r4, #43	; 0x2b
 8007690:	f109 0901 	add.w	r9, r9, #1
 8007694:	f1a3 0220 	sub.w	r2, r3, #32
 8007698:	2a5a      	cmp	r2, #90	; 0x5a
 800769a:	f200 8120 	bhi.w	80078de <_svfiprintf_r+0x2ca>
 800769e:	e8df f012 	tbh	[pc, r2, lsl #1]
 80076a2:	0257      	.short	0x0257
 80076a4:	011e011e 	.word	0x011e011e
 80076a8:	011e0252 	.word	0x011e0252
 80076ac:	011e011e 	.word	0x011e011e
 80076b0:	011e006a 	.word	0x011e006a
 80076b4:	0247011e 	.word	0x0247011e
 80076b8:	011e0242 	.word	0x011e0242
 80076bc:	022800ee 	.word	0x022800ee
 80076c0:	0223011e 	.word	0x0223011e
 80076c4:	005b005b 	.word	0x005b005b
 80076c8:	005b005b 	.word	0x005b005b
 80076cc:	005b005b 	.word	0x005b005b
 80076d0:	005b005b 	.word	0x005b005b
 80076d4:	011e005b 	.word	0x011e005b
 80076d8:	011e011e 	.word	0x011e011e
 80076dc:	011e011e 	.word	0x011e011e
 80076e0:	011e011e 	.word	0x011e011e
 80076e4:	011e011e 	.word	0x011e011e
 80076e8:	008501c2 	.word	0x008501c2
 80076ec:	011e011e 	.word	0x011e011e
 80076f0:	011e011e 	.word	0x011e011e
 80076f4:	011e011e 	.word	0x011e011e
 80076f8:	011e011e 	.word	0x011e011e
 80076fc:	011e011e 	.word	0x011e011e
 8007700:	011e00af 	.word	0x011e00af
 8007704:	011e011e 	.word	0x011e011e
 8007708:	011e01a7 	.word	0x011e01a7
 800770c:	011e0212 	.word	0x011e0212
 8007710:	0463011e 	.word	0x0463011e
 8007714:	011e011e 	.word	0x011e011e
 8007718:	011e011e 	.word	0x011e011e
 800771c:	011e011e 	.word	0x011e011e
 8007720:	011e011e 	.word	0x011e011e
 8007724:	011e011e 	.word	0x011e011e
 8007728:	008701c2 	.word	0x008701c2
 800772c:	011e011e 	.word	0x011e011e
 8007730:	0286011e 	.word	0x0286011e
 8007734:	00800087 	.word	0x00800087
 8007738:	0279011e 	.word	0x0279011e
 800773c:	0262011e 	.word	0x0262011e
 8007740:	020100b1 	.word	0x020100b1
 8007744:	011e0080 	.word	0x011e0080
 8007748:	007d01a7 	.word	0x007d01a7
 800774c:	011e0461 	.word	0x011e0461
 8007750:	0482011e 	.word	0x0482011e
 8007754:	007d011e 	.word	0x007d011e
 8007758:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800775c:	2100      	movs	r1, #0
 800775e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007762:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007766:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800776a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800776e:	2a09      	cmp	r2, #9
 8007770:	d9f5      	bls.n	800775e <_svfiprintf_r+0x14a>
 8007772:	9102      	str	r1, [sp, #8]
 8007774:	e78e      	b.n	8007694 <_svfiprintf_r+0x80>
 8007776:	9e05      	ldr	r6, [sp, #20]
 8007778:	4630      	mov	r0, r6
 800777a:	f7fe ffbb 	bl	80066f4 <_localeconv_r>
 800777e:	6843      	ldr	r3, [r0, #4]
 8007780:	930a      	str	r3, [sp, #40]	; 0x28
 8007782:	4618      	mov	r0, r3
 8007784:	f7fc f8dc 	bl	8003940 <strlen>
 8007788:	900b      	str	r0, [sp, #44]	; 0x2c
 800778a:	4605      	mov	r5, r0
 800778c:	4630      	mov	r0, r6
 800778e:	f7fe ffb1 	bl	80066f4 <_localeconv_r>
 8007792:	6883      	ldr	r3, [r0, #8]
 8007794:	9309      	str	r3, [sp, #36]	; 0x24
 8007796:	2d00      	cmp	r5, #0
 8007798:	f040 83d0 	bne.w	8007f3c <_svfiprintf_r+0x928>
 800779c:	f899 3000 	ldrb.w	r3, [r9]
 80077a0:	e776      	b.n	8007690 <_svfiprintf_r+0x7c>
 80077a2:	f899 3000 	ldrb.w	r3, [r9]
 80077a6:	f04b 0b20 	orr.w	fp, fp, #32
 80077aa:	e771      	b.n	8007690 <_svfiprintf_r+0x7c>
 80077ac:	f04b 0b10 	orr.w	fp, fp, #16
 80077b0:	f01b 0f20 	tst.w	fp, #32
 80077b4:	9d03      	ldr	r5, [sp, #12]
 80077b6:	f000 810d 	beq.w	80079d4 <_svfiprintf_r+0x3c0>
 80077ba:	3507      	adds	r5, #7
 80077bc:	f025 0507 	bic.w	r5, r5, #7
 80077c0:	462a      	mov	r2, r5
 80077c2:	686b      	ldr	r3, [r5, #4]
 80077c4:	f852 5b08 	ldr.w	r5, [r2], #8
 80077c8:	9203      	str	r2, [sp, #12]
 80077ca:	461e      	mov	r6, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f2c0 8143 	blt.w	8007a58 <_svfiprintf_r+0x444>
 80077d2:	9b00      	ldr	r3, [sp, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	f000 8434 	beq.w	8008042 <_svfiprintf_r+0xa2e>
 80077da:	ea55 0306 	orrs.w	r3, r5, r6
 80077de:	f02b 0880 	bic.w	r8, fp, #128	; 0x80
 80077e2:	f000 8338 	beq.w	8007e56 <_svfiprintf_r+0x842>
 80077e6:	2d0a      	cmp	r5, #10
 80077e8:	f176 0300 	sbcs.w	r3, r6, #0
 80077ec:	f080 8358 	bcs.w	8007ea0 <_svfiprintf_r+0x88c>
 80077f0:	3530      	adds	r5, #48	; 0x30
 80077f2:	f88d 50ef 	strb.w	r5, [sp, #239]	; 0xef
 80077f6:	46c3      	mov	fp, r8
 80077f8:	2601      	movs	r6, #1
 80077fa:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
 80077fe:	e02e      	b.n	800785e <_svfiprintf_r+0x24a>
 8007800:	f04b 0b10 	orr.w	fp, fp, #16
 8007804:	f01b 0620 	ands.w	r6, fp, #32
 8007808:	f000 80d5 	beq.w	80079b6 <_svfiprintf_r+0x3a2>
 800780c:	9d03      	ldr	r5, [sp, #12]
 800780e:	3507      	adds	r5, #7
 8007810:	f025 0507 	bic.w	r5, r5, #7
 8007814:	462b      	mov	r3, r5
 8007816:	686e      	ldr	r6, [r5, #4]
 8007818:	f853 5b08 	ldr.w	r5, [r3], #8
 800781c:	9303      	str	r3, [sp, #12]
 800781e:	f42b 6880 	bic.w	r8, fp, #1024	; 0x400
 8007822:	2300      	movs	r3, #0
 8007824:	f04f 0200 	mov.w	r2, #0
 8007828:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 800782c:	9a00      	ldr	r2, [sp, #0]
 800782e:	1c51      	adds	r1, r2, #1
 8007830:	f000 8120 	beq.w	8007a74 <_svfiprintf_r+0x460>
 8007834:	ea55 0106 	orrs.w	r1, r5, r6
 8007838:	f028 0b80 	bic.w	fp, r8, #128	; 0x80
 800783c:	f040 8277 	bne.w	8007d2e <_svfiprintf_r+0x71a>
 8007840:	2a00      	cmp	r2, #0
 8007842:	f040 8401 	bne.w	8008048 <_svfiprintf_r+0xa34>
 8007846:	2b00      	cmp	r3, #0
 8007848:	f040 830a 	bne.w	8007e60 <_svfiprintf_r+0x84c>
 800784c:	f018 0601 	ands.w	r6, r8, #1
 8007850:	f000 8362 	beq.w	8007f18 <_svfiprintf_r+0x904>
 8007854:	2330      	movs	r3, #48	; 0x30
 8007856:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 800785a:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
 800785e:	f8dd 8000 	ldr.w	r8, [sp]
 8007862:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8007866:	45b0      	cmp	r8, r6
 8007868:	bfb8      	it	lt
 800786a:	46b0      	movlt	r8, r6
 800786c:	2b00      	cmp	r3, #0
 800786e:	d044      	beq.n	80078fa <_svfiprintf_r+0x2e6>
 8007870:	f108 0801 	add.w	r8, r8, #1
 8007874:	e041      	b.n	80078fa <_svfiprintf_r+0x2e6>
 8007876:	9a02      	ldr	r2, [sp, #8]
 8007878:	4252      	negs	r2, r2
 800787a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800787e:	f899 3000 	ldrb.w	r3, [r9]
 8007882:	f04b 0b04 	orr.w	fp, fp, #4
 8007886:	e703      	b.n	8007690 <_svfiprintf_r+0x7c>
 8007888:	ebb4 0509 	subs.w	r5, r4, r9
 800788c:	d016      	beq.n	80078bc <_svfiprintf_r+0x2a8>
 800788e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007890:	442b      	add	r3, r5
 8007892:	9312      	str	r3, [sp, #72]	; 0x48
 8007894:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007896:	3301      	adds	r3, #1
 8007898:	2b07      	cmp	r3, #7
 800789a:	e9c7 9500 	strd	r9, r5, [r7]
 800789e:	9311      	str	r3, [sp, #68]	; 0x44
 80078a0:	dc04      	bgt.n	80078ac <_svfiprintf_r+0x298>
 80078a2:	3708      	adds	r7, #8
 80078a4:	9b01      	ldr	r3, [sp, #4]
 80078a6:	442b      	add	r3, r5
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	e6de      	b.n	800766a <_svfiprintf_r+0x56>
 80078ac:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 80078b0:	aa10      	add	r2, sp, #64	; 0x40
 80078b2:	f7ff fe33 	bl	800751c <__ssprint_r>
 80078b6:	b928      	cbnz	r0, 80078c4 <_svfiprintf_r+0x2b0>
 80078b8:	af13      	add	r7, sp, #76	; 0x4c
 80078ba:	e7f3      	b.n	80078a4 <_svfiprintf_r+0x290>
 80078bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f040 8425 	bne.w	800810e <_svfiprintf_r+0xafa>
 80078c4:	9b04      	ldr	r3, [sp, #16]
 80078c6:	899b      	ldrh	r3, [r3, #12]
 80078c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80078cc:	9b01      	ldr	r3, [sp, #4]
 80078ce:	bf18      	it	ne
 80078d0:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	9801      	ldr	r0, [sp, #4]
 80078d8:	b03d      	add	sp, #244	; 0xf4
 80078da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0ec      	beq.n	80078bc <_svfiprintf_r+0x2a8>
 80078e2:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 80078e6:	f04f 0801 	mov.w	r8, #1
 80078ea:	f04f 0300 	mov.w	r3, #0
 80078ee:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 80078f2:	4646      	mov	r6, r8
 80078f4:	ac23      	add	r4, sp, #140	; 0x8c
 80078f6:	2300      	movs	r3, #0
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	f01b 0302 	ands.w	r3, fp, #2
 80078fe:	9306      	str	r3, [sp, #24]
 8007900:	bf18      	it	ne
 8007902:	f108 0802 	addne.w	r8, r8, #2
 8007906:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800790a:	9307      	str	r3, [sp, #28]
 800790c:	d105      	bne.n	800791a <_svfiprintf_r+0x306>
 800790e:	9b02      	ldr	r3, [sp, #8]
 8007910:	eba3 0508 	sub.w	r5, r3, r8
 8007914:	2d00      	cmp	r5, #0
 8007916:	f300 820c 	bgt.w	8007d32 <_svfiprintf_r+0x71e>
 800791a:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800791e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
 8007922:	b168      	cbz	r0, 8007940 <_svfiprintf_r+0x32c>
 8007924:	3201      	adds	r2, #1
 8007926:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
 800792a:	3101      	adds	r1, #1
 800792c:	6038      	str	r0, [r7, #0]
 800792e:	2a07      	cmp	r2, #7
 8007930:	f04f 0001 	mov.w	r0, #1
 8007934:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	f300 8249 	bgt.w	8007dd0 <_svfiprintf_r+0x7bc>
 800793e:	3708      	adds	r7, #8
 8007940:	9b06      	ldr	r3, [sp, #24]
 8007942:	b163      	cbz	r3, 800795e <_svfiprintf_r+0x34a>
 8007944:	3201      	adds	r2, #1
 8007946:	ab0f      	add	r3, sp, #60	; 0x3c
 8007948:	3102      	adds	r1, #2
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	2a07      	cmp	r2, #7
 800794e:	f04f 0302 	mov.w	r3, #2
 8007952:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8007956:	607b      	str	r3, [r7, #4]
 8007958:	f300 8227 	bgt.w	8007daa <_svfiprintf_r+0x796>
 800795c:	3708      	adds	r7, #8
 800795e:	9b07      	ldr	r3, [sp, #28]
 8007960:	2b80      	cmp	r3, #128	; 0x80
 8007962:	f000 814e 	beq.w	8007c02 <_svfiprintf_r+0x5ee>
 8007966:	9b00      	ldr	r3, [sp, #0]
 8007968:	eba3 0a06 	sub.w	sl, r3, r6
 800796c:	f1ba 0f00 	cmp.w	sl, #0
 8007970:	f300 818e 	bgt.w	8007c90 <_svfiprintf_r+0x67c>
 8007974:	3201      	adds	r2, #1
 8007976:	4431      	add	r1, r6
 8007978:	2a07      	cmp	r2, #7
 800797a:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 800797e:	603c      	str	r4, [r7, #0]
 8007980:	607e      	str	r6, [r7, #4]
 8007982:	f300 81c0 	bgt.w	8007d06 <_svfiprintf_r+0x6f2>
 8007986:	3708      	adds	r7, #8
 8007988:	f01b 0f04 	tst.w	fp, #4
 800798c:	d005      	beq.n	800799a <_svfiprintf_r+0x386>
 800798e:	9b02      	ldr	r3, [sp, #8]
 8007990:	eba3 0408 	sub.w	r4, r3, r8
 8007994:	2c00      	cmp	r4, #0
 8007996:	f300 8227 	bgt.w	8007de8 <_svfiprintf_r+0x7d4>
 800799a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800799e:	4542      	cmp	r2, r8
 80079a0:	bfac      	ite	ge
 80079a2:	189b      	addge	r3, r3, r2
 80079a4:	4443      	addlt	r3, r8
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	2900      	cmp	r1, #0
 80079aa:	f040 81b7 	bne.w	8007d1c <_svfiprintf_r+0x708>
 80079ae:	2300      	movs	r3, #0
 80079b0:	9311      	str	r3, [sp, #68]	; 0x44
 80079b2:	af13      	add	r7, sp, #76	; 0x4c
 80079b4:	e647      	b.n	8007646 <_svfiprintf_r+0x32>
 80079b6:	f01b 0310 	ands.w	r3, fp, #16
 80079ba:	f040 82ce 	bne.w	8007f5a <_svfiprintf_r+0x946>
 80079be:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
 80079c2:	f000 8363 	beq.w	800808c <_svfiprintf_r+0xa78>
 80079c6:	9a03      	ldr	r2, [sp, #12]
 80079c8:	f852 5b04 	ldr.w	r5, [r2], #4
 80079cc:	9203      	str	r2, [sp, #12]
 80079ce:	461e      	mov	r6, r3
 80079d0:	b2ad      	uxth	r5, r5
 80079d2:	e724      	b.n	800781e <_svfiprintf_r+0x20a>
 80079d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d8:	9503      	str	r5, [sp, #12]
 80079da:	f01b 0f10 	tst.w	fp, #16
 80079de:	d135      	bne.n	8007a4c <_svfiprintf_r+0x438>
 80079e0:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80079e4:	d02e      	beq.n	8007a44 <_svfiprintf_r+0x430>
 80079e6:	f343 36c0 	sbfx	r6, r3, #15, #1
 80079ea:	b21d      	sxth	r5, r3
 80079ec:	4633      	mov	r3, r6
 80079ee:	e6ed      	b.n	80077cc <_svfiprintf_r+0x1b8>
 80079f0:	9d03      	ldr	r5, [sp, #12]
 80079f2:	f855 4b04 	ldr.w	r4, [r5], #4
 80079f6:	f04f 0300 	mov.w	r3, #0
 80079fa:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 80079fe:	2c00      	cmp	r4, #0
 8007a00:	f000 833c 	beq.w	800807c <_svfiprintf_r+0xa68>
 8007a04:	9b00      	ldr	r3, [sp, #0]
 8007a06:	1c58      	adds	r0, r3, #1
 8007a08:	f000 82da 	beq.w	8007fc0 <_svfiprintf_r+0x9ac>
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4620      	mov	r0, r4
 8007a12:	f7fe fe8d 	bl	8006730 <memchr>
 8007a16:	2800      	cmp	r0, #0
 8007a18:	f000 8380 	beq.w	800811c <_svfiprintf_r+0xb08>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	1b06      	subs	r6, r0, r4
 8007a20:	9503      	str	r5, [sp, #12]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	e71b      	b.n	800785e <_svfiprintf_r+0x24a>
 8007a26:	9d03      	ldr	r5, [sp, #12]
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8007a30:	f04f 0801 	mov.w	r8, #1
 8007a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a38:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8007a3c:	9503      	str	r5, [sp, #12]
 8007a3e:	4646      	mov	r6, r8
 8007a40:	ac23      	add	r4, sp, #140	; 0x8c
 8007a42:	e758      	b.n	80078f6 <_svfiprintf_r+0x2e2>
 8007a44:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8007a48:	f040 8353 	bne.w	80080f2 <_svfiprintf_r+0xade>
 8007a4c:	17de      	asrs	r6, r3, #31
 8007a4e:	461d      	mov	r5, r3
 8007a50:	4633      	mov	r3, r6
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f6bf aebd 	bge.w	80077d2 <_svfiprintf_r+0x1be>
 8007a58:	9a00      	ldr	r2, [sp, #0]
 8007a5a:	426d      	negs	r5, r5
 8007a5c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8007a60:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8007a64:	1c51      	adds	r1, r2, #1
 8007a66:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8007a6a:	46d8      	mov	r8, fp
 8007a6c:	f04f 0301 	mov.w	r3, #1
 8007a70:	f47f aee0 	bne.w	8007834 <_svfiprintf_r+0x220>
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	f43f aeb6 	beq.w	80077e6 <_svfiprintf_r+0x1d2>
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	ac3c      	add	r4, sp, #240	; 0xf0
 8007a7e:	f040 80a3 	bne.w	8007bc8 <_svfiprintf_r+0x5b4>
 8007a82:	9a08      	ldr	r2, [sp, #32]
 8007a84:	f005 030f 	and.w	r3, r5, #15
 8007a88:	092d      	lsrs	r5, r5, #4
 8007a8a:	5cd3      	ldrb	r3, [r2, r3]
 8007a8c:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8007a90:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8007a94:	0936      	lsrs	r6, r6, #4
 8007a96:	ea55 0306 	orrs.w	r3, r5, r6
 8007a9a:	d1f3      	bne.n	8007a84 <_svfiprintf_r+0x470>
 8007a9c:	ab3c      	add	r3, sp, #240	; 0xf0
 8007a9e:	46c3      	mov	fp, r8
 8007aa0:	1b1e      	subs	r6, r3, r4
 8007aa2:	e6dc      	b.n	800785e <_svfiprintf_r+0x24a>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	f853 5b04 	ldr.w	r5, [r3], #4
 8007aaa:	9303      	str	r3, [sp, #12]
 8007aac:	2330      	movs	r3, #48	; 0x30
 8007aae:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8007ab2:	2378      	movs	r3, #120	; 0x78
 8007ab4:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8007ab8:	4bc2      	ldr	r3, [pc, #776]	; (8007dc4 <_svfiprintf_r+0x7b0>)
 8007aba:	9308      	str	r3, [sp, #32]
 8007abc:	f04b 0802 	orr.w	r8, fp, #2
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	e6ae      	b.n	8007824 <_svfiprintf_r+0x210>
 8007ac6:	f04b 0810 	orr.w	r8, fp, #16
 8007aca:	f018 0620 	ands.w	r6, r8, #32
 8007ace:	f000 81cc 	beq.w	8007e6a <_svfiprintf_r+0x856>
 8007ad2:	9d03      	ldr	r5, [sp, #12]
 8007ad4:	3507      	adds	r5, #7
 8007ad6:	f025 0507 	bic.w	r5, r5, #7
 8007ada:	462b      	mov	r3, r5
 8007adc:	686e      	ldr	r6, [r5, #4]
 8007ade:	f853 5b08 	ldr.w	r5, [r3], #8
 8007ae2:	9303      	str	r3, [sp, #12]
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e69d      	b.n	8007824 <_svfiprintf_r+0x210>
 8007ae8:	f899 3000 	ldrb.w	r3, [r9]
 8007aec:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8007af0:	e5ce      	b.n	8007690 <_svfiprintf_r+0x7c>
 8007af2:	4649      	mov	r1, r9
 8007af4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007af8:	2b2a      	cmp	r3, #42	; 0x2a
 8007afa:	f000 8318 	beq.w	800812e <_svfiprintf_r+0xb1a>
 8007afe:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007b02:	2a09      	cmp	r2, #9
 8007b04:	4689      	mov	r9, r1
 8007b06:	bf98      	it	ls
 8007b08:	2100      	movls	r1, #0
 8007b0a:	f200 830c 	bhi.w	8008126 <_svfiprintf_r+0xb12>
 8007b0e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007b12:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007b16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007b1a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007b1e:	2a09      	cmp	r2, #9
 8007b20:	d9f5      	bls.n	8007b0e <_svfiprintf_r+0x4fa>
 8007b22:	9100      	str	r1, [sp, #0]
 8007b24:	e5b6      	b.n	8007694 <_svfiprintf_r+0x80>
 8007b26:	f899 3000 	ldrb.w	r3, [r9]
 8007b2a:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
 8007b2e:	e5af      	b.n	8007690 <_svfiprintf_r+0x7c>
 8007b30:	9b03      	ldr	r3, [sp, #12]
 8007b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b36:	9202      	str	r2, [sp, #8]
 8007b38:	2a00      	cmp	r2, #0
 8007b3a:	f6ff ae9c 	blt.w	8007876 <_svfiprintf_r+0x262>
 8007b3e:	9303      	str	r3, [sp, #12]
 8007b40:	f899 3000 	ldrb.w	r3, [r9]
 8007b44:	e5a4      	b.n	8007690 <_svfiprintf_r+0x7c>
 8007b46:	f899 3000 	ldrb.w	r3, [r9]
 8007b4a:	f04b 0b01 	orr.w	fp, fp, #1
 8007b4e:	e59f      	b.n	8007690 <_svfiprintf_r+0x7c>
 8007b50:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f47f ae21 	bne.w	800779c <_svfiprintf_r+0x188>
 8007b5a:	2320      	movs	r3, #32
 8007b5c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8007b60:	f899 3000 	ldrb.w	r3, [r9]
 8007b64:	e594      	b.n	8007690 <_svfiprintf_r+0x7c>
 8007b66:	f01b 0f20 	tst.w	fp, #32
 8007b6a:	f040 81dd 	bne.w	8007f28 <_svfiprintf_r+0x914>
 8007b6e:	f01b 0f10 	tst.w	fp, #16
 8007b72:	f040 827b 	bne.w	800806c <_svfiprintf_r+0xa58>
 8007b76:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8007b7a:	f040 82c0 	bne.w	80080fe <_svfiprintf_r+0xaea>
 8007b7e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8007b82:	f000 8273 	beq.w	800806c <_svfiprintf_r+0xa58>
 8007b86:	9d03      	ldr	r5, [sp, #12]
 8007b88:	9a01      	ldr	r2, [sp, #4]
 8007b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8e:	9503      	str	r5, [sp, #12]
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e558      	b.n	8007646 <_svfiprintf_r+0x32>
 8007b94:	f899 3000 	ldrb.w	r3, [r9]
 8007b98:	2b6c      	cmp	r3, #108	; 0x6c
 8007b9a:	bf03      	ittte	eq
 8007b9c:	f899 3001 	ldrbeq.w	r3, [r9, #1]
 8007ba0:	f04b 0b20 	orreq.w	fp, fp, #32
 8007ba4:	f109 0901 	addeq.w	r9, r9, #1
 8007ba8:	f04b 0b10 	orrne.w	fp, fp, #16
 8007bac:	e570      	b.n	8007690 <_svfiprintf_r+0x7c>
 8007bae:	f899 3000 	ldrb.w	r3, [r9]
 8007bb2:	2b68      	cmp	r3, #104	; 0x68
 8007bb4:	bf03      	ittte	eq
 8007bb6:	f899 3001 	ldrbeq.w	r3, [r9, #1]
 8007bba:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8007bbe:	f109 0901 	addeq.w	r9, r9, #1
 8007bc2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8007bc6:	e563      	b.n	8007690 <_svfiprintf_r+0x7c>
 8007bc8:	f005 0307 	and.w	r3, r5, #7
 8007bcc:	08ed      	lsrs	r5, r5, #3
 8007bce:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 8007bd2:	08f6      	lsrs	r6, r6, #3
 8007bd4:	3330      	adds	r3, #48	; 0x30
 8007bd6:	ea55 0106 	orrs.w	r1, r5, r6
 8007bda:	4622      	mov	r2, r4
 8007bdc:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8007be0:	d1f2      	bne.n	8007bc8 <_svfiprintf_r+0x5b4>
 8007be2:	f018 0f01 	tst.w	r8, #1
 8007be6:	f43f af59 	beq.w	8007a9c <_svfiprintf_r+0x488>
 8007bea:	2b30      	cmp	r3, #48	; 0x30
 8007bec:	f43f af56 	beq.w	8007a9c <_svfiprintf_r+0x488>
 8007bf0:	2330      	movs	r3, #48	; 0x30
 8007bf2:	3a02      	subs	r2, #2
 8007bf4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007bf8:	ab3c      	add	r3, sp, #240	; 0xf0
 8007bfa:	46c3      	mov	fp, r8
 8007bfc:	1a9e      	subs	r6, r3, r2
 8007bfe:	4614      	mov	r4, r2
 8007c00:	e62d      	b.n	800785e <_svfiprintf_r+0x24a>
 8007c02:	9b02      	ldr	r3, [sp, #8]
 8007c04:	eba3 0a08 	sub.w	sl, r3, r8
 8007c08:	f1ba 0f00 	cmp.w	sl, #0
 8007c0c:	f77f aeab 	ble.w	8007966 <_svfiprintf_r+0x352>
 8007c10:	f1ba 0f10 	cmp.w	sl, #16
 8007c14:	4d6c      	ldr	r5, [pc, #432]	; (8007dc8 <_svfiprintf_r+0x7b4>)
 8007c16:	dd28      	ble.n	8007c6a <_svfiprintf_r+0x656>
 8007c18:	e9cd 4b06 	strd	r4, fp, [sp, #24]
 8007c1c:	2310      	movs	r3, #16
 8007c1e:	e9dd b404 	ldrd	fp, r4, [sp, #16]
 8007c22:	e006      	b.n	8007c32 <_svfiprintf_r+0x61e>
 8007c24:	f1aa 0a10 	sub.w	sl, sl, #16
 8007c28:	f1ba 0f10 	cmp.w	sl, #16
 8007c2c:	f107 0708 	add.w	r7, r7, #8
 8007c30:	dd19      	ble.n	8007c66 <_svfiprintf_r+0x652>
 8007c32:	3201      	adds	r2, #1
 8007c34:	3110      	adds	r1, #16
 8007c36:	2a07      	cmp	r2, #7
 8007c38:	e9c7 5300 	strd	r5, r3, [r7]
 8007c3c:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8007c40:	ddf0      	ble.n	8007c24 <_svfiprintf_r+0x610>
 8007c42:	aa10      	add	r2, sp, #64	; 0x40
 8007c44:	4659      	mov	r1, fp
 8007c46:	4620      	mov	r0, r4
 8007c48:	af13      	add	r7, sp, #76	; 0x4c
 8007c4a:	f7ff fc67 	bl	800751c <__ssprint_r>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f47f ae38 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8007c54:	f1aa 0a10 	sub.w	sl, sl, #16
 8007c58:	f1ba 0f10 	cmp.w	sl, #16
 8007c5c:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8007c60:	f04f 0310 	mov.w	r3, #16
 8007c64:	dce5      	bgt.n	8007c32 <_svfiprintf_r+0x61e>
 8007c66:	e9dd 4b06 	ldrd	r4, fp, [sp, #24]
 8007c6a:	3201      	adds	r2, #1
 8007c6c:	4451      	add	r1, sl
 8007c6e:	2a07      	cmp	r2, #7
 8007c70:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8007c74:	603d      	str	r5, [r7, #0]
 8007c76:	f8c7 a004 	str.w	sl, [r7, #4]
 8007c7a:	f300 81eb 	bgt.w	8008054 <_svfiprintf_r+0xa40>
 8007c7e:	9b00      	ldr	r3, [sp, #0]
 8007c80:	eba3 0a06 	sub.w	sl, r3, r6
 8007c84:	f1ba 0f00 	cmp.w	sl, #0
 8007c88:	f107 0708 	add.w	r7, r7, #8
 8007c8c:	f77f ae72 	ble.w	8007974 <_svfiprintf_r+0x360>
 8007c90:	f1ba 0f10 	cmp.w	sl, #16
 8007c94:	4d4c      	ldr	r5, [pc, #304]	; (8007dc8 <_svfiprintf_r+0x7b4>)
 8007c96:	dd2a      	ble.n	8007cee <_svfiprintf_r+0x6da>
 8007c98:	9400      	str	r4, [sp, #0]
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	4637      	mov	r7, r6
 8007ca0:	e9dd 6404 	ldrd	r6, r4, [sp, #16]
 8007ca4:	e006      	b.n	8007cb4 <_svfiprintf_r+0x6a0>
 8007ca6:	f1aa 0a10 	sub.w	sl, sl, #16
 8007caa:	f1ba 0f10 	cmp.w	sl, #16
 8007cae:	f100 0008 	add.w	r0, r0, #8
 8007cb2:	dd19      	ble.n	8007ce8 <_svfiprintf_r+0x6d4>
 8007cb4:	3201      	adds	r2, #1
 8007cb6:	3110      	adds	r1, #16
 8007cb8:	2a07      	cmp	r2, #7
 8007cba:	e9c0 5300 	strd	r5, r3, [r0]
 8007cbe:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8007cc2:	ddf0      	ble.n	8007ca6 <_svfiprintf_r+0x692>
 8007cc4:	aa10      	add	r2, sp, #64	; 0x40
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f7ff fc27 	bl	800751c <__ssprint_r>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f47f adf8 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8007cd4:	f1aa 0a10 	sub.w	sl, sl, #16
 8007cd8:	f1ba 0f10 	cmp.w	sl, #16
 8007cdc:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8007ce0:	a813      	add	r0, sp, #76	; 0x4c
 8007ce2:	f04f 0310 	mov.w	r3, #16
 8007ce6:	dce5      	bgt.n	8007cb4 <_svfiprintf_r+0x6a0>
 8007ce8:	9c00      	ldr	r4, [sp, #0]
 8007cea:	463e      	mov	r6, r7
 8007cec:	4607      	mov	r7, r0
 8007cee:	3201      	adds	r2, #1
 8007cf0:	4451      	add	r1, sl
 8007cf2:	2a07      	cmp	r2, #7
 8007cf4:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8007cf8:	603d      	str	r5, [r7, #0]
 8007cfa:	f8c7 a004 	str.w	sl, [r7, #4]
 8007cfe:	f300 80c3 	bgt.w	8007e88 <_svfiprintf_r+0x874>
 8007d02:	3708      	adds	r7, #8
 8007d04:	e636      	b.n	8007974 <_svfiprintf_r+0x360>
 8007d06:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8007d0a:	aa10      	add	r2, sp, #64	; 0x40
 8007d0c:	f7ff fc06 	bl	800751c <__ssprint_r>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	f47f add7 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8007d16:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007d18:	af13      	add	r7, sp, #76	; 0x4c
 8007d1a:	e635      	b.n	8007988 <_svfiprintf_r+0x374>
 8007d1c:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8007d20:	aa10      	add	r2, sp, #64	; 0x40
 8007d22:	f7ff fbfb 	bl	800751c <__ssprint_r>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	f43f ae41 	beq.w	80079ae <_svfiprintf_r+0x39a>
 8007d2c:	e5ca      	b.n	80078c4 <_svfiprintf_r+0x2b0>
 8007d2e:	46d8      	mov	r8, fp
 8007d30:	e6a0      	b.n	8007a74 <_svfiprintf_r+0x460>
 8007d32:	2d10      	cmp	r5, #16
 8007d34:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8007d38:	f8df a090 	ldr.w	sl, [pc, #144]	; 8007dcc <_svfiprintf_r+0x7b8>
 8007d3c:	dd29      	ble.n	8007d92 <_svfiprintf_r+0x77e>
 8007d3e:	e9cd 4b0c 	strd	r4, fp, [sp, #48]	; 0x30
 8007d42:	2310      	movs	r3, #16
 8007d44:	4654      	mov	r4, sl
 8007d46:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007d4a:	f8dd a014 	ldr.w	sl, [sp, #20]
 8007d4e:	e004      	b.n	8007d5a <_svfiprintf_r+0x746>
 8007d50:	3d10      	subs	r5, #16
 8007d52:	2d10      	cmp	r5, #16
 8007d54:	f107 0708 	add.w	r7, r7, #8
 8007d58:	dd17      	ble.n	8007d8a <_svfiprintf_r+0x776>
 8007d5a:	3201      	adds	r2, #1
 8007d5c:	3110      	adds	r1, #16
 8007d5e:	2a07      	cmp	r2, #7
 8007d60:	e9c7 4300 	strd	r4, r3, [r7]
 8007d64:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8007d68:	ddf2      	ble.n	8007d50 <_svfiprintf_r+0x73c>
 8007d6a:	aa10      	add	r2, sp, #64	; 0x40
 8007d6c:	4659      	mov	r1, fp
 8007d6e:	4650      	mov	r0, sl
 8007d70:	af13      	add	r7, sp, #76	; 0x4c
 8007d72:	f7ff fbd3 	bl	800751c <__ssprint_r>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f47f ada4 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8007d7c:	3d10      	subs	r5, #16
 8007d7e:	2d10      	cmp	r5, #16
 8007d80:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8007d84:	f04f 0310 	mov.w	r3, #16
 8007d88:	dce7      	bgt.n	8007d5a <_svfiprintf_r+0x746>
 8007d8a:	46a2      	mov	sl, r4
 8007d8c:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8007d90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007d92:	f8c7 a000 	str.w	sl, [r7]
 8007d96:	3201      	adds	r2, #1
 8007d98:	4429      	add	r1, r5
 8007d9a:	2a07      	cmp	r2, #7
 8007d9c:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8007da0:	607d      	str	r5, [r7, #4]
 8007da2:	f300 8138 	bgt.w	8008016 <_svfiprintf_r+0xa02>
 8007da6:	3708      	adds	r7, #8
 8007da8:	e5b9      	b.n	800791e <_svfiprintf_r+0x30a>
 8007daa:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8007dae:	aa10      	add	r2, sp, #64	; 0x40
 8007db0:	f7ff fbb4 	bl	800751c <__ssprint_r>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	f47f ad85 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8007dba:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8007dbe:	af13      	add	r7, sp, #76	; 0x4c
 8007dc0:	e5cd      	b.n	800795e <_svfiprintf_r+0x34a>
 8007dc2:	bf00      	nop
 8007dc4:	0800bdd8 	.word	0x0800bdd8
 8007dc8:	0800c084 	.word	0x0800c084
 8007dcc:	0800c074 	.word	0x0800c074
 8007dd0:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8007dd4:	aa10      	add	r2, sp, #64	; 0x40
 8007dd6:	f7ff fba1 	bl	800751c <__ssprint_r>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	f47f ad72 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8007de0:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8007de4:	af13      	add	r7, sp, #76	; 0x4c
 8007de6:	e5ab      	b.n	8007940 <_svfiprintf_r+0x32c>
 8007de8:	2c10      	cmp	r4, #16
 8007dea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dec:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 80080c8 <_svfiprintf_r+0xab4>
 8007df0:	dd1e      	ble.n	8007e30 <_svfiprintf_r+0x81c>
 8007df2:	e9dd b604 	ldrd	fp, r6, [sp, #16]
 8007df6:	2510      	movs	r5, #16
 8007df8:	e004      	b.n	8007e04 <_svfiprintf_r+0x7f0>
 8007dfa:	3c10      	subs	r4, #16
 8007dfc:	2c10      	cmp	r4, #16
 8007dfe:	f107 0708 	add.w	r7, r7, #8
 8007e02:	dd15      	ble.n	8007e30 <_svfiprintf_r+0x81c>
 8007e04:	3301      	adds	r3, #1
 8007e06:	3110      	adds	r1, #16
 8007e08:	2b07      	cmp	r3, #7
 8007e0a:	e9c7 a500 	strd	sl, r5, [r7]
 8007e0e:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
 8007e12:	ddf2      	ble.n	8007dfa <_svfiprintf_r+0x7e6>
 8007e14:	aa10      	add	r2, sp, #64	; 0x40
 8007e16:	4659      	mov	r1, fp
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f7ff fb7f 	bl	800751c <__ssprint_r>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	f47f ad50 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8007e24:	3c10      	subs	r4, #16
 8007e26:	2c10      	cmp	r4, #16
 8007e28:	e9dd 3111 	ldrd	r3, r1, [sp, #68]	; 0x44
 8007e2c:	af13      	add	r7, sp, #76	; 0x4c
 8007e2e:	dce9      	bgt.n	8007e04 <_svfiprintf_r+0x7f0>
 8007e30:	3301      	adds	r3, #1
 8007e32:	4421      	add	r1, r4
 8007e34:	2b07      	cmp	r3, #7
 8007e36:	e9c7 a400 	strd	sl, r4, [r7]
 8007e3a:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
 8007e3e:	f77f adac 	ble.w	800799a <_svfiprintf_r+0x386>
 8007e42:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8007e46:	aa10      	add	r2, sp, #64	; 0x40
 8007e48:	f7ff fb68 	bl	800751c <__ssprint_r>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	f47f ad39 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8007e52:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007e54:	e5a1      	b.n	800799a <_svfiprintf_r+0x386>
 8007e56:	9b00      	ldr	r3, [sp, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f47f acc9 	bne.w	80077f0 <_svfiprintf_r+0x1dc>
 8007e5e:	46c3      	mov	fp, r8
 8007e60:	2300      	movs	r3, #0
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	461e      	mov	r6, r3
 8007e66:	ac3c      	add	r4, sp, #240	; 0xf0
 8007e68:	e4f9      	b.n	800785e <_svfiprintf_r+0x24a>
 8007e6a:	f018 0310 	ands.w	r3, r8, #16
 8007e6e:	d155      	bne.n	8007f1c <_svfiprintf_r+0x908>
 8007e70:	f018 0240 	ands.w	r2, r8, #64	; 0x40
 8007e74:	f000 8118 	beq.w	80080a8 <_svfiprintf_r+0xa94>
 8007e78:	9a03      	ldr	r2, [sp, #12]
 8007e7a:	f852 5b04 	ldr.w	r5, [r2], #4
 8007e7e:	9203      	str	r2, [sp, #12]
 8007e80:	461e      	mov	r6, r3
 8007e82:	b2ad      	uxth	r5, r5
 8007e84:	2301      	movs	r3, #1
 8007e86:	e4cd      	b.n	8007824 <_svfiprintf_r+0x210>
 8007e88:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8007e8c:	aa10      	add	r2, sp, #64	; 0x40
 8007e8e:	f7ff fb45 	bl	800751c <__ssprint_r>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f47f ad16 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8007e98:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8007e9c:	af13      	add	r7, sp, #76	; 0x4c
 8007e9e:	e569      	b.n	8007974 <_svfiprintf_r+0x360>
 8007ea0:	f408 6b80 	and.w	fp, r8, #1024	; 0x400
 8007ea4:	465b      	mov	r3, fp
 8007ea6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007eaa:	46bb      	mov	fp, r7
 8007eac:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8007eb0:	f04f 0a00 	mov.w	sl, #0
 8007eb4:	ac3c      	add	r4, sp, #240	; 0xf0
 8007eb6:	461f      	mov	r7, r3
 8007eb8:	e008      	b.n	8007ecc <_svfiprintf_r+0x8b8>
 8007eba:	4631      	mov	r1, r6
 8007ebc:	f003 fcbc 	bl	800b838 <__aeabi_uldivmod>
 8007ec0:	2d0a      	cmp	r5, #10
 8007ec2:	f176 0300 	sbcs.w	r3, r6, #0
 8007ec6:	d31e      	bcc.n	8007f06 <_svfiprintf_r+0x8f2>
 8007ec8:	4605      	mov	r5, r0
 8007eca:	460e      	mov	r6, r1
 8007ecc:	4628      	mov	r0, r5
 8007ece:	4631      	mov	r1, r6
 8007ed0:	220a      	movs	r2, #10
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f003 fcb0 	bl	800b838 <__aeabi_uldivmod>
 8007ed8:	4611      	mov	r1, r2
 8007eda:	3130      	adds	r1, #48	; 0x30
 8007edc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	220a      	movs	r2, #10
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	3c01      	subs	r4, #1
 8007ee8:	f10a 0a01 	add.w	sl, sl, #1
 8007eec:	2f00      	cmp	r7, #0
 8007eee:	d0e4      	beq.n	8007eba <_svfiprintf_r+0x8a6>
 8007ef0:	f898 1000 	ldrb.w	r1, [r8]
 8007ef4:	4551      	cmp	r1, sl
 8007ef6:	d1e0      	bne.n	8007eba <_svfiprintf_r+0x8a6>
 8007ef8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8007efc:	d0dd      	beq.n	8007eba <_svfiprintf_r+0x8a6>
 8007efe:	2d0a      	cmp	r5, #10
 8007f00:	f176 0300 	sbcs.w	r3, r6, #0
 8007f04:	d272      	bcs.n	8007fec <_svfiprintf_r+0x9d8>
 8007f06:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8007f0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007f0e:	ab3c      	add	r3, sp, #240	; 0xf0
 8007f10:	465f      	mov	r7, fp
 8007f12:	1b1e      	subs	r6, r3, r4
 8007f14:	46c3      	mov	fp, r8
 8007f16:	e4a2      	b.n	800785e <_svfiprintf_r+0x24a>
 8007f18:	ac3c      	add	r4, sp, #240	; 0xf0
 8007f1a:	e4a0      	b.n	800785e <_svfiprintf_r+0x24a>
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f22:	9303      	str	r3, [sp, #12]
 8007f24:	2301      	movs	r3, #1
 8007f26:	e47d      	b.n	8007824 <_svfiprintf_r+0x210>
 8007f28:	9d03      	ldr	r5, [sp, #12]
 8007f2a:	9901      	ldr	r1, [sp, #4]
 8007f2c:	f855 2b04 	ldr.w	r2, [r5], #4
 8007f30:	9503      	str	r5, [sp, #12]
 8007f32:	17cb      	asrs	r3, r1, #31
 8007f34:	e9c2 1300 	strd	r1, r3, [r2]
 8007f38:	f7ff bb85 	b.w	8007646 <_svfiprintf_r+0x32>
 8007f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	f43f ac2c 	beq.w	800779c <_svfiprintf_r+0x188>
 8007f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	f43f ac27 	beq.w	800779c <_svfiprintf_r+0x188>
 8007f4e:	f899 3000 	ldrb.w	r3, [r9]
 8007f52:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8007f56:	f7ff bb9b 	b.w	8007690 <_svfiprintf_r+0x7c>
 8007f5a:	9b03      	ldr	r3, [sp, #12]
 8007f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f60:	9303      	str	r3, [sp, #12]
 8007f62:	e45c      	b.n	800781e <_svfiprintf_r+0x20a>
 8007f64:	46d8      	mov	r8, fp
 8007f66:	e5b0      	b.n	8007aca <_svfiprintf_r+0x4b6>
 8007f68:	4a58      	ldr	r2, [pc, #352]	; (80080cc <_svfiprintf_r+0xab8>)
 8007f6a:	9208      	str	r2, [sp, #32]
 8007f6c:	f01b 0620 	ands.w	r6, fp, #32
 8007f70:	d01e      	beq.n	8007fb0 <_svfiprintf_r+0x99c>
 8007f72:	9d03      	ldr	r5, [sp, #12]
 8007f74:	3507      	adds	r5, #7
 8007f76:	f025 0507 	bic.w	r5, r5, #7
 8007f7a:	462a      	mov	r2, r5
 8007f7c:	686e      	ldr	r6, [r5, #4]
 8007f7e:	f852 5b08 	ldr.w	r5, [r2], #8
 8007f82:	9203      	str	r2, [sp, #12]
 8007f84:	f01b 0f01 	tst.w	fp, #1
 8007f88:	d009      	beq.n	8007f9e <_svfiprintf_r+0x98a>
 8007f8a:	ea55 0206 	orrs.w	r2, r5, r6
 8007f8e:	d006      	beq.n	8007f9e <_svfiprintf_r+0x98a>
 8007f90:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8007f94:	2330      	movs	r3, #48	; 0x30
 8007f96:	f04b 0b02 	orr.w	fp, fp, #2
 8007f9a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8007f9e:	f42b 6880 	bic.w	r8, fp, #1024	; 0x400
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	e43e      	b.n	8007824 <_svfiprintf_r+0x210>
 8007fa6:	4a4a      	ldr	r2, [pc, #296]	; (80080d0 <_svfiprintf_r+0xabc>)
 8007fa8:	9208      	str	r2, [sp, #32]
 8007faa:	f01b 0620 	ands.w	r6, fp, #32
 8007fae:	d1e0      	bne.n	8007f72 <_svfiprintf_r+0x95e>
 8007fb0:	f01b 0210 	ands.w	r2, fp, #16
 8007fb4:	d03b      	beq.n	800802e <_svfiprintf_r+0xa1a>
 8007fb6:	9a03      	ldr	r2, [sp, #12]
 8007fb8:	f852 5b04 	ldr.w	r5, [r2], #4
 8007fbc:	9203      	str	r2, [sp, #12]
 8007fbe:	e7e1      	b.n	8007f84 <_svfiprintf_r+0x970>
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	9503      	str	r5, [sp, #12]
 8007fc4:	f7fb fcbc 	bl	8003940 <strlen>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4606      	mov	r6, r0
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	e446      	b.n	800785e <_svfiprintf_r+0x24a>
 8007fd0:	2140      	movs	r1, #64	; 0x40
 8007fd2:	f7fb f925 	bl	8003220 <_malloc_r>
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	6018      	str	r0, [r3, #0]
 8007fda:	6118      	str	r0, [r3, #16]
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	f000 80b2 	beq.w	8008146 <_svfiprintf_r+0xb32>
 8007fe2:	9a04      	ldr	r2, [sp, #16]
 8007fe4:	2340      	movs	r3, #64	; 0x40
 8007fe6:	6153      	str	r3, [r2, #20]
 8007fe8:	f7ff bb22 	b.w	8007630 <_svfiprintf_r+0x1c>
 8007fec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ff0:	1ae4      	subs	r4, r4, r3
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7ff fa5f 	bl	80074b8 <strncpy>
 8007ffa:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007ffe:	b10b      	cbz	r3, 8008004 <_svfiprintf_r+0x9f0>
 8008000:	f108 0801 	add.w	r8, r8, #1
 8008004:	4628      	mov	r0, r5
 8008006:	4631      	mov	r1, r6
 8008008:	220a      	movs	r2, #10
 800800a:	2300      	movs	r3, #0
 800800c:	f04f 0a00 	mov.w	sl, #0
 8008010:	f003 fc12 	bl	800b838 <__aeabi_uldivmod>
 8008014:	e758      	b.n	8007ec8 <_svfiprintf_r+0x8b4>
 8008016:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 800801a:	aa10      	add	r2, sp, #64	; 0x40
 800801c:	f7ff fa7e 	bl	800751c <__ssprint_r>
 8008020:	2800      	cmp	r0, #0
 8008022:	f47f ac4f 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8008026:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800802a:	af13      	add	r7, sp, #76	; 0x4c
 800802c:	e477      	b.n	800791e <_svfiprintf_r+0x30a>
 800802e:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
 8008032:	d051      	beq.n	80080d8 <_svfiprintf_r+0xac4>
 8008034:	9903      	ldr	r1, [sp, #12]
 8008036:	f851 5b04 	ldr.w	r5, [r1], #4
 800803a:	9103      	str	r1, [sp, #12]
 800803c:	4616      	mov	r6, r2
 800803e:	b2ad      	uxth	r5, r5
 8008040:	e7a0      	b.n	8007f84 <_svfiprintf_r+0x970>
 8008042:	46d8      	mov	r8, fp
 8008044:	f7ff bbcf 	b.w	80077e6 <_svfiprintf_r+0x1d2>
 8008048:	2b01      	cmp	r3, #1
 800804a:	46d8      	mov	r8, fp
 800804c:	f47f ad15 	bne.w	8007a7a <_svfiprintf_r+0x466>
 8008050:	f7ff bbce 	b.w	80077f0 <_svfiprintf_r+0x1dc>
 8008054:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8008058:	aa10      	add	r2, sp, #64	; 0x40
 800805a:	f7ff fa5f 	bl	800751c <__ssprint_r>
 800805e:	2800      	cmp	r0, #0
 8008060:	f47f ac30 	bne.w	80078c4 <_svfiprintf_r+0x2b0>
 8008064:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8008068:	af13      	add	r7, sp, #76	; 0x4c
 800806a:	e47c      	b.n	8007966 <_svfiprintf_r+0x352>
 800806c:	9d03      	ldr	r5, [sp, #12]
 800806e:	9a01      	ldr	r2, [sp, #4]
 8008070:	f855 3b04 	ldr.w	r3, [r5], #4
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	9503      	str	r5, [sp, #12]
 8008078:	f7ff bae5 	b.w	8007646 <_svfiprintf_r+0x32>
 800807c:	9e00      	ldr	r6, [sp, #0]
 800807e:	4c15      	ldr	r4, [pc, #84]	; (80080d4 <_svfiprintf_r+0xac0>)
 8008080:	9503      	str	r5, [sp, #12]
 8008082:	2e06      	cmp	r6, #6
 8008084:	bf28      	it	cs
 8008086:	2606      	movcs	r6, #6
 8008088:	46b0      	mov	r8, r6
 800808a:	e434      	b.n	80078f6 <_svfiprintf_r+0x2e2>
 800808c:	9b03      	ldr	r3, [sp, #12]
 800808e:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8008092:	bf14      	ite	ne
 8008094:	f853 5b04 	ldrne.w	r5, [r3], #4
 8008098:	f853 5b04 	ldreq.w	r5, [r3], #4
 800809c:	9303      	str	r3, [sp, #12]
 800809e:	bf1c      	itt	ne
 80080a0:	4616      	movne	r6, r2
 80080a2:	b2ed      	uxtbne	r5, r5
 80080a4:	f7ff bbbb 	b.w	800781e <_svfiprintf_r+0x20a>
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	f418 7600 	ands.w	r6, r8, #512	; 0x200
 80080ae:	bf14      	ite	ne
 80080b0:	f853 5b04 	ldrne.w	r5, [r3], #4
 80080b4:	f853 5b04 	ldreq.w	r5, [r3], #4
 80080b8:	9303      	str	r3, [sp, #12]
 80080ba:	bf1c      	itt	ne
 80080bc:	4616      	movne	r6, r2
 80080be:	b2ed      	uxtbne	r5, r5
 80080c0:	2301      	movs	r3, #1
 80080c2:	f7ff bbaf 	b.w	8007824 <_svfiprintf_r+0x210>
 80080c6:	bf00      	nop
 80080c8:	0800c074 	.word	0x0800c074
 80080cc:	0800bdec 	.word	0x0800bdec
 80080d0:	0800bdd8 	.word	0x0800bdd8
 80080d4:	0800be00 	.word	0x0800be00
 80080d8:	9a03      	ldr	r2, [sp, #12]
 80080da:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 80080de:	bf14      	ite	ne
 80080e0:	f852 5b04 	ldrne.w	r5, [r2], #4
 80080e4:	f852 5b04 	ldreq.w	r5, [r2], #4
 80080e8:	9203      	str	r2, [sp, #12]
 80080ea:	bf1c      	itt	ne
 80080ec:	460e      	movne	r6, r1
 80080ee:	b2ed      	uxtbne	r5, r5
 80080f0:	e748      	b.n	8007f84 <_svfiprintf_r+0x970>
 80080f2:	f343 16c0 	sbfx	r6, r3, #7, #1
 80080f6:	b25d      	sxtb	r5, r3
 80080f8:	4633      	mov	r3, r6
 80080fa:	f7ff bb67 	b.w	80077cc <_svfiprintf_r+0x1b8>
 80080fe:	9d03      	ldr	r5, [sp, #12]
 8008100:	9a01      	ldr	r2, [sp, #4]
 8008102:	f855 3b04 	ldr.w	r3, [r5], #4
 8008106:	9503      	str	r5, [sp, #12]
 8008108:	801a      	strh	r2, [r3, #0]
 800810a:	f7ff ba9c 	b.w	8007646 <_svfiprintf_r+0x32>
 800810e:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8008112:	aa10      	add	r2, sp, #64	; 0x40
 8008114:	f7ff fa02 	bl	800751c <__ssprint_r>
 8008118:	f7ff bbd4 	b.w	80078c4 <_svfiprintf_r+0x2b0>
 800811c:	9e00      	ldr	r6, [sp, #0]
 800811e:	9503      	str	r5, [sp, #12]
 8008120:	9000      	str	r0, [sp, #0]
 8008122:	f7ff bb9c 	b.w	800785e <_svfiprintf_r+0x24a>
 8008126:	2200      	movs	r2, #0
 8008128:	9200      	str	r2, [sp, #0]
 800812a:	f7ff bab3 	b.w	8007694 <_svfiprintf_r+0x80>
 800812e:	9a03      	ldr	r2, [sp, #12]
 8008130:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008134:	4689      	mov	r9, r1
 8008136:	f852 1b04 	ldr.w	r1, [r2], #4
 800813a:	9203      	str	r2, [sp, #12]
 800813c:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 8008140:	9100      	str	r1, [sp, #0]
 8008142:	f7ff baa5 	b.w	8007690 <_svfiprintf_r+0x7c>
 8008146:	9a05      	ldr	r2, [sp, #20]
 8008148:	230c      	movs	r3, #12
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	f7ff bbc0 	b.w	80078d6 <_svfiprintf_r+0x2c2>
 8008156:	bf00      	nop

08008158 <__assert_func>:
 8008158:	b500      	push	{lr}
 800815a:	4c0b      	ldr	r4, [pc, #44]	; (8008188 <__assert_func+0x30>)
 800815c:	6825      	ldr	r5, [r4, #0]
 800815e:	4614      	mov	r4, r2
 8008160:	68ee      	ldr	r6, [r5, #12]
 8008162:	461a      	mov	r2, r3
 8008164:	b085      	sub	sp, #20
 8008166:	4603      	mov	r3, r0
 8008168:	460d      	mov	r5, r1
 800816a:	b14c      	cbz	r4, 8008180 <__assert_func+0x28>
 800816c:	4907      	ldr	r1, [pc, #28]	; (800818c <__assert_func+0x34>)
 800816e:	9500      	str	r5, [sp, #0]
 8008170:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8008174:	4630      	mov	r0, r6
 8008176:	4906      	ldr	r1, [pc, #24]	; (8008190 <__assert_func+0x38>)
 8008178:	f000 f85e 	bl	8008238 <fiprintf>
 800817c:	f001 fce2 	bl	8009b44 <abort>
 8008180:	4904      	ldr	r1, [pc, #16]	; (8008194 <__assert_func+0x3c>)
 8008182:	460c      	mov	r4, r1
 8008184:	e7f3      	b.n	800816e <__assert_func+0x16>
 8008186:	bf00      	nop
 8008188:	200000d8 	.word	0x200000d8
 800818c:	0800c094 	.word	0x0800c094
 8008190:	0800c0a4 	.word	0x0800c0a4
 8008194:	0800c0a0 	.word	0x0800c0a0

08008198 <__assert>:
 8008198:	b508      	push	{r3, lr}
 800819a:	4613      	mov	r3, r2
 800819c:	2200      	movs	r2, #0
 800819e:	f7ff ffdb 	bl	8008158 <__assert_func>
 80081a2:	bf00      	nop

080081a4 <_calloc_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	fba1 1402 	umull	r1, r4, r1, r2
 80081aa:	bb8c      	cbnz	r4, 8008210 <_calloc_r+0x6c>
 80081ac:	f7fb f838 	bl	8003220 <_malloc_r>
 80081b0:	4605      	mov	r5, r0
 80081b2:	b1e0      	cbz	r0, 80081ee <_calloc_r+0x4a>
 80081b4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80081b8:	f022 0203 	bic.w	r2, r2, #3
 80081bc:	3a04      	subs	r2, #4
 80081be:	2a24      	cmp	r2, #36	; 0x24
 80081c0:	d817      	bhi.n	80081f2 <_calloc_r+0x4e>
 80081c2:	2a13      	cmp	r2, #19
 80081c4:	d91a      	bls.n	80081fc <_calloc_r+0x58>
 80081c6:	2a1b      	cmp	r2, #27
 80081c8:	e9c0 4400 	strd	r4, r4, [r0]
 80081cc:	d91d      	bls.n	800820a <_calloc_r+0x66>
 80081ce:	2a24      	cmp	r2, #36	; 0x24
 80081d0:	bf14      	ite	ne
 80081d2:	f100 0210 	addne.w	r2, r0, #16
 80081d6:	f100 0218 	addeq.w	r2, r0, #24
 80081da:	f04f 0300 	mov.w	r3, #0
 80081de:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80081e2:	bf04      	itt	eq
 80081e4:	6104      	streq	r4, [r0, #16]
 80081e6:	6144      	streq	r4, [r0, #20]
 80081e8:	e9c2 3300 	strd	r3, r3, [r2]
 80081ec:	6093      	str	r3, [r2, #8]
 80081ee:	4628      	mov	r0, r5
 80081f0:	bd38      	pop	{r3, r4, r5, pc}
 80081f2:	4621      	mov	r1, r4
 80081f4:	f000 f916 	bl	8008424 <memset>
 80081f8:	4628      	mov	r0, r5
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	4602      	mov	r2, r0
 80081fe:	2300      	movs	r3, #0
 8008200:	e9c2 3300 	strd	r3, r3, [r2]
 8008204:	6093      	str	r3, [r2, #8]
 8008206:	4628      	mov	r0, r5
 8008208:	bd38      	pop	{r3, r4, r5, pc}
 800820a:	f100 0208 	add.w	r2, r0, #8
 800820e:	e7f6      	b.n	80081fe <_calloc_r+0x5a>
 8008210:	f7fa ffcc 	bl	80031ac <__errno>
 8008214:	230c      	movs	r3, #12
 8008216:	2500      	movs	r5, #0
 8008218:	6003      	str	r3, [r0, #0]
 800821a:	e7e8      	b.n	80081ee <_calloc_r+0x4a>

0800821c <_fiprintf_r>:
 800821c:	b40c      	push	{r2, r3}
 800821e:	b500      	push	{lr}
 8008220:	b083      	sub	sp, #12
 8008222:	ab04      	add	r3, sp, #16
 8008224:	f853 2b04 	ldr.w	r2, [r3], #4
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	f000 fced 	bl	8008c08 <_vfiprintf_r>
 800822e:	b003      	add	sp, #12
 8008230:	f85d eb04 	ldr.w	lr, [sp], #4
 8008234:	b002      	add	sp, #8
 8008236:	4770      	bx	lr

08008238 <fiprintf>:
 8008238:	b40e      	push	{r1, r2, r3}
 800823a:	b510      	push	{r4, lr}
 800823c:	b083      	sub	sp, #12
 800823e:	ab05      	add	r3, sp, #20
 8008240:	4c06      	ldr	r4, [pc, #24]	; (800825c <fiprintf+0x24>)
 8008242:	f853 2b04 	ldr.w	r2, [r3], #4
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	4601      	mov	r1, r0
 800824a:	6820      	ldr	r0, [r4, #0]
 800824c:	f000 fcdc 	bl	8008c08 <_vfiprintf_r>
 8008250:	b003      	add	sp, #12
 8008252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008256:	b003      	add	sp, #12
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	200000d8 	.word	0x200000d8

08008260 <_setlocale_r>:
 8008260:	b142      	cbz	r2, 8008274 <_setlocale_r+0x14>
 8008262:	b510      	push	{r4, lr}
 8008264:	490b      	ldr	r1, [pc, #44]	; (8008294 <_setlocale_r+0x34>)
 8008266:	4610      	mov	r0, r2
 8008268:	4614      	mov	r4, r2
 800826a:	f000 fb1d 	bl	80088a8 <strcmp>
 800826e:	b918      	cbnz	r0, 8008278 <_setlocale_r+0x18>
 8008270:	4809      	ldr	r0, [pc, #36]	; (8008298 <_setlocale_r+0x38>)
 8008272:	bd10      	pop	{r4, pc}
 8008274:	4808      	ldr	r0, [pc, #32]	; (8008298 <_setlocale_r+0x38>)
 8008276:	4770      	bx	lr
 8008278:	4907      	ldr	r1, [pc, #28]	; (8008298 <_setlocale_r+0x38>)
 800827a:	4620      	mov	r0, r4
 800827c:	f000 fb14 	bl	80088a8 <strcmp>
 8008280:	2800      	cmp	r0, #0
 8008282:	d0f5      	beq.n	8008270 <_setlocale_r+0x10>
 8008284:	4905      	ldr	r1, [pc, #20]	; (800829c <_setlocale_r+0x3c>)
 8008286:	4620      	mov	r0, r4
 8008288:	f000 fb0e 	bl	80088a8 <strcmp>
 800828c:	2800      	cmp	r0, #0
 800828e:	d0ef      	beq.n	8008270 <_setlocale_r+0x10>
 8008290:	2000      	movs	r0, #0
 8008292:	bd10      	pop	{r4, pc}
 8008294:	0800c0d8 	.word	0x0800c0d8
 8008298:	0800c0d4 	.word	0x0800c0d4
 800829c:	0800c0a0 	.word	0x0800c0a0

080082a0 <__locale_mb_cur_max>:
 80082a0:	4b01      	ldr	r3, [pc, #4]	; (80082a8 <__locale_mb_cur_max+0x8>)
 80082a2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80082a6:	4770      	bx	lr
 80082a8:	20000918 	.word	0x20000918

080082ac <setlocale>:
 80082ac:	b141      	cbz	r1, 80082c0 <setlocale+0x14>
 80082ae:	b510      	push	{r4, lr}
 80082b0:	460c      	mov	r4, r1
 80082b2:	4620      	mov	r0, r4
 80082b4:	490a      	ldr	r1, [pc, #40]	; (80082e0 <setlocale+0x34>)
 80082b6:	f000 faf7 	bl	80088a8 <strcmp>
 80082ba:	b918      	cbnz	r0, 80082c4 <setlocale+0x18>
 80082bc:	4809      	ldr	r0, [pc, #36]	; (80082e4 <setlocale+0x38>)
 80082be:	bd10      	pop	{r4, pc}
 80082c0:	4808      	ldr	r0, [pc, #32]	; (80082e4 <setlocale+0x38>)
 80082c2:	4770      	bx	lr
 80082c4:	4907      	ldr	r1, [pc, #28]	; (80082e4 <setlocale+0x38>)
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 faee 	bl	80088a8 <strcmp>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d0f5      	beq.n	80082bc <setlocale+0x10>
 80082d0:	4905      	ldr	r1, [pc, #20]	; (80082e8 <setlocale+0x3c>)
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 fae8 	bl	80088a8 <strcmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	d0ef      	beq.n	80082bc <setlocale+0x10>
 80082dc:	2000      	movs	r0, #0
 80082de:	bd10      	pop	{r4, pc}
 80082e0:	0800c0d8 	.word	0x0800c0d8
 80082e4:	0800c0d4 	.word	0x0800c0d4
 80082e8:	0800c0a0 	.word	0x0800c0a0

080082ec <_mbtowc_r>:
 80082ec:	b410      	push	{r4}
 80082ee:	4c03      	ldr	r4, [pc, #12]	; (80082fc <_mbtowc_r+0x10>)
 80082f0:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 80082f4:	46a4      	mov	ip, r4
 80082f6:	bc10      	pop	{r4}
 80082f8:	4760      	bx	ip
 80082fa:	bf00      	nop
 80082fc:	20000918 	.word	0x20000918

08008300 <__ascii_mbtowc>:
 8008300:	b082      	sub	sp, #8
 8008302:	b149      	cbz	r1, 8008318 <__ascii_mbtowc+0x18>
 8008304:	b15a      	cbz	r2, 800831e <__ascii_mbtowc+0x1e>
 8008306:	b16b      	cbz	r3, 8008324 <__ascii_mbtowc+0x24>
 8008308:	7813      	ldrb	r3, [r2, #0]
 800830a:	600b      	str	r3, [r1, #0]
 800830c:	7812      	ldrb	r2, [r2, #0]
 800830e:	1e10      	subs	r0, r2, #0
 8008310:	bf18      	it	ne
 8008312:	2001      	movne	r0, #1
 8008314:	b002      	add	sp, #8
 8008316:	4770      	bx	lr
 8008318:	a901      	add	r1, sp, #4
 800831a:	2a00      	cmp	r2, #0
 800831c:	d1f3      	bne.n	8008306 <__ascii_mbtowc+0x6>
 800831e:	4610      	mov	r0, r2
 8008320:	b002      	add	sp, #8
 8008322:	4770      	bx	lr
 8008324:	f06f 0001 	mvn.w	r0, #1
 8008328:	e7f4      	b.n	8008314 <__ascii_mbtowc+0x14>
 800832a:	bf00      	nop

0800832c <memmove>:
 800832c:	4288      	cmp	r0, r1
 800832e:	d90d      	bls.n	800834c <memmove+0x20>
 8008330:	188b      	adds	r3, r1, r2
 8008332:	4283      	cmp	r3, r0
 8008334:	d90a      	bls.n	800834c <memmove+0x20>
 8008336:	eb00 0c02 	add.w	ip, r0, r2
 800833a:	b1ba      	cbz	r2, 800836c <memmove+0x40>
 800833c:	4662      	mov	r2, ip
 800833e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 8008342:	f802 cd01 	strb.w	ip, [r2, #-1]!
 8008346:	4299      	cmp	r1, r3
 8008348:	d1f9      	bne.n	800833e <memmove+0x12>
 800834a:	4770      	bx	lr
 800834c:	2a0f      	cmp	r2, #15
 800834e:	d80e      	bhi.n	800836e <memmove+0x42>
 8008350:	4603      	mov	r3, r0
 8008352:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8008356:	b14a      	cbz	r2, 800836c <memmove+0x40>
 8008358:	f10c 0c01 	add.w	ip, ip, #1
 800835c:	3b01      	subs	r3, #1
 800835e:	448c      	add	ip, r1
 8008360:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008364:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008368:	4561      	cmp	r1, ip
 800836a:	d1f9      	bne.n	8008360 <memmove+0x34>
 800836c:	4770      	bx	lr
 800836e:	ea40 0301 	orr.w	r3, r0, r1
 8008372:	079b      	lsls	r3, r3, #30
 8008374:	d150      	bne.n	8008418 <memmove+0xec>
 8008376:	f1a2 0310 	sub.w	r3, r2, #16
 800837a:	b570      	push	{r4, r5, r6, lr}
 800837c:	f101 0c20 	add.w	ip, r1, #32
 8008380:	f023 050f 	bic.w	r5, r3, #15
 8008384:	f101 0e10 	add.w	lr, r1, #16
 8008388:	f100 0410 	add.w	r4, r0, #16
 800838c:	44ac      	add	ip, r5
 800838e:	091b      	lsrs	r3, r3, #4
 8008390:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 8008394:	f844 5c10 	str.w	r5, [r4, #-16]
 8008398:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 800839c:	f844 5c0c 	str.w	r5, [r4, #-12]
 80083a0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80083a4:	f844 5c08 	str.w	r5, [r4, #-8]
 80083a8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 80083ac:	f844 5c04 	str.w	r5, [r4, #-4]
 80083b0:	f10e 0e10 	add.w	lr, lr, #16
 80083b4:	45e6      	cmp	lr, ip
 80083b6:	f104 0410 	add.w	r4, r4, #16
 80083ba:	d1e9      	bne.n	8008390 <memmove+0x64>
 80083bc:	3301      	adds	r3, #1
 80083be:	f012 0f0c 	tst.w	r2, #12
 80083c2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80083c6:	f002 040f 	and.w	r4, r2, #15
 80083ca:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80083ce:	d027      	beq.n	8008420 <memmove+0xf4>
 80083d0:	3c04      	subs	r4, #4
 80083d2:	f024 0603 	bic.w	r6, r4, #3
 80083d6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 80083da:	441e      	add	r6, r3
 80083dc:	1f1c      	subs	r4, r3, #4
 80083de:	468e      	mov	lr, r1
 80083e0:	f85e 5b04 	ldr.w	r5, [lr], #4
 80083e4:	f844 5f04 	str.w	r5, [r4, #4]!
 80083e8:	42b4      	cmp	r4, r6
 80083ea:	d1f9      	bne.n	80083e0 <memmove+0xb4>
 80083ec:	f10c 0401 	add.w	r4, ip, #1
 80083f0:	f002 0203 	and.w	r2, r2, #3
 80083f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80083f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083fc:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8008400:	b14a      	cbz	r2, 8008416 <memmove+0xea>
 8008402:	f10c 0c01 	add.w	ip, ip, #1
 8008406:	3b01      	subs	r3, #1
 8008408:	448c      	add	ip, r1
 800840a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800840e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008412:	4561      	cmp	r1, ip
 8008414:	d1f9      	bne.n	800840a <memmove+0xde>
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800841c:	4603      	mov	r3, r0
 800841e:	e79b      	b.n	8008358 <memmove+0x2c>
 8008420:	4622      	mov	r2, r4
 8008422:	e7eb      	b.n	80083fc <memmove+0xd0>

08008424 <memset>:
 8008424:	0783      	lsls	r3, r0, #30
 8008426:	b530      	push	{r4, r5, lr}
 8008428:	d048      	beq.n	80084bc <memset+0x98>
 800842a:	1e54      	subs	r4, r2, #1
 800842c:	2a00      	cmp	r2, #0
 800842e:	d03f      	beq.n	80084b0 <memset+0x8c>
 8008430:	b2ca      	uxtb	r2, r1
 8008432:	4603      	mov	r3, r0
 8008434:	e001      	b.n	800843a <memset+0x16>
 8008436:	3c01      	subs	r4, #1
 8008438:	d33a      	bcc.n	80084b0 <memset+0x8c>
 800843a:	f803 2b01 	strb.w	r2, [r3], #1
 800843e:	079d      	lsls	r5, r3, #30
 8008440:	d1f9      	bne.n	8008436 <memset+0x12>
 8008442:	2c03      	cmp	r4, #3
 8008444:	d92d      	bls.n	80084a2 <memset+0x7e>
 8008446:	b2cd      	uxtb	r5, r1
 8008448:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800844c:	2c0f      	cmp	r4, #15
 800844e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8008452:	d936      	bls.n	80084c2 <memset+0x9e>
 8008454:	f1a4 0210 	sub.w	r2, r4, #16
 8008458:	f022 0c0f 	bic.w	ip, r2, #15
 800845c:	f103 0e20 	add.w	lr, r3, #32
 8008460:	44e6      	add	lr, ip
 8008462:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8008466:	f103 0210 	add.w	r2, r3, #16
 800846a:	e942 5504 	strd	r5, r5, [r2, #-16]
 800846e:	e942 5502 	strd	r5, r5, [r2, #-8]
 8008472:	3210      	adds	r2, #16
 8008474:	4572      	cmp	r2, lr
 8008476:	d1f8      	bne.n	800846a <memset+0x46>
 8008478:	f10c 0201 	add.w	r2, ip, #1
 800847c:	f014 0f0c 	tst.w	r4, #12
 8008480:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8008484:	f004 0c0f 	and.w	ip, r4, #15
 8008488:	d013      	beq.n	80084b2 <memset+0x8e>
 800848a:	f1ac 0304 	sub.w	r3, ip, #4
 800848e:	f023 0303 	bic.w	r3, r3, #3
 8008492:	3304      	adds	r3, #4
 8008494:	4413      	add	r3, r2
 8008496:	f842 5b04 	str.w	r5, [r2], #4
 800849a:	4293      	cmp	r3, r2
 800849c:	d1fb      	bne.n	8008496 <memset+0x72>
 800849e:	f00c 0403 	and.w	r4, ip, #3
 80084a2:	b12c      	cbz	r4, 80084b0 <memset+0x8c>
 80084a4:	b2ca      	uxtb	r2, r1
 80084a6:	441c      	add	r4, r3
 80084a8:	f803 2b01 	strb.w	r2, [r3], #1
 80084ac:	429c      	cmp	r4, r3
 80084ae:	d1fb      	bne.n	80084a8 <memset+0x84>
 80084b0:	bd30      	pop	{r4, r5, pc}
 80084b2:	4664      	mov	r4, ip
 80084b4:	4613      	mov	r3, r2
 80084b6:	2c00      	cmp	r4, #0
 80084b8:	d1f4      	bne.n	80084a4 <memset+0x80>
 80084ba:	e7f9      	b.n	80084b0 <memset+0x8c>
 80084bc:	4603      	mov	r3, r0
 80084be:	4614      	mov	r4, r2
 80084c0:	e7bf      	b.n	8008442 <memset+0x1e>
 80084c2:	461a      	mov	r2, r3
 80084c4:	46a4      	mov	ip, r4
 80084c6:	e7e0      	b.n	800848a <memset+0x66>

080084c8 <_realloc_r>:
 80084c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084cc:	4617      	mov	r7, r2
 80084ce:	2900      	cmp	r1, #0
 80084d0:	f000 8098 	beq.w	8008604 <_realloc_r+0x13c>
 80084d4:	f107 050b 	add.w	r5, r7, #11
 80084d8:	4680      	mov	r8, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	f7fb f950 	bl	8003780 <__malloc_lock>
 80084e0:	2d16      	cmp	r5, #22
 80084e2:	d85d      	bhi.n	80085a0 <_realloc_r+0xd8>
 80084e4:	2510      	movs	r5, #16
 80084e6:	462a      	mov	r2, r5
 80084e8:	42af      	cmp	r7, r5
 80084ea:	d85e      	bhi.n	80085aa <_realloc_r+0xe2>
 80084ec:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80084f0:	f021 0603 	bic.w	r6, r1, #3
 80084f4:	4296      	cmp	r6, r2
 80084f6:	f1a4 0908 	sub.w	r9, r4, #8
 80084fa:	da62      	bge.n	80085c2 <_realloc_r+0xfa>
 80084fc:	4bbc      	ldr	r3, [pc, #752]	; (80087f0 <_realloc_r+0x328>)
 80084fe:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8008502:	eb09 0006 	add.w	r0, r9, r6
 8008506:	4584      	cmp	ip, r0
 8008508:	f000 8097 	beq.w	800863a <_realloc_r+0x172>
 800850c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8008510:	f02c 0301 	bic.w	r3, ip, #1
 8008514:	4403      	add	r3, r0
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	07db      	lsls	r3, r3, #31
 800851a:	d468      	bmi.n	80085ee <_realloc_r+0x126>
 800851c:	f02c 0c03 	bic.w	ip, ip, #3
 8008520:	eb06 030c 	add.w	r3, r6, ip
 8008524:	4293      	cmp	r3, r2
 8008526:	da47      	bge.n	80085b8 <_realloc_r+0xf0>
 8008528:	07cb      	lsls	r3, r1, #31
 800852a:	d410      	bmi.n	800854e <_realloc_r+0x86>
 800852c:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8008530:	eba9 0a03 	sub.w	sl, r9, r3
 8008534:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008538:	f023 0103 	bic.w	r1, r3, #3
 800853c:	448c      	add	ip, r1
 800853e:	44b4      	add	ip, r6
 8008540:	4594      	cmp	ip, r2
 8008542:	f280 8111 	bge.w	8008768 <_realloc_r+0x2a0>
 8008546:	1873      	adds	r3, r6, r1
 8008548:	4293      	cmp	r3, r2
 800854a:	f280 80e8 	bge.w	800871e <_realloc_r+0x256>
 800854e:	4639      	mov	r1, r7
 8008550:	4640      	mov	r0, r8
 8008552:	f7fa fe65 	bl	8003220 <_malloc_r>
 8008556:	4607      	mov	r7, r0
 8008558:	b1e0      	cbz	r0, 8008594 <_realloc_r+0xcc>
 800855a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	444b      	add	r3, r9
 8008564:	f1a0 0208 	sub.w	r2, r0, #8
 8008568:	4293      	cmp	r3, r2
 800856a:	f000 80d2 	beq.w	8008712 <_realloc_r+0x24a>
 800856e:	1f32      	subs	r2, r6, #4
 8008570:	2a24      	cmp	r2, #36	; 0x24
 8008572:	f200 80f5 	bhi.w	8008760 <_realloc_r+0x298>
 8008576:	2a13      	cmp	r2, #19
 8008578:	f200 80ac 	bhi.w	80086d4 <_realloc_r+0x20c>
 800857c:	4603      	mov	r3, r0
 800857e:	4622      	mov	r2, r4
 8008580:	6811      	ldr	r1, [r2, #0]
 8008582:	6019      	str	r1, [r3, #0]
 8008584:	6851      	ldr	r1, [r2, #4]
 8008586:	6059      	str	r1, [r3, #4]
 8008588:	6892      	ldr	r2, [r2, #8]
 800858a:	609a      	str	r2, [r3, #8]
 800858c:	4621      	mov	r1, r4
 800858e:	4640      	mov	r0, r8
 8008590:	f7fd ffa8 	bl	80064e4 <_free_r>
 8008594:	4640      	mov	r0, r8
 8008596:	f7fb f8f9 	bl	800378c <__malloc_unlock>
 800859a:	4638      	mov	r0, r7
 800859c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a0:	f025 0507 	bic.w	r5, r5, #7
 80085a4:	2d00      	cmp	r5, #0
 80085a6:	462a      	mov	r2, r5
 80085a8:	da9e      	bge.n	80084e8 <_realloc_r+0x20>
 80085aa:	230c      	movs	r3, #12
 80085ac:	f8c8 3000 	str.w	r3, [r8]
 80085b0:	2700      	movs	r7, #0
 80085b2:	4638      	mov	r0, r7
 80085b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	461e      	mov	r6, r3
 80085ba:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80085be:	60d3      	str	r3, [r2, #12]
 80085c0:	609a      	str	r2, [r3, #8]
 80085c2:	1b73      	subs	r3, r6, r5
 80085c4:	2b0f      	cmp	r3, #15
 80085c6:	d822      	bhi.n	800860e <_realloc_r+0x146>
 80085c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	4333      	orrs	r3, r6
 80085d2:	444e      	add	r6, r9
 80085d4:	f8c9 3004 	str.w	r3, [r9, #4]
 80085d8:	6873      	ldr	r3, [r6, #4]
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	6073      	str	r3, [r6, #4]
 80085e0:	4640      	mov	r0, r8
 80085e2:	4627      	mov	r7, r4
 80085e4:	f7fb f8d2 	bl	800378c <__malloc_unlock>
 80085e8:	4638      	mov	r0, r7
 80085ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ee:	07c9      	lsls	r1, r1, #31
 80085f0:	d4ad      	bmi.n	800854e <_realloc_r+0x86>
 80085f2:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80085f6:	eba9 0a03 	sub.w	sl, r9, r3
 80085fa:	f8da 1004 	ldr.w	r1, [sl, #4]
 80085fe:	f021 0103 	bic.w	r1, r1, #3
 8008602:	e7a0      	b.n	8008546 <_realloc_r+0x7e>
 8008604:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	4611      	mov	r1, r2
 800860a:	f7fa be09 	b.w	8003220 <_malloc_r>
 800860e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008612:	f001 0101 	and.w	r1, r1, #1
 8008616:	4329      	orrs	r1, r5
 8008618:	f8c9 1004 	str.w	r1, [r9, #4]
 800861c:	eb09 0105 	add.w	r1, r9, r5
 8008620:	444e      	add	r6, r9
 8008622:	f043 0301 	orr.w	r3, r3, #1
 8008626:	604b      	str	r3, [r1, #4]
 8008628:	6873      	ldr	r3, [r6, #4]
 800862a:	f043 0301 	orr.w	r3, r3, #1
 800862e:	3108      	adds	r1, #8
 8008630:	6073      	str	r3, [r6, #4]
 8008632:	4640      	mov	r0, r8
 8008634:	f7fd ff56 	bl	80064e4 <_free_r>
 8008638:	e7d2      	b.n	80085e0 <_realloc_r+0x118>
 800863a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800863e:	f020 0b03 	bic.w	fp, r0, #3
 8008642:	eb06 0c0b 	add.w	ip, r6, fp
 8008646:	f105 0010 	add.w	r0, r5, #16
 800864a:	4584      	cmp	ip, r0
 800864c:	da4d      	bge.n	80086ea <_realloc_r+0x222>
 800864e:	07c9      	lsls	r1, r1, #31
 8008650:	f53f af7d 	bmi.w	800854e <_realloc_r+0x86>
 8008654:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8008658:	eba9 0a01 	sub.w	sl, r9, r1
 800865c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008660:	f021 0103 	bic.w	r1, r1, #3
 8008664:	448b      	add	fp, r1
 8008666:	44b3      	add	fp, r6
 8008668:	4558      	cmp	r0, fp
 800866a:	f73f af6c 	bgt.w	8008546 <_realloc_r+0x7e>
 800866e:	4657      	mov	r7, sl
 8008670:	f8da 100c 	ldr.w	r1, [sl, #12]
 8008674:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8008678:	1f32      	subs	r2, r6, #4
 800867a:	2a24      	cmp	r2, #36	; 0x24
 800867c:	60c1      	str	r1, [r0, #12]
 800867e:	6088      	str	r0, [r1, #8]
 8008680:	f200 80db 	bhi.w	800883a <_realloc_r+0x372>
 8008684:	2a13      	cmp	r2, #19
 8008686:	f240 80d6 	bls.w	8008836 <_realloc_r+0x36e>
 800868a:	6821      	ldr	r1, [r4, #0]
 800868c:	f8ca 1008 	str.w	r1, [sl, #8]
 8008690:	6861      	ldr	r1, [r4, #4]
 8008692:	f8ca 100c 	str.w	r1, [sl, #12]
 8008696:	2a1b      	cmp	r2, #27
 8008698:	f200 80df 	bhi.w	800885a <_realloc_r+0x392>
 800869c:	3408      	adds	r4, #8
 800869e:	f10a 0210 	add.w	r2, sl, #16
 80086a2:	6821      	ldr	r1, [r4, #0]
 80086a4:	6011      	str	r1, [r2, #0]
 80086a6:	6861      	ldr	r1, [r4, #4]
 80086a8:	6051      	str	r1, [r2, #4]
 80086aa:	68a1      	ldr	r1, [r4, #8]
 80086ac:	6091      	str	r1, [r2, #8]
 80086ae:	eb0a 0105 	add.w	r1, sl, r5
 80086b2:	ebab 0205 	sub.w	r2, fp, r5
 80086b6:	f042 0201 	orr.w	r2, r2, #1
 80086ba:	6099      	str	r1, [r3, #8]
 80086bc:	604a      	str	r2, [r1, #4]
 80086be:	f8da 3004 	ldr.w	r3, [sl, #4]
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	431d      	orrs	r5, r3
 80086c8:	4640      	mov	r0, r8
 80086ca:	f8ca 5004 	str.w	r5, [sl, #4]
 80086ce:	f7fb f85d 	bl	800378c <__malloc_unlock>
 80086d2:	e76e      	b.n	80085b2 <_realloc_r+0xea>
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	6003      	str	r3, [r0, #0]
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	6043      	str	r3, [r0, #4]
 80086dc:	2a1b      	cmp	r2, #27
 80086de:	d868      	bhi.n	80087b2 <_realloc_r+0x2ea>
 80086e0:	f104 0208 	add.w	r2, r4, #8
 80086e4:	f100 0308 	add.w	r3, r0, #8
 80086e8:	e74a      	b.n	8008580 <_realloc_r+0xb8>
 80086ea:	eb09 0205 	add.w	r2, r9, r5
 80086ee:	609a      	str	r2, [r3, #8]
 80086f0:	ebac 0305 	sub.w	r3, ip, r5
 80086f4:	f043 0301 	orr.w	r3, r3, #1
 80086f8:	6053      	str	r3, [r2, #4]
 80086fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	431d      	orrs	r5, r3
 8008704:	4640      	mov	r0, r8
 8008706:	f844 5c04 	str.w	r5, [r4, #-4]
 800870a:	f7fb f83f 	bl	800378c <__malloc_unlock>
 800870e:	4627      	mov	r7, r4
 8008710:	e74f      	b.n	80085b2 <_realloc_r+0xea>
 8008712:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	441e      	add	r6, r3
 800871c:	e751      	b.n	80085c2 <_realloc_r+0xfa>
 800871e:	4657      	mov	r7, sl
 8008720:	f8da 100c 	ldr.w	r1, [sl, #12]
 8008724:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8008728:	1f32      	subs	r2, r6, #4
 800872a:	2a24      	cmp	r2, #36	; 0x24
 800872c:	60c1      	str	r1, [r0, #12]
 800872e:	6088      	str	r0, [r1, #8]
 8008730:	d84c      	bhi.n	80087cc <_realloc_r+0x304>
 8008732:	2a13      	cmp	r2, #19
 8008734:	d948      	bls.n	80087c8 <_realloc_r+0x300>
 8008736:	6821      	ldr	r1, [r4, #0]
 8008738:	f8ca 1008 	str.w	r1, [sl, #8]
 800873c:	6861      	ldr	r1, [r4, #4]
 800873e:	f8ca 100c 	str.w	r1, [sl, #12]
 8008742:	2a1b      	cmp	r2, #27
 8008744:	d856      	bhi.n	80087f4 <_realloc_r+0x32c>
 8008746:	3408      	adds	r4, #8
 8008748:	f10a 0210 	add.w	r2, sl, #16
 800874c:	461e      	mov	r6, r3
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	6863      	ldr	r3, [r4, #4]
 8008754:	6053      	str	r3, [r2, #4]
 8008756:	68a3      	ldr	r3, [r4, #8]
 8008758:	6093      	str	r3, [r2, #8]
 800875a:	46d1      	mov	r9, sl
 800875c:	463c      	mov	r4, r7
 800875e:	e730      	b.n	80085c2 <_realloc_r+0xfa>
 8008760:	4621      	mov	r1, r4
 8008762:	f7ff fde3 	bl	800832c <memmove>
 8008766:	e711      	b.n	800858c <_realloc_r+0xc4>
 8008768:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800876c:	4657      	mov	r7, sl
 800876e:	60cb      	str	r3, [r1, #12]
 8008770:	6099      	str	r1, [r3, #8]
 8008772:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8008776:	f8da 300c 	ldr.w	r3, [sl, #12]
 800877a:	60cb      	str	r3, [r1, #12]
 800877c:	1f32      	subs	r2, r6, #4
 800877e:	2a24      	cmp	r2, #36	; 0x24
 8008780:	6099      	str	r1, [r3, #8]
 8008782:	d82d      	bhi.n	80087e0 <_realloc_r+0x318>
 8008784:	2a13      	cmp	r2, #19
 8008786:	d929      	bls.n	80087dc <_realloc_r+0x314>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	f8ca 3008 	str.w	r3, [sl, #8]
 800878e:	6863      	ldr	r3, [r4, #4]
 8008790:	f8ca 300c 	str.w	r3, [sl, #12]
 8008794:	2a1b      	cmp	r2, #27
 8008796:	d842      	bhi.n	800881e <_realloc_r+0x356>
 8008798:	3408      	adds	r4, #8
 800879a:	f10a 0310 	add.w	r3, sl, #16
 800879e:	6822      	ldr	r2, [r4, #0]
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	6862      	ldr	r2, [r4, #4]
 80087a4:	605a      	str	r2, [r3, #4]
 80087a6:	68a2      	ldr	r2, [r4, #8]
 80087a8:	609a      	str	r2, [r3, #8]
 80087aa:	4666      	mov	r6, ip
 80087ac:	46d1      	mov	r9, sl
 80087ae:	463c      	mov	r4, r7
 80087b0:	e707      	b.n	80085c2 <_realloc_r+0xfa>
 80087b2:	68a3      	ldr	r3, [r4, #8]
 80087b4:	6083      	str	r3, [r0, #8]
 80087b6:	68e3      	ldr	r3, [r4, #12]
 80087b8:	60c3      	str	r3, [r0, #12]
 80087ba:	2a24      	cmp	r2, #36	; 0x24
 80087bc:	d026      	beq.n	800880c <_realloc_r+0x344>
 80087be:	f104 0210 	add.w	r2, r4, #16
 80087c2:	f100 0310 	add.w	r3, r0, #16
 80087c6:	e6db      	b.n	8008580 <_realloc_r+0xb8>
 80087c8:	463a      	mov	r2, r7
 80087ca:	e7bf      	b.n	800874c <_realloc_r+0x284>
 80087cc:	4621      	mov	r1, r4
 80087ce:	4638      	mov	r0, r7
 80087d0:	461e      	mov	r6, r3
 80087d2:	46d1      	mov	r9, sl
 80087d4:	f7ff fdaa 	bl	800832c <memmove>
 80087d8:	463c      	mov	r4, r7
 80087da:	e6f2      	b.n	80085c2 <_realloc_r+0xfa>
 80087dc:	463b      	mov	r3, r7
 80087de:	e7de      	b.n	800879e <_realloc_r+0x2d6>
 80087e0:	4621      	mov	r1, r4
 80087e2:	4638      	mov	r0, r7
 80087e4:	4666      	mov	r6, ip
 80087e6:	46d1      	mov	r9, sl
 80087e8:	f7ff fda0 	bl	800832c <memmove>
 80087ec:	463c      	mov	r4, r7
 80087ee:	e6e8      	b.n	80085c2 <_realloc_r+0xfa>
 80087f0:	20000508 	.word	0x20000508
 80087f4:	68a1      	ldr	r1, [r4, #8]
 80087f6:	f8ca 1010 	str.w	r1, [sl, #16]
 80087fa:	68e1      	ldr	r1, [r4, #12]
 80087fc:	f8ca 1014 	str.w	r1, [sl, #20]
 8008800:	2a24      	cmp	r2, #36	; 0x24
 8008802:	d020      	beq.n	8008846 <_realloc_r+0x37e>
 8008804:	3410      	adds	r4, #16
 8008806:	f10a 0218 	add.w	r2, sl, #24
 800880a:	e79f      	b.n	800874c <_realloc_r+0x284>
 800880c:	6923      	ldr	r3, [r4, #16]
 800880e:	6103      	str	r3, [r0, #16]
 8008810:	6961      	ldr	r1, [r4, #20]
 8008812:	6141      	str	r1, [r0, #20]
 8008814:	f104 0218 	add.w	r2, r4, #24
 8008818:	f100 0318 	add.w	r3, r0, #24
 800881c:	e6b0      	b.n	8008580 <_realloc_r+0xb8>
 800881e:	68a3      	ldr	r3, [r4, #8]
 8008820:	f8ca 3010 	str.w	r3, [sl, #16]
 8008824:	68e3      	ldr	r3, [r4, #12]
 8008826:	f8ca 3014 	str.w	r3, [sl, #20]
 800882a:	2a24      	cmp	r2, #36	; 0x24
 800882c:	d021      	beq.n	8008872 <_realloc_r+0x3aa>
 800882e:	3410      	adds	r4, #16
 8008830:	f10a 0318 	add.w	r3, sl, #24
 8008834:	e7b3      	b.n	800879e <_realloc_r+0x2d6>
 8008836:	463a      	mov	r2, r7
 8008838:	e733      	b.n	80086a2 <_realloc_r+0x1da>
 800883a:	4621      	mov	r1, r4
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff fd75 	bl	800832c <memmove>
 8008842:	4b16      	ldr	r3, [pc, #88]	; (800889c <_realloc_r+0x3d4>)
 8008844:	e733      	b.n	80086ae <_realloc_r+0x1e6>
 8008846:	6922      	ldr	r2, [r4, #16]
 8008848:	f8ca 2018 	str.w	r2, [sl, #24]
 800884c:	6962      	ldr	r2, [r4, #20]
 800884e:	f8ca 201c 	str.w	r2, [sl, #28]
 8008852:	3418      	adds	r4, #24
 8008854:	f10a 0220 	add.w	r2, sl, #32
 8008858:	e778      	b.n	800874c <_realloc_r+0x284>
 800885a:	68a1      	ldr	r1, [r4, #8]
 800885c:	f8ca 1010 	str.w	r1, [sl, #16]
 8008860:	68e1      	ldr	r1, [r4, #12]
 8008862:	f8ca 1014 	str.w	r1, [sl, #20]
 8008866:	2a24      	cmp	r2, #36	; 0x24
 8008868:	d00d      	beq.n	8008886 <_realloc_r+0x3be>
 800886a:	3410      	adds	r4, #16
 800886c:	f10a 0218 	add.w	r2, sl, #24
 8008870:	e717      	b.n	80086a2 <_realloc_r+0x1da>
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	f8ca 3018 	str.w	r3, [sl, #24]
 8008878:	6963      	ldr	r3, [r4, #20]
 800887a:	f8ca 301c 	str.w	r3, [sl, #28]
 800887e:	3418      	adds	r4, #24
 8008880:	f10a 0320 	add.w	r3, sl, #32
 8008884:	e78b      	b.n	800879e <_realloc_r+0x2d6>
 8008886:	6922      	ldr	r2, [r4, #16]
 8008888:	f8ca 2018 	str.w	r2, [sl, #24]
 800888c:	6962      	ldr	r2, [r4, #20]
 800888e:	f8ca 201c 	str.w	r2, [sl, #28]
 8008892:	3418      	adds	r4, #24
 8008894:	f10a 0220 	add.w	r2, sl, #32
 8008898:	e703      	b.n	80086a2 <_realloc_r+0x1da>
 800889a:	bf00      	nop
 800889c:	20000508 	.word	0x20000508
 80088a0:	eba2 0003 	sub.w	r0, r2, r3
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop

080088a8 <strcmp>:
 80088a8:	7802      	ldrb	r2, [r0, #0]
 80088aa:	780b      	ldrb	r3, [r1, #0]
 80088ac:	2a01      	cmp	r2, #1
 80088ae:	bf28      	it	cs
 80088b0:	429a      	cmpcs	r2, r3
 80088b2:	d1f5      	bne.n	80088a0 <_realloc_r+0x3d8>
 80088b4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 80088b8:	ea40 0401 	orr.w	r4, r0, r1
 80088bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80088c0:	f06f 0c00 	mvn.w	ip, #0
 80088c4:	ea4f 7244 	mov.w	r2, r4, lsl #29
 80088c8:	b312      	cbz	r2, 8008910 <strcmp+0x68>
 80088ca:	ea80 0401 	eor.w	r4, r0, r1
 80088ce:	f014 0f07 	tst.w	r4, #7
 80088d2:	d16a      	bne.n	80089aa <strcmp+0x102>
 80088d4:	f000 0407 	and.w	r4, r0, #7
 80088d8:	f020 0007 	bic.w	r0, r0, #7
 80088dc:	f004 0503 	and.w	r5, r4, #3
 80088e0:	f021 0107 	bic.w	r1, r1, #7
 80088e4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80088e8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 80088ec:	f014 0f04 	tst.w	r4, #4
 80088f0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 80088f4:	fa0c f405 	lsl.w	r4, ip, r5
 80088f8:	ea62 0204 	orn	r2, r2, r4
 80088fc:	ea66 0604 	orn	r6, r6, r4
 8008900:	d00a      	beq.n	8008918 <strcmp+0x70>
 8008902:	ea63 0304 	orn	r3, r3, r4
 8008906:	4662      	mov	r2, ip
 8008908:	ea67 0704 	orn	r7, r7, r4
 800890c:	4666      	mov	r6, ip
 800890e:	e003      	b.n	8008918 <strcmp+0x70>
 8008910:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8008914:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8008918:	fa82 f54c 	uadd8	r5, r2, ip
 800891c:	ea82 0406 	eor.w	r4, r2, r6
 8008920:	faa4 f48c 	sel	r4, r4, ip
 8008924:	bb6c      	cbnz	r4, 8008982 <strcmp+0xda>
 8008926:	fa83 f54c 	uadd8	r5, r3, ip
 800892a:	ea83 0507 	eor.w	r5, r3, r7
 800892e:	faa5 f58c 	sel	r5, r5, ip
 8008932:	b995      	cbnz	r5, 800895a <strcmp+0xb2>
 8008934:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8008938:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 800893c:	fa82 f54c 	uadd8	r5, r2, ip
 8008940:	ea82 0406 	eor.w	r4, r2, r6
 8008944:	faa4 f48c 	sel	r4, r4, ip
 8008948:	fa83 f54c 	uadd8	r5, r3, ip
 800894c:	ea83 0507 	eor.w	r5, r3, r7
 8008950:	faa5 f58c 	sel	r5, r5, ip
 8008954:	4325      	orrs	r5, r4
 8008956:	d0db      	beq.n	8008910 <strcmp+0x68>
 8008958:	b99c      	cbnz	r4, 8008982 <strcmp+0xda>
 800895a:	ba2d      	rev	r5, r5
 800895c:	fab5 f485 	clz	r4, r5
 8008960:	f024 0407 	bic.w	r4, r4, #7
 8008964:	fa27 f104 	lsr.w	r1, r7, r4
 8008968:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800896c:	fa23 f304 	lsr.w	r3, r3, r4
 8008970:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8008974:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008978:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 800897c:	eba0 0001 	sub.w	r0, r0, r1
 8008980:	4770      	bx	lr
 8008982:	ba24      	rev	r4, r4
 8008984:	fab4 f484 	clz	r4, r4
 8008988:	f024 0407 	bic.w	r4, r4, #7
 800898c:	fa26 f104 	lsr.w	r1, r6, r4
 8008990:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008994:	fa22 f204 	lsr.w	r2, r2, r4
 8008998:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 800899c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80089a0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 80089a4:	eba0 0001 	sub.w	r0, r0, r1
 80089a8:	4770      	bx	lr
 80089aa:	f014 0f03 	tst.w	r4, #3
 80089ae:	d13c      	bne.n	8008a2a <strcmp+0x182>
 80089b0:	f010 0403 	ands.w	r4, r0, #3
 80089b4:	d128      	bne.n	8008a08 <strcmp+0x160>
 80089b6:	f850 2b08 	ldr.w	r2, [r0], #8
 80089ba:	f851 3b08 	ldr.w	r3, [r1], #8
 80089be:	fa82 f54c 	uadd8	r5, r2, ip
 80089c2:	ea82 0503 	eor.w	r5, r2, r3
 80089c6:	faa5 f58c 	sel	r5, r5, ip
 80089ca:	b95d      	cbnz	r5, 80089e4 <strcmp+0x13c>
 80089cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80089d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089d4:	fa82 f54c 	uadd8	r5, r2, ip
 80089d8:	ea82 0503 	eor.w	r5, r2, r3
 80089dc:	faa5 f58c 	sel	r5, r5, ip
 80089e0:	2d00      	cmp	r5, #0
 80089e2:	d0e8      	beq.n	80089b6 <strcmp+0x10e>
 80089e4:	ba2d      	rev	r5, r5
 80089e6:	fab5 f485 	clz	r4, r5
 80089ea:	f024 0407 	bic.w	r4, r4, #7
 80089ee:	fa23 f104 	lsr.w	r1, r3, r4
 80089f2:	fa22 f204 	lsr.w	r2, r2, r4
 80089f6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 80089fa:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80089fe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008a02:	eba0 0001 	sub.w	r0, r0, r1
 8008a06:	4770      	bx	lr
 8008a08:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8008a0c:	f020 0003 	bic.w	r0, r0, #3
 8008a10:	f850 2b08 	ldr.w	r2, [r0], #8
 8008a14:	f021 0103 	bic.w	r1, r1, #3
 8008a18:	f851 3b08 	ldr.w	r3, [r1], #8
 8008a1c:	fa0c f404 	lsl.w	r4, ip, r4
 8008a20:	ea62 0204 	orn	r2, r2, r4
 8008a24:	ea63 0304 	orn	r3, r3, r4
 8008a28:	e7c9      	b.n	80089be <strcmp+0x116>
 8008a2a:	f010 0403 	ands.w	r4, r0, #3
 8008a2e:	d01a      	beq.n	8008a66 <strcmp+0x1be>
 8008a30:	eba1 0104 	sub.w	r1, r1, r4
 8008a34:	f020 0003 	bic.w	r0, r0, #3
 8008a38:	07e4      	lsls	r4, r4, #31
 8008a3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a3e:	d006      	beq.n	8008a4e <strcmp+0x1a6>
 8008a40:	d20f      	bcs.n	8008a62 <strcmp+0x1ba>
 8008a42:	788b      	ldrb	r3, [r1, #2]
 8008a44:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8008a48:	1ae4      	subs	r4, r4, r3
 8008a4a:	d106      	bne.n	8008a5a <strcmp+0x1b2>
 8008a4c:	b12b      	cbz	r3, 8008a5a <strcmp+0x1b2>
 8008a4e:	78cb      	ldrb	r3, [r1, #3]
 8008a50:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8008a54:	1ae4      	subs	r4, r4, r3
 8008a56:	d100      	bne.n	8008a5a <strcmp+0x1b2>
 8008a58:	b91b      	cbnz	r3, 8008a62 <strcmp+0x1ba>
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8008a60:	4770      	bx	lr
 8008a62:	f101 0104 	add.w	r1, r1, #4
 8008a66:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a6a:	07cc      	lsls	r4, r1, #31
 8008a6c:	f021 0103 	bic.w	r1, r1, #3
 8008a70:	f851 3b04 	ldr.w	r3, [r1], #4
 8008a74:	d848      	bhi.n	8008b08 <strcmp+0x260>
 8008a76:	d224      	bcs.n	8008ac2 <strcmp+0x21a>
 8008a78:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8008a7c:	fa82 f54c 	uadd8	r5, r2, ip
 8008a80:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8008a84:	faa5 f58c 	sel	r5, r5, ip
 8008a88:	d10a      	bne.n	8008aa0 <strcmp+0x1f8>
 8008a8a:	b965      	cbnz	r5, 8008aa6 <strcmp+0x1fe>
 8008a8c:	f851 3b04 	ldr.w	r3, [r1], #4
 8008a90:	ea84 0402 	eor.w	r4, r4, r2
 8008a94:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8008a98:	d10e      	bne.n	8008ab8 <strcmp+0x210>
 8008a9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a9e:	e7eb      	b.n	8008a78 <strcmp+0x1d0>
 8008aa0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8008aa4:	e055      	b.n	8008b52 <strcmp+0x2aa>
 8008aa6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8008aaa:	d14d      	bne.n	8008b48 <strcmp+0x2a0>
 8008aac:	7808      	ldrb	r0, [r1, #0]
 8008aae:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008ab2:	f1c0 0000 	rsb	r0, r0, #0
 8008ab6:	4770      	bx	lr
 8008ab8:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008abc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8008ac0:	e047      	b.n	8008b52 <strcmp+0x2aa>
 8008ac2:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8008ac6:	fa82 f54c 	uadd8	r5, r2, ip
 8008aca:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8008ace:	faa5 f58c 	sel	r5, r5, ip
 8008ad2:	d10a      	bne.n	8008aea <strcmp+0x242>
 8008ad4:	b965      	cbnz	r5, 8008af0 <strcmp+0x248>
 8008ad6:	f851 3b04 	ldr.w	r3, [r1], #4
 8008ada:	ea84 0402 	eor.w	r4, r4, r2
 8008ade:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8008ae2:	d10c      	bne.n	8008afe <strcmp+0x256>
 8008ae4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ae8:	e7eb      	b.n	8008ac2 <strcmp+0x21a>
 8008aea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008aee:	e030      	b.n	8008b52 <strcmp+0x2aa>
 8008af0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8008af4:	d128      	bne.n	8008b48 <strcmp+0x2a0>
 8008af6:	880b      	ldrh	r3, [r1, #0]
 8008af8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008afc:	e029      	b.n	8008b52 <strcmp+0x2aa>
 8008afe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008b02:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8008b06:	e024      	b.n	8008b52 <strcmp+0x2aa>
 8008b08:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8008b0c:	fa82 f54c 	uadd8	r5, r2, ip
 8008b10:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8008b14:	faa5 f58c 	sel	r5, r5, ip
 8008b18:	d10a      	bne.n	8008b30 <strcmp+0x288>
 8008b1a:	b965      	cbnz	r5, 8008b36 <strcmp+0x28e>
 8008b1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b20:	ea84 0402 	eor.w	r4, r4, r2
 8008b24:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8008b28:	d109      	bne.n	8008b3e <strcmp+0x296>
 8008b2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b2e:	e7eb      	b.n	8008b08 <strcmp+0x260>
 8008b30:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8008b34:	e00d      	b.n	8008b52 <strcmp+0x2aa>
 8008b36:	f015 0fff 	tst.w	r5, #255	; 0xff
 8008b3a:	d105      	bne.n	8008b48 <strcmp+0x2a0>
 8008b3c:	680b      	ldr	r3, [r1, #0]
 8008b3e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8008b42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b46:	e004      	b.n	8008b52 <strcmp+0x2aa>
 8008b48:	f04f 0000 	mov.w	r0, #0
 8008b4c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008b50:	4770      	bx	lr
 8008b52:	ba12      	rev	r2, r2
 8008b54:	ba1b      	rev	r3, r3
 8008b56:	fa82 f44c 	uadd8	r4, r2, ip
 8008b5a:	ea82 0403 	eor.w	r4, r2, r3
 8008b5e:	faa4 f58c 	sel	r5, r4, ip
 8008b62:	fab5 f485 	clz	r4, r5
 8008b66:	fa02 f204 	lsl.w	r2, r2, r4
 8008b6a:	fa03 f304 	lsl.w	r3, r3, r4
 8008b6e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8008b72:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8008b76:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8008b7a:	4770      	bx	lr

08008b7c <__sprint_r.part.0>:
 8008b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008b82:	049c      	lsls	r4, r3, #18
 8008b84:	4690      	mov	r8, r2
 8008b86:	d52d      	bpl.n	8008be4 <__sprint_r.part.0+0x68>
 8008b88:	6893      	ldr	r3, [r2, #8]
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	b343      	cbz	r3, 8008be0 <__sprint_r.part.0+0x64>
 8008b8e:	468b      	mov	fp, r1
 8008b90:	4606      	mov	r6, r0
 8008b92:	f102 0908 	add.w	r9, r2, #8
 8008b96:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 8008b9a:	ea5f 079a 	movs.w	r7, sl, lsr #2
 8008b9e:	d015      	beq.n	8008bcc <__sprint_r.part.0+0x50>
 8008ba0:	3d04      	subs	r5, #4
 8008ba2:	2400      	movs	r4, #0
 8008ba4:	e001      	b.n	8008baa <__sprint_r.part.0+0x2e>
 8008ba6:	42a7      	cmp	r7, r4
 8008ba8:	d00e      	beq.n	8008bc8 <__sprint_r.part.0+0x4c>
 8008baa:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8008bae:	465a      	mov	r2, fp
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f001 fa85 	bl	800a0c0 <_fputwc_r>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	f104 0401 	add.w	r4, r4, #1
 8008bbc:	d1f3      	bne.n	8008ba6 <__sprint_r.part.0+0x2a>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e9c8 3301 	strd	r3, r3, [r8, #4]
 8008bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bcc:	f02a 0a03 	bic.w	sl, sl, #3
 8008bd0:	eba3 030a 	sub.w	r3, r3, sl
 8008bd4:	f8c8 3008 	str.w	r3, [r8, #8]
 8008bd8:	f109 0908 	add.w	r9, r9, #8
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1da      	bne.n	8008b96 <__sprint_r.part.0+0x1a>
 8008be0:	2000      	movs	r0, #0
 8008be2:	e7ec      	b.n	8008bbe <__sprint_r.part.0+0x42>
 8008be4:	f001 fada 	bl	800a19c <__sfvwrite_r>
 8008be8:	2300      	movs	r3, #0
 8008bea:	e9c8 3301 	strd	r3, r3, [r8, #4]
 8008bee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf2:	bf00      	nop

08008bf4 <__sprint_r>:
 8008bf4:	b410      	push	{r4}
 8008bf6:	6894      	ldr	r4, [r2, #8]
 8008bf8:	b114      	cbz	r4, 8008c00 <__sprint_r+0xc>
 8008bfa:	bc10      	pop	{r4}
 8008bfc:	f7ff bfbe 	b.w	8008b7c <__sprint_r.part.0>
 8008c00:	4620      	mov	r0, r4
 8008c02:	6054      	str	r4, [r2, #4]
 8008c04:	bc10      	pop	{r4}
 8008c06:	4770      	bx	lr

08008c08 <_vfiprintf_r>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	b0bd      	sub	sp, #244	; 0xf4
 8008c0e:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8008c12:	461c      	mov	r4, r3
 8008c14:	9101      	str	r1, [sp, #4]
 8008c16:	4617      	mov	r7, r2
 8008c18:	b118      	cbz	r0, 8008c22 <_vfiprintf_r+0x1a>
 8008c1a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f000 8286 	beq.w	800912e <_vfiprintf_r+0x526>
 8008c22:	9a01      	ldr	r2, [sp, #4]
 8008c24:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008c26:	07de      	lsls	r6, r3, #31
 8008c28:	f140 818f 	bpl.w	8008f4a <_vfiprintf_r+0x342>
 8008c2c:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8008c30:	b28a      	uxth	r2, r1
 8008c32:	0490      	lsls	r0, r2, #18
 8008c34:	d408      	bmi.n	8008c48 <_vfiprintf_r+0x40>
 8008c36:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8008c3a:	9901      	ldr	r1, [sp, #4]
 8008c3c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008c3e:	818a      	strh	r2, [r1, #12]
 8008c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c44:	b292      	uxth	r2, r2
 8008c46:	664b      	str	r3, [r1, #100]	; 0x64
 8008c48:	0711      	lsls	r1, r2, #28
 8008c4a:	f140 80f7 	bpl.w	8008e3c <_vfiprintf_r+0x234>
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 80f2 	beq.w	8008e3c <_vfiprintf_r+0x234>
 8008c58:	f002 031a 	and.w	r3, r2, #26
 8008c5c:	2b0a      	cmp	r3, #10
 8008c5e:	f000 80fb 	beq.w	8008e58 <_vfiprintf_r+0x250>
 8008c62:	ab13      	add	r3, sp, #76	; 0x4c
 8008c64:	9310      	str	r3, [sp, #64]	; 0x40
 8008c66:	2300      	movs	r3, #0
 8008c68:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8008c6c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8008c70:	9308      	str	r3, [sp, #32]
 8008c72:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8008c76:	9309      	str	r3, [sp, #36]	; 0x24
 8008c78:	9303      	str	r3, [sp, #12]
 8008c7a:	783b      	ldrb	r3, [r7, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 8151 	beq.w	8008f24 <_vfiprintf_r+0x31c>
 8008c82:	463c      	mov	r4, r7
 8008c84:	e004      	b.n	8008c90 <_vfiprintf_r+0x88>
 8008c86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f000 812c 	beq.w	8008ee8 <_vfiprintf_r+0x2e0>
 8008c90:	2b25      	cmp	r3, #37	; 0x25
 8008c92:	d1f8      	bne.n	8008c86 <_vfiprintf_r+0x7e>
 8008c94:	1be5      	subs	r5, r4, r7
 8008c96:	f040 8129 	bne.w	8008eec <_vfiprintf_r+0x2e4>
 8008c9a:	7823      	ldrb	r3, [r4, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 8141 	beq.w	8008f24 <_vfiprintf_r+0x31c>
 8008ca2:	f04f 0300 	mov.w	r3, #0
 8008ca6:	2500      	movs	r5, #0
 8008ca8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8008cac:	1c67      	adds	r7, r4, #1
 8008cae:	7863      	ldrb	r3, [r4, #1]
 8008cb0:	9502      	str	r5, [sp, #8]
 8008cb2:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008cb6:	242b      	movs	r4, #43	; 0x2b
 8008cb8:	3701      	adds	r7, #1
 8008cba:	f1a3 0220 	sub.w	r2, r3, #32
 8008cbe:	2a5a      	cmp	r2, #90	; 0x5a
 8008cc0:	f200 8152 	bhi.w	8008f68 <_vfiprintf_r+0x360>
 8008cc4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008cc8:	01500298 	.word	0x01500298
 8008ccc:	02940150 	.word	0x02940150
 8008cd0:	01500150 	.word	0x01500150
 8008cd4:	006a0150 	.word	0x006a0150
 8008cd8:	01500150 	.word	0x01500150
 8008cdc:	026b0236 	.word	0x026b0236
 8008ce0:	02410150 	.word	0x02410150
 8008ce4:	015002a6 	.word	0x015002a6
 8008ce8:	005b02a2 	.word	0x005b02a2
 8008cec:	005b005b 	.word	0x005b005b
 8008cf0:	005b005b 	.word	0x005b005b
 8008cf4:	005b005b 	.word	0x005b005b
 8008cf8:	005b005b 	.word	0x005b005b
 8008cfc:	01500150 	.word	0x01500150
 8008d00:	01500150 	.word	0x01500150
 8008d04:	01500150 	.word	0x01500150
 8008d08:	01500150 	.word	0x01500150
 8008d0c:	02230150 	.word	0x02230150
 8008d10:	01500084 	.word	0x01500084
 8008d14:	01500150 	.word	0x01500150
 8008d18:	01500150 	.word	0x01500150
 8008d1c:	01500150 	.word	0x01500150
 8008d20:	01500150 	.word	0x01500150
 8008d24:	00dd0150 	.word	0x00dd0150
 8008d28:	01500150 	.word	0x01500150
 8008d2c:	02070150 	.word	0x02070150
 8008d30:	02590150 	.word	0x02590150
 8008d34:	01500150 	.word	0x01500150
 8008d38:	0150051e 	.word	0x0150051e
 8008d3c:	01500150 	.word	0x01500150
 8008d40:	01500150 	.word	0x01500150
 8008d44:	01500150 	.word	0x01500150
 8008d48:	01500150 	.word	0x01500150
 8008d4c:	02230150 	.word	0x02230150
 8008d50:	01500086 	.word	0x01500086
 8008d54:	01500150 	.word	0x01500150
 8008d58:	0086024f 	.word	0x0086024f
 8008d5c:	01500080 	.word	0x01500080
 8008d60:	01500245 	.word	0x01500245
 8008d64:	00df0281 	.word	0x00df0281
 8008d68:	0080026f 	.word	0x0080026f
 8008d6c:	02070150 	.word	0x02070150
 8008d70:	053e007e 	.word	0x053e007e
 8008d74:	01500150 	.word	0x01500150
 8008d78:	01500540 	.word	0x01500540
 8008d7c:	007e      	.short	0x007e
 8008d7e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008d82:	2100      	movs	r1, #0
 8008d84:	f817 3b01 	ldrb.w	r3, [r7], #1
 8008d88:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8008d8c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008d90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008d94:	2a09      	cmp	r2, #9
 8008d96:	d9f5      	bls.n	8008d84 <_vfiprintf_r+0x17c>
 8008d98:	9102      	str	r1, [sp, #8]
 8008d9a:	e78e      	b.n	8008cba <_vfiprintf_r+0xb2>
 8008d9c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008da0:	4640      	mov	r0, r8
 8008da2:	f7fd fca7 	bl	80066f4 <_localeconv_r>
 8008da6:	6843      	ldr	r3, [r0, #4]
 8008da8:	930a      	str	r3, [sp, #40]	; 0x28
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fa fdc8 	bl	8003940 <strlen>
 8008db0:	900b      	str	r0, [sp, #44]	; 0x2c
 8008db2:	4606      	mov	r6, r0
 8008db4:	4640      	mov	r0, r8
 8008db6:	f7fd fc9d 	bl	80066f4 <_localeconv_r>
 8008dba:	6883      	ldr	r3, [r0, #8]
 8008dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	f040 847b 	bne.w	80096ba <_vfiprintf_r+0xab2>
 8008dc4:	783b      	ldrb	r3, [r7, #0]
 8008dc6:	e777      	b.n	8008cb8 <_vfiprintf_r+0xb0>
 8008dc8:	783b      	ldrb	r3, [r7, #0]
 8008dca:	f045 0520 	orr.w	r5, r5, #32
 8008dce:	e773      	b.n	8008cb8 <_vfiprintf_r+0xb0>
 8008dd0:	f045 0510 	orr.w	r5, r5, #16
 8008dd4:	06ac      	lsls	r4, r5, #26
 8008dd6:	9e04      	ldr	r6, [sp, #16]
 8008dd8:	f140 816f 	bpl.w	80090ba <_vfiprintf_r+0x4b2>
 8008ddc:	3607      	adds	r6, #7
 8008dde:	f026 0607 	bic.w	r6, r6, #7
 8008de2:	4632      	mov	r2, r6
 8008de4:	6873      	ldr	r3, [r6, #4]
 8008de6:	f852 6b08 	ldr.w	r6, [r2], #8
 8008dea:	9204      	str	r2, [sp, #16]
 8008dec:	4698      	mov	r8, r3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f2c0 842d 	blt.w	800964e <_vfiprintf_r+0xa46>
 8008df4:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8008df8:	f000 8510 	beq.w	800981c <_vfiprintf_r+0xc14>
 8008dfc:	ea56 0308 	orrs.w	r3, r6, r8
 8008e00:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
 8008e04:	f000 8408 	beq.w	8009618 <_vfiprintf_r+0xa10>
 8008e08:	2e0a      	cmp	r6, #10
 8008e0a:	f178 0300 	sbcs.w	r3, r8, #0
 8008e0e:	f080 84bd 	bcs.w	800978c <_vfiprintf_r+0xb84>
 8008e12:	3630      	adds	r6, #48	; 0x30
 8008e14:	2301      	movs	r3, #1
 8008e16:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
 8008e1a:	4655      	mov	r5, sl
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
 8008e22:	f8dd 8000 	ldr.w	r8, [sp]
 8008e26:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 8008e2a:	45d8      	cmp	r8, fp
 8008e2c:	bfb8      	it	lt
 8008e2e:	46d8      	movlt	r8, fp
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 80a8 	beq.w	8008f86 <_vfiprintf_r+0x37e>
 8008e36:	f108 0801 	add.w	r8, r8, #1
 8008e3a:	e0a4      	b.n	8008f86 <_vfiprintf_r+0x37e>
 8008e3c:	9d01      	ldr	r5, [sp, #4]
 8008e3e:	9805      	ldr	r0, [sp, #20]
 8008e40:	4629      	mov	r1, r5
 8008e42:	f000 fe15 	bl	8009a70 <__swsetup_r>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f040 8588 	bne.w	800995c <_vfiprintf_r+0xd54>
 8008e4c:	89aa      	ldrh	r2, [r5, #12]
 8008e4e:	f002 031a 	and.w	r3, r2, #26
 8008e52:	2b0a      	cmp	r3, #10
 8008e54:	f47f af05 	bne.w	8008c62 <_vfiprintf_r+0x5a>
 8008e58:	9901      	ldr	r1, [sp, #4]
 8008e5a:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f6ff aeff 	blt.w	8008c62 <_vfiprintf_r+0x5a>
 8008e64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008e66:	07de      	lsls	r6, r3, #31
 8008e68:	d402      	bmi.n	8008e70 <_vfiprintf_r+0x268>
 8008e6a:	0595      	lsls	r5, r2, #22
 8008e6c:	f140 8556 	bpl.w	800991c <_vfiprintf_r+0xd14>
 8008e70:	9901      	ldr	r1, [sp, #4]
 8008e72:	9805      	ldr	r0, [sp, #20]
 8008e74:	4623      	mov	r3, r4
 8008e76:	463a      	mov	r2, r7
 8008e78:	b03d      	add	sp, #244	; 0xf4
 8008e7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7e:	f000 bd9f 	b.w	80099c0 <__sbprintf>
 8008e82:	f045 0510 	orr.w	r5, r5, #16
 8008e86:	f015 0820 	ands.w	r8, r5, #32
 8008e8a:	f000 8107 	beq.w	800909c <_vfiprintf_r+0x494>
 8008e8e:	9e04      	ldr	r6, [sp, #16]
 8008e90:	3607      	adds	r6, #7
 8008e92:	f026 0607 	bic.w	r6, r6, #7
 8008e96:	4633      	mov	r3, r6
 8008e98:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8008e9c:	f853 6b08 	ldr.w	r6, [r3], #8
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f04f 0200 	mov.w	r2, #0
 8008eac:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
 8008eb0:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8008eb4:	f000 81c8 	beq.w	8009248 <_vfiprintf_r+0x640>
 8008eb8:	ea56 0208 	orrs.w	r2, r6, r8
 8008ebc:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
 8008ec0:	f040 81c1 	bne.w	8009246 <_vfiprintf_r+0x63e>
 8008ec4:	f1bb 0f00 	cmp.w	fp, #0
 8008ec8:	f040 84ab 	bne.w	8009822 <_vfiprintf_r+0xc1a>
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f040 83a8 	bne.w	8009622 <_vfiprintf_r+0xa1a>
 8008ed2:	f01a 0301 	ands.w	r3, sl, #1
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	f000 83d6 	beq.w	8009688 <_vfiprintf_r+0xa80>
 8008edc:	2330      	movs	r3, #48	; 0x30
 8008ede:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
 8008ee2:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
 8008ee6:	e79c      	b.n	8008e22 <_vfiprintf_r+0x21a>
 8008ee8:	1be5      	subs	r5, r4, r7
 8008eea:	d01b      	beq.n	8008f24 <_vfiprintf_r+0x31c>
 8008eec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	442a      	add	r2, r5
 8008ef4:	2b07      	cmp	r3, #7
 8008ef6:	e9c9 7500 	strd	r7, r5, [r9]
 8008efa:	9212      	str	r2, [sp, #72]	; 0x48
 8008efc:	9311      	str	r3, [sp, #68]	; 0x44
 8008efe:	dc05      	bgt.n	8008f0c <_vfiprintf_r+0x304>
 8008f00:	f109 0908 	add.w	r9, r9, #8
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	442b      	add	r3, r5
 8008f08:	9303      	str	r3, [sp, #12]
 8008f0a:	e6c6      	b.n	8008c9a <_vfiprintf_r+0x92>
 8008f0c:	2a00      	cmp	r2, #0
 8008f0e:	f000 837f 	beq.w	8009610 <_vfiprintf_r+0xa08>
 8008f12:	9901      	ldr	r1, [sp, #4]
 8008f14:	9805      	ldr	r0, [sp, #20]
 8008f16:	aa10      	add	r2, sp, #64	; 0x40
 8008f18:	f7ff fe30 	bl	8008b7c <__sprint_r.part.0>
 8008f1c:	b940      	cbnz	r0, 8008f30 <_vfiprintf_r+0x328>
 8008f1e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8008f22:	e7ef      	b.n	8008f04 <_vfiprintf_r+0x2fc>
 8008f24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f040 8509 	bne.w	800993e <_vfiprintf_r+0xd36>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9311      	str	r3, [sp, #68]	; 0x44
 8008f30:	9a01      	ldr	r2, [sp, #4]
 8008f32:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008f34:	07d9      	lsls	r1, r3, #31
 8008f36:	f140 80a6 	bpl.w	8009086 <_vfiprintf_r+0x47e>
 8008f3a:	8993      	ldrh	r3, [r2, #12]
 8008f3c:	065b      	lsls	r3, r3, #25
 8008f3e:	f100 8519 	bmi.w	8009974 <_vfiprintf_r+0xd6c>
 8008f42:	9803      	ldr	r0, [sp, #12]
 8008f44:	b03d      	add	sp, #244	; 0xf4
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	9b01      	ldr	r3, [sp, #4]
 8008f4c:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8008f50:	058d      	lsls	r5, r1, #22
 8008f52:	b28a      	uxth	r2, r1
 8008f54:	f53f ae6d 	bmi.w	8008c32 <_vfiprintf_r+0x2a>
 8008f58:	461d      	mov	r5, r3
 8008f5a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008f5c:	f7fd fbdc 	bl	8006718 <__retarget_lock_acquire_recursive>
 8008f60:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 8008f64:	b28a      	uxth	r2, r1
 8008f66:	e664      	b.n	8008c32 <_vfiprintf_r+0x2a>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0db      	beq.n	8008f24 <_vfiprintf_r+0x31c>
 8008f6c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8008f70:	f04f 0801 	mov.w	r8, #1
 8008f74:	f04f 0300 	mov.w	r3, #0
 8008f78:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8008f7c:	f8cd 8000 	str.w	r8, [sp]
 8008f80:	ac23      	add	r4, sp, #140	; 0x8c
 8008f82:	f04f 0b00 	mov.w	fp, #0
 8008f86:	f015 0302 	ands.w	r3, r5, #2
 8008f8a:	9306      	str	r3, [sp, #24]
 8008f8c:	bf18      	it	ne
 8008f8e:	f108 0802 	addne.w	r8, r8, #2
 8008f92:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8008f96:	9307      	str	r3, [sp, #28]
 8008f98:	d105      	bne.n	8008fa6 <_vfiprintf_r+0x39e>
 8008f9a:	9b02      	ldr	r3, [sp, #8]
 8008f9c:	eba3 0608 	sub.w	r6, r3, r8
 8008fa0:	2e00      	cmp	r6, #0
 8008fa2:	f300 826c 	bgt.w	800947e <_vfiprintf_r+0x876>
 8008fa6:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8008faa:	1c50      	adds	r0, r2, #1
 8008fac:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
 8008fb0:	b18e      	cbz	r6, 8008fd6 <_vfiprintf_r+0x3ce>
 8008fb2:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 8008fb6:	3101      	adds	r1, #1
 8008fb8:	f8c9 2000 	str.w	r2, [r9]
 8008fbc:	2807      	cmp	r0, #7
 8008fbe:	f04f 0201 	mov.w	r2, #1
 8008fc2:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8008fc6:	f8c9 2004 	str.w	r2, [r9, #4]
 8008fca:	f300 823b 	bgt.w	8009444 <_vfiprintf_r+0x83c>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	f109 0908 	add.w	r9, r9, #8
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	9b06      	ldr	r3, [sp, #24]
 8008fd8:	b1db      	cbz	r3, 8009012 <_vfiprintf_r+0x40a>
 8008fda:	ab0f      	add	r3, sp, #60	; 0x3c
 8008fdc:	3102      	adds	r1, #2
 8008fde:	f8c9 3000 	str.w	r3, [r9]
 8008fe2:	2807      	cmp	r0, #7
 8008fe4:	f04f 0302 	mov.w	r3, #2
 8008fe8:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8008fec:	f8c9 3004 	str.w	r3, [r9, #4]
 8008ff0:	f340 8240 	ble.w	8009474 <_vfiprintf_r+0x86c>
 8008ff4:	2900      	cmp	r1, #0
 8008ff6:	f000 8306 	beq.w	8009606 <_vfiprintf_r+0x9fe>
 8008ffa:	9901      	ldr	r1, [sp, #4]
 8008ffc:	9805      	ldr	r0, [sp, #20]
 8008ffe:	aa10      	add	r2, sp, #64	; 0x40
 8009000:	f7ff fdbc 	bl	8008b7c <__sprint_r.part.0>
 8009004:	2800      	cmp	r0, #0
 8009006:	d193      	bne.n	8008f30 <_vfiprintf_r+0x328>
 8009008:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800900c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009010:	1c50      	adds	r0, r2, #1
 8009012:	9b07      	ldr	r3, [sp, #28]
 8009014:	2b80      	cmp	r3, #128	; 0x80
 8009016:	f000 8158 	beq.w	80092ca <_vfiprintf_r+0x6c2>
 800901a:	9b00      	ldr	r3, [sp, #0]
 800901c:	ebab 0603 	sub.w	r6, fp, r3
 8009020:	2e00      	cmp	r6, #0
 8009022:	f300 81b6 	bgt.w	8009392 <_vfiprintf_r+0x78a>
 8009026:	9b00      	ldr	r3, [sp, #0]
 8009028:	f8c9 4000 	str.w	r4, [r9]
 800902c:	4419      	add	r1, r3
 800902e:	2807      	cmp	r0, #7
 8009030:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8009034:	f8c9 3004 	str.w	r3, [r9, #4]
 8009038:	f340 8144 	ble.w	80092c4 <_vfiprintf_r+0x6bc>
 800903c:	2900      	cmp	r1, #0
 800903e:	f000 8272 	beq.w	8009526 <_vfiprintf_r+0x91e>
 8009042:	9901      	ldr	r1, [sp, #4]
 8009044:	9805      	ldr	r0, [sp, #20]
 8009046:	aa10      	add	r2, sp, #64	; 0x40
 8009048:	f7ff fd98 	bl	8008b7c <__sprint_r.part.0>
 800904c:	2800      	cmp	r0, #0
 800904e:	f47f af6f 	bne.w	8008f30 <_vfiprintf_r+0x328>
 8009052:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009054:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009058:	0768      	lsls	r0, r5, #29
 800905a:	d505      	bpl.n	8009068 <_vfiprintf_r+0x460>
 800905c:	9b02      	ldr	r3, [sp, #8]
 800905e:	eba3 0408 	sub.w	r4, r3, r8
 8009062:	2c00      	cmp	r4, #0
 8009064:	f300 8269 	bgt.w	800953a <_vfiprintf_r+0x932>
 8009068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800906c:	4542      	cmp	r2, r8
 800906e:	bfac      	ite	ge
 8009070:	189b      	addge	r3, r3, r2
 8009072:	4443      	addlt	r3, r8
 8009074:	9303      	str	r3, [sp, #12]
 8009076:	2900      	cmp	r1, #0
 8009078:	f040 81d5 	bne.w	8009426 <_vfiprintf_r+0x81e>
 800907c:	2300      	movs	r3, #0
 800907e:	9311      	str	r3, [sp, #68]	; 0x44
 8009080:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009084:	e5f9      	b.n	8008c7a <_vfiprintf_r+0x72>
 8009086:	9b01      	ldr	r3, [sp, #4]
 8009088:	899b      	ldrh	r3, [r3, #12]
 800908a:	059a      	lsls	r2, r3, #22
 800908c:	f53f af56 	bmi.w	8008f3c <_vfiprintf_r+0x334>
 8009090:	9c01      	ldr	r4, [sp, #4]
 8009092:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009094:	f7fd fb48 	bl	8006728 <__retarget_lock_release_recursive>
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	e74f      	b.n	8008f3c <_vfiprintf_r+0x334>
 800909c:	f015 0310 	ands.w	r3, r5, #16
 80090a0:	f040 8323 	bne.w	80096ea <_vfiprintf_r+0xae2>
 80090a4:	f015 0240 	ands.w	r2, r5, #64	; 0x40
 80090a8:	f000 83eb 	beq.w	8009882 <_vfiprintf_r+0xc7a>
 80090ac:	9a04      	ldr	r2, [sp, #16]
 80090ae:	f852 6b04 	ldr.w	r6, [r2], #4
 80090b2:	9204      	str	r2, [sp, #16]
 80090b4:	4698      	mov	r8, r3
 80090b6:	b2b6      	uxth	r6, r6
 80090b8:	e6f3      	b.n	8008ea2 <_vfiprintf_r+0x29a>
 80090ba:	f856 3b04 	ldr.w	r3, [r6], #4
 80090be:	9604      	str	r6, [sp, #16]
 80090c0:	06e8      	lsls	r0, r5, #27
 80090c2:	f100 82ed 	bmi.w	80096a0 <_vfiprintf_r+0xa98>
 80090c6:	0669      	lsls	r1, r5, #25
 80090c8:	f140 82e7 	bpl.w	800969a <_vfiprintf_r+0xa92>
 80090cc:	f343 38c0 	sbfx	r8, r3, #15, #1
 80090d0:	b21e      	sxth	r6, r3
 80090d2:	4643      	mov	r3, r8
 80090d4:	e68b      	b.n	8008dee <_vfiprintf_r+0x1e6>
 80090d6:	9e04      	ldr	r6, [sp, #16]
 80090d8:	f856 4b04 	ldr.w	r4, [r6], #4
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 80090e4:	2c00      	cmp	r4, #0
 80090e6:	f000 83b1 	beq.w	800984c <_vfiprintf_r+0xc44>
 80090ea:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 80090ee:	f000 832e 	beq.w	800974e <_vfiprintf_r+0xb46>
 80090f2:	465a      	mov	r2, fp
 80090f4:	2100      	movs	r1, #0
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7fd fb1a 	bl	8006730 <memchr>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f000 8412 	beq.w	8009926 <_vfiprintf_r+0xd1e>
 8009102:	1b03      	subs	r3, r0, r4
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	9604      	str	r6, [sp, #16]
 8009108:	f04f 0b00 	mov.w	fp, #0
 800910c:	e689      	b.n	8008e22 <_vfiprintf_r+0x21a>
 800910e:	9e04      	ldr	r6, [sp, #16]
 8009110:	f04f 0300 	mov.w	r3, #0
 8009114:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8009118:	f04f 0801 	mov.w	r8, #1
 800911c:	f856 3b04 	ldr.w	r3, [r6], #4
 8009120:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8009124:	9604      	str	r6, [sp, #16]
 8009126:	f8cd 8000 	str.w	r8, [sp]
 800912a:	ac23      	add	r4, sp, #140	; 0x8c
 800912c:	e729      	b.n	8008f82 <_vfiprintf_r+0x37a>
 800912e:	f000 fe4d 	bl	8009dcc <__sinit>
 8009132:	e576      	b.n	8008c22 <_vfiprintf_r+0x1a>
 8009134:	9b04      	ldr	r3, [sp, #16]
 8009136:	f853 2b04 	ldr.w	r2, [r3], #4
 800913a:	9202      	str	r2, [sp, #8]
 800913c:	2a00      	cmp	r2, #0
 800913e:	f280 829f 	bge.w	8009680 <_vfiprintf_r+0xa78>
 8009142:	9a02      	ldr	r2, [sp, #8]
 8009144:	9304      	str	r3, [sp, #16]
 8009146:	4252      	negs	r2, r2
 8009148:	9202      	str	r2, [sp, #8]
 800914a:	783b      	ldrb	r3, [r7, #0]
 800914c:	f045 0504 	orr.w	r5, r5, #4
 8009150:	e5b2      	b.n	8008cb8 <_vfiprintf_r+0xb0>
 8009152:	783b      	ldrb	r3, [r7, #0]
 8009154:	2b6c      	cmp	r3, #108	; 0x6c
 8009156:	bf03      	ittte	eq
 8009158:	787b      	ldrbeq	r3, [r7, #1]
 800915a:	f045 0520 	orreq.w	r5, r5, #32
 800915e:	3701      	addeq	r7, #1
 8009160:	f045 0510 	orrne.w	r5, r5, #16
 8009164:	e5a8      	b.n	8008cb8 <_vfiprintf_r+0xb0>
 8009166:	783b      	ldrb	r3, [r7, #0]
 8009168:	2b68      	cmp	r3, #104	; 0x68
 800916a:	bf03      	ittte	eq
 800916c:	787b      	ldrbeq	r3, [r7, #1]
 800916e:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 8009172:	3701      	addeq	r7, #1
 8009174:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 8009178:	e59e      	b.n	8008cb8 <_vfiprintf_r+0xb0>
 800917a:	f045 0a10 	orr.w	sl, r5, #16
 800917e:	f01a 0820 	ands.w	r8, sl, #32
 8009182:	f000 8255 	beq.w	8009630 <_vfiprintf_r+0xa28>
 8009186:	9e04      	ldr	r6, [sp, #16]
 8009188:	3607      	adds	r6, #7
 800918a:	f026 0607 	bic.w	r6, r6, #7
 800918e:	4633      	mov	r3, r6
 8009190:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8009194:	f853 6b08 	ldr.w	r6, [r3], #8
 8009198:	9304      	str	r3, [sp, #16]
 800919a:	2301      	movs	r3, #1
 800919c:	e684      	b.n	8008ea8 <_vfiprintf_r+0x2a0>
 800919e:	783b      	ldrb	r3, [r7, #0]
 80091a0:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
 80091a4:	e588      	b.n	8008cb8 <_vfiprintf_r+0xb0>
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80091ac:	9304      	str	r3, [sp, #16]
 80091ae:	2330      	movs	r3, #48	; 0x30
 80091b0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80091b4:	2378      	movs	r3, #120	; 0x78
 80091b6:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 80091ba:	4bb9      	ldr	r3, [pc, #740]	; (80094a0 <_vfiprintf_r+0x898>)
 80091bc:	9308      	str	r3, [sp, #32]
 80091be:	f045 0a02 	orr.w	sl, r5, #2
 80091c2:	f04f 0800 	mov.w	r8, #0
 80091c6:	2302      	movs	r3, #2
 80091c8:	e66e      	b.n	8008ea8 <_vfiprintf_r+0x2a0>
 80091ca:	06ae      	lsls	r6, r5, #26
 80091cc:	f100 8283 	bmi.w	80096d6 <_vfiprintf_r+0xace>
 80091d0:	06ec      	lsls	r4, r5, #27
 80091d2:	f100 8333 	bmi.w	800983c <_vfiprintf_r+0xc34>
 80091d6:	0668      	lsls	r0, r5, #25
 80091d8:	f100 8392 	bmi.w	8009900 <_vfiprintf_r+0xcf8>
 80091dc:	05a9      	lsls	r1, r5, #22
 80091de:	f140 832d 	bpl.w	800983c <_vfiprintf_r+0xc34>
 80091e2:	9e04      	ldr	r6, [sp, #16]
 80091e4:	9a03      	ldr	r2, [sp, #12]
 80091e6:	f856 3b04 	ldr.w	r3, [r6], #4
 80091ea:	9604      	str	r6, [sp, #16]
 80091ec:	701a      	strb	r2, [r3, #0]
 80091ee:	e544      	b.n	8008c7a <_vfiprintf_r+0x72>
 80091f0:	783b      	ldrb	r3, [r7, #0]
 80091f2:	f045 0501 	orr.w	r5, r5, #1
 80091f6:	e55f      	b.n	8008cb8 <_vfiprintf_r+0xb0>
 80091f8:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f47f ade1 	bne.w	8008dc4 <_vfiprintf_r+0x1bc>
 8009202:	2320      	movs	r3, #32
 8009204:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8009208:	783b      	ldrb	r3, [r7, #0]
 800920a:	e555      	b.n	8008cb8 <_vfiprintf_r+0xb0>
 800920c:	783b      	ldrb	r3, [r7, #0]
 800920e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8009212:	e551      	b.n	8008cb8 <_vfiprintf_r+0xb0>
 8009214:	4639      	mov	r1, r7
 8009216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800921a:	2b2a      	cmp	r3, #42	; 0x2a
 800921c:	f000 83b3 	beq.w	8009986 <_vfiprintf_r+0xd7e>
 8009220:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009224:	2a09      	cmp	r2, #9
 8009226:	460f      	mov	r7, r1
 8009228:	f04f 0b00 	mov.w	fp, #0
 800922c:	f63f ad45 	bhi.w	8008cba <_vfiprintf_r+0xb2>
 8009230:	f817 3b01 	ldrb.w	r3, [r7], #1
 8009234:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8009238:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 800923c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009240:	2a09      	cmp	r2, #9
 8009242:	d9f5      	bls.n	8009230 <_vfiprintf_r+0x628>
 8009244:	e539      	b.n	8008cba <_vfiprintf_r+0xb2>
 8009246:	46aa      	mov	sl, r5
 8009248:	2b01      	cmp	r3, #1
 800924a:	f43f addd 	beq.w	8008e08 <_vfiprintf_r+0x200>
 800924e:	2b02      	cmp	r3, #2
 8009250:	ac3c      	add	r4, sp, #240	; 0xf0
 8009252:	d112      	bne.n	800927a <_vfiprintf_r+0x672>
 8009254:	9a08      	ldr	r2, [sp, #32]
 8009256:	f006 030f 	and.w	r3, r6, #15
 800925a:	0936      	lsrs	r6, r6, #4
 800925c:	5cd3      	ldrb	r3, [r2, r3]
 800925e:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8009262:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
 8009266:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800926a:	ea56 0308 	orrs.w	r3, r6, r8
 800926e:	d1f2      	bne.n	8009256 <_vfiprintf_r+0x64e>
 8009270:	ab3c      	add	r3, sp, #240	; 0xf0
 8009272:	1b1b      	subs	r3, r3, r4
 8009274:	4655      	mov	r5, sl
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	e5d3      	b.n	8008e22 <_vfiprintf_r+0x21a>
 800927a:	f006 0307 	and.w	r3, r6, #7
 800927e:	08f6      	lsrs	r6, r6, #3
 8009280:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
 8009284:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8009288:	3330      	adds	r3, #48	; 0x30
 800928a:	ea56 0108 	orrs.w	r1, r6, r8
 800928e:	4622      	mov	r2, r4
 8009290:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8009294:	d1f1      	bne.n	800927a <_vfiprintf_r+0x672>
 8009296:	f01a 0f01 	tst.w	sl, #1
 800929a:	d0e9      	beq.n	8009270 <_vfiprintf_r+0x668>
 800929c:	2b30      	cmp	r3, #48	; 0x30
 800929e:	d0e7      	beq.n	8009270 <_vfiprintf_r+0x668>
 80092a0:	2330      	movs	r3, #48	; 0x30
 80092a2:	3a02      	subs	r2, #2
 80092a4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80092a8:	ab3c      	add	r3, sp, #240	; 0xf0
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	4655      	mov	r5, sl
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	4614      	mov	r4, r2
 80092b2:	e5b6      	b.n	8008e22 <_vfiprintf_r+0x21a>
 80092b4:	9900      	ldr	r1, [sp, #0]
 80092b6:	9413      	str	r4, [sp, #76]	; 0x4c
 80092b8:	2301      	movs	r3, #1
 80092ba:	9114      	str	r1, [sp, #80]	; 0x50
 80092bc:	9112      	str	r1, [sp, #72]	; 0x48
 80092be:	9311      	str	r3, [sp, #68]	; 0x44
 80092c0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80092c4:	f109 0908 	add.w	r9, r9, #8
 80092c8:	e6c6      	b.n	8009058 <_vfiprintf_r+0x450>
 80092ca:	9b02      	ldr	r3, [sp, #8]
 80092cc:	eba3 0608 	sub.w	r6, r3, r8
 80092d0:	2e00      	cmp	r6, #0
 80092d2:	f77f aea2 	ble.w	800901a <_vfiprintf_r+0x412>
 80092d6:	2e10      	cmp	r6, #16
 80092d8:	f340 8351 	ble.w	800997e <_vfiprintf_r+0xd76>
 80092dc:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 80094a4 <_vfiprintf_r+0x89c>
 80092e0:	4653      	mov	r3, sl
 80092e2:	e9cd b406 	strd	fp, r4, [sp, #24]
 80092e6:	46ba      	mov	sl, r7
 80092e8:	f8dd b014 	ldr.w	fp, [sp, #20]
 80092ec:	9c01      	ldr	r4, [sp, #4]
 80092ee:	462f      	mov	r7, r5
 80092f0:	461d      	mov	r5, r3
 80092f2:	e007      	b.n	8009304 <_vfiprintf_r+0x6fc>
 80092f4:	f102 0c02 	add.w	ip, r2, #2
 80092f8:	f109 0908 	add.w	r9, r9, #8
 80092fc:	4602      	mov	r2, r0
 80092fe:	3e10      	subs	r6, #16
 8009300:	2e10      	cmp	r6, #16
 8009302:	dd1e      	ble.n	8009342 <_vfiprintf_r+0x73a>
 8009304:	1c50      	adds	r0, r2, #1
 8009306:	3110      	adds	r1, #16
 8009308:	2310      	movs	r3, #16
 800930a:	2807      	cmp	r0, #7
 800930c:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8009310:	f8c9 5000 	str.w	r5, [r9]
 8009314:	f8c9 3004 	str.w	r3, [r9, #4]
 8009318:	ddec      	ble.n	80092f4 <_vfiprintf_r+0x6ec>
 800931a:	aa10      	add	r2, sp, #64	; 0x40
 800931c:	2900      	cmp	r1, #0
 800931e:	f000 808b 	beq.w	8009438 <_vfiprintf_r+0x830>
 8009322:	4621      	mov	r1, r4
 8009324:	4658      	mov	r0, fp
 8009326:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800932a:	f7ff fc27 	bl	8008b7c <__sprint_r.part.0>
 800932e:	2800      	cmp	r0, #0
 8009330:	f47f adfe 	bne.w	8008f30 <_vfiprintf_r+0x328>
 8009334:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8009338:	3e10      	subs	r6, #16
 800933a:	2e10      	cmp	r6, #16
 800933c:	f102 0c01 	add.w	ip, r2, #1
 8009340:	dce0      	bgt.n	8009304 <_vfiprintf_r+0x6fc>
 8009342:	e9dd b406 	ldrd	fp, r4, [sp, #24]
 8009346:	462b      	mov	r3, r5
 8009348:	463d      	mov	r5, r7
 800934a:	4657      	mov	r7, sl
 800934c:	469a      	mov	sl, r3
 800934e:	4431      	add	r1, r6
 8009350:	f1bc 0f07 	cmp.w	ip, #7
 8009354:	e9cd c111 	strd	ip, r1, [sp, #68]	; 0x44
 8009358:	f8c9 a000 	str.w	sl, [r9]
 800935c:	f8c9 6004 	str.w	r6, [r9, #4]
 8009360:	f340 8195 	ble.w	800968e <_vfiprintf_r+0xa86>
 8009364:	2900      	cmp	r1, #0
 8009366:	f000 82bb 	beq.w	80098e0 <_vfiprintf_r+0xcd8>
 800936a:	9901      	ldr	r1, [sp, #4]
 800936c:	9805      	ldr	r0, [sp, #20]
 800936e:	aa10      	add	r2, sp, #64	; 0x40
 8009370:	f7ff fc04 	bl	8008b7c <__sprint_r.part.0>
 8009374:	2800      	cmp	r0, #0
 8009376:	f47f addb 	bne.w	8008f30 <_vfiprintf_r+0x328>
 800937a:	9b00      	ldr	r3, [sp, #0]
 800937c:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8009380:	ebab 0603 	sub.w	r6, fp, r3
 8009384:	2e00      	cmp	r6, #0
 8009386:	f102 0001 	add.w	r0, r2, #1
 800938a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800938e:	f77f ae4a 	ble.w	8009026 <_vfiprintf_r+0x41e>
 8009392:	2e10      	cmp	r6, #16
 8009394:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80094a4 <_vfiprintf_r+0x89c>
 8009398:	dd31      	ble.n	80093fe <_vfiprintf_r+0x7f6>
 800939a:	4653      	mov	r3, sl
 800939c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80093a0:	46ba      	mov	sl, r7
 80093a2:	9c05      	ldr	r4, [sp, #20]
 80093a4:	9d01      	ldr	r5, [sp, #4]
 80093a6:	f04f 0b10 	mov.w	fp, #16
 80093aa:	461f      	mov	r7, r3
 80093ac:	e007      	b.n	80093be <_vfiprintf_r+0x7b6>
 80093ae:	f102 0c02 	add.w	ip, r2, #2
 80093b2:	f109 0908 	add.w	r9, r9, #8
 80093b6:	4602      	mov	r2, r0
 80093b8:	3e10      	subs	r6, #16
 80093ba:	2e10      	cmp	r6, #16
 80093bc:	dd19      	ble.n	80093f2 <_vfiprintf_r+0x7ea>
 80093be:	1c50      	adds	r0, r2, #1
 80093c0:	3110      	adds	r1, #16
 80093c2:	2807      	cmp	r0, #7
 80093c4:	e9c9 7b00 	strd	r7, fp, [r9]
 80093c8:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 80093cc:	ddef      	ble.n	80093ae <_vfiprintf_r+0x7a6>
 80093ce:	aa10      	add	r2, sp, #64	; 0x40
 80093d0:	b319      	cbz	r1, 800941a <_vfiprintf_r+0x812>
 80093d2:	4629      	mov	r1, r5
 80093d4:	4620      	mov	r0, r4
 80093d6:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80093da:	f7ff fbcf 	bl	8008b7c <__sprint_r.part.0>
 80093de:	2800      	cmp	r0, #0
 80093e0:	f47f ada6 	bne.w	8008f30 <_vfiprintf_r+0x328>
 80093e4:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 80093e8:	3e10      	subs	r6, #16
 80093ea:	2e10      	cmp	r6, #16
 80093ec:	f102 0c01 	add.w	ip, r2, #1
 80093f0:	dce5      	bgt.n	80093be <_vfiprintf_r+0x7b6>
 80093f2:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80093f6:	463b      	mov	r3, r7
 80093f8:	4660      	mov	r0, ip
 80093fa:	4657      	mov	r7, sl
 80093fc:	469a      	mov	sl, r3
 80093fe:	4431      	add	r1, r6
 8009400:	2807      	cmp	r0, #7
 8009402:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 8009406:	f8c9 a000 	str.w	sl, [r9]
 800940a:	f8c9 6004 	str.w	r6, [r9, #4]
 800940e:	f300 80e6 	bgt.w	80095de <_vfiprintf_r+0x9d6>
 8009412:	f109 0908 	add.w	r9, r9, #8
 8009416:	3001      	adds	r0, #1
 8009418:	e605      	b.n	8009026 <_vfiprintf_r+0x41e>
 800941a:	f04f 0c01 	mov.w	ip, #1
 800941e:	460a      	mov	r2, r1
 8009420:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009424:	e7c8      	b.n	80093b8 <_vfiprintf_r+0x7b0>
 8009426:	9901      	ldr	r1, [sp, #4]
 8009428:	9805      	ldr	r0, [sp, #20]
 800942a:	aa10      	add	r2, sp, #64	; 0x40
 800942c:	f7ff fba6 	bl	8008b7c <__sprint_r.part.0>
 8009430:	2800      	cmp	r0, #0
 8009432:	f43f ae23 	beq.w	800907c <_vfiprintf_r+0x474>
 8009436:	e57b      	b.n	8008f30 <_vfiprintf_r+0x328>
 8009438:	f04f 0c01 	mov.w	ip, #1
 800943c:	460a      	mov	r2, r1
 800943e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009442:	e75c      	b.n	80092fe <_vfiprintf_r+0x6f6>
 8009444:	2900      	cmp	r1, #0
 8009446:	f000 80db 	beq.w	8009600 <_vfiprintf_r+0x9f8>
 800944a:	9901      	ldr	r1, [sp, #4]
 800944c:	9805      	ldr	r0, [sp, #20]
 800944e:	aa10      	add	r2, sp, #64	; 0x40
 8009450:	f7ff fb94 	bl	8008b7c <__sprint_r.part.0>
 8009454:	2800      	cmp	r0, #0
 8009456:	f47f ad6b 	bne.w	8008f30 <_vfiprintf_r+0x328>
 800945a:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800945e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009462:	1c50      	adds	r0, r2, #1
 8009464:	e5b7      	b.n	8008fd6 <_vfiprintf_r+0x3ce>
 8009466:	2102      	movs	r1, #2
 8009468:	ab0f      	add	r3, sp, #60	; 0x3c
 800946a:	9114      	str	r1, [sp, #80]	; 0x50
 800946c:	9313      	str	r3, [sp, #76]	; 0x4c
 800946e:	2001      	movs	r0, #1
 8009470:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009474:	4602      	mov	r2, r0
 8009476:	f109 0908 	add.w	r9, r9, #8
 800947a:	1c50      	adds	r0, r2, #1
 800947c:	e5c9      	b.n	8009012 <_vfiprintf_r+0x40a>
 800947e:	2e10      	cmp	r6, #16
 8009480:	f340 8257 	ble.w	8009932 <_vfiprintf_r+0xd2a>
 8009484:	e9dd c111 	ldrd	ip, r1, [sp, #68]	; 0x44
 8009488:	f8df a01c 	ldr.w	sl, [pc, #28]	; 80094a8 <_vfiprintf_r+0x8a0>
 800948c:	e9cd b40c 	strd	fp, r4, [sp, #48]	; 0x30
 8009490:	2310      	movs	r3, #16
 8009492:	4654      	mov	r4, sl
 8009494:	f8dd b004 	ldr.w	fp, [sp, #4]
 8009498:	f8dd a014 	ldr.w	sl, [sp, #20]
 800949c:	4662      	mov	r2, ip
 800949e:	e00d      	b.n	80094bc <_vfiprintf_r+0x8b4>
 80094a0:	0800bdd8 	.word	0x0800bdd8
 80094a4:	0800c0f4 	.word	0x0800c0f4
 80094a8:	0800c0e4 	.word	0x0800c0e4
 80094ac:	f102 0c02 	add.w	ip, r2, #2
 80094b0:	f109 0908 	add.w	r9, r9, #8
 80094b4:	4602      	mov	r2, r0
 80094b6:	3e10      	subs	r6, #16
 80094b8:	2e10      	cmp	r6, #16
 80094ba:	dd1b      	ble.n	80094f4 <_vfiprintf_r+0x8ec>
 80094bc:	1c50      	adds	r0, r2, #1
 80094be:	3110      	adds	r1, #16
 80094c0:	2807      	cmp	r0, #7
 80094c2:	e9c9 4300 	strd	r4, r3, [r9]
 80094c6:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 80094ca:	ddef      	ble.n	80094ac <_vfiprintf_r+0x8a4>
 80094cc:	aa10      	add	r2, sp, #64	; 0x40
 80094ce:	b321      	cbz	r1, 800951a <_vfiprintf_r+0x912>
 80094d0:	4659      	mov	r1, fp
 80094d2:	4650      	mov	r0, sl
 80094d4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80094d8:	f7ff fb50 	bl	8008b7c <__sprint_r.part.0>
 80094dc:	2800      	cmp	r0, #0
 80094de:	f47f ad27 	bne.w	8008f30 <_vfiprintf_r+0x328>
 80094e2:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 80094e6:	3e10      	subs	r6, #16
 80094e8:	2e10      	cmp	r6, #16
 80094ea:	f102 0c01 	add.w	ip, r2, #1
 80094ee:	f04f 0310 	mov.w	r3, #16
 80094f2:	dce3      	bgt.n	80094bc <_vfiprintf_r+0x8b4>
 80094f4:	46a2      	mov	sl, r4
 80094f6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80094fa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80094fc:	4662      	mov	r2, ip
 80094fe:	4431      	add	r1, r6
 8009500:	2a07      	cmp	r2, #7
 8009502:	e9cd 2111 	strd	r2, r1, [sp, #68]	; 0x44
 8009506:	f8c9 a000 	str.w	sl, [r9]
 800950a:	f8c9 6004 	str.w	r6, [r9, #4]
 800950e:	f300 80a7 	bgt.w	8009660 <_vfiprintf_r+0xa58>
 8009512:	f109 0908 	add.w	r9, r9, #8
 8009516:	1c50      	adds	r0, r2, #1
 8009518:	e548      	b.n	8008fac <_vfiprintf_r+0x3a4>
 800951a:	460a      	mov	r2, r1
 800951c:	f04f 0c01 	mov.w	ip, #1
 8009520:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009524:	e7c7      	b.n	80094b6 <_vfiprintf_r+0x8ae>
 8009526:	076c      	lsls	r4, r5, #29
 8009528:	9111      	str	r1, [sp, #68]	; 0x44
 800952a:	d550      	bpl.n	80095ce <_vfiprintf_r+0x9c6>
 800952c:	9b02      	ldr	r3, [sp, #8]
 800952e:	eba3 0408 	sub.w	r4, r3, r8
 8009532:	2c00      	cmp	r4, #0
 8009534:	dd4b      	ble.n	80095ce <_vfiprintf_r+0x9c6>
 8009536:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800953a:	2c10      	cmp	r4, #16
 800953c:	f340 8209 	ble.w	8009952 <_vfiprintf_r+0xd4a>
 8009540:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8009830 <_vfiprintf_r+0xc28>
 8009544:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009546:	9e05      	ldr	r6, [sp, #20]
 8009548:	f8dd b004 	ldr.w	fp, [sp, #4]
 800954c:	4653      	mov	r3, sl
 800954e:	2510      	movs	r5, #16
 8009550:	46ba      	mov	sl, r7
 8009552:	461f      	mov	r7, r3
 8009554:	e006      	b.n	8009564 <_vfiprintf_r+0x95c>
 8009556:	1c90      	adds	r0, r2, #2
 8009558:	f109 0908 	add.w	r9, r9, #8
 800955c:	461a      	mov	r2, r3
 800955e:	3c10      	subs	r4, #16
 8009560:	2c10      	cmp	r4, #16
 8009562:	dd19      	ble.n	8009598 <_vfiprintf_r+0x990>
 8009564:	1c53      	adds	r3, r2, #1
 8009566:	3110      	adds	r1, #16
 8009568:	2b07      	cmp	r3, #7
 800956a:	e9c9 7500 	strd	r7, r5, [r9]
 800956e:	e9cd 3111 	strd	r3, r1, [sp, #68]	; 0x44
 8009572:	ddf0      	ble.n	8009556 <_vfiprintf_r+0x94e>
 8009574:	aa10      	add	r2, sp, #64	; 0x40
 8009576:	b329      	cbz	r1, 80095c4 <_vfiprintf_r+0x9bc>
 8009578:	4659      	mov	r1, fp
 800957a:	4630      	mov	r0, r6
 800957c:	f7ff fafe 	bl	8008b7c <__sprint_r.part.0>
 8009580:	2800      	cmp	r0, #0
 8009582:	f47f acd5 	bne.w	8008f30 <_vfiprintf_r+0x328>
 8009586:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 800958a:	3c10      	subs	r4, #16
 800958c:	2c10      	cmp	r4, #16
 800958e:	f102 0001 	add.w	r0, r2, #1
 8009592:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009596:	dce5      	bgt.n	8009564 <_vfiprintf_r+0x95c>
 8009598:	463b      	mov	r3, r7
 800959a:	4657      	mov	r7, sl
 800959c:	469a      	mov	sl, r3
 800959e:	4421      	add	r1, r4
 80095a0:	2807      	cmp	r0, #7
 80095a2:	e9c9 a400 	strd	sl, r4, [r9]
 80095a6:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
 80095aa:	f77f ad5d 	ble.w	8009068 <_vfiprintf_r+0x460>
 80095ae:	b171      	cbz	r1, 80095ce <_vfiprintf_r+0x9c6>
 80095b0:	9901      	ldr	r1, [sp, #4]
 80095b2:	9805      	ldr	r0, [sp, #20]
 80095b4:	aa10      	add	r2, sp, #64	; 0x40
 80095b6:	f7ff fae1 	bl	8008b7c <__sprint_r.part.0>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	f47f acb8 	bne.w	8008f30 <_vfiprintf_r+0x328>
 80095c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80095c2:	e551      	b.n	8009068 <_vfiprintf_r+0x460>
 80095c4:	2001      	movs	r0, #1
 80095c6:	460a      	mov	r2, r1
 80095c8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80095cc:	e7c7      	b.n	800955e <_vfiprintf_r+0x956>
 80095ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095d2:	4542      	cmp	r2, r8
 80095d4:	bfac      	ite	ge
 80095d6:	189b      	addge	r3, r3, r2
 80095d8:	4443      	addlt	r3, r8
 80095da:	9303      	str	r3, [sp, #12]
 80095dc:	e54e      	b.n	800907c <_vfiprintf_r+0x474>
 80095de:	2900      	cmp	r1, #0
 80095e0:	f43f ae68 	beq.w	80092b4 <_vfiprintf_r+0x6ac>
 80095e4:	9901      	ldr	r1, [sp, #4]
 80095e6:	9805      	ldr	r0, [sp, #20]
 80095e8:	aa10      	add	r2, sp, #64	; 0x40
 80095ea:	f7ff fac7 	bl	8008b7c <__sprint_r.part.0>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	f47f ac9e 	bne.w	8008f30 <_vfiprintf_r+0x328>
 80095f4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80095f6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80095f8:	3001      	adds	r0, #1
 80095fa:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80095fe:	e512      	b.n	8009026 <_vfiprintf_r+0x41e>
 8009600:	9b06      	ldr	r3, [sp, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d177      	bne.n	80096f6 <_vfiprintf_r+0xaee>
 8009606:	2001      	movs	r0, #1
 8009608:	460a      	mov	r2, r1
 800960a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800960e:	e500      	b.n	8009012 <_vfiprintf_r+0x40a>
 8009610:	9211      	str	r2, [sp, #68]	; 0x44
 8009612:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009616:	e475      	b.n	8008f04 <_vfiprintf_r+0x2fc>
 8009618:	f1bb 0f00 	cmp.w	fp, #0
 800961c:	f47f abf9 	bne.w	8008e12 <_vfiprintf_r+0x20a>
 8009620:	4655      	mov	r5, sl
 8009622:	f04f 0b00 	mov.w	fp, #0
 8009626:	f8cd b000 	str.w	fp, [sp]
 800962a:	ac3c      	add	r4, sp, #240	; 0xf0
 800962c:	f7ff bbf9 	b.w	8008e22 <_vfiprintf_r+0x21a>
 8009630:	f01a 0310 	ands.w	r3, sl, #16
 8009634:	d13a      	bne.n	80096ac <_vfiprintf_r+0xaa4>
 8009636:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800963a:	f000 8113 	beq.w	8009864 <_vfiprintf_r+0xc5c>
 800963e:	9a04      	ldr	r2, [sp, #16]
 8009640:	f852 6b04 	ldr.w	r6, [r2], #4
 8009644:	9204      	str	r2, [sp, #16]
 8009646:	4698      	mov	r8, r3
 8009648:	b2b6      	uxth	r6, r6
 800964a:	2301      	movs	r3, #1
 800964c:	e42c      	b.n	8008ea8 <_vfiprintf_r+0x2a0>
 800964e:	232d      	movs	r3, #45	; 0x2d
 8009650:	4276      	negs	r6, r6
 8009652:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8009656:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 800965a:	46aa      	mov	sl, r5
 800965c:	2301      	movs	r3, #1
 800965e:	e427      	b.n	8008eb0 <_vfiprintf_r+0x2a8>
 8009660:	2900      	cmp	r1, #0
 8009662:	d07d      	beq.n	8009760 <_vfiprintf_r+0xb58>
 8009664:	9901      	ldr	r1, [sp, #4]
 8009666:	9805      	ldr	r0, [sp, #20]
 8009668:	aa10      	add	r2, sp, #64	; 0x40
 800966a:	f7ff fa87 	bl	8008b7c <__sprint_r.part.0>
 800966e:	2800      	cmp	r0, #0
 8009670:	f47f ac5e 	bne.w	8008f30 <_vfiprintf_r+0x328>
 8009674:	e9dd 2111 	ldrd	r2, r1, [sp, #68]	; 0x44
 8009678:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 800967c:	1c50      	adds	r0, r2, #1
 800967e:	e495      	b.n	8008fac <_vfiprintf_r+0x3a4>
 8009680:	9304      	str	r3, [sp, #16]
 8009682:	783b      	ldrb	r3, [r7, #0]
 8009684:	f7ff bb18 	b.w	8008cb8 <_vfiprintf_r+0xb0>
 8009688:	ac3c      	add	r4, sp, #240	; 0xf0
 800968a:	f7ff bbca 	b.w	8008e22 <_vfiprintf_r+0x21a>
 800968e:	f109 0908 	add.w	r9, r9, #8
 8009692:	f10c 0001 	add.w	r0, ip, #1
 8009696:	4662      	mov	r2, ip
 8009698:	e4bf      	b.n	800901a <_vfiprintf_r+0x412>
 800969a:	05aa      	lsls	r2, r5, #22
 800969c:	f100 8138 	bmi.w	8009910 <_vfiprintf_r+0xd08>
 80096a0:	ea4f 78e3 	mov.w	r8, r3, asr #31
 80096a4:	461e      	mov	r6, r3
 80096a6:	4643      	mov	r3, r8
 80096a8:	f7ff bba1 	b.w	8008dee <_vfiprintf_r+0x1e6>
 80096ac:	9b04      	ldr	r3, [sp, #16]
 80096ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80096b2:	9304      	str	r3, [sp, #16]
 80096b4:	2301      	movs	r3, #1
 80096b6:	f7ff bbf7 	b.w	8008ea8 <_vfiprintf_r+0x2a0>
 80096ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f43f ab81 	beq.w	8008dc4 <_vfiprintf_r+0x1bc>
 80096c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f43f ab7c 	beq.w	8008dc4 <_vfiprintf_r+0x1bc>
 80096cc:	783b      	ldrb	r3, [r7, #0]
 80096ce:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 80096d2:	f7ff baf1 	b.w	8008cb8 <_vfiprintf_r+0xb0>
 80096d6:	e9dd 1603 	ldrd	r1, r6, [sp, #12]
 80096da:	f856 2b04 	ldr.w	r2, [r6], #4
 80096de:	9604      	str	r6, [sp, #16]
 80096e0:	17cb      	asrs	r3, r1, #31
 80096e2:	e9c2 1300 	strd	r1, r3, [r2]
 80096e6:	f7ff bac8 	b.w	8008c7a <_vfiprintf_r+0x72>
 80096ea:	9b04      	ldr	r3, [sp, #16]
 80096ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	f7ff bbd6 	b.w	8008ea2 <_vfiprintf_r+0x29a>
 80096f6:	2102      	movs	r1, #2
 80096f8:	ab0f      	add	r3, sp, #60	; 0x3c
 80096fa:	9114      	str	r1, [sp, #80]	; 0x50
 80096fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80096fe:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009702:	e6b8      	b.n	8009476 <_vfiprintf_r+0x86e>
 8009704:	4a4b      	ldr	r2, [pc, #300]	; (8009834 <_vfiprintf_r+0xc2c>)
 8009706:	9208      	str	r2, [sp, #32]
 8009708:	f015 0820 	ands.w	r8, r5, #32
 800970c:	d036      	beq.n	800977c <_vfiprintf_r+0xb74>
 800970e:	9e04      	ldr	r6, [sp, #16]
 8009710:	3607      	adds	r6, #7
 8009712:	f026 0607 	bic.w	r6, r6, #7
 8009716:	4632      	mov	r2, r6
 8009718:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800971c:	f852 6b08 	ldr.w	r6, [r2], #8
 8009720:	9204      	str	r2, [sp, #16]
 8009722:	07ea      	lsls	r2, r5, #31
 8009724:	d509      	bpl.n	800973a <_vfiprintf_r+0xb32>
 8009726:	ea56 0208 	orrs.w	r2, r6, r8
 800972a:	d006      	beq.n	800973a <_vfiprintf_r+0xb32>
 800972c:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8009730:	2330      	movs	r3, #48	; 0x30
 8009732:	f045 0502 	orr.w	r5, r5, #2
 8009736:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800973a:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 800973e:	2302      	movs	r3, #2
 8009740:	f7ff bbb2 	b.w	8008ea8 <_vfiprintf_r+0x2a0>
 8009744:	46aa      	mov	sl, r5
 8009746:	e51a      	b.n	800917e <_vfiprintf_r+0x576>
 8009748:	4a3b      	ldr	r2, [pc, #236]	; (8009838 <_vfiprintf_r+0xc30>)
 800974a:	9208      	str	r2, [sp, #32]
 800974c:	e7dc      	b.n	8009708 <_vfiprintf_r+0xb00>
 800974e:	4620      	mov	r0, r4
 8009750:	9604      	str	r6, [sp, #16]
 8009752:	f7fa f8f5 	bl	8003940 <strlen>
 8009756:	f04f 0b00 	mov.w	fp, #0
 800975a:	9000      	str	r0, [sp, #0]
 800975c:	f7ff bb61 	b.w	8008e22 <_vfiprintf_r+0x21a>
 8009760:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 8009764:	2a00      	cmp	r2, #0
 8009766:	f000 80c1 	beq.w	80098ec <_vfiprintf_r+0xce4>
 800976a:	2001      	movs	r0, #1
 800976c:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
 8009770:	9014      	str	r0, [sp, #80]	; 0x50
 8009772:	9213      	str	r2, [sp, #76]	; 0x4c
 8009774:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8009778:	4601      	mov	r1, r0
 800977a:	e428      	b.n	8008fce <_vfiprintf_r+0x3c6>
 800977c:	f015 0210 	ands.w	r2, r5, #16
 8009780:	d042      	beq.n	8009808 <_vfiprintf_r+0xc00>
 8009782:	9a04      	ldr	r2, [sp, #16]
 8009784:	f852 6b04 	ldr.w	r6, [r2], #4
 8009788:	9204      	str	r2, [sp, #16]
 800978a:	e7ca      	b.n	8009722 <_vfiprintf_r+0xb1a>
 800978c:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8009790:	f8cd b000 	str.w	fp, [sp]
 8009794:	f8cd 9018 	str.w	r9, [sp, #24]
 8009798:	46bb      	mov	fp, r7
 800979a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800979e:	2500      	movs	r5, #0
 80097a0:	ac3c      	add	r4, sp, #240	; 0xf0
 80097a2:	461f      	mov	r7, r3
 80097a4:	e009      	b.n	80097ba <_vfiprintf_r+0xbb2>
 80097a6:	4630      	mov	r0, r6
 80097a8:	4641      	mov	r1, r8
 80097aa:	f002 f845 	bl	800b838 <__aeabi_uldivmod>
 80097ae:	2e0a      	cmp	r6, #10
 80097b0:	f178 0300 	sbcs.w	r3, r8, #0
 80097b4:	d31b      	bcc.n	80097ee <_vfiprintf_r+0xbe6>
 80097b6:	4606      	mov	r6, r0
 80097b8:	4688      	mov	r8, r1
 80097ba:	4630      	mov	r0, r6
 80097bc:	4641      	mov	r1, r8
 80097be:	220a      	movs	r2, #10
 80097c0:	2300      	movs	r3, #0
 80097c2:	f002 f839 	bl	800b838 <__aeabi_uldivmod>
 80097c6:	4611      	mov	r1, r2
 80097c8:	3130      	adds	r1, #48	; 0x30
 80097ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80097ce:	220a      	movs	r2, #10
 80097d0:	2300      	movs	r3, #0
 80097d2:	3c01      	subs	r4, #1
 80097d4:	3501      	adds	r5, #1
 80097d6:	2f00      	cmp	r7, #0
 80097d8:	d0e5      	beq.n	80097a6 <_vfiprintf_r+0xb9e>
 80097da:	f899 1000 	ldrb.w	r1, [r9]
 80097de:	42a9      	cmp	r1, r5
 80097e0:	d1e1      	bne.n	80097a6 <_vfiprintf_r+0xb9e>
 80097e2:	2dff      	cmp	r5, #255	; 0xff
 80097e4:	d0df      	beq.n	80097a6 <_vfiprintf_r+0xb9e>
 80097e6:	2e0a      	cmp	r6, #10
 80097e8:	f178 0300 	sbcs.w	r3, r8, #0
 80097ec:	d264      	bcs.n	80098b8 <_vfiprintf_r+0xcb0>
 80097ee:	ab3c      	add	r3, sp, #240	; 0xf0
 80097f0:	1b1b      	subs	r3, r3, r4
 80097f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80097f6:	465f      	mov	r7, fp
 80097f8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80097fc:	f8dd b000 	ldr.w	fp, [sp]
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	4655      	mov	r5, sl
 8009804:	f7ff bb0d 	b.w	8008e22 <_vfiprintf_r+0x21a>
 8009808:	f015 0140 	ands.w	r1, r5, #64	; 0x40
 800980c:	d047      	beq.n	800989e <_vfiprintf_r+0xc96>
 800980e:	9904      	ldr	r1, [sp, #16]
 8009810:	f851 6b04 	ldr.w	r6, [r1], #4
 8009814:	9104      	str	r1, [sp, #16]
 8009816:	4690      	mov	r8, r2
 8009818:	b2b6      	uxth	r6, r6
 800981a:	e782      	b.n	8009722 <_vfiprintf_r+0xb1a>
 800981c:	46aa      	mov	sl, r5
 800981e:	f7ff baf3 	b.w	8008e08 <_vfiprintf_r+0x200>
 8009822:	2b01      	cmp	r3, #1
 8009824:	46aa      	mov	sl, r5
 8009826:	f47f ad12 	bne.w	800924e <_vfiprintf_r+0x646>
 800982a:	f7ff baf2 	b.w	8008e12 <_vfiprintf_r+0x20a>
 800982e:	bf00      	nop
 8009830:	0800c0e4 	.word	0x0800c0e4
 8009834:	0800bdec 	.word	0x0800bdec
 8009838:	0800bdd8 	.word	0x0800bdd8
 800983c:	9e04      	ldr	r6, [sp, #16]
 800983e:	9a03      	ldr	r2, [sp, #12]
 8009840:	f856 3b04 	ldr.w	r3, [r6], #4
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	9604      	str	r6, [sp, #16]
 8009848:	f7ff ba17 	b.w	8008c7a <_vfiprintf_r+0x72>
 800984c:	f1bb 0f06 	cmp.w	fp, #6
 8009850:	46d8      	mov	r8, fp
 8009852:	bf28      	it	cs
 8009854:	f04f 0806 	movcs.w	r8, #6
 8009858:	4c50      	ldr	r4, [pc, #320]	; (800999c <_vfiprintf_r+0xd94>)
 800985a:	f8cd 8000 	str.w	r8, [sp]
 800985e:	9604      	str	r6, [sp, #16]
 8009860:	f7ff bb8f 	b.w	8008f82 <_vfiprintf_r+0x37a>
 8009864:	9b04      	ldr	r3, [sp, #16]
 8009866:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
 800986a:	bf14      	ite	ne
 800986c:	f853 6b04 	ldrne.w	r6, [r3], #4
 8009870:	f853 6b04 	ldreq.w	r6, [r3], #4
 8009874:	9304      	str	r3, [sp, #16]
 8009876:	bf1c      	itt	ne
 8009878:	4690      	movne	r8, r2
 800987a:	b2f6      	uxtbne	r6, r6
 800987c:	2301      	movs	r3, #1
 800987e:	f7ff bb13 	b.w	8008ea8 <_vfiprintf_r+0x2a0>
 8009882:	9b04      	ldr	r3, [sp, #16]
 8009884:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 8009888:	bf14      	ite	ne
 800988a:	f853 6b04 	ldrne.w	r6, [r3], #4
 800988e:	f853 6b04 	ldreq.w	r6, [r3], #4
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	bf1c      	itt	ne
 8009896:	4690      	movne	r8, r2
 8009898:	b2f6      	uxtbne	r6, r6
 800989a:	f7ff bb02 	b.w	8008ea2 <_vfiprintf_r+0x29a>
 800989e:	9a04      	ldr	r2, [sp, #16]
 80098a0:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 80098a4:	bf14      	ite	ne
 80098a6:	f852 6b04 	ldrne.w	r6, [r2], #4
 80098aa:	f852 6b04 	ldreq.w	r6, [r2], #4
 80098ae:	9204      	str	r2, [sp, #16]
 80098b0:	bf1c      	itt	ne
 80098b2:	4688      	movne	r8, r1
 80098b4:	b2f6      	uxtbne	r6, r6
 80098b6:	e734      	b.n	8009722 <_vfiprintf_r+0xb1a>
 80098b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098bc:	1ae4      	subs	r4, r4, r3
 80098be:	461a      	mov	r2, r3
 80098c0:	4620      	mov	r0, r4
 80098c2:	f7fd fdf9 	bl	80074b8 <strncpy>
 80098c6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80098ca:	b10b      	cbz	r3, 80098d0 <_vfiprintf_r+0xcc8>
 80098cc:	f109 0901 	add.w	r9, r9, #1
 80098d0:	4630      	mov	r0, r6
 80098d2:	4641      	mov	r1, r8
 80098d4:	220a      	movs	r2, #10
 80098d6:	2300      	movs	r3, #0
 80098d8:	2500      	movs	r5, #0
 80098da:	f001 ffad 	bl	800b838 <__aeabi_uldivmod>
 80098de:	e76a      	b.n	80097b6 <_vfiprintf_r+0xbae>
 80098e0:	2001      	movs	r0, #1
 80098e2:	460a      	mov	r2, r1
 80098e4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80098e8:	f7ff bb97 	b.w	800901a <_vfiprintf_r+0x412>
 80098ec:	9b06      	ldr	r3, [sp, #24]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f47f adb9 	bne.w	8009466 <_vfiprintf_r+0x85e>
 80098f4:	460a      	mov	r2, r1
 80098f6:	2001      	movs	r0, #1
 80098f8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80098fc:	f7ff bb8d 	b.w	800901a <_vfiprintf_r+0x412>
 8009900:	9e04      	ldr	r6, [sp, #16]
 8009902:	9a03      	ldr	r2, [sp, #12]
 8009904:	f856 3b04 	ldr.w	r3, [r6], #4
 8009908:	9604      	str	r6, [sp, #16]
 800990a:	801a      	strh	r2, [r3, #0]
 800990c:	f7ff b9b5 	b.w	8008c7a <_vfiprintf_r+0x72>
 8009910:	f343 18c0 	sbfx	r8, r3, #7, #1
 8009914:	b25e      	sxtb	r6, r3
 8009916:	4643      	mov	r3, r8
 8009918:	f7ff ba69 	b.w	8008dee <_vfiprintf_r+0x1e6>
 800991c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800991e:	f7fc ff03 	bl	8006728 <__retarget_lock_release_recursive>
 8009922:	f7ff baa5 	b.w	8008e70 <_vfiprintf_r+0x268>
 8009926:	f8cd b000 	str.w	fp, [sp]
 800992a:	9604      	str	r6, [sp, #16]
 800992c:	4683      	mov	fp, r0
 800992e:	f7ff ba78 	b.w	8008e22 <_vfiprintf_r+0x21a>
 8009932:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009934:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009936:	f8df a068 	ldr.w	sl, [pc, #104]	; 80099a0 <_vfiprintf_r+0xd98>
 800993a:	3201      	adds	r2, #1
 800993c:	e5df      	b.n	80094fe <_vfiprintf_r+0x8f6>
 800993e:	9901      	ldr	r1, [sp, #4]
 8009940:	9805      	ldr	r0, [sp, #20]
 8009942:	aa10      	add	r2, sp, #64	; 0x40
 8009944:	f7ff f91a 	bl	8008b7c <__sprint_r.part.0>
 8009948:	2800      	cmp	r0, #0
 800994a:	f43f aaef 	beq.w	8008f2c <_vfiprintf_r+0x324>
 800994e:	f7ff baef 	b.w	8008f30 <_vfiprintf_r+0x328>
 8009952:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009954:	f8df a048 	ldr.w	sl, [pc, #72]	; 80099a0 <_vfiprintf_r+0xd98>
 8009958:	3001      	adds	r0, #1
 800995a:	e620      	b.n	800959e <_vfiprintf_r+0x996>
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009960:	07db      	lsls	r3, r3, #31
 8009962:	d407      	bmi.n	8009974 <_vfiprintf_r+0xd6c>
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	899b      	ldrh	r3, [r3, #12]
 8009968:	059f      	lsls	r7, r3, #22
 800996a:	d403      	bmi.n	8009974 <_vfiprintf_r+0xd6c>
 800996c:	9b01      	ldr	r3, [sp, #4]
 800996e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009970:	f7fc feda 	bl	8006728 <__retarget_lock_release_recursive>
 8009974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009978:	9303      	str	r3, [sp, #12]
 800997a:	f7ff bae2 	b.w	8008f42 <_vfiprintf_r+0x33a>
 800997e:	f8df a024 	ldr.w	sl, [pc, #36]	; 80099a4 <_vfiprintf_r+0xd9c>
 8009982:	4684      	mov	ip, r0
 8009984:	e4e3      	b.n	800934e <_vfiprintf_r+0x746>
 8009986:	9a04      	ldr	r2, [sp, #16]
 8009988:	787b      	ldrb	r3, [r7, #1]
 800998a:	460f      	mov	r7, r1
 800998c:	f852 1b04 	ldr.w	r1, [r2], #4
 8009990:	9204      	str	r2, [sp, #16]
 8009992:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 8009996:	f7ff b98f 	b.w	8008cb8 <_vfiprintf_r+0xb0>
 800999a:	bf00      	nop
 800999c:	0800be00 	.word	0x0800be00
 80099a0:	0800c0e4 	.word	0x0800c0e4
 80099a4:	0800c0f4 	.word	0x0800c0f4

080099a8 <vfiprintf>:
 80099a8:	b410      	push	{r4}
 80099aa:	4c04      	ldr	r4, [pc, #16]	; (80099bc <vfiprintf+0x14>)
 80099ac:	4684      	mov	ip, r0
 80099ae:	4613      	mov	r3, r2
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	bc10      	pop	{r4}
 80099b4:	460a      	mov	r2, r1
 80099b6:	4661      	mov	r1, ip
 80099b8:	f7ff b926 	b.w	8008c08 <_vfiprintf_r>
 80099bc:	200000d8 	.word	0x200000d8

080099c0 <__sbprintf>:
 80099c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099c2:	461f      	mov	r7, r3
 80099c4:	898b      	ldrh	r3, [r1, #12]
 80099c6:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80099ca:	f023 0302 	bic.w	r3, r3, #2
 80099ce:	f8ad 300c 	strh.w	r3, [sp, #12]
 80099d2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80099d4:	9319      	str	r3, [sp, #100]	; 0x64
 80099d6:	89cb      	ldrh	r3, [r1, #14]
 80099d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80099dc:	69cb      	ldr	r3, [r1, #28]
 80099de:	9307      	str	r3, [sp, #28]
 80099e0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80099e2:	9309      	str	r3, [sp, #36]	; 0x24
 80099e4:	ab1a      	add	r3, sp, #104	; 0x68
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	9304      	str	r3, [sp, #16]
 80099ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ee:	4615      	mov	r5, r2
 80099f0:	4606      	mov	r6, r0
 80099f2:	9302      	str	r3, [sp, #8]
 80099f4:	9305      	str	r3, [sp, #20]
 80099f6:	a816      	add	r0, sp, #88	; 0x58
 80099f8:	2300      	movs	r3, #0
 80099fa:	460c      	mov	r4, r1
 80099fc:	9306      	str	r3, [sp, #24]
 80099fe:	f7fc fe83 	bl	8006708 <__retarget_lock_init_recursive>
 8009a02:	462a      	mov	r2, r5
 8009a04:	463b      	mov	r3, r7
 8009a06:	4669      	mov	r1, sp
 8009a08:	4630      	mov	r0, r6
 8009a0a:	f7ff f8fd 	bl	8008c08 <_vfiprintf_r>
 8009a0e:	1e05      	subs	r5, r0, #0
 8009a10:	db07      	blt.n	8009a22 <__sbprintf+0x62>
 8009a12:	4669      	mov	r1, sp
 8009a14:	4630      	mov	r0, r6
 8009a16:	f000 f92d 	bl	8009c74 <_fflush_r>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	bf18      	it	ne
 8009a1e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8009a22:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009a26:	065b      	lsls	r3, r3, #25
 8009a28:	d503      	bpl.n	8009a32 <__sbprintf+0x72>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a30:	81a3      	strh	r3, [r4, #12]
 8009a32:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009a34:	f7fc fe6c 	bl	8006710 <__retarget_lock_close_recursive>
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8009a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a40 <_wctomb_r>:
 8009a40:	b410      	push	{r4}
 8009a42:	4c03      	ldr	r4, [pc, #12]	; (8009a50 <_wctomb_r+0x10>)
 8009a44:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8009a48:	46a4      	mov	ip, r4
 8009a4a:	bc10      	pop	{r4}
 8009a4c:	4760      	bx	ip
 8009a4e:	bf00      	nop
 8009a50:	20000918 	.word	0x20000918

08009a54 <__ascii_wctomb>:
 8009a54:	b149      	cbz	r1, 8009a6a <__ascii_wctomb+0x16>
 8009a56:	2aff      	cmp	r2, #255	; 0xff
 8009a58:	d802      	bhi.n	8009a60 <__ascii_wctomb+0xc>
 8009a5a:	700a      	strb	r2, [r1, #0]
 8009a5c:	2001      	movs	r0, #1
 8009a5e:	4770      	bx	lr
 8009a60:	238a      	movs	r3, #138	; 0x8a
 8009a62:	6003      	str	r3, [r0, #0]
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a68:	4770      	bx	lr
 8009a6a:	4608      	mov	r0, r1
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop

08009a70 <__swsetup_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4b33      	ldr	r3, [pc, #204]	; (8009b40 <__swsetup_r+0xd0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4605      	mov	r5, r0
 8009a78:	460c      	mov	r4, r1
 8009a7a:	b10b      	cbz	r3, 8009a80 <__swsetup_r+0x10>
 8009a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a7e:	b312      	cbz	r2, 8009ac6 <__swsetup_r+0x56>
 8009a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a84:	0718      	lsls	r0, r3, #28
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	d525      	bpl.n	8009ad6 <__swsetup_r+0x66>
 8009a8a:	6921      	ldr	r1, [r4, #16]
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	d02d      	beq.n	8009aec <__swsetup_r+0x7c>
 8009a90:	f012 0001 	ands.w	r0, r2, #1
 8009a94:	d007      	beq.n	8009aa6 <__swsetup_r+0x36>
 8009a96:	2000      	movs	r0, #0
 8009a98:	60a0      	str	r0, [r4, #8]
 8009a9a:	6960      	ldr	r0, [r4, #20]
 8009a9c:	4240      	negs	r0, r0
 8009a9e:	61a0      	str	r0, [r4, #24]
 8009aa0:	b139      	cbz	r1, 8009ab2 <__swsetup_r+0x42>
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	bd38      	pop	{r3, r4, r5, pc}
 8009aa6:	0795      	lsls	r5, r2, #30
 8009aa8:	bf58      	it	pl
 8009aaa:	6960      	ldrpl	r0, [r4, #20]
 8009aac:	60a0      	str	r0, [r4, #8]
 8009aae:	2900      	cmp	r1, #0
 8009ab0:	d1f7      	bne.n	8009aa2 <__swsetup_r+0x32>
 8009ab2:	0612      	lsls	r2, r2, #24
 8009ab4:	bf58      	it	pl
 8009ab6:	4608      	movpl	r0, r1
 8009ab8:	d5f4      	bpl.n	8009aa4 <__swsetup_r+0x34>
 8009aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009abe:	81a3      	strh	r3, [r4, #12]
 8009ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ac4:	bd38      	pop	{r3, r4, r5, pc}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f980 	bl	8009dcc <__sinit>
 8009acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ad0:	0718      	lsls	r0, r3, #28
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	d4d9      	bmi.n	8009a8a <__swsetup_r+0x1a>
 8009ad6:	06d1      	lsls	r1, r2, #27
 8009ad8:	d52a      	bpl.n	8009b30 <__swsetup_r+0xc0>
 8009ada:	0752      	lsls	r2, r2, #29
 8009adc:	d414      	bmi.n	8009b08 <__swsetup_r+0x98>
 8009ade:	6921      	ldr	r1, [r4, #16]
 8009ae0:	f043 0308 	orr.w	r3, r3, #8
 8009ae4:	81a3      	strh	r3, [r4, #12]
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	2900      	cmp	r1, #0
 8009aea:	d1d1      	bne.n	8009a90 <__swsetup_r+0x20>
 8009aec:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8009af0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009af4:	d0cc      	beq.n	8009a90 <__swsetup_r+0x20>
 8009af6:	4621      	mov	r1, r4
 8009af8:	4628      	mov	r0, r5
 8009afa:	f000 fd07 	bl	800a50c <__smakebuf_r>
 8009afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b02:	6921      	ldr	r1, [r4, #16]
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	e7c3      	b.n	8009a90 <__swsetup_r+0x20>
 8009b08:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009b0a:	b151      	cbz	r1, 8009b22 <__swsetup_r+0xb2>
 8009b0c:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8009b10:	4291      	cmp	r1, r2
 8009b12:	d004      	beq.n	8009b1e <__swsetup_r+0xae>
 8009b14:	4628      	mov	r0, r5
 8009b16:	f7fc fce5 	bl	80064e4 <_free_r>
 8009b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	6322      	str	r2, [r4, #48]	; 0x30
 8009b22:	6921      	ldr	r1, [r4, #16]
 8009b24:	2200      	movs	r2, #0
 8009b26:	e9c4 1200 	strd	r1, r2, [r4]
 8009b2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b2e:	e7d7      	b.n	8009ae0 <__swsetup_r+0x70>
 8009b30:	2209      	movs	r2, #9
 8009b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b36:	602a      	str	r2, [r5, #0]
 8009b38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b3c:	81a3      	strh	r3, [r4, #12]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	200000d8 	.word	0x200000d8

08009b44 <abort>:
 8009b44:	b508      	push	{r3, lr}
 8009b46:	2006      	movs	r0, #6
 8009b48:	f000 fe1c 	bl	800a784 <raise>
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	f002 f835 	bl	800bbbc <_exit>
 8009b52:	bf00      	nop

08009b54 <__sflush_r>:
 8009b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	0711      	lsls	r1, r2, #28
 8009b5e:	4607      	mov	r7, r0
 8009b60:	d442      	bmi.n	8009be8 <__sflush_r+0x94>
 8009b62:	6863      	ldr	r3, [r4, #4]
 8009b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	81a2      	strh	r2, [r4, #12]
 8009b6c:	dd59      	ble.n	8009c22 <__sflush_r+0xce>
 8009b6e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009b70:	2d00      	cmp	r5, #0
 8009b72:	d054      	beq.n	8009c1e <__sflush_r+0xca>
 8009b74:	2300      	movs	r3, #0
 8009b76:	683e      	ldr	r6, [r7, #0]
 8009b78:	603b      	str	r3, [r7, #0]
 8009b7a:	b293      	uxth	r3, r2
 8009b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b80:	d153      	bne.n	8009c2a <__sflush_r+0xd6>
 8009b82:	69e1      	ldr	r1, [r4, #28]
 8009b84:	2301      	movs	r3, #1
 8009b86:	4638      	mov	r0, r7
 8009b88:	47a8      	blx	r5
 8009b8a:	1c42      	adds	r2, r0, #1
 8009b8c:	d063      	beq.n	8009c56 <__sflush_r+0x102>
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8009b92:	075b      	lsls	r3, r3, #29
 8009b94:	d505      	bpl.n	8009ba2 <__sflush_r+0x4e>
 8009b96:	6863      	ldr	r3, [r4, #4]
 8009b98:	1ac0      	subs	r0, r0, r3
 8009b9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b9c:	b10b      	cbz	r3, 8009ba2 <__sflush_r+0x4e>
 8009b9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009ba0:	1ac0      	subs	r0, r0, r3
 8009ba2:	69e1      	ldr	r1, [r4, #28]
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4638      	mov	r0, r7
 8009baa:	47a8      	blx	r5
 8009bac:	1c41      	adds	r1, r0, #1
 8009bae:	d13e      	bne.n	8009c2e <__sflush_r+0xda>
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d03b      	beq.n	8009c2e <__sflush_r+0xda>
 8009bb6:	2b1d      	cmp	r3, #29
 8009bb8:	d001      	beq.n	8009bbe <__sflush_r+0x6a>
 8009bba:	2b16      	cmp	r3, #22
 8009bbc:	d152      	bne.n	8009c64 <__sflush_r+0x110>
 8009bbe:	89a3      	ldrh	r3, [r4, #12]
 8009bc0:	6922      	ldr	r2, [r4, #16]
 8009bc2:	6022      	str	r2, [r4, #0]
 8009bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bc8:	2100      	movs	r1, #0
 8009bca:	6061      	str	r1, [r4, #4]
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009bd0:	603e      	str	r6, [r7, #0]
 8009bd2:	b321      	cbz	r1, 8009c1e <__sflush_r+0xca>
 8009bd4:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009bd8:	4299      	cmp	r1, r3
 8009bda:	d002      	beq.n	8009be2 <__sflush_r+0x8e>
 8009bdc:	4638      	mov	r0, r7
 8009bde:	f7fc fc81 	bl	80064e4 <_free_r>
 8009be2:	2000      	movs	r0, #0
 8009be4:	6320      	str	r0, [r4, #48]	; 0x30
 8009be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be8:	6926      	ldr	r6, [r4, #16]
 8009bea:	b1c6      	cbz	r6, 8009c1e <__sflush_r+0xca>
 8009bec:	b293      	uxth	r3, r2
 8009bee:	6825      	ldr	r5, [r4, #0]
 8009bf0:	6026      	str	r6, [r4, #0]
 8009bf2:	079a      	lsls	r2, r3, #30
 8009bf4:	bf0c      	ite	eq
 8009bf6:	6963      	ldreq	r3, [r4, #20]
 8009bf8:	2300      	movne	r3, #0
 8009bfa:	1bad      	subs	r5, r5, r6
 8009bfc:	60a3      	str	r3, [r4, #8]
 8009bfe:	e00c      	b.n	8009c1a <__sflush_r+0xc6>
 8009c00:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8009c04:	69e1      	ldr	r1, [r4, #28]
 8009c06:	462b      	mov	r3, r5
 8009c08:	4632      	mov	r2, r6
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	47e0      	blx	ip
 8009c0e:	f1b0 0c00 	subs.w	ip, r0, #0
 8009c12:	eba5 050c 	sub.w	r5, r5, ip
 8009c16:	4466      	add	r6, ip
 8009c18:	dd16      	ble.n	8009c48 <__sflush_r+0xf4>
 8009c1a:	2d00      	cmp	r5, #0
 8009c1c:	dcf0      	bgt.n	8009c00 <__sflush_r+0xac>
 8009c1e:	2000      	movs	r0, #0
 8009c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dca2      	bgt.n	8009b6e <__sflush_r+0x1a>
 8009c28:	e7f9      	b.n	8009c1e <__sflush_r+0xca>
 8009c2a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009c2c:	e7b1      	b.n	8009b92 <__sflush_r+0x3e>
 8009c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	6022      	str	r2, [r4, #0]
 8009c36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	04db      	lsls	r3, r3, #19
 8009c40:	6062      	str	r2, [r4, #4]
 8009c42:	d5c4      	bpl.n	8009bce <__sflush_r+0x7a>
 8009c44:	6520      	str	r0, [r4, #80]	; 0x50
 8009c46:	e7c2      	b.n	8009bce <__sflush_r+0x7a>
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c52:	81a3      	strh	r3, [r4, #12]
 8009c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d098      	beq.n	8009b8e <__sflush_r+0x3a>
 8009c5c:	2b1d      	cmp	r3, #29
 8009c5e:	d006      	beq.n	8009c6e <__sflush_r+0x11a>
 8009c60:	2b16      	cmp	r3, #22
 8009c62:	d004      	beq.n	8009c6e <__sflush_r+0x11a>
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c6a:	81a3      	strh	r3, [r4, #12]
 8009c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c6e:	603e      	str	r6, [r7, #0]
 8009c70:	e7d5      	b.n	8009c1e <__sflush_r+0xca>
 8009c72:	bf00      	nop

08009c74 <_fflush_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	460c      	mov	r4, r1
 8009c78:	4605      	mov	r5, r0
 8009c7a:	b108      	cbz	r0, 8009c80 <_fflush_r+0xc>
 8009c7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009c7e:	b1a3      	cbz	r3, 8009caa <_fflush_r+0x36>
 8009c80:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8009c84:	b1b8      	cbz	r0, 8009cb6 <_fflush_r+0x42>
 8009c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c88:	07db      	lsls	r3, r3, #31
 8009c8a:	d401      	bmi.n	8009c90 <_fflush_r+0x1c>
 8009c8c:	0581      	lsls	r1, r0, #22
 8009c8e:	d515      	bpl.n	8009cbc <_fflush_r+0x48>
 8009c90:	4628      	mov	r0, r5
 8009c92:	4621      	mov	r1, r4
 8009c94:	f7ff ff5e 	bl	8009b54 <__sflush_r>
 8009c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c9a:	07da      	lsls	r2, r3, #31
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	d402      	bmi.n	8009ca6 <_fflush_r+0x32>
 8009ca0:	89a3      	ldrh	r3, [r4, #12]
 8009ca2:	059b      	lsls	r3, r3, #22
 8009ca4:	d50e      	bpl.n	8009cc4 <_fflush_r+0x50>
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	bd38      	pop	{r3, r4, r5, pc}
 8009caa:	f000 f88f 	bl	8009dcc <__sinit>
 8009cae:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d1e7      	bne.n	8009c86 <_fflush_r+0x12>
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	4628      	mov	r0, r5
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cbe:	f7fc fd2b 	bl	8006718 <__retarget_lock_acquire_recursive>
 8009cc2:	e7e5      	b.n	8009c90 <_fflush_r+0x1c>
 8009cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cc6:	f7fc fd2f 	bl	8006728 <__retarget_lock_release_recursive>
 8009cca:	4628      	mov	r0, r5
 8009ccc:	bd38      	pop	{r3, r4, r5, pc}
 8009cce:	bf00      	nop

08009cd0 <fflush>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	b348      	cbz	r0, 8009d28 <fflush+0x58>
 8009cd4:	4b18      	ldr	r3, [pc, #96]	; (8009d38 <fflush+0x68>)
 8009cd6:	681d      	ldr	r5, [r3, #0]
 8009cd8:	4604      	mov	r4, r0
 8009cda:	b10d      	cbz	r5, 8009ce0 <fflush+0x10>
 8009cdc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8009cde:	b1bb      	cbz	r3, 8009d10 <fflush+0x40>
 8009ce0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8009ce4:	b188      	cbz	r0, 8009d0a <fflush+0x3a>
 8009ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ce8:	07db      	lsls	r3, r3, #31
 8009cea:	d401      	bmi.n	8009cf0 <fflush+0x20>
 8009cec:	0581      	lsls	r1, r0, #22
 8009cee:	d513      	bpl.n	8009d18 <fflush+0x48>
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	f7ff ff2e 	bl	8009b54 <__sflush_r>
 8009cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cfa:	07da      	lsls	r2, r3, #31
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	d402      	bmi.n	8009d06 <fflush+0x36>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	059b      	lsls	r3, r3, #22
 8009d04:	d50c      	bpl.n	8009d20 <fflush+0x50>
 8009d06:	4628      	mov	r0, r5
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	4628      	mov	r0, r5
 8009d12:	f000 f85b 	bl	8009dcc <__sinit>
 8009d16:	e7e3      	b.n	8009ce0 <fflush+0x10>
 8009d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d1a:	f7fc fcfd 	bl	8006718 <__retarget_lock_acquire_recursive>
 8009d1e:	e7e7      	b.n	8009cf0 <fflush+0x20>
 8009d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d22:	f7fc fd01 	bl	8006728 <__retarget_lock_release_recursive>
 8009d26:	e7ee      	b.n	8009d06 <fflush+0x36>
 8009d28:	4b04      	ldr	r3, [pc, #16]	; (8009d3c <fflush+0x6c>)
 8009d2a:	4905      	ldr	r1, [pc, #20]	; (8009d40 <fflush+0x70>)
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d32:	f000 bbc7 	b.w	800a4c4 <_fwalk_reent>
 8009d36:	bf00      	nop
 8009d38:	200000d8 	.word	0x200000d8
 8009d3c:	0800bdc4 	.word	0x0800bdc4
 8009d40:	08009c75 	.word	0x08009c75

08009d44 <_cleanup_r>:
 8009d44:	4901      	ldr	r1, [pc, #4]	; (8009d4c <_cleanup_r+0x8>)
 8009d46:	f000 bbbd 	b.w	800a4c4 <_fwalk_reent>
 8009d4a:	bf00      	nop
 8009d4c:	0800ab39 	.word	0x0800ab39

08009d50 <__fp_lock>:
 8009d50:	b508      	push	{r3, lr}
 8009d52:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009d54:	07da      	lsls	r2, r3, #31
 8009d56:	d402      	bmi.n	8009d5e <__fp_lock+0xe>
 8009d58:	8983      	ldrh	r3, [r0, #12]
 8009d5a:	059b      	lsls	r3, r3, #22
 8009d5c:	d501      	bpl.n	8009d62 <__fp_lock+0x12>
 8009d5e:	2000      	movs	r0, #0
 8009d60:	bd08      	pop	{r3, pc}
 8009d62:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8009d64:	f7fc fcd8 	bl	8006718 <__retarget_lock_acquire_recursive>
 8009d68:	2000      	movs	r0, #0
 8009d6a:	bd08      	pop	{r3, pc}

08009d6c <__fp_unlock>:
 8009d6c:	b508      	push	{r3, lr}
 8009d6e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8009d70:	07da      	lsls	r2, r3, #31
 8009d72:	d402      	bmi.n	8009d7a <__fp_unlock+0xe>
 8009d74:	8983      	ldrh	r3, [r0, #12]
 8009d76:	059b      	lsls	r3, r3, #22
 8009d78:	d501      	bpl.n	8009d7e <__fp_unlock+0x12>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	bd08      	pop	{r3, pc}
 8009d7e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8009d80:	f7fc fcd2 	bl	8006728 <__retarget_lock_release_recursive>
 8009d84:	2000      	movs	r0, #0
 8009d86:	bd08      	pop	{r3, pc}

08009d88 <__sfmoreglue>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	2268      	movs	r2, #104	; 0x68
 8009d8c:	1e4d      	subs	r5, r1, #1
 8009d8e:	fb02 f505 	mul.w	r5, r2, r5
 8009d92:	460e      	mov	r6, r1
 8009d94:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d98:	f7f9 fa42 	bl	8003220 <_malloc_r>
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	b140      	cbz	r0, 8009db2 <__sfmoreglue+0x2a>
 8009da0:	2100      	movs	r1, #0
 8009da2:	300c      	adds	r0, #12
 8009da4:	e9c4 1600 	strd	r1, r6, [r4]
 8009da8:	60a0      	str	r0, [r4, #8]
 8009daa:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009dae:	f7fe fb39 	bl	8008424 <memset>
 8009db2:	4620      	mov	r0, r4
 8009db4:	bd70      	pop	{r4, r5, r6, pc}
 8009db6:	bf00      	nop

08009db8 <_cleanup>:
 8009db8:	4b02      	ldr	r3, [pc, #8]	; (8009dc4 <_cleanup+0xc>)
 8009dba:	4903      	ldr	r1, [pc, #12]	; (8009dc8 <_cleanup+0x10>)
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	f000 bb81 	b.w	800a4c4 <_fwalk_reent>
 8009dc2:	bf00      	nop
 8009dc4:	0800bdc4 	.word	0x0800bdc4
 8009dc8:	0800ab39 	.word	0x0800ab39

08009dcc <__sinit>:
 8009dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	4839      	ldr	r0, [pc, #228]	; (8009eb8 <__sinit+0xec>)
 8009dd4:	f7fc fca0 	bl	8006718 <__retarget_lock_acquire_recursive>
 8009dd8:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8009ddc:	2c00      	cmp	r4, #0
 8009dde:	d166      	bne.n	8009eae <__sinit+0xe2>
 8009de0:	f8da 5004 	ldr.w	r5, [sl, #4]
 8009de4:	4a35      	ldr	r2, [pc, #212]	; (8009ebc <__sinit+0xf0>)
 8009de6:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
 8009dea:	2303      	movs	r3, #3
 8009dec:	e9ca 43b8 	strd	r4, r3, [sl, #736]	; 0x2e0
 8009df0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8009ec0 <__sinit+0xf4>
 8009df4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8009ec4 <__sinit+0xf8>
 8009df8:	4f33      	ldr	r7, [pc, #204]	; (8009ec8 <__sinit+0xfc>)
 8009dfa:	4e34      	ldr	r6, [pc, #208]	; (8009ecc <__sinit+0x100>)
 8009dfc:	2304      	movs	r3, #4
 8009dfe:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
 8009e02:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
 8009e06:	4621      	mov	r1, r4
 8009e08:	e9c5 4302 	strd	r4, r3, [r5, #8]
 8009e0c:	e9c5 4400 	strd	r4, r4, [r5]
 8009e10:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8009e14:	666c      	str	r4, [r5, #100]	; 0x64
 8009e16:	2208      	movs	r2, #8
 8009e18:	61ac      	str	r4, [r5, #24]
 8009e1a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8009e1e:	f7fe fb01 	bl	8008424 <memset>
 8009e22:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8009e26:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8009e2a:	62ee      	str	r6, [r5, #44]	; 0x2c
 8009e2c:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8009e30:	f7fc fc6a 	bl	8006708 <__retarget_lock_init_recursive>
 8009e34:	f8da 5008 	ldr.w	r5, [sl, #8]
 8009e38:	4b25      	ldr	r3, [pc, #148]	; (8009ed0 <__sinit+0x104>)
 8009e3a:	60eb      	str	r3, [r5, #12]
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	e9c5 4400 	strd	r4, r4, [r5]
 8009e42:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8009e46:	666c      	str	r4, [r5, #100]	; 0x64
 8009e48:	60ac      	str	r4, [r5, #8]
 8009e4a:	61ac      	str	r4, [r5, #24]
 8009e4c:	2208      	movs	r2, #8
 8009e4e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8009e52:	f7fe fae7 	bl	8008424 <memset>
 8009e56:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8009e5a:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8009e5e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8009e60:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8009e64:	f7fc fc50 	bl	8006708 <__retarget_lock_init_recursive>
 8009e68:	f8da 500c 	ldr.w	r5, [sl, #12]
 8009e6c:	4b19      	ldr	r3, [pc, #100]	; (8009ed4 <__sinit+0x108>)
 8009e6e:	60eb      	str	r3, [r5, #12]
 8009e70:	4621      	mov	r1, r4
 8009e72:	e9c5 4400 	strd	r4, r4, [r5]
 8009e76:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8009e7a:	666c      	str	r4, [r5, #100]	; 0x64
 8009e7c:	60ac      	str	r4, [r5, #8]
 8009e7e:	61ac      	str	r4, [r5, #24]
 8009e80:	2208      	movs	r2, #8
 8009e82:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8009e86:	f7fe facd 	bl	8008424 <memset>
 8009e8a:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8009e8e:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8009e92:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
 8009e96:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
 8009e9a:	f7fc fc35 	bl	8006708 <__retarget_lock_init_recursive>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 8009ea4:	4804      	ldr	r0, [pc, #16]	; (8009eb8 <__sinit+0xec>)
 8009ea6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eaa:	f7fc bc3d 	b.w	8006728 <__retarget_lock_release_recursive>
 8009eae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb2:	4801      	ldr	r0, [pc, #4]	; (8009eb8 <__sinit+0xec>)
 8009eb4:	f7fc bc38 	b.w	8006728 <__retarget_lock_release_recursive>
 8009eb8:	20000b7c 	.word	0x20000b7c
 8009ebc:	08009d45 	.word	0x08009d45
 8009ec0:	0800a905 	.word	0x0800a905
 8009ec4:	0800a92d 	.word	0x0800a92d
 8009ec8:	0800a96d 	.word	0x0800a96d
 8009ecc:	0800a98d 	.word	0x0800a98d
 8009ed0:	00010009 	.word	0x00010009
 8009ed4:	00020012 	.word	0x00020012

08009ed8 <__sfp>:
 8009ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009edc:	4607      	mov	r7, r0
 8009ede:	482d      	ldr	r0, [pc, #180]	; (8009f94 <__sfp+0xbc>)
 8009ee0:	f7fc fc1a 	bl	8006718 <__retarget_lock_acquire_recursive>
 8009ee4:	4b2c      	ldr	r3, [pc, #176]	; (8009f98 <__sfp+0xc0>)
 8009ee6:	681e      	ldr	r6, [r3, #0]
 8009ee8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8009eea:	b393      	cbz	r3, 8009f52 <__sfp+0x7a>
 8009eec:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
 8009ef0:	f04f 0804 	mov.w	r8, #4
 8009ef4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	d504      	bpl.n	8009f06 <__sfp+0x2e>
 8009efc:	e025      	b.n	8009f4a <__sfp+0x72>
 8009efe:	1c5a      	adds	r2, r3, #1
 8009f00:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8009f04:	d021      	beq.n	8009f4a <__sfp+0x72>
 8009f06:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	2d00      	cmp	r5, #0
 8009f0e:	d1f6      	bne.n	8009efe <__sfp+0x26>
 8009f10:	4b22      	ldr	r3, [pc, #136]	; (8009f9c <__sfp+0xc4>)
 8009f12:	60e3      	str	r3, [r4, #12]
 8009f14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f18:	6665      	str	r5, [r4, #100]	; 0x64
 8009f1a:	f7fc fbf5 	bl	8006708 <__retarget_lock_init_recursive>
 8009f1e:	481d      	ldr	r0, [pc, #116]	; (8009f94 <__sfp+0xbc>)
 8009f20:	f7fc fc02 	bl	8006728 <__retarget_lock_release_recursive>
 8009f24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f2c:	6025      	str	r5, [r4, #0]
 8009f2e:	61a5      	str	r5, [r4, #24]
 8009f30:	2208      	movs	r2, #8
 8009f32:	4629      	mov	r1, r5
 8009f34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f38:	f7fe fa74 	bl	8008424 <memset>
 8009f3c:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8009f40:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 8009f44:	4620      	mov	r0, r4
 8009f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f4a:	6835      	ldr	r5, [r6, #0]
 8009f4c:	b12d      	cbz	r5, 8009f5a <__sfp+0x82>
 8009f4e:	462e      	mov	r6, r5
 8009f50:	e7d0      	b.n	8009ef4 <__sfp+0x1c>
 8009f52:	4630      	mov	r0, r6
 8009f54:	f7ff ff3a 	bl	8009dcc <__sinit>
 8009f58:	e7c8      	b.n	8009eec <__sfp+0x14>
 8009f5a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8009f5e:	4638      	mov	r0, r7
 8009f60:	f7f9 f95e 	bl	8003220 <_malloc_r>
 8009f64:	4604      	mov	r4, r0
 8009f66:	b168      	cbz	r0, 8009f84 <__sfp+0xac>
 8009f68:	6005      	str	r5, [r0, #0]
 8009f6a:	f8c0 8004 	str.w	r8, [r0, #4]
 8009f6e:	300c      	adds	r0, #12
 8009f70:	4629      	mov	r1, r5
 8009f72:	60a0      	str	r0, [r4, #8]
 8009f74:	4625      	mov	r5, r4
 8009f76:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8009f7a:	f7fe fa53 	bl	8008424 <memset>
 8009f7e:	6034      	str	r4, [r6, #0]
 8009f80:	462e      	mov	r6, r5
 8009f82:	e7b7      	b.n	8009ef4 <__sfp+0x1c>
 8009f84:	4803      	ldr	r0, [pc, #12]	; (8009f94 <__sfp+0xbc>)
 8009f86:	6034      	str	r4, [r6, #0]
 8009f88:	f7fc fbce 	bl	8006728 <__retarget_lock_release_recursive>
 8009f8c:	230c      	movs	r3, #12
 8009f8e:	603b      	str	r3, [r7, #0]
 8009f90:	e7d8      	b.n	8009f44 <__sfp+0x6c>
 8009f92:	bf00      	nop
 8009f94:	20000b78 	.word	0x20000b78
 8009f98:	0800bdc4 	.word	0x0800bdc4
 8009f9c:	ffff0001 	.word	0xffff0001

08009fa0 <__sfp_lock_acquire>:
 8009fa0:	4801      	ldr	r0, [pc, #4]	; (8009fa8 <__sfp_lock_acquire+0x8>)
 8009fa2:	f7fc bbb9 	b.w	8006718 <__retarget_lock_acquire_recursive>
 8009fa6:	bf00      	nop
 8009fa8:	20000b78 	.word	0x20000b78

08009fac <__sfp_lock_release>:
 8009fac:	4801      	ldr	r0, [pc, #4]	; (8009fb4 <__sfp_lock_release+0x8>)
 8009fae:	f7fc bbbb 	b.w	8006728 <__retarget_lock_release_recursive>
 8009fb2:	bf00      	nop
 8009fb4:	20000b78 	.word	0x20000b78

08009fb8 <__sinit_lock_acquire>:
 8009fb8:	4801      	ldr	r0, [pc, #4]	; (8009fc0 <__sinit_lock_acquire+0x8>)
 8009fba:	f7fc bbad 	b.w	8006718 <__retarget_lock_acquire_recursive>
 8009fbe:	bf00      	nop
 8009fc0:	20000b7c 	.word	0x20000b7c

08009fc4 <__sinit_lock_release>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__sinit_lock_release+0x8>)
 8009fc6:	f7fc bbaf 	b.w	8006728 <__retarget_lock_release_recursive>
 8009fca:	bf00      	nop
 8009fcc:	20000b7c 	.word	0x20000b7c

08009fd0 <__fp_lock_all>:
 8009fd0:	b508      	push	{r3, lr}
 8009fd2:	4805      	ldr	r0, [pc, #20]	; (8009fe8 <__fp_lock_all+0x18>)
 8009fd4:	f7fc fba0 	bl	8006718 <__retarget_lock_acquire_recursive>
 8009fd8:	4b04      	ldr	r3, [pc, #16]	; (8009fec <__fp_lock_all+0x1c>)
 8009fda:	4905      	ldr	r1, [pc, #20]	; (8009ff0 <__fp_lock_all+0x20>)
 8009fdc:	6818      	ldr	r0, [r3, #0]
 8009fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009fe2:	f000 ba4f 	b.w	800a484 <_fwalk>
 8009fe6:	bf00      	nop
 8009fe8:	20000b78 	.word	0x20000b78
 8009fec:	200000d8 	.word	0x200000d8
 8009ff0:	08009d51 	.word	0x08009d51

08009ff4 <__fp_unlock_all>:
 8009ff4:	b508      	push	{r3, lr}
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <__fp_unlock_all+0x18>)
 8009ff8:	4905      	ldr	r1, [pc, #20]	; (800a010 <__fp_unlock_all+0x1c>)
 8009ffa:	6818      	ldr	r0, [r3, #0]
 8009ffc:	f000 fa42 	bl	800a484 <_fwalk>
 800a000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a004:	4803      	ldr	r0, [pc, #12]	; (800a014 <__fp_unlock_all+0x20>)
 800a006:	f7fc bb8f 	b.w	8006728 <__retarget_lock_release_recursive>
 800a00a:	bf00      	nop
 800a00c:	200000d8 	.word	0x200000d8
 800a010:	08009d6d 	.word	0x08009d6d
 800a014:	20000b78 	.word	0x20000b78

0800a018 <__fputwc>:
 800a018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a01c:	b083      	sub	sp, #12
 800a01e:	4607      	mov	r7, r0
 800a020:	4688      	mov	r8, r1
 800a022:	4614      	mov	r4, r2
 800a024:	f7fe f93c 	bl	80082a0 <__locale_mb_cur_max>
 800a028:	2801      	cmp	r0, #1
 800a02a:	d103      	bne.n	800a034 <__fputwc+0x1c>
 800a02c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800a030:	2bfe      	cmp	r3, #254	; 0xfe
 800a032:	d937      	bls.n	800a0a4 <__fputwc+0x8c>
 800a034:	4642      	mov	r2, r8
 800a036:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a03a:	a901      	add	r1, sp, #4
 800a03c:	4638      	mov	r0, r7
 800a03e:	f000 fd0d 	bl	800aa5c <_wcrtomb_r>
 800a042:	1c42      	adds	r2, r0, #1
 800a044:	4606      	mov	r6, r0
 800a046:	d033      	beq.n	800a0b0 <__fputwc+0x98>
 800a048:	b338      	cbz	r0, 800a09a <__fputwc+0x82>
 800a04a:	f89d c004 	ldrb.w	ip, [sp, #4]
 800a04e:	f10d 0905 	add.w	r9, sp, #5
 800a052:	2500      	movs	r5, #0
 800a054:	e009      	b.n	800a06a <__fputwc+0x52>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	1c5a      	adds	r2, r3, #1
 800a05a:	6022      	str	r2, [r4, #0]
 800a05c:	f883 c000 	strb.w	ip, [r3]
 800a060:	3501      	adds	r5, #1
 800a062:	42b5      	cmp	r5, r6
 800a064:	d219      	bcs.n	800a09a <__fputwc+0x82>
 800a066:	f819 cb01 	ldrb.w	ip, [r9], #1
 800a06a:	68a3      	ldr	r3, [r4, #8]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	60a3      	str	r3, [r4, #8]
 800a072:	daf0      	bge.n	800a056 <__fputwc+0x3e>
 800a074:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800a078:	4573      	cmp	r3, lr
 800a07a:	4661      	mov	r1, ip
 800a07c:	4622      	mov	r2, r4
 800a07e:	4638      	mov	r0, r7
 800a080:	db02      	blt.n	800a088 <__fputwc+0x70>
 800a082:	f1bc 0f0a 	cmp.w	ip, #10
 800a086:	d1e6      	bne.n	800a056 <__fputwc+0x3e>
 800a088:	f000 fc84 	bl	800a994 <__swbuf_r>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d1e7      	bne.n	800a060 <__fputwc+0x48>
 800a090:	4606      	mov	r6, r0
 800a092:	4630      	mov	r0, r6
 800a094:	b003      	add	sp, #12
 800a096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a09a:	4646      	mov	r6, r8
 800a09c:	4630      	mov	r0, r6
 800a09e:	b003      	add	sp, #12
 800a0a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0a4:	fa5f fc88 	uxtb.w	ip, r8
 800a0a8:	f88d c004 	strb.w	ip, [sp, #4]
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	e7ce      	b.n	800a04e <__fputwc+0x36>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	b003      	add	sp, #12
 800a0bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a0c0 <_fputwc_r>:
 800a0c0:	b530      	push	{r4, r5, lr}
 800a0c2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a0c4:	f013 0f01 	tst.w	r3, #1
 800a0c8:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800a0cc:	4614      	mov	r4, r2
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	d101      	bne.n	800a0da <_fputwc_r+0x1a>
 800a0d6:	0598      	lsls	r0, r3, #22
 800a0d8:	d51c      	bpl.n	800a114 <_fputwc_r+0x54>
 800a0da:	0490      	lsls	r0, r2, #18
 800a0dc:	d406      	bmi.n	800a0ec <_fputwc_r+0x2c>
 800a0de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a0e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0e8:	81a3      	strh	r3, [r4, #12]
 800a0ea:	6662      	str	r2, [r4, #100]	; 0x64
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f7ff ff92 	bl	800a018 <__fputwc>
 800a0f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0f6:	07da      	lsls	r2, r3, #31
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	d402      	bmi.n	800a102 <_fputwc_r+0x42>
 800a0fc:	89a3      	ldrh	r3, [r4, #12]
 800a0fe:	059b      	lsls	r3, r3, #22
 800a100:	d502      	bpl.n	800a108 <_fputwc_r+0x48>
 800a102:	4628      	mov	r0, r5
 800a104:	b003      	add	sp, #12
 800a106:	bd30      	pop	{r4, r5, pc}
 800a108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a10a:	f7fc fb0d 	bl	8006728 <__retarget_lock_release_recursive>
 800a10e:	4628      	mov	r0, r5
 800a110:	b003      	add	sp, #12
 800a112:	bd30      	pop	{r4, r5, pc}
 800a114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a116:	9101      	str	r1, [sp, #4]
 800a118:	f7fc fafe 	bl	8006718 <__retarget_lock_acquire_recursive>
 800a11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a120:	9901      	ldr	r1, [sp, #4]
 800a122:	b29a      	uxth	r2, r3
 800a124:	e7d9      	b.n	800a0da <_fputwc_r+0x1a>
 800a126:	bf00      	nop

0800a128 <fputwc>:
 800a128:	4b1b      	ldr	r3, [pc, #108]	; (800a198 <fputwc+0x70>)
 800a12a:	b570      	push	{r4, r5, r6, lr}
 800a12c:	681e      	ldr	r6, [r3, #0]
 800a12e:	4605      	mov	r5, r0
 800a130:	460c      	mov	r4, r1
 800a132:	b10e      	cbz	r6, 800a138 <fputwc+0x10>
 800a134:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800a136:	b1fb      	cbz	r3, 800a178 <fputwc+0x50>
 800a138:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a13a:	f013 0f01 	tst.w	r3, #1
 800a13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a142:	b29a      	uxth	r2, r3
 800a144:	d101      	bne.n	800a14a <fputwc+0x22>
 800a146:	0598      	lsls	r0, r3, #22
 800a148:	d51f      	bpl.n	800a18a <fputwc+0x62>
 800a14a:	0491      	lsls	r1, r2, #18
 800a14c:	d406      	bmi.n	800a15c <fputwc+0x34>
 800a14e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a150:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a158:	81a3      	strh	r3, [r4, #12]
 800a15a:	6662      	str	r2, [r4, #100]	; 0x64
 800a15c:	4622      	mov	r2, r4
 800a15e:	4629      	mov	r1, r5
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff ff59 	bl	800a018 <__fputwc>
 800a166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a168:	07da      	lsls	r2, r3, #31
 800a16a:	4605      	mov	r5, r0
 800a16c:	d402      	bmi.n	800a174 <fputwc+0x4c>
 800a16e:	89a3      	ldrh	r3, [r4, #12]
 800a170:	059b      	lsls	r3, r3, #22
 800a172:	d505      	bpl.n	800a180 <fputwc+0x58>
 800a174:	4628      	mov	r0, r5
 800a176:	bd70      	pop	{r4, r5, r6, pc}
 800a178:	4630      	mov	r0, r6
 800a17a:	f7ff fe27 	bl	8009dcc <__sinit>
 800a17e:	e7db      	b.n	800a138 <fputwc+0x10>
 800a180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a182:	f7fc fad1 	bl	8006728 <__retarget_lock_release_recursive>
 800a186:	4628      	mov	r0, r5
 800a188:	bd70      	pop	{r4, r5, r6, pc}
 800a18a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a18c:	f7fc fac4 	bl	8006718 <__retarget_lock_acquire_recursive>
 800a190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a194:	b29a      	uxth	r2, r3
 800a196:	e7d8      	b.n	800a14a <fputwc+0x22>
 800a198:	200000d8 	.word	0x200000d8

0800a19c <__sfvwrite_r>:
 800a19c:	6893      	ldr	r3, [r2, #8]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 8081 	beq.w	800a2a6 <__sfvwrite_r+0x10a>
 800a1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	0719      	lsls	r1, r3, #28
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	4617      	mov	r7, r2
 800a1b6:	b298      	uxth	r0, r3
 800a1b8:	d523      	bpl.n	800a202 <__sfvwrite_r+0x66>
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	b30b      	cbz	r3, 800a202 <__sfvwrite_r+0x66>
 800a1be:	f010 0302 	ands.w	r3, r0, #2
 800a1c2:	683d      	ldr	r5, [r7, #0]
 800a1c4:	d02b      	beq.n	800a21e <__sfvwrite_r+0x82>
 800a1c6:	f04f 0a00 	mov.w	sl, #0
 800a1ca:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 800a480 <__sfvwrite_r+0x2e4>
 800a1ce:	4656      	mov	r6, sl
 800a1d0:	455e      	cmp	r6, fp
 800a1d2:	4633      	mov	r3, r6
 800a1d4:	4652      	mov	r2, sl
 800a1d6:	bf28      	it	cs
 800a1d8:	465b      	movcs	r3, fp
 800a1da:	4640      	mov	r0, r8
 800a1dc:	2e00      	cmp	r6, #0
 800a1de:	d04f      	beq.n	800a280 <__sfvwrite_r+0xe4>
 800a1e0:	69e1      	ldr	r1, [r4, #28]
 800a1e2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800a1e6:	47e0      	blx	ip
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	dd52      	ble.n	800a292 <__sfvwrite_r+0xf6>
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	1a1b      	subs	r3, r3, r0
 800a1f0:	4482      	add	sl, r0
 800a1f2:	1a36      	subs	r6, r6, r0
 800a1f4:	60bb      	str	r3, [r7, #8]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1ea      	bne.n	800a1d0 <__sfvwrite_r+0x34>
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	b003      	add	sp, #12
 800a1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a202:	4621      	mov	r1, r4
 800a204:	4640      	mov	r0, r8
 800a206:	f7ff fc33 	bl	8009a70 <__swsetup_r>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	f040 8134 	bne.w	800a478 <__sfvwrite_r+0x2dc>
 800a210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a214:	683d      	ldr	r5, [r7, #0]
 800a216:	b298      	uxth	r0, r3
 800a218:	f010 0302 	ands.w	r3, r0, #2
 800a21c:	d1d3      	bne.n	800a1c6 <__sfvwrite_r+0x2a>
 800a21e:	f010 0901 	ands.w	r9, r0, #1
 800a222:	d142      	bne.n	800a2aa <__sfvwrite_r+0x10e>
 800a224:	464e      	mov	r6, r9
 800a226:	b33e      	cbz	r6, 800a278 <__sfvwrite_r+0xdc>
 800a228:	0582      	lsls	r2, r0, #22
 800a22a:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800a22e:	f140 8081 	bpl.w	800a334 <__sfvwrite_r+0x198>
 800a232:	45b3      	cmp	fp, r6
 800a234:	465a      	mov	r2, fp
 800a236:	f200 80b1 	bhi.w	800a39c <__sfvwrite_r+0x200>
 800a23a:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800a23e:	f040 80be 	bne.w	800a3be <__sfvwrite_r+0x222>
 800a242:	6820      	ldr	r0, [r4, #0]
 800a244:	9201      	str	r2, [sp, #4]
 800a246:	4649      	mov	r1, r9
 800a248:	f7fe f870 	bl	800832c <memmove>
 800a24c:	68a3      	ldr	r3, [r4, #8]
 800a24e:	6821      	ldr	r1, [r4, #0]
 800a250:	9a01      	ldr	r2, [sp, #4]
 800a252:	eba3 030b 	sub.w	r3, r3, fp
 800a256:	440a      	add	r2, r1
 800a258:	46b2      	mov	sl, r6
 800a25a:	60a3      	str	r3, [r4, #8]
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	2600      	movs	r6, #0
 800a260:	68b8      	ldr	r0, [r7, #8]
 800a262:	eba0 000a 	sub.w	r0, r0, sl
 800a266:	44d1      	add	r9, sl
 800a268:	60b8      	str	r0, [r7, #8]
 800a26a:	2800      	cmp	r0, #0
 800a26c:	d0c5      	beq.n	800a1fa <__sfvwrite_r+0x5e>
 800a26e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800a272:	b280      	uxth	r0, r0
 800a274:	2e00      	cmp	r6, #0
 800a276:	d1d7      	bne.n	800a228 <__sfvwrite_r+0x8c>
 800a278:	e9d5 9600 	ldrd	r9, r6, [r5]
 800a27c:	3508      	adds	r5, #8
 800a27e:	e7d2      	b.n	800a226 <__sfvwrite_r+0x8a>
 800a280:	e9d5 a600 	ldrd	sl, r6, [r5]
 800a284:	3508      	adds	r5, #8
 800a286:	e7a3      	b.n	800a1d0 <__sfvwrite_r+0x34>
 800a288:	4621      	mov	r1, r4
 800a28a:	4640      	mov	r0, r8
 800a28c:	f7ff fcf2 	bl	8009c74 <_fflush_r>
 800a290:	b380      	cbz	r0, 800a2f4 <__sfvwrite_r+0x158>
 800a292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a29a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a29e:	81a3      	strh	r3, [r4, #12]
 800a2a0:	b003      	add	sp, #12
 800a2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	4770      	bx	lr
 800a2aa:	461e      	mov	r6, r3
 800a2ac:	46aa      	mov	sl, r5
 800a2ae:	4699      	mov	r9, r3
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	461d      	mov	r5, r3
 800a2b4:	b356      	cbz	r6, 800a30c <__sfvwrite_r+0x170>
 800a2b6:	b388      	cbz	r0, 800a31c <__sfvwrite_r+0x180>
 800a2b8:	464a      	mov	r2, r9
 800a2ba:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 800a2be:	6820      	ldr	r0, [r4, #0]
 800a2c0:	42b2      	cmp	r2, r6
 800a2c2:	bf28      	it	cs
 800a2c4:	4632      	movcs	r2, r6
 800a2c6:	4288      	cmp	r0, r1
 800a2c8:	d905      	bls.n	800a2d6 <__sfvwrite_r+0x13a>
 800a2ca:	68a1      	ldr	r1, [r4, #8]
 800a2cc:	eb03 0b01 	add.w	fp, r3, r1
 800a2d0:	455a      	cmp	r2, fp
 800a2d2:	f300 80a7 	bgt.w	800a424 <__sfvwrite_r+0x288>
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	dc64      	bgt.n	800a3a4 <__sfvwrite_r+0x208>
 800a2da:	69e1      	ldr	r1, [r4, #28]
 800a2dc:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	47e0      	blx	ip
 800a2e6:	f1b0 0b00 	subs.w	fp, r0, #0
 800a2ea:	ddd2      	ble.n	800a292 <__sfvwrite_r+0xf6>
 800a2ec:	ebb9 090b 	subs.w	r9, r9, fp
 800a2f0:	d0ca      	beq.n	800a288 <__sfvwrite_r+0xec>
 800a2f2:	2001      	movs	r0, #1
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	eba3 030b 	sub.w	r3, r3, fp
 800a2fa:	445d      	add	r5, fp
 800a2fc:	eba6 060b 	sub.w	r6, r6, fp
 800a300:	60bb      	str	r3, [r7, #8]
 800a302:	2b00      	cmp	r3, #0
 800a304:	f43f af79 	beq.w	800a1fa <__sfvwrite_r+0x5e>
 800a308:	2e00      	cmp	r6, #0
 800a30a:	d1d4      	bne.n	800a2b6 <__sfvwrite_r+0x11a>
 800a30c:	f10a 0308 	add.w	r3, sl, #8
 800a310:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 800a314:	469a      	mov	sl, r3
 800a316:	3308      	adds	r3, #8
 800a318:	2e00      	cmp	r6, #0
 800a31a:	d0f9      	beq.n	800a310 <__sfvwrite_r+0x174>
 800a31c:	4632      	mov	r2, r6
 800a31e:	210a      	movs	r1, #10
 800a320:	4628      	mov	r0, r5
 800a322:	f7fc fa05 	bl	8006730 <memchr>
 800a326:	2800      	cmp	r0, #0
 800a328:	f000 809d 	beq.w	800a466 <__sfvwrite_r+0x2ca>
 800a32c:	3001      	adds	r0, #1
 800a32e:	eba0 0905 	sub.w	r9, r0, r5
 800a332:	e7c1      	b.n	800a2b8 <__sfvwrite_r+0x11c>
 800a334:	6820      	ldr	r0, [r4, #0]
 800a336:	6923      	ldr	r3, [r4, #16]
 800a338:	4298      	cmp	r0, r3
 800a33a:	d817      	bhi.n	800a36c <__sfvwrite_r+0x1d0>
 800a33c:	6963      	ldr	r3, [r4, #20]
 800a33e:	42b3      	cmp	r3, r6
 800a340:	d814      	bhi.n	800a36c <__sfvwrite_r+0x1d0>
 800a342:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800a346:	42b2      	cmp	r2, r6
 800a348:	bf28      	it	cs
 800a34a:	4632      	movcs	r2, r6
 800a34c:	69e1      	ldr	r1, [r4, #28]
 800a34e:	fb92 f2f3 	sdiv	r2, r2, r3
 800a352:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800a356:	fb02 f303 	mul.w	r3, r2, r3
 800a35a:	4640      	mov	r0, r8
 800a35c:	464a      	mov	r2, r9
 800a35e:	47e0      	blx	ip
 800a360:	f1b0 0a00 	subs.w	sl, r0, #0
 800a364:	dd95      	ble.n	800a292 <__sfvwrite_r+0xf6>
 800a366:	eba6 060a 	sub.w	r6, r6, sl
 800a36a:	e779      	b.n	800a260 <__sfvwrite_r+0xc4>
 800a36c:	45b3      	cmp	fp, r6
 800a36e:	46da      	mov	sl, fp
 800a370:	bf28      	it	cs
 800a372:	46b2      	movcs	sl, r6
 800a374:	4652      	mov	r2, sl
 800a376:	4649      	mov	r1, r9
 800a378:	f7fd ffd8 	bl	800832c <memmove>
 800a37c:	68a3      	ldr	r3, [r4, #8]
 800a37e:	6822      	ldr	r2, [r4, #0]
 800a380:	eba3 030a 	sub.w	r3, r3, sl
 800a384:	4452      	add	r2, sl
 800a386:	60a3      	str	r3, [r4, #8]
 800a388:	6022      	str	r2, [r4, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1eb      	bne.n	800a366 <__sfvwrite_r+0x1ca>
 800a38e:	4621      	mov	r1, r4
 800a390:	4640      	mov	r0, r8
 800a392:	f7ff fc6f 	bl	8009c74 <_fflush_r>
 800a396:	2800      	cmp	r0, #0
 800a398:	d0e5      	beq.n	800a366 <__sfvwrite_r+0x1ca>
 800a39a:	e77a      	b.n	800a292 <__sfvwrite_r+0xf6>
 800a39c:	6820      	ldr	r0, [r4, #0]
 800a39e:	46b3      	mov	fp, r6
 800a3a0:	4632      	mov	r2, r6
 800a3a2:	e74f      	b.n	800a244 <__sfvwrite_r+0xa8>
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	9201      	str	r2, [sp, #4]
 800a3a8:	f7fd ffc0 	bl	800832c <memmove>
 800a3ac:	9a01      	ldr	r2, [sp, #4]
 800a3ae:	68a3      	ldr	r3, [r4, #8]
 800a3b0:	1a9b      	subs	r3, r3, r2
 800a3b2:	60a3      	str	r3, [r4, #8]
 800a3b4:	6823      	ldr	r3, [r4, #0]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	4693      	mov	fp, r2
 800a3bc:	e796      	b.n	800a2ec <__sfvwrite_r+0x150>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	6921      	ldr	r1, [r4, #16]
 800a3c2:	eba3 0b01 	sub.w	fp, r3, r1
 800a3c6:	6963      	ldr	r3, [r4, #20]
 800a3c8:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 800a3cc:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 800a3d0:	f10b 0301 	add.w	r3, fp, #1
 800a3d4:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 800a3d8:	4433      	add	r3, r6
 800a3da:	4553      	cmp	r3, sl
 800a3dc:	4652      	mov	r2, sl
 800a3de:	bf84      	itt	hi
 800a3e0:	469a      	movhi	sl, r3
 800a3e2:	4652      	movhi	r2, sl
 800a3e4:	0543      	lsls	r3, r0, #21
 800a3e6:	d52c      	bpl.n	800a442 <__sfvwrite_r+0x2a6>
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	f7f8 ff18 	bl	8003220 <_malloc_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d03b      	beq.n	800a46c <__sfvwrite_r+0x2d0>
 800a3f4:	465a      	mov	r2, fp
 800a3f6:	6921      	ldr	r1, [r4, #16]
 800a3f8:	9001      	str	r0, [sp, #4]
 800a3fa:	f7fc f9e9 	bl	80067d0 <memcpy>
 800a3fe:	89a2      	ldrh	r2, [r4, #12]
 800a400:	9b01      	ldr	r3, [sp, #4]
 800a402:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a40a:	81a2      	strh	r2, [r4, #12]
 800a40c:	eb03 000b 	add.w	r0, r3, fp
 800a410:	6123      	str	r3, [r4, #16]
 800a412:	ebaa 030b 	sub.w	r3, sl, fp
 800a416:	f8c4 a014 	str.w	sl, [r4, #20]
 800a41a:	60a3      	str	r3, [r4, #8]
 800a41c:	6020      	str	r0, [r4, #0]
 800a41e:	46b3      	mov	fp, r6
 800a420:	4632      	mov	r2, r6
 800a422:	e70f      	b.n	800a244 <__sfvwrite_r+0xa8>
 800a424:	4629      	mov	r1, r5
 800a426:	465a      	mov	r2, fp
 800a428:	f7fd ff80 	bl	800832c <memmove>
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	445b      	add	r3, fp
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	4621      	mov	r1, r4
 800a434:	4640      	mov	r0, r8
 800a436:	f7ff fc1d 	bl	8009c74 <_fflush_r>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f43f af56 	beq.w	800a2ec <__sfvwrite_r+0x150>
 800a440:	e727      	b.n	800a292 <__sfvwrite_r+0xf6>
 800a442:	4640      	mov	r0, r8
 800a444:	f7fe f840 	bl	80084c8 <_realloc_r>
 800a448:	4603      	mov	r3, r0
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d1de      	bne.n	800a40c <__sfvwrite_r+0x270>
 800a44e:	6921      	ldr	r1, [r4, #16]
 800a450:	4640      	mov	r0, r8
 800a452:	f7fc f847 	bl	80064e4 <_free_r>
 800a456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a45a:	220c      	movs	r2, #12
 800a45c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a460:	f8c8 2000 	str.w	r2, [r8]
 800a464:	e717      	b.n	800a296 <__sfvwrite_r+0xfa>
 800a466:	1c72      	adds	r2, r6, #1
 800a468:	4691      	mov	r9, r2
 800a46a:	e726      	b.n	800a2ba <__sfvwrite_r+0x11e>
 800a46c:	220c      	movs	r2, #12
 800a46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a472:	f8c8 2000 	str.w	r2, [r8]
 800a476:	e70e      	b.n	800a296 <__sfvwrite_r+0xfa>
 800a478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a47c:	e6be      	b.n	800a1fc <__sfvwrite_r+0x60>
 800a47e:	bf00      	nop
 800a480:	7ffffc00 	.word	0x7ffffc00

0800a484 <_fwalk>:
 800a484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a488:	4688      	mov	r8, r1
 800a48a:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
 800a48e:	2600      	movs	r6, #0
 800a490:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800a494:	3d01      	subs	r5, #1
 800a496:	d40f      	bmi.n	800a4b8 <_fwalk+0x34>
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800a4a0:	d906      	bls.n	800a4b0 <_fwalk+0x2c>
 800a4a2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	d001      	beq.n	800a4b0 <_fwalk+0x2c>
 800a4ac:	47c0      	blx	r8
 800a4ae:	4306      	orrs	r6, r0
 800a4b0:	1c6b      	adds	r3, r5, #1
 800a4b2:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800a4b6:	d1ef      	bne.n	800a498 <_fwalk+0x14>
 800a4b8:	683f      	ldr	r7, [r7, #0]
 800a4ba:	2f00      	cmp	r7, #0
 800a4bc:	d1e8      	bne.n	800a490 <_fwalk+0xc>
 800a4be:	4630      	mov	r0, r6
 800a4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a4c4 <_fwalk_reent>:
 800a4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	4688      	mov	r8, r1
 800a4cc:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
 800a4d0:	f04f 0900 	mov.w	r9, #0
 800a4d4:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 800a4d8:	3d01      	subs	r5, #1
 800a4da:	d411      	bmi.n	800a500 <_fwalk_reent+0x3c>
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800a4e4:	d908      	bls.n	800a4f8 <_fwalk_reent+0x34>
 800a4e6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	d003      	beq.n	800a4f8 <_fwalk_reent+0x34>
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	47c0      	blx	r8
 800a4f4:	ea49 0900 	orr.w	r9, r9, r0
 800a4f8:	1c6b      	adds	r3, r5, #1
 800a4fa:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800a4fe:	d1ed      	bne.n	800a4dc <_fwalk_reent+0x18>
 800a500:	6836      	ldr	r6, [r6, #0]
 800a502:	2e00      	cmp	r6, #0
 800a504:	d1e6      	bne.n	800a4d4 <_fwalk_reent+0x10>
 800a506:	4648      	mov	r0, r9
 800a508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a50c <__smakebuf_r>:
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	898b      	ldrh	r3, [r1, #12]
 800a512:	460c      	mov	r4, r1
 800a514:	0799      	lsls	r1, r3, #30
 800a516:	b096      	sub	sp, #88	; 0x58
 800a518:	d508      	bpl.n	800a52c <__smakebuf_r+0x20>
 800a51a:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800a51e:	2201      	movs	r2, #1
 800a520:	e9c4 3204 	strd	r3, r2, [r4, #16]
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	b016      	add	sp, #88	; 0x58
 800a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a52c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a530:	2900      	cmp	r1, #0
 800a532:	4606      	mov	r6, r0
 800a534:	db27      	blt.n	800a586 <__smakebuf_r+0x7a>
 800a536:	466a      	mov	r2, sp
 800a538:	f000 fb6c 	bl	800ac14 <_fstat_r>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	db21      	blt.n	800a584 <__smakebuf_r+0x78>
 800a540:	9d01      	ldr	r5, [sp, #4]
 800a542:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800a546:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 800a54a:	fab5 f585 	clz	r5, r5
 800a54e:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800a552:	096d      	lsrs	r5, r5, #5
 800a554:	f44f 6700 	mov.w	r7, #2048	; 0x800
 800a558:	4641      	mov	r1, r8
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7f8 fe60 	bl	8003220 <_malloc_r>
 800a560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a564:	b1f0      	cbz	r0, 800a5a4 <__smakebuf_r+0x98>
 800a566:	4a20      	ldr	r2, [pc, #128]	; (800a5e8 <__smakebuf_r+0xdc>)
 800a568:	63f2      	str	r2, [r6, #60]	; 0x3c
 800a56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a56e:	f8c4 8014 	str.w	r8, [r4, #20]
 800a572:	81a3      	strh	r3, [r4, #12]
 800a574:	6020      	str	r0, [r4, #0]
 800a576:	6120      	str	r0, [r4, #16]
 800a578:	bb35      	cbnz	r5, 800a5c8 <__smakebuf_r+0xbc>
 800a57a:	433b      	orrs	r3, r7
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	b016      	add	sp, #88	; 0x58
 800a580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 800a58a:	d019      	beq.n	800a5c0 <__smakebuf_r+0xb4>
 800a58c:	f04f 0840 	mov.w	r8, #64	; 0x40
 800a590:	4641      	mov	r1, r8
 800a592:	4630      	mov	r0, r6
 800a594:	f7f8 fe44 	bl	8003220 <_malloc_r>
 800a598:	2500      	movs	r5, #0
 800a59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59e:	462f      	mov	r7, r5
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d1e0      	bne.n	800a566 <__smakebuf_r+0x5a>
 800a5a4:	059a      	lsls	r2, r3, #22
 800a5a6:	d4be      	bmi.n	800a526 <__smakebuf_r+0x1a>
 800a5a8:	f023 0303 	bic.w	r3, r3, #3
 800a5ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5b0:	f043 0302 	orr.w	r3, r3, #2
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800a5ba:	81a3      	strh	r3, [r4, #12]
 800a5bc:	6022      	str	r2, [r4, #0]
 800a5be:	e7b2      	b.n	800a526 <__smakebuf_r+0x1a>
 800a5c0:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800a5c4:	462f      	mov	r7, r5
 800a5c6:	e7c7      	b.n	800a558 <__smakebuf_r+0x4c>
 800a5c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f000 fb37 	bl	800ac40 <_isatty_r>
 800a5d2:	b910      	cbnz	r0, 800a5da <__smakebuf_r+0xce>
 800a5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d8:	e7cf      	b.n	800a57a <__smakebuf_r+0x6e>
 800a5da:	89a3      	ldrh	r3, [r4, #12]
 800a5dc:	f023 0303 	bic.w	r3, r3, #3
 800a5e0:	f043 0301 	orr.w	r3, r3, #1
 800a5e4:	b21b      	sxth	r3, r3
 800a5e6:	e7c8      	b.n	800a57a <__smakebuf_r+0x6e>
 800a5e8:	08009d45 	.word	0x08009d45

0800a5ec <__swhatbuf_r>:
 800a5ec:	b570      	push	{r4, r5, r6, lr}
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	b096      	sub	sp, #88	; 0x58
 800a5f8:	4615      	mov	r5, r2
 800a5fa:	461e      	mov	r6, r3
 800a5fc:	db14      	blt.n	800a628 <__swhatbuf_r+0x3c>
 800a5fe:	466a      	mov	r2, sp
 800a600:	f000 fb08 	bl	800ac14 <_fstat_r>
 800a604:	2800      	cmp	r0, #0
 800a606:	db0f      	blt.n	800a628 <__swhatbuf_r+0x3c>
 800a608:	9a01      	ldr	r2, [sp, #4]
 800a60a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a60e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 800a612:	fab2 f282 	clz	r2, r2
 800a616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a61a:	0952      	lsrs	r2, r2, #5
 800a61c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a620:	6032      	str	r2, [r6, #0]
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	b016      	add	sp, #88	; 0x58
 800a626:	bd70      	pop	{r4, r5, r6, pc}
 800a628:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800a62c:	2300      	movs	r3, #0
 800a62e:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800a632:	6033      	str	r3, [r6, #0]
 800a634:	d004      	beq.n	800a640 <__swhatbuf_r+0x54>
 800a636:	2240      	movs	r2, #64	; 0x40
 800a638:	4618      	mov	r0, r3
 800a63a:	602a      	str	r2, [r5, #0]
 800a63c:	b016      	add	sp, #88	; 0x58
 800a63e:	bd70      	pop	{r4, r5, r6, pc}
 800a640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	b016      	add	sp, #88	; 0x58
 800a648:	bd70      	pop	{r4, r5, r6, pc}
 800a64a:	bf00      	nop

0800a64c <_init_signal_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	f8d0 42dc 	ldr.w	r4, [r0, #732]	; 0x2dc
 800a652:	b10c      	cbz	r4, 800a658 <_init_signal_r+0xc>
 800a654:	2000      	movs	r0, #0
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	2180      	movs	r1, #128	; 0x80
 800a65a:	4605      	mov	r5, r0
 800a65c:	f7f8 fde0 	bl	8003220 <_malloc_r>
 800a660:	4602      	mov	r2, r0
 800a662:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 800a666:	b130      	cbz	r0, 800a676 <_init_signal_r+0x2a>
 800a668:	1f03      	subs	r3, r0, #4
 800a66a:	327c      	adds	r2, #124	; 0x7c
 800a66c:	f843 4f04 	str.w	r4, [r3, #4]!
 800a670:	4293      	cmp	r3, r2
 800a672:	d1fb      	bne.n	800a66c <_init_signal_r+0x20>
 800a674:	e7ee      	b.n	800a654 <_init_signal_r+0x8>
 800a676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a67a:	bd38      	pop	{r3, r4, r5, pc}

0800a67c <_signal_r>:
 800a67c:	291f      	cmp	r1, #31
 800a67e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a680:	4605      	mov	r5, r0
 800a682:	d809      	bhi.n	800a698 <_signal_r+0x1c>
 800a684:	f8d0 62dc 	ldr.w	r6, [r0, #732]	; 0x2dc
 800a688:	460c      	mov	r4, r1
 800a68a:	4617      	mov	r7, r2
 800a68c:	b14e      	cbz	r6, 800a6a2 <_signal_r+0x26>
 800a68e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a692:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800a696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a698:	2316      	movs	r3, #22
 800a69a:	6003      	str	r3, [r0, #0]
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6a2:	2180      	movs	r1, #128	; 0x80
 800a6a4:	f7f8 fdbc 	bl	8003220 <_malloc_r>
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 800a6ae:	b140      	cbz	r0, 800a6c2 <_signal_r+0x46>
 800a6b0:	1f03      	subs	r3, r0, #4
 800a6b2:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	f843 1f04 	str.w	r1, [r3, #4]!
 800a6bc:	429d      	cmp	r5, r3
 800a6be:	d1fb      	bne.n	800a6b8 <_signal_r+0x3c>
 800a6c0:	e7e5      	b.n	800a68e <_signal_r+0x12>
 800a6c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6c8 <_raise_r>:
 800a6c8:	291f      	cmp	r1, #31
 800a6ca:	b538      	push	{r3, r4, r5, lr}
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	d821      	bhi.n	800a714 <_raise_r+0x4c>
 800a6d0:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	b16a      	cbz	r2, 800a6f4 <_raise_r+0x2c>
 800a6d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6dc:	b153      	cbz	r3, 800a6f4 <_raise_r+0x2c>
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d016      	beq.n	800a710 <_raise_r+0x48>
 800a6e2:	1c59      	adds	r1, r3, #1
 800a6e4:	d010      	beq.n	800a708 <_raise_r+0x40>
 800a6e6:	2500      	movs	r5, #0
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 800a6ee:	4798      	blx	r3
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	f000 f903 	bl	800a900 <_getpid_r>
 800a6fa:	4622      	mov	r2, r4
 800a6fc:	4601      	mov	r1, r0
 800a6fe:	4628      	mov	r0, r5
 800a700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a704:	f000 b8e6 	b.w	800a8d4 <_kill_r>
 800a708:	2316      	movs	r3, #22
 800a70a:	6003      	str	r3, [r0, #0]
 800a70c:	2001      	movs	r0, #1
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	2000      	movs	r0, #0
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	2316      	movs	r3, #22
 800a716:	6003      	str	r3, [r0, #0]
 800a718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	bf00      	nop

0800a720 <__sigtramp_r>:
 800a720:	291f      	cmp	r1, #31
 800a722:	d82c      	bhi.n	800a77e <__sigtramp_r+0x5e>
 800a724:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	460c      	mov	r4, r1
 800a72c:	4605      	mov	r5, r0
 800a72e:	b182      	cbz	r2, 800a752 <__sigtramp_r+0x32>
 800a730:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800a734:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800a738:	b14b      	cbz	r3, 800a74e <__sigtramp_r+0x2e>
 800a73a:	1c59      	adds	r1, r3, #1
 800a73c:	d01a      	beq.n	800a774 <__sigtramp_r+0x54>
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d016      	beq.n	800a770 <__sigtramp_r+0x50>
 800a742:	2500      	movs	r5, #0
 800a744:	4620      	mov	r0, r4
 800a746:	6015      	str	r5, [r2, #0]
 800a748:	4798      	blx	r3
 800a74a:	4628      	mov	r0, r5
 800a74c:	bd38      	pop	{r3, r4, r5, pc}
 800a74e:	2001      	movs	r0, #1
 800a750:	bd38      	pop	{r3, r4, r5, pc}
 800a752:	2180      	movs	r1, #128	; 0x80
 800a754:	f7f8 fd64 	bl	8003220 <_malloc_r>
 800a758:	4602      	mov	r2, r0
 800a75a:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 800a75e:	b158      	cbz	r0, 800a778 <__sigtramp_r+0x58>
 800a760:	1f03      	subs	r3, r0, #4
 800a762:	2100      	movs	r1, #0
 800a764:	307c      	adds	r0, #124	; 0x7c
 800a766:	f843 1f04 	str.w	r1, [r3, #4]!
 800a76a:	4298      	cmp	r0, r3
 800a76c:	d1fb      	bne.n	800a766 <__sigtramp_r+0x46>
 800a76e:	e7df      	b.n	800a730 <__sigtramp_r+0x10>
 800a770:	2003      	movs	r0, #3
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	2002      	movs	r0, #2
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a77c:	bd38      	pop	{r3, r4, r5, pc}
 800a77e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a782:	4770      	bx	lr

0800a784 <raise>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4b15      	ldr	r3, [pc, #84]	; (800a7dc <raise+0x58>)
 800a788:	281f      	cmp	r0, #31
 800a78a:	681d      	ldr	r5, [r3, #0]
 800a78c:	d820      	bhi.n	800a7d0 <raise+0x4c>
 800a78e:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 800a792:	4604      	mov	r4, r0
 800a794:	b162      	cbz	r2, 800a7b0 <raise+0x2c>
 800a796:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 800a79a:	b14b      	cbz	r3, 800a7b0 <raise+0x2c>
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d015      	beq.n	800a7cc <raise+0x48>
 800a7a0:	1c59      	adds	r1, r3, #1
 800a7a2:	d00f      	beq.n	800a7c4 <raise+0x40>
 800a7a4:	2500      	movs	r5, #0
 800a7a6:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800a7aa:	4798      	blx	r3
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	f000 f8a5 	bl	800a900 <_getpid_r>
 800a7b6:	4622      	mov	r2, r4
 800a7b8:	4601      	mov	r1, r0
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7c0:	f000 b888 	b.w	800a8d4 <_kill_r>
 800a7c4:	2316      	movs	r3, #22
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	2316      	movs	r3, #22
 800a7d2:	602b      	str	r3, [r5, #0]
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7d8:	bd38      	pop	{r3, r4, r5, pc}
 800a7da:	bf00      	nop
 800a7dc:	200000d8 	.word	0x200000d8

0800a7e0 <signal>:
 800a7e0:	4b13      	ldr	r3, [pc, #76]	; (800a830 <signal+0x50>)
 800a7e2:	281f      	cmp	r0, #31
 800a7e4:	b570      	push	{r4, r5, r6, lr}
 800a7e6:	681e      	ldr	r6, [r3, #0]
 800a7e8:	d809      	bhi.n	800a7fe <signal+0x1e>
 800a7ea:	460d      	mov	r5, r1
 800a7ec:	f8d6 12dc 	ldr.w	r1, [r6, #732]	; 0x2dc
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	b149      	cbz	r1, 800a808 <signal+0x28>
 800a7f4:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800a7f8:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 800a7fc:	bd70      	pop	{r4, r5, r6, pc}
 800a7fe:	2316      	movs	r3, #22
 800a800:	6033      	str	r3, [r6, #0]
 800a802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a806:	bd70      	pop	{r4, r5, r6, pc}
 800a808:	2180      	movs	r1, #128	; 0x80
 800a80a:	4630      	mov	r0, r6
 800a80c:	f7f8 fd08 	bl	8003220 <_malloc_r>
 800a810:	4601      	mov	r1, r0
 800a812:	f8c6 02dc 	str.w	r0, [r6, #732]	; 0x2dc
 800a816:	b140      	cbz	r0, 800a82a <signal+0x4a>
 800a818:	1f03      	subs	r3, r0, #4
 800a81a:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 800a81e:	2200      	movs	r2, #0
 800a820:	f843 2f04 	str.w	r2, [r3, #4]!
 800a824:	4563      	cmp	r3, ip
 800a826:	d1fb      	bne.n	800a820 <signal+0x40>
 800a828:	e7e4      	b.n	800a7f4 <signal+0x14>
 800a82a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	200000d8 	.word	0x200000d8

0800a834 <_init_signal>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4b0c      	ldr	r3, [pc, #48]	; (800a868 <_init_signal+0x34>)
 800a838:	681d      	ldr	r5, [r3, #0]
 800a83a:	f8d5 42dc 	ldr.w	r4, [r5, #732]	; 0x2dc
 800a83e:	b10c      	cbz	r4, 800a844 <_init_signal+0x10>
 800a840:	2000      	movs	r0, #0
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	2180      	movs	r1, #128	; 0x80
 800a846:	4628      	mov	r0, r5
 800a848:	f7f8 fcea 	bl	8003220 <_malloc_r>
 800a84c:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 800a850:	b138      	cbz	r0, 800a862 <_init_signal+0x2e>
 800a852:	1f03      	subs	r3, r0, #4
 800a854:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 800a858:	f843 4f04 	str.w	r4, [r3, #4]!
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d1fb      	bne.n	800a858 <_init_signal+0x24>
 800a860:	e7ee      	b.n	800a840 <_init_signal+0xc>
 800a862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a866:	bd38      	pop	{r3, r4, r5, pc}
 800a868:	200000d8 	.word	0x200000d8

0800a86c <__sigtramp>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	4b18      	ldr	r3, [pc, #96]	; (800a8d0 <__sigtramp+0x64>)
 800a870:	281f      	cmp	r0, #31
 800a872:	681d      	ldr	r5, [r3, #0]
 800a874:	d828      	bhi.n	800a8c8 <__sigtramp+0x5c>
 800a876:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 800a87a:	4604      	mov	r4, r0
 800a87c:	b182      	cbz	r2, 800a8a0 <__sigtramp+0x34>
 800a87e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800a882:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800a886:	b14b      	cbz	r3, 800a89c <__sigtramp+0x30>
 800a888:	1c59      	adds	r1, r3, #1
 800a88a:	d01b      	beq.n	800a8c4 <__sigtramp+0x58>
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d017      	beq.n	800a8c0 <__sigtramp+0x54>
 800a890:	2500      	movs	r5, #0
 800a892:	4620      	mov	r0, r4
 800a894:	6015      	str	r5, [r2, #0]
 800a896:	4798      	blx	r3
 800a898:	4628      	mov	r0, r5
 800a89a:	bd38      	pop	{r3, r4, r5, pc}
 800a89c:	2001      	movs	r0, #1
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	2180      	movs	r1, #128	; 0x80
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	f7f8 fcbc 	bl	8003220 <_malloc_r>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	f8c5 02dc 	str.w	r0, [r5, #732]	; 0x2dc
 800a8ae:	b158      	cbz	r0, 800a8c8 <__sigtramp+0x5c>
 800a8b0:	1f03      	subs	r3, r0, #4
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	307c      	adds	r0, #124	; 0x7c
 800a8b6:	f843 1f04 	str.w	r1, [r3, #4]!
 800a8ba:	4283      	cmp	r3, r0
 800a8bc:	d1fb      	bne.n	800a8b6 <__sigtramp+0x4a>
 800a8be:	e7de      	b.n	800a87e <__sigtramp+0x12>
 800a8c0:	2003      	movs	r0, #3
 800a8c2:	bd38      	pop	{r3, r4, r5, pc}
 800a8c4:	2002      	movs	r0, #2
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8cc:	bd38      	pop	{r3, r4, r5, pc}
 800a8ce:	bf00      	nop
 800a8d0:	200000d8 	.word	0x200000d8

0800a8d4 <_kill_r>:
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	4d08      	ldr	r5, [pc, #32]	; (800a8fc <_kill_r+0x28>)
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2600      	movs	r6, #0
 800a8de:	4620      	mov	r0, r4
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	461c      	mov	r4, r3
 800a8e4:	602e      	str	r6, [r5, #0]
 800a8e6:	f001 f949 	bl	800bb7c <_kill>
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	d000      	beq.n	800a8f0 <_kill_r+0x1c>
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0fb      	beq.n	800a8ee <_kill_r+0x1a>
 800a8f6:	6023      	str	r3, [r4, #0]
 800a8f8:	bd70      	pop	{r4, r5, r6, pc}
 800a8fa:	bf00      	nop
 800a8fc:	20000b84 	.word	0x20000b84

0800a900 <_getpid_r>:
 800a900:	f001 b92c 	b.w	800bb5c <_getpid>

0800a904 <__sread>:
 800a904:	b510      	push	{r4, lr}
 800a906:	460c      	mov	r4, r1
 800a908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90c:	f000 f9c0 	bl	800ac90 <_read_r>
 800a910:	2800      	cmp	r0, #0
 800a912:	db03      	blt.n	800a91c <__sread+0x18>
 800a914:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a916:	4403      	add	r3, r0
 800a918:	6523      	str	r3, [r4, #80]	; 0x50
 800a91a:	bd10      	pop	{r4, pc}
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a922:	81a3      	strh	r3, [r4, #12]
 800a924:	bd10      	pop	{r4, pc}
 800a926:	bf00      	nop

0800a928 <__seofread>:
 800a928:	2000      	movs	r0, #0
 800a92a:	4770      	bx	lr

0800a92c <__swrite>:
 800a92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a930:	460c      	mov	r4, r1
 800a932:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 800a936:	461f      	mov	r7, r3
 800a938:	05cb      	lsls	r3, r1, #23
 800a93a:	4605      	mov	r5, r0
 800a93c:	4616      	mov	r6, r2
 800a93e:	d40b      	bmi.n	800a958 <__swrite+0x2c>
 800a940:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800a944:	81a1      	strh	r1, [r4, #12]
 800a946:	463b      	mov	r3, r7
 800a948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a94c:	4632      	mov	r2, r6
 800a94e:	4628      	mov	r0, r5
 800a950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a954:	f000 b8c8 	b.w	800aae8 <_write_r>
 800a958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a95c:	2302      	movs	r3, #2
 800a95e:	2200      	movs	r2, #0
 800a960:	f000 f980 	bl	800ac64 <_lseek_r>
 800a964:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800a968:	e7ea      	b.n	800a940 <__swrite+0x14>
 800a96a:	bf00      	nop

0800a96c <__sseek>:
 800a96c:	b510      	push	{r4, lr}
 800a96e:	460c      	mov	r4, r1
 800a970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a974:	f000 f976 	bl	800ac64 <_lseek_r>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	1c42      	adds	r2, r0, #1
 800a97c:	bf0e      	itee	eq
 800a97e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a986:	6520      	strne	r0, [r4, #80]	; 0x50
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	bd10      	pop	{r4, pc}

0800a98c <__sclose>:
 800a98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a990:	f000 b8c0 	b.w	800ab14 <_close_r>

0800a994 <__swbuf_r>:
 800a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a996:	460d      	mov	r5, r1
 800a998:	4614      	mov	r4, r2
 800a99a:	4606      	mov	r6, r0
 800a99c:	b110      	cbz	r0, 800a9a4 <__swbuf_r+0x10>
 800a99e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d043      	beq.n	800aa2c <__swbuf_r+0x98>
 800a9a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9a8:	69a3      	ldr	r3, [r4, #24]
 800a9aa:	60a3      	str	r3, [r4, #8]
 800a9ac:	0717      	lsls	r7, r2, #28
 800a9ae:	b290      	uxth	r0, r2
 800a9b0:	d51b      	bpl.n	800a9ea <__swbuf_r+0x56>
 800a9b2:	6923      	ldr	r3, [r4, #16]
 800a9b4:	b1cb      	cbz	r3, 800a9ea <__swbuf_r+0x56>
 800a9b6:	b2ed      	uxtb	r5, r5
 800a9b8:	0481      	lsls	r1, r0, #18
 800a9ba:	462f      	mov	r7, r5
 800a9bc:	d522      	bpl.n	800aa04 <__swbuf_r+0x70>
 800a9be:	6822      	ldr	r2, [r4, #0]
 800a9c0:	6961      	ldr	r1, [r4, #20]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	4299      	cmp	r1, r3
 800a9c6:	dd29      	ble.n	800aa1c <__swbuf_r+0x88>
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	68a1      	ldr	r1, [r4, #8]
 800a9cc:	3901      	subs	r1, #1
 800a9ce:	60a1      	str	r1, [r4, #8]
 800a9d0:	1c51      	adds	r1, r2, #1
 800a9d2:	6021      	str	r1, [r4, #0]
 800a9d4:	7015      	strb	r5, [r2, #0]
 800a9d6:	6962      	ldr	r2, [r4, #20]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d02a      	beq.n	800aa32 <__swbuf_r+0x9e>
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	07db      	lsls	r3, r3, #31
 800a9e0:	d501      	bpl.n	800a9e6 <__swbuf_r+0x52>
 800a9e2:	2d0a      	cmp	r5, #10
 800a9e4:	d025      	beq.n	800aa32 <__swbuf_r+0x9e>
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ea:	4621      	mov	r1, r4
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7ff f83f 	bl	8009a70 <__swsetup_r>
 800a9f2:	bb20      	cbnz	r0, 800aa3e <__swbuf_r+0xaa>
 800a9f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	b290      	uxth	r0, r2
 800a9fc:	b2ed      	uxtb	r5, r5
 800a9fe:	0481      	lsls	r1, r0, #18
 800aa00:	462f      	mov	r7, r5
 800aa02:	d4dc      	bmi.n	800a9be <__swbuf_r+0x2a>
 800aa04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa08:	81a2      	strh	r2, [r4, #12]
 800aa0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa0c:	6961      	ldr	r1, [r4, #20]
 800aa0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aa12:	6662      	str	r2, [r4, #100]	; 0x64
 800aa14:	6822      	ldr	r2, [r4, #0]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	4299      	cmp	r1, r3
 800aa1a:	dcd5      	bgt.n	800a9c8 <__swbuf_r+0x34>
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	4630      	mov	r0, r6
 800aa20:	f7ff f928 	bl	8009c74 <_fflush_r>
 800aa24:	b958      	cbnz	r0, 800aa3e <__swbuf_r+0xaa>
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e7ce      	b.n	800a9ca <__swbuf_r+0x36>
 800aa2c:	f7ff f9ce 	bl	8009dcc <__sinit>
 800aa30:	e7b8      	b.n	800a9a4 <__swbuf_r+0x10>
 800aa32:	4621      	mov	r1, r4
 800aa34:	4630      	mov	r0, r6
 800aa36:	f7ff f91d 	bl	8009c74 <_fflush_r>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d0d3      	beq.n	800a9e6 <__swbuf_r+0x52>
 800aa3e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aa42:	e7d0      	b.n	800a9e6 <__swbuf_r+0x52>

0800aa44 <__swbuf>:
 800aa44:	b410      	push	{r4}
 800aa46:	4c04      	ldr	r4, [pc, #16]	; (800aa58 <__swbuf+0x14>)
 800aa48:	4603      	mov	r3, r0
 800aa4a:	460a      	mov	r2, r1
 800aa4c:	6820      	ldr	r0, [r4, #0]
 800aa4e:	bc10      	pop	{r4}
 800aa50:	4619      	mov	r1, r3
 800aa52:	f7ff bf9f 	b.w	800a994 <__swbuf_r>
 800aa56:	bf00      	nop
 800aa58:	200000d8 	.word	0x200000d8

0800aa5c <_wcrtomb_r>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	4605      	mov	r5, r0
 800aa60:	b084      	sub	sp, #16
 800aa62:	461c      	mov	r4, r3
 800aa64:	b139      	cbz	r1, 800aa76 <_wcrtomb_r+0x1a>
 800aa66:	4e0b      	ldr	r6, [pc, #44]	; (800aa94 <_wcrtomb_r+0x38>)
 800aa68:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
 800aa6c:	47b0      	blx	r6
 800aa6e:	1c43      	adds	r3, r0, #1
 800aa70:	d009      	beq.n	800aa86 <_wcrtomb_r+0x2a>
 800aa72:	b004      	add	sp, #16
 800aa74:	bd70      	pop	{r4, r5, r6, pc}
 800aa76:	460a      	mov	r2, r1
 800aa78:	4906      	ldr	r1, [pc, #24]	; (800aa94 <_wcrtomb_r+0x38>)
 800aa7a:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
 800aa7e:	a901      	add	r1, sp, #4
 800aa80:	47b0      	blx	r6
 800aa82:	1c43      	adds	r3, r0, #1
 800aa84:	d1f5      	bne.n	800aa72 <_wcrtomb_r+0x16>
 800aa86:	2200      	movs	r2, #0
 800aa88:	238a      	movs	r3, #138	; 0x8a
 800aa8a:	6022      	str	r2, [r4, #0]
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	b004      	add	sp, #16
 800aa90:	bd70      	pop	{r4, r5, r6, pc}
 800aa92:	bf00      	nop
 800aa94:	20000918 	.word	0x20000918

0800aa98 <wcrtomb>:
 800aa98:	b570      	push	{r4, r5, r6, lr}
 800aa9a:	4b11      	ldr	r3, [pc, #68]	; (800aae0 <wcrtomb+0x48>)
 800aa9c:	b084      	sub	sp, #16
 800aa9e:	681d      	ldr	r5, [r3, #0]
 800aaa0:	4614      	mov	r4, r2
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4601      	mov	r1, r0
 800aaa6:	b150      	cbz	r0, 800aabe <wcrtomb+0x26>
 800aaa8:	480e      	ldr	r0, [pc, #56]	; (800aae4 <wcrtomb+0x4c>)
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f8d0 60e0 	ldr.w	r6, [r0, #224]	; 0xe0
 800aab0:	4623      	mov	r3, r4
 800aab2:	4628      	mov	r0, r5
 800aab4:	47b0      	blx	r6
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	d00b      	beq.n	800aad2 <wcrtomb+0x3a>
 800aaba:	b004      	add	sp, #16
 800aabc:	bd70      	pop	{r4, r5, r6, pc}
 800aabe:	4a09      	ldr	r2, [pc, #36]	; (800aae4 <wcrtomb+0x4c>)
 800aac0:	4623      	mov	r3, r4
 800aac2:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
 800aac6:	a901      	add	r1, sp, #4
 800aac8:	4602      	mov	r2, r0
 800aaca:	4628      	mov	r0, r5
 800aacc:	47b0      	blx	r6
 800aace:	1c43      	adds	r3, r0, #1
 800aad0:	d1f3      	bne.n	800aaba <wcrtomb+0x22>
 800aad2:	2200      	movs	r2, #0
 800aad4:	238a      	movs	r3, #138	; 0x8a
 800aad6:	6022      	str	r2, [r4, #0]
 800aad8:	602b      	str	r3, [r5, #0]
 800aada:	b004      	add	sp, #16
 800aadc:	bd70      	pop	{r4, r5, r6, pc}
 800aade:	bf00      	nop
 800aae0:	200000d8 	.word	0x200000d8
 800aae4:	20000918 	.word	0x20000918

0800aae8 <_write_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	460c      	mov	r4, r1
 800aaec:	4d08      	ldr	r5, [pc, #32]	; (800ab10 <_write_r+0x28>)
 800aaee:	4684      	mov	ip, r0
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	602b      	str	r3, [r5, #0]
 800aafa:	4664      	mov	r4, ip
 800aafc:	f001 f856 	bl	800bbac <_write>
 800ab00:	1c43      	adds	r3, r0, #1
 800ab02:	d000      	beq.n	800ab06 <_write_r+0x1e>
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
 800ab06:	682b      	ldr	r3, [r5, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d0fb      	beq.n	800ab04 <_write_r+0x1c>
 800ab0c:	6023      	str	r3, [r4, #0]
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	20000b84 	.word	0x20000b84

0800ab14 <_close_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4d07      	ldr	r5, [pc, #28]	; (800ab34 <_close_r+0x20>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	4608      	mov	r0, r1
 800ab1e:	602a      	str	r2, [r5, #0]
 800ab20:	f001 f80c 	bl	800bb3c <_close>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d000      	beq.n	800ab2a <_close_r+0x16>
 800ab28:	bd38      	pop	{r3, r4, r5, pc}
 800ab2a:	682b      	ldr	r3, [r5, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d0fb      	beq.n	800ab28 <_close_r+0x14>
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
 800ab34:	20000b84 	.word	0x20000b84

0800ab38 <_fclose_r>:
 800ab38:	b570      	push	{r4, r5, r6, lr}
 800ab3a:	2900      	cmp	r1, #0
 800ab3c:	d04b      	beq.n	800abd6 <_fclose_r+0x9e>
 800ab3e:	4606      	mov	r6, r0
 800ab40:	460c      	mov	r4, r1
 800ab42:	b110      	cbz	r0, 800ab4a <_fclose_r+0x12>
 800ab44:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d048      	beq.n	800abdc <_fclose_r+0xa4>
 800ab4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab4c:	07d8      	lsls	r0, r3, #31
 800ab4e:	d534      	bpl.n	800abba <_fclose_r+0x82>
 800ab50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d03e      	beq.n	800abd6 <_fclose_r+0x9e>
 800ab58:	4621      	mov	r1, r4
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7fe fffa 	bl	8009b54 <__sflush_r>
 800ab60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ab62:	4605      	mov	r5, r0
 800ab64:	b133      	cbz	r3, 800ab74 <_fclose_r+0x3c>
 800ab66:	69e1      	ldr	r1, [r4, #28]
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4798      	blx	r3
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	bfb8      	it	lt
 800ab70:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 800ab74:	89a3      	ldrh	r3, [r4, #12]
 800ab76:	061a      	lsls	r2, r3, #24
 800ab78:	d43b      	bmi.n	800abf2 <_fclose_r+0xba>
 800ab7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ab7c:	b141      	cbz	r1, 800ab90 <_fclose_r+0x58>
 800ab7e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ab82:	4299      	cmp	r1, r3
 800ab84:	d002      	beq.n	800ab8c <_fclose_r+0x54>
 800ab86:	4630      	mov	r0, r6
 800ab88:	f7fb fcac 	bl	80064e4 <_free_r>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ab90:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ab92:	b121      	cbz	r1, 800ab9e <_fclose_r+0x66>
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7fb fca5 	bl	80064e4 <_free_r>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	6463      	str	r3, [r4, #68]	; 0x44
 800ab9e:	f7ff f9ff 	bl	8009fa0 <__sfp_lock_acquire>
 800aba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aba4:	2200      	movs	r2, #0
 800aba6:	07db      	lsls	r3, r3, #31
 800aba8:	81a2      	strh	r2, [r4, #12]
 800abaa:	d527      	bpl.n	800abfc <_fclose_r+0xc4>
 800abac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abae:	f7fb fdaf 	bl	8006710 <__retarget_lock_close_recursive>
 800abb2:	f7ff f9fb 	bl	8009fac <__sfp_lock_release>
 800abb6:	4628      	mov	r0, r5
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	0599      	lsls	r1, r3, #22
 800abbe:	d4cb      	bmi.n	800ab58 <_fclose_r+0x20>
 800abc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abc2:	f7fb fda9 	bl	8006718 <__retarget_lock_acquire_recursive>
 800abc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1c4      	bne.n	800ab58 <_fclose_r+0x20>
 800abce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800abd0:	f015 0501 	ands.w	r5, r5, #1
 800abd4:	d008      	beq.n	800abe8 <_fclose_r+0xb0>
 800abd6:	2500      	movs	r5, #0
 800abd8:	4628      	mov	r0, r5
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	f7ff f8f6 	bl	8009dcc <__sinit>
 800abe0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abe2:	07d8      	lsls	r0, r3, #31
 800abe4:	d4b4      	bmi.n	800ab50 <_fclose_r+0x18>
 800abe6:	e7e8      	b.n	800abba <_fclose_r+0x82>
 800abe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abea:	f7fb fd9d 	bl	8006728 <__retarget_lock_release_recursive>
 800abee:	4628      	mov	r0, r5
 800abf0:	bd70      	pop	{r4, r5, r6, pc}
 800abf2:	6921      	ldr	r1, [r4, #16]
 800abf4:	4630      	mov	r0, r6
 800abf6:	f7fb fc75 	bl	80064e4 <_free_r>
 800abfa:	e7be      	b.n	800ab7a <_fclose_r+0x42>
 800abfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abfe:	f7fb fd93 	bl	8006728 <__retarget_lock_release_recursive>
 800ac02:	e7d3      	b.n	800abac <_fclose_r+0x74>

0800ac04 <fclose>:
 800ac04:	4b02      	ldr	r3, [pc, #8]	; (800ac10 <fclose+0xc>)
 800ac06:	4601      	mov	r1, r0
 800ac08:	6818      	ldr	r0, [r3, #0]
 800ac0a:	f7ff bf95 	b.w	800ab38 <_fclose_r>
 800ac0e:	bf00      	nop
 800ac10:	200000d8 	.word	0x200000d8

0800ac14 <_fstat_r>:
 800ac14:	b570      	push	{r4, r5, r6, lr}
 800ac16:	460c      	mov	r4, r1
 800ac18:	4d08      	ldr	r5, [pc, #32]	; (800ac3c <_fstat_r+0x28>)
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2600      	movs	r6, #0
 800ac1e:	4620      	mov	r0, r4
 800ac20:	4611      	mov	r1, r2
 800ac22:	461c      	mov	r4, r3
 800ac24:	602e      	str	r6, [r5, #0]
 800ac26:	f000 ff91 	bl	800bb4c <_fstat>
 800ac2a:	1c43      	adds	r3, r0, #1
 800ac2c:	d000      	beq.n	800ac30 <_fstat_r+0x1c>
 800ac2e:	bd70      	pop	{r4, r5, r6, pc}
 800ac30:	682b      	ldr	r3, [r5, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0fb      	beq.n	800ac2e <_fstat_r+0x1a>
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	bd70      	pop	{r4, r5, r6, pc}
 800ac3a:	bf00      	nop
 800ac3c:	20000b84 	.word	0x20000b84

0800ac40 <_isatty_r>:
 800ac40:	b538      	push	{r3, r4, r5, lr}
 800ac42:	4d07      	ldr	r5, [pc, #28]	; (800ac60 <_isatty_r+0x20>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	4604      	mov	r4, r0
 800ac48:	4608      	mov	r0, r1
 800ac4a:	602a      	str	r2, [r5, #0]
 800ac4c:	f000 ff8e 	bl	800bb6c <_isatty>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d000      	beq.n	800ac56 <_isatty_r+0x16>
 800ac54:	bd38      	pop	{r3, r4, r5, pc}
 800ac56:	682b      	ldr	r3, [r5, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d0fb      	beq.n	800ac54 <_isatty_r+0x14>
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	bd38      	pop	{r3, r4, r5, pc}
 800ac60:	20000b84 	.word	0x20000b84

0800ac64 <_lseek_r>:
 800ac64:	b538      	push	{r3, r4, r5, lr}
 800ac66:	460c      	mov	r4, r1
 800ac68:	4d08      	ldr	r5, [pc, #32]	; (800ac8c <_lseek_r+0x28>)
 800ac6a:	4684      	mov	ip, r0
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	4620      	mov	r0, r4
 800ac70:	461a      	mov	r2, r3
 800ac72:	2300      	movs	r3, #0
 800ac74:	602b      	str	r3, [r5, #0]
 800ac76:	4664      	mov	r4, ip
 800ac78:	f000 ff88 	bl	800bb8c <_lseek>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d000      	beq.n	800ac82 <_lseek_r+0x1e>
 800ac80:	bd38      	pop	{r3, r4, r5, pc}
 800ac82:	682b      	ldr	r3, [r5, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d0fb      	beq.n	800ac80 <_lseek_r+0x1c>
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	20000b84 	.word	0x20000b84

0800ac90 <_read_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	460c      	mov	r4, r1
 800ac94:	4d08      	ldr	r5, [pc, #32]	; (800acb8 <_read_r+0x28>)
 800ac96:	4684      	mov	ip, r0
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	2300      	movs	r3, #0
 800aca0:	602b      	str	r3, [r5, #0]
 800aca2:	4664      	mov	r4, ip
 800aca4:	f000 ff7a 	bl	800bb9c <_read>
 800aca8:	1c43      	adds	r3, r0, #1
 800acaa:	d000      	beq.n	800acae <_read_r+0x1e>
 800acac:	bd38      	pop	{r3, r4, r5, pc}
 800acae:	682b      	ldr	r3, [r5, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d0fb      	beq.n	800acac <_read_r+0x1c>
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	bd38      	pop	{r3, r4, r5, pc}
 800acb8:	20000b84 	.word	0x20000b84
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800acc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800acc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800acca:	bf1d      	ittte	ne
 800accc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800acd0:	ea94 0f0c 	teqne	r4, ip
 800acd4:	ea95 0f0c 	teqne	r5, ip
 800acd8:	f000 f8de 	bleq	800ae98 <_read_r+0x208>
 800acdc:	442c      	add	r4, r5
 800acde:	ea81 0603 	eor.w	r6, r1, r3
 800ace2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800ace6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800acea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800acee:	bf18      	it	ne
 800acf0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800acf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800acf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acfc:	d038      	beq.n	800ad70 <_read_r+0xe0>
 800acfe:	fba0 ce02 	umull	ip, lr, r0, r2
 800ad02:	f04f 0500 	mov.w	r5, #0
 800ad06:	fbe1 e502 	umlal	lr, r5, r1, r2
 800ad0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800ad0e:	fbe0 e503 	umlal	lr, r5, r0, r3
 800ad12:	f04f 0600 	mov.w	r6, #0
 800ad16:	fbe1 5603 	umlal	r5, r6, r1, r3
 800ad1a:	f09c 0f00 	teq	ip, #0
 800ad1e:	bf18      	it	ne
 800ad20:	f04e 0e01 	orrne.w	lr, lr, #1
 800ad24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800ad28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800ad2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800ad30:	d204      	bcs.n	800ad3c <_read_r+0xac>
 800ad32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800ad36:	416d      	adcs	r5, r5
 800ad38:	eb46 0606 	adc.w	r6, r6, r6
 800ad3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800ad40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800ad44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800ad48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800ad4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800ad50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800ad54:	bf88      	it	hi
 800ad56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800ad5a:	d81e      	bhi.n	800ad9a <_read_r+0x10a>
 800ad5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800ad60:	bf08      	it	eq
 800ad62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800ad66:	f150 0000 	adcs.w	r0, r0, #0
 800ad6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}
 800ad70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800ad74:	ea46 0101 	orr.w	r1, r6, r1
 800ad78:	ea40 0002 	orr.w	r0, r0, r2
 800ad7c:	ea81 0103 	eor.w	r1, r1, r3
 800ad80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800ad84:	bfc2      	ittt	gt
 800ad86:	ebd4 050c 	rsbsgt	r5, r4, ip
 800ad8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800ad8e:	bd70      	popgt	{r4, r5, r6, pc}
 800ad90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ad94:	f04f 0e00 	mov.w	lr, #0
 800ad98:	3c01      	subs	r4, #1
 800ad9a:	f300 80ab 	bgt.w	800aef4 <_read_r+0x264>
 800ad9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800ada2:	bfde      	ittt	le
 800ada4:	2000      	movle	r0, #0
 800ada6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800adaa:	bd70      	pople	{r4, r5, r6, pc}
 800adac:	f1c4 0400 	rsb	r4, r4, #0
 800adb0:	3c20      	subs	r4, #32
 800adb2:	da35      	bge.n	800ae20 <_read_r+0x190>
 800adb4:	340c      	adds	r4, #12
 800adb6:	dc1b      	bgt.n	800adf0 <_read_r+0x160>
 800adb8:	f104 0414 	add.w	r4, r4, #20
 800adbc:	f1c4 0520 	rsb	r5, r4, #32
 800adc0:	fa00 f305 	lsl.w	r3, r0, r5
 800adc4:	fa20 f004 	lsr.w	r0, r0, r4
 800adc8:	fa01 f205 	lsl.w	r2, r1, r5
 800adcc:	ea40 0002 	orr.w	r0, r0, r2
 800add0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800add4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800add8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800addc:	fa21 f604 	lsr.w	r6, r1, r4
 800ade0:	eb42 0106 	adc.w	r1, r2, r6
 800ade4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ade8:	bf08      	it	eq
 800adea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800adee:	bd70      	pop	{r4, r5, r6, pc}
 800adf0:	f1c4 040c 	rsb	r4, r4, #12
 800adf4:	f1c4 0520 	rsb	r5, r4, #32
 800adf8:	fa00 f304 	lsl.w	r3, r0, r4
 800adfc:	fa20 f005 	lsr.w	r0, r0, r5
 800ae00:	fa01 f204 	lsl.w	r2, r1, r4
 800ae04:	ea40 0002 	orr.w	r0, r0, r2
 800ae08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ae0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800ae10:	f141 0100 	adc.w	r1, r1, #0
 800ae14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ae18:	bf08      	it	eq
 800ae1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}
 800ae20:	f1c4 0520 	rsb	r5, r4, #32
 800ae24:	fa00 f205 	lsl.w	r2, r0, r5
 800ae28:	ea4e 0e02 	orr.w	lr, lr, r2
 800ae2c:	fa20 f304 	lsr.w	r3, r0, r4
 800ae30:	fa01 f205 	lsl.w	r2, r1, r5
 800ae34:	ea43 0302 	orr.w	r3, r3, r2
 800ae38:	fa21 f004 	lsr.w	r0, r1, r4
 800ae3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800ae40:	fa21 f204 	lsr.w	r2, r1, r4
 800ae44:	ea20 0002 	bic.w	r0, r0, r2
 800ae48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800ae4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800ae50:	bf08      	it	eq
 800ae52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800ae56:	bd70      	pop	{r4, r5, r6, pc}
 800ae58:	f094 0f00 	teq	r4, #0
 800ae5c:	d10f      	bne.n	800ae7e <_read_r+0x1ee>
 800ae5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800ae62:	0040      	lsls	r0, r0, #1
 800ae64:	eb41 0101 	adc.w	r1, r1, r1
 800ae68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800ae6c:	bf08      	it	eq
 800ae6e:	3c01      	subeq	r4, #1
 800ae70:	d0f7      	beq.n	800ae62 <_read_r+0x1d2>
 800ae72:	ea41 0106 	orr.w	r1, r1, r6
 800ae76:	f095 0f00 	teq	r5, #0
 800ae7a:	bf18      	it	ne
 800ae7c:	4770      	bxne	lr
 800ae7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800ae82:	0052      	lsls	r2, r2, #1
 800ae84:	eb43 0303 	adc.w	r3, r3, r3
 800ae88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800ae8c:	bf08      	it	eq
 800ae8e:	3d01      	subeq	r5, #1
 800ae90:	d0f7      	beq.n	800ae82 <_read_r+0x1f2>
 800ae92:	ea43 0306 	orr.w	r3, r3, r6
 800ae96:	4770      	bx	lr
 800ae98:	ea94 0f0c 	teq	r4, ip
 800ae9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800aea0:	bf18      	it	ne
 800aea2:	ea95 0f0c 	teqne	r5, ip
 800aea6:	d00c      	beq.n	800aec2 <_read_r+0x232>
 800aea8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800aeac:	bf18      	it	ne
 800aeae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800aeb2:	d1d1      	bne.n	800ae58 <_read_r+0x1c8>
 800aeb4:	ea81 0103 	eor.w	r1, r1, r3
 800aeb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800aebc:	f04f 0000 	mov.w	r0, #0
 800aec0:	bd70      	pop	{r4, r5, r6, pc}
 800aec2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800aec6:	bf06      	itte	eq
 800aec8:	4610      	moveq	r0, r2
 800aeca:	4619      	moveq	r1, r3
 800aecc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800aed0:	d019      	beq.n	800af06 <_read_r+0x276>
 800aed2:	ea94 0f0c 	teq	r4, ip
 800aed6:	d102      	bne.n	800aede <_read_r+0x24e>
 800aed8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800aedc:	d113      	bne.n	800af06 <_read_r+0x276>
 800aede:	ea95 0f0c 	teq	r5, ip
 800aee2:	d105      	bne.n	800aef0 <_read_r+0x260>
 800aee4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800aee8:	bf1c      	itt	ne
 800aeea:	4610      	movne	r0, r2
 800aeec:	4619      	movne	r1, r3
 800aeee:	d10a      	bne.n	800af06 <_read_r+0x276>
 800aef0:	ea81 0103 	eor.w	r1, r1, r3
 800aef4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800aef8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800aefc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af00:	f04f 0000 	mov.w	r0, #0
 800af04:	bd70      	pop	{r4, r5, r6, pc}
 800af06:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800af0a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800af0e:	bd70      	pop	{r4, r5, r6, pc}

0800af10 <__aeabi_drsub>:
 800af10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800af14:	e002      	b.n	800af1c <__adddf3>
 800af16:	bf00      	nop

0800af18 <__aeabi_dsub>:
 800af18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800af1c <__adddf3>:
 800af1c:	b530      	push	{r4, r5, lr}
 800af1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800af22:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800af26:	ea94 0f05 	teq	r4, r5
 800af2a:	bf08      	it	eq
 800af2c:	ea90 0f02 	teqeq	r0, r2
 800af30:	bf1f      	itttt	ne
 800af32:	ea54 0c00 	orrsne.w	ip, r4, r0
 800af36:	ea55 0c02 	orrsne.w	ip, r5, r2
 800af3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800af3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800af42:	f000 80e2 	beq.w	800b10a <__adddf3+0x1ee>
 800af46:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800af4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800af4e:	bfb8      	it	lt
 800af50:	426d      	neglt	r5, r5
 800af52:	dd0c      	ble.n	800af6e <__adddf3+0x52>
 800af54:	442c      	add	r4, r5
 800af56:	ea80 0202 	eor.w	r2, r0, r2
 800af5a:	ea81 0303 	eor.w	r3, r1, r3
 800af5e:	ea82 0000 	eor.w	r0, r2, r0
 800af62:	ea83 0101 	eor.w	r1, r3, r1
 800af66:	ea80 0202 	eor.w	r2, r0, r2
 800af6a:	ea81 0303 	eor.w	r3, r1, r3
 800af6e:	2d36      	cmp	r5, #54	; 0x36
 800af70:	bf88      	it	hi
 800af72:	bd30      	pophi	{r4, r5, pc}
 800af74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800af78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800af7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800af80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800af84:	d002      	beq.n	800af8c <__adddf3+0x70>
 800af86:	4240      	negs	r0, r0
 800af88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800af8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800af90:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800af94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800af98:	d002      	beq.n	800afa0 <__adddf3+0x84>
 800af9a:	4252      	negs	r2, r2
 800af9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800afa0:	ea94 0f05 	teq	r4, r5
 800afa4:	f000 80a7 	beq.w	800b0f6 <__adddf3+0x1da>
 800afa8:	f1a4 0401 	sub.w	r4, r4, #1
 800afac:	f1d5 0e20 	rsbs	lr, r5, #32
 800afb0:	db0d      	blt.n	800afce <__adddf3+0xb2>
 800afb2:	fa02 fc0e 	lsl.w	ip, r2, lr
 800afb6:	fa22 f205 	lsr.w	r2, r2, r5
 800afba:	1880      	adds	r0, r0, r2
 800afbc:	f141 0100 	adc.w	r1, r1, #0
 800afc0:	fa03 f20e 	lsl.w	r2, r3, lr
 800afc4:	1880      	adds	r0, r0, r2
 800afc6:	fa43 f305 	asr.w	r3, r3, r5
 800afca:	4159      	adcs	r1, r3
 800afcc:	e00e      	b.n	800afec <__adddf3+0xd0>
 800afce:	f1a5 0520 	sub.w	r5, r5, #32
 800afd2:	f10e 0e20 	add.w	lr, lr, #32
 800afd6:	2a01      	cmp	r2, #1
 800afd8:	fa03 fc0e 	lsl.w	ip, r3, lr
 800afdc:	bf28      	it	cs
 800afde:	f04c 0c02 	orrcs.w	ip, ip, #2
 800afe2:	fa43 f305 	asr.w	r3, r3, r5
 800afe6:	18c0      	adds	r0, r0, r3
 800afe8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800afec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800aff0:	d507      	bpl.n	800b002 <__adddf3+0xe6>
 800aff2:	f04f 0e00 	mov.w	lr, #0
 800aff6:	f1dc 0c00 	rsbs	ip, ip, #0
 800affa:	eb7e 0000 	sbcs.w	r0, lr, r0
 800affe:	eb6e 0101 	sbc.w	r1, lr, r1
 800b002:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b006:	d31b      	bcc.n	800b040 <__adddf3+0x124>
 800b008:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b00c:	d30c      	bcc.n	800b028 <__adddf3+0x10c>
 800b00e:	0849      	lsrs	r1, r1, #1
 800b010:	ea5f 0030 	movs.w	r0, r0, rrx
 800b014:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800b018:	f104 0401 	add.w	r4, r4, #1
 800b01c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800b020:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800b024:	f080 809a 	bcs.w	800b15c <__adddf3+0x240>
 800b028:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800b02c:	bf08      	it	eq
 800b02e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b032:	f150 0000 	adcs.w	r0, r0, #0
 800b036:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b03a:	ea41 0105 	orr.w	r1, r1, r5
 800b03e:	bd30      	pop	{r4, r5, pc}
 800b040:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800b044:	4140      	adcs	r0, r0
 800b046:	eb41 0101 	adc.w	r1, r1, r1
 800b04a:	3c01      	subs	r4, #1
 800b04c:	bf28      	it	cs
 800b04e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800b052:	d2e9      	bcs.n	800b028 <__adddf3+0x10c>
 800b054:	f091 0f00 	teq	r1, #0
 800b058:	bf04      	itt	eq
 800b05a:	4601      	moveq	r1, r0
 800b05c:	2000      	moveq	r0, #0
 800b05e:	fab1 f381 	clz	r3, r1
 800b062:	bf08      	it	eq
 800b064:	3320      	addeq	r3, #32
 800b066:	f1a3 030b 	sub.w	r3, r3, #11
 800b06a:	f1b3 0220 	subs.w	r2, r3, #32
 800b06e:	da0c      	bge.n	800b08a <__adddf3+0x16e>
 800b070:	320c      	adds	r2, #12
 800b072:	dd08      	ble.n	800b086 <__adddf3+0x16a>
 800b074:	f102 0c14 	add.w	ip, r2, #20
 800b078:	f1c2 020c 	rsb	r2, r2, #12
 800b07c:	fa01 f00c 	lsl.w	r0, r1, ip
 800b080:	fa21 f102 	lsr.w	r1, r1, r2
 800b084:	e00c      	b.n	800b0a0 <__adddf3+0x184>
 800b086:	f102 0214 	add.w	r2, r2, #20
 800b08a:	bfd8      	it	le
 800b08c:	f1c2 0c20 	rsble	ip, r2, #32
 800b090:	fa01 f102 	lsl.w	r1, r1, r2
 800b094:	fa20 fc0c 	lsr.w	ip, r0, ip
 800b098:	bfdc      	itt	le
 800b09a:	ea41 010c 	orrle.w	r1, r1, ip
 800b09e:	4090      	lslle	r0, r2
 800b0a0:	1ae4      	subs	r4, r4, r3
 800b0a2:	bfa2      	ittt	ge
 800b0a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800b0a8:	4329      	orrge	r1, r5
 800b0aa:	bd30      	popge	{r4, r5, pc}
 800b0ac:	ea6f 0404 	mvn.w	r4, r4
 800b0b0:	3c1f      	subs	r4, #31
 800b0b2:	da1c      	bge.n	800b0ee <__adddf3+0x1d2>
 800b0b4:	340c      	adds	r4, #12
 800b0b6:	dc0e      	bgt.n	800b0d6 <__adddf3+0x1ba>
 800b0b8:	f104 0414 	add.w	r4, r4, #20
 800b0bc:	f1c4 0220 	rsb	r2, r4, #32
 800b0c0:	fa20 f004 	lsr.w	r0, r0, r4
 800b0c4:	fa01 f302 	lsl.w	r3, r1, r2
 800b0c8:	ea40 0003 	orr.w	r0, r0, r3
 800b0cc:	fa21 f304 	lsr.w	r3, r1, r4
 800b0d0:	ea45 0103 	orr.w	r1, r5, r3
 800b0d4:	bd30      	pop	{r4, r5, pc}
 800b0d6:	f1c4 040c 	rsb	r4, r4, #12
 800b0da:	f1c4 0220 	rsb	r2, r4, #32
 800b0de:	fa20 f002 	lsr.w	r0, r0, r2
 800b0e2:	fa01 f304 	lsl.w	r3, r1, r4
 800b0e6:	ea40 0003 	orr.w	r0, r0, r3
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	bd30      	pop	{r4, r5, pc}
 800b0ee:	fa21 f004 	lsr.w	r0, r1, r4
 800b0f2:	4629      	mov	r1, r5
 800b0f4:	bd30      	pop	{r4, r5, pc}
 800b0f6:	f094 0f00 	teq	r4, #0
 800b0fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800b0fe:	bf06      	itte	eq
 800b100:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800b104:	3401      	addeq	r4, #1
 800b106:	3d01      	subne	r5, #1
 800b108:	e74e      	b.n	800afa8 <__adddf3+0x8c>
 800b10a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b10e:	bf18      	it	ne
 800b110:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800b114:	d029      	beq.n	800b16a <__adddf3+0x24e>
 800b116:	ea94 0f05 	teq	r4, r5
 800b11a:	bf08      	it	eq
 800b11c:	ea90 0f02 	teqeq	r0, r2
 800b120:	d005      	beq.n	800b12e <__adddf3+0x212>
 800b122:	ea54 0c00 	orrs.w	ip, r4, r0
 800b126:	bf04      	itt	eq
 800b128:	4619      	moveq	r1, r3
 800b12a:	4610      	moveq	r0, r2
 800b12c:	bd30      	pop	{r4, r5, pc}
 800b12e:	ea91 0f03 	teq	r1, r3
 800b132:	bf1e      	ittt	ne
 800b134:	2100      	movne	r1, #0
 800b136:	2000      	movne	r0, #0
 800b138:	bd30      	popne	{r4, r5, pc}
 800b13a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800b13e:	d105      	bne.n	800b14c <__adddf3+0x230>
 800b140:	0040      	lsls	r0, r0, #1
 800b142:	4149      	adcs	r1, r1
 800b144:	bf28      	it	cs
 800b146:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800b14a:	bd30      	pop	{r4, r5, pc}
 800b14c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800b150:	bf3c      	itt	cc
 800b152:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800b156:	bd30      	popcc	{r4, r5, pc}
 800b158:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b15c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800b160:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b164:	f04f 0000 	mov.w	r0, #0
 800b168:	bd30      	pop	{r4, r5, pc}
 800b16a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800b16e:	bf1a      	itte	ne
 800b170:	4619      	movne	r1, r3
 800b172:	4610      	movne	r0, r2
 800b174:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800b178:	bf1c      	itt	ne
 800b17a:	460b      	movne	r3, r1
 800b17c:	4602      	movne	r2, r0
 800b17e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800b182:	bf06      	itte	eq
 800b184:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800b188:	ea91 0f03 	teqeq	r1, r3
 800b18c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800b190:	bd30      	pop	{r4, r5, pc}
 800b192:	bf00      	nop

0800b194 <__aeabi_ui2d>:
 800b194:	f090 0f00 	teq	r0, #0
 800b198:	bf04      	itt	eq
 800b19a:	2100      	moveq	r1, #0
 800b19c:	4770      	bxeq	lr
 800b19e:	b530      	push	{r4, r5, lr}
 800b1a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b1a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b1a8:	f04f 0500 	mov.w	r5, #0
 800b1ac:	f04f 0100 	mov.w	r1, #0
 800b1b0:	e750      	b.n	800b054 <__adddf3+0x138>
 800b1b2:	bf00      	nop

0800b1b4 <__aeabi_i2d>:
 800b1b4:	f090 0f00 	teq	r0, #0
 800b1b8:	bf04      	itt	eq
 800b1ba:	2100      	moveq	r1, #0
 800b1bc:	4770      	bxeq	lr
 800b1be:	b530      	push	{r4, r5, lr}
 800b1c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b1c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b1c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800b1cc:	bf48      	it	mi
 800b1ce:	4240      	negmi	r0, r0
 800b1d0:	f04f 0100 	mov.w	r1, #0
 800b1d4:	e73e      	b.n	800b054 <__adddf3+0x138>
 800b1d6:	bf00      	nop

0800b1d8 <__aeabi_f2d>:
 800b1d8:	0042      	lsls	r2, r0, #1
 800b1da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800b1de:	ea4f 0131 	mov.w	r1, r1, rrx
 800b1e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800b1e6:	bf1f      	itttt	ne
 800b1e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800b1ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800b1f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800b1f4:	4770      	bxne	lr
 800b1f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800b1fa:	bf08      	it	eq
 800b1fc:	4770      	bxeq	lr
 800b1fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800b202:	bf04      	itt	eq
 800b204:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800b208:	4770      	bxeq	lr
 800b20a:	b530      	push	{r4, r5, lr}
 800b20c:	f44f 7460 	mov.w	r4, #896	; 0x380
 800b210:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800b214:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b218:	e71c      	b.n	800b054 <__adddf3+0x138>
 800b21a:	bf00      	nop

0800b21c <__aeabi_ul2d>:
 800b21c:	ea50 0201 	orrs.w	r2, r0, r1
 800b220:	bf08      	it	eq
 800b222:	4770      	bxeq	lr
 800b224:	b530      	push	{r4, r5, lr}
 800b226:	f04f 0500 	mov.w	r5, #0
 800b22a:	e00a      	b.n	800b242 <__aeabi_l2d+0x16>

0800b22c <__aeabi_l2d>:
 800b22c:	ea50 0201 	orrs.w	r2, r0, r1
 800b230:	bf08      	it	eq
 800b232:	4770      	bxeq	lr
 800b234:	b530      	push	{r4, r5, lr}
 800b236:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800b23a:	d502      	bpl.n	800b242 <__aeabi_l2d+0x16>
 800b23c:	4240      	negs	r0, r0
 800b23e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b242:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800b246:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800b24a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800b24e:	f43f aed8 	beq.w	800b002 <__adddf3+0xe6>
 800b252:	f04f 0203 	mov.w	r2, #3
 800b256:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b25a:	bf18      	it	ne
 800b25c:	3203      	addne	r2, #3
 800b25e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b262:	bf18      	it	ne
 800b264:	3203      	addne	r2, #3
 800b266:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800b26a:	f1c2 0320 	rsb	r3, r2, #32
 800b26e:	fa00 fc03 	lsl.w	ip, r0, r3
 800b272:	fa20 f002 	lsr.w	r0, r0, r2
 800b276:	fa01 fe03 	lsl.w	lr, r1, r3
 800b27a:	ea40 000e 	orr.w	r0, r0, lr
 800b27e:	fa21 f102 	lsr.w	r1, r1, r2
 800b282:	4414      	add	r4, r2
 800b284:	e6bd      	b.n	800b002 <__adddf3+0xe6>
 800b286:	bf00      	nop

0800b288 <__aeabi_dmul>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800b28e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800b292:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800b296:	bf1d      	ittte	ne
 800b298:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800b29c:	ea94 0f0c 	teqne	r4, ip
 800b2a0:	ea95 0f0c 	teqne	r5, ip
 800b2a4:	f000 f8de 	bleq	800b464 <__aeabi_dmul+0x1dc>
 800b2a8:	442c      	add	r4, r5
 800b2aa:	ea81 0603 	eor.w	r6, r1, r3
 800b2ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800b2b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800b2b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800b2ba:	bf18      	it	ne
 800b2bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800b2c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b2c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2c8:	d038      	beq.n	800b33c <__aeabi_dmul+0xb4>
 800b2ca:	fba0 ce02 	umull	ip, lr, r0, r2
 800b2ce:	f04f 0500 	mov.w	r5, #0
 800b2d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 800b2d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800b2da:	fbe0 e503 	umlal	lr, r5, r0, r3
 800b2de:	f04f 0600 	mov.w	r6, #0
 800b2e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 800b2e6:	f09c 0f00 	teq	ip, #0
 800b2ea:	bf18      	it	ne
 800b2ec:	f04e 0e01 	orrne.w	lr, lr, #1
 800b2f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800b2f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800b2f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800b2fc:	d204      	bcs.n	800b308 <__aeabi_dmul+0x80>
 800b2fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800b302:	416d      	adcs	r5, r5
 800b304:	eb46 0606 	adc.w	r6, r6, r6
 800b308:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800b30c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800b310:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800b314:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800b318:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800b31c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800b320:	bf88      	it	hi
 800b322:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800b326:	d81e      	bhi.n	800b366 <__aeabi_dmul+0xde>
 800b328:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800b32c:	bf08      	it	eq
 800b32e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800b332:	f150 0000 	adcs.w	r0, r0, #0
 800b336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b33a:	bd70      	pop	{r4, r5, r6, pc}
 800b33c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800b340:	ea46 0101 	orr.w	r1, r6, r1
 800b344:	ea40 0002 	orr.w	r0, r0, r2
 800b348:	ea81 0103 	eor.w	r1, r1, r3
 800b34c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800b350:	bfc2      	ittt	gt
 800b352:	ebd4 050c 	rsbsgt	r5, r4, ip
 800b356:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800b35a:	bd70      	popgt	{r4, r5, r6, pc}
 800b35c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b360:	f04f 0e00 	mov.w	lr, #0
 800b364:	3c01      	subs	r4, #1
 800b366:	f300 80ab 	bgt.w	800b4c0 <__aeabi_dmul+0x238>
 800b36a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800b36e:	bfde      	ittt	le
 800b370:	2000      	movle	r0, #0
 800b372:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800b376:	bd70      	pople	{r4, r5, r6, pc}
 800b378:	f1c4 0400 	rsb	r4, r4, #0
 800b37c:	3c20      	subs	r4, #32
 800b37e:	da35      	bge.n	800b3ec <__aeabi_dmul+0x164>
 800b380:	340c      	adds	r4, #12
 800b382:	dc1b      	bgt.n	800b3bc <__aeabi_dmul+0x134>
 800b384:	f104 0414 	add.w	r4, r4, #20
 800b388:	f1c4 0520 	rsb	r5, r4, #32
 800b38c:	fa00 f305 	lsl.w	r3, r0, r5
 800b390:	fa20 f004 	lsr.w	r0, r0, r4
 800b394:	fa01 f205 	lsl.w	r2, r1, r5
 800b398:	ea40 0002 	orr.w	r0, r0, r2
 800b39c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800b3a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b3a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800b3a8:	fa21 f604 	lsr.w	r6, r1, r4
 800b3ac:	eb42 0106 	adc.w	r1, r2, r6
 800b3b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b3b4:	bf08      	it	eq
 800b3b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	f1c4 040c 	rsb	r4, r4, #12
 800b3c0:	f1c4 0520 	rsb	r5, r4, #32
 800b3c4:	fa00 f304 	lsl.w	r3, r0, r4
 800b3c8:	fa20 f005 	lsr.w	r0, r0, r5
 800b3cc:	fa01 f204 	lsl.w	r2, r1, r4
 800b3d0:	ea40 0002 	orr.w	r0, r0, r2
 800b3d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b3d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800b3dc:	f141 0100 	adc.w	r1, r1, #0
 800b3e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b3e4:	bf08      	it	eq
 800b3e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	f1c4 0520 	rsb	r5, r4, #32
 800b3f0:	fa00 f205 	lsl.w	r2, r0, r5
 800b3f4:	ea4e 0e02 	orr.w	lr, lr, r2
 800b3f8:	fa20 f304 	lsr.w	r3, r0, r4
 800b3fc:	fa01 f205 	lsl.w	r2, r1, r5
 800b400:	ea43 0302 	orr.w	r3, r3, r2
 800b404:	fa21 f004 	lsr.w	r0, r1, r4
 800b408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b40c:	fa21 f204 	lsr.w	r2, r1, r4
 800b410:	ea20 0002 	bic.w	r0, r0, r2
 800b414:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800b418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800b41c:	bf08      	it	eq
 800b41e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800b422:	bd70      	pop	{r4, r5, r6, pc}
 800b424:	f094 0f00 	teq	r4, #0
 800b428:	d10f      	bne.n	800b44a <__aeabi_dmul+0x1c2>
 800b42a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800b42e:	0040      	lsls	r0, r0, #1
 800b430:	eb41 0101 	adc.w	r1, r1, r1
 800b434:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b438:	bf08      	it	eq
 800b43a:	3c01      	subeq	r4, #1
 800b43c:	d0f7      	beq.n	800b42e <__aeabi_dmul+0x1a6>
 800b43e:	ea41 0106 	orr.w	r1, r1, r6
 800b442:	f095 0f00 	teq	r5, #0
 800b446:	bf18      	it	ne
 800b448:	4770      	bxne	lr
 800b44a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800b44e:	0052      	lsls	r2, r2, #1
 800b450:	eb43 0303 	adc.w	r3, r3, r3
 800b454:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b458:	bf08      	it	eq
 800b45a:	3d01      	subeq	r5, #1
 800b45c:	d0f7      	beq.n	800b44e <__aeabi_dmul+0x1c6>
 800b45e:	ea43 0306 	orr.w	r3, r3, r6
 800b462:	4770      	bx	lr
 800b464:	ea94 0f0c 	teq	r4, ip
 800b468:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800b46c:	bf18      	it	ne
 800b46e:	ea95 0f0c 	teqne	r5, ip
 800b472:	d00c      	beq.n	800b48e <__aeabi_dmul+0x206>
 800b474:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800b478:	bf18      	it	ne
 800b47a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800b47e:	d1d1      	bne.n	800b424 <__aeabi_dmul+0x19c>
 800b480:	ea81 0103 	eor.w	r1, r1, r3
 800b484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b488:	f04f 0000 	mov.w	r0, #0
 800b48c:	bd70      	pop	{r4, r5, r6, pc}
 800b48e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800b492:	bf06      	itte	eq
 800b494:	4610      	moveq	r0, r2
 800b496:	4619      	moveq	r1, r3
 800b498:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800b49c:	d019      	beq.n	800b4d2 <__aeabi_dmul+0x24a>
 800b49e:	ea94 0f0c 	teq	r4, ip
 800b4a2:	d102      	bne.n	800b4aa <__aeabi_dmul+0x222>
 800b4a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800b4a8:	d113      	bne.n	800b4d2 <__aeabi_dmul+0x24a>
 800b4aa:	ea95 0f0c 	teq	r5, ip
 800b4ae:	d105      	bne.n	800b4bc <__aeabi_dmul+0x234>
 800b4b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800b4b4:	bf1c      	itt	ne
 800b4b6:	4610      	movne	r0, r2
 800b4b8:	4619      	movne	r1, r3
 800b4ba:	d10a      	bne.n	800b4d2 <__aeabi_dmul+0x24a>
 800b4bc:	ea81 0103 	eor.w	r1, r1, r3
 800b4c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b4c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800b4c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b4cc:	f04f 0000 	mov.w	r0, #0
 800b4d0:	bd70      	pop	{r4, r5, r6, pc}
 800b4d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800b4d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800b4da:	bd70      	pop	{r4, r5, r6, pc}

0800b4dc <__aeabi_ddiv>:
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800b4e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800b4e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800b4ea:	bf1d      	ittte	ne
 800b4ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800b4f0:	ea94 0f0c 	teqne	r4, ip
 800b4f4:	ea95 0f0c 	teqne	r5, ip
 800b4f8:	f000 f8a7 	bleq	800b64a <__aeabi_ddiv+0x16e>
 800b4fc:	eba4 0405 	sub.w	r4, r4, r5
 800b500:	ea81 0e03 	eor.w	lr, r1, r3
 800b504:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800b508:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800b50c:	f000 8088 	beq.w	800b620 <__aeabi_ddiv+0x144>
 800b510:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800b514:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800b518:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800b51c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800b520:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800b524:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800b528:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800b52c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800b530:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800b534:	429d      	cmp	r5, r3
 800b536:	bf08      	it	eq
 800b538:	4296      	cmpeq	r6, r2
 800b53a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800b53e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800b542:	d202      	bcs.n	800b54a <__aeabi_ddiv+0x6e>
 800b544:	085b      	lsrs	r3, r3, #1
 800b546:	ea4f 0232 	mov.w	r2, r2, rrx
 800b54a:	1ab6      	subs	r6, r6, r2
 800b54c:	eb65 0503 	sbc.w	r5, r5, r3
 800b550:	085b      	lsrs	r3, r3, #1
 800b552:	ea4f 0232 	mov.w	r2, r2, rrx
 800b556:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b55a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800b55e:	ebb6 0e02 	subs.w	lr, r6, r2
 800b562:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b566:	bf22      	ittt	cs
 800b568:	1ab6      	subcs	r6, r6, r2
 800b56a:	4675      	movcs	r5, lr
 800b56c:	ea40 000c 	orrcs.w	r0, r0, ip
 800b570:	085b      	lsrs	r3, r3, #1
 800b572:	ea4f 0232 	mov.w	r2, r2, rrx
 800b576:	ebb6 0e02 	subs.w	lr, r6, r2
 800b57a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b57e:	bf22      	ittt	cs
 800b580:	1ab6      	subcs	r6, r6, r2
 800b582:	4675      	movcs	r5, lr
 800b584:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800b588:	085b      	lsrs	r3, r3, #1
 800b58a:	ea4f 0232 	mov.w	r2, r2, rrx
 800b58e:	ebb6 0e02 	subs.w	lr, r6, r2
 800b592:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b596:	bf22      	ittt	cs
 800b598:	1ab6      	subcs	r6, r6, r2
 800b59a:	4675      	movcs	r5, lr
 800b59c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800b5a0:	085b      	lsrs	r3, r3, #1
 800b5a2:	ea4f 0232 	mov.w	r2, r2, rrx
 800b5a6:	ebb6 0e02 	subs.w	lr, r6, r2
 800b5aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 800b5ae:	bf22      	ittt	cs
 800b5b0:	1ab6      	subcs	r6, r6, r2
 800b5b2:	4675      	movcs	r5, lr
 800b5b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800b5b8:	ea55 0e06 	orrs.w	lr, r5, r6
 800b5bc:	d018      	beq.n	800b5f0 <__aeabi_ddiv+0x114>
 800b5be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800b5c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800b5c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800b5ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b5ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800b5d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800b5d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800b5da:	d1c0      	bne.n	800b55e <__aeabi_ddiv+0x82>
 800b5dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b5e0:	d10b      	bne.n	800b5fa <__aeabi_ddiv+0x11e>
 800b5e2:	ea41 0100 	orr.w	r1, r1, r0
 800b5e6:	f04f 0000 	mov.w	r0, #0
 800b5ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800b5ee:	e7b6      	b.n	800b55e <__aeabi_ddiv+0x82>
 800b5f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800b5f4:	bf04      	itt	eq
 800b5f6:	4301      	orreq	r1, r0
 800b5f8:	2000      	moveq	r0, #0
 800b5fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800b5fe:	bf88      	it	hi
 800b600:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800b604:	f63f aeaf 	bhi.w	800b366 <__aeabi_dmul+0xde>
 800b608:	ebb5 0c03 	subs.w	ip, r5, r3
 800b60c:	bf04      	itt	eq
 800b60e:	ebb6 0c02 	subseq.w	ip, r6, r2
 800b612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800b616:	f150 0000 	adcs.w	r0, r0, #0
 800b61a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800b61e:	bd70      	pop	{r4, r5, r6, pc}
 800b620:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800b624:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800b628:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800b62c:	bfc2      	ittt	gt
 800b62e:	ebd4 050c 	rsbsgt	r5, r4, ip
 800b632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800b636:	bd70      	popgt	{r4, r5, r6, pc}
 800b638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b63c:	f04f 0e00 	mov.w	lr, #0
 800b640:	3c01      	subs	r4, #1
 800b642:	e690      	b.n	800b366 <__aeabi_dmul+0xde>
 800b644:	ea45 0e06 	orr.w	lr, r5, r6
 800b648:	e68d      	b.n	800b366 <__aeabi_dmul+0xde>
 800b64a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800b64e:	ea94 0f0c 	teq	r4, ip
 800b652:	bf08      	it	eq
 800b654:	ea95 0f0c 	teqeq	r5, ip
 800b658:	f43f af3b 	beq.w	800b4d2 <__aeabi_dmul+0x24a>
 800b65c:	ea94 0f0c 	teq	r4, ip
 800b660:	d10a      	bne.n	800b678 <__aeabi_ddiv+0x19c>
 800b662:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800b666:	f47f af34 	bne.w	800b4d2 <__aeabi_dmul+0x24a>
 800b66a:	ea95 0f0c 	teq	r5, ip
 800b66e:	f47f af25 	bne.w	800b4bc <__aeabi_dmul+0x234>
 800b672:	4610      	mov	r0, r2
 800b674:	4619      	mov	r1, r3
 800b676:	e72c      	b.n	800b4d2 <__aeabi_dmul+0x24a>
 800b678:	ea95 0f0c 	teq	r5, ip
 800b67c:	d106      	bne.n	800b68c <__aeabi_ddiv+0x1b0>
 800b67e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800b682:	f43f aefd 	beq.w	800b480 <__aeabi_dmul+0x1f8>
 800b686:	4610      	mov	r0, r2
 800b688:	4619      	mov	r1, r3
 800b68a:	e722      	b.n	800b4d2 <__aeabi_dmul+0x24a>
 800b68c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800b690:	bf18      	it	ne
 800b692:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800b696:	f47f aec5 	bne.w	800b424 <__aeabi_dmul+0x19c>
 800b69a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800b69e:	f47f af0d 	bne.w	800b4bc <__aeabi_dmul+0x234>
 800b6a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800b6a6:	f47f aeeb 	bne.w	800b480 <__aeabi_dmul+0x1f8>
 800b6aa:	e712      	b.n	800b4d2 <__aeabi_dmul+0x24a>

0800b6ac <__gedf2>:
 800b6ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b6b0:	e006      	b.n	800b6c0 <__cmpdf2+0x4>
 800b6b2:	bf00      	nop

0800b6b4 <__ledf2>:
 800b6b4:	f04f 0c01 	mov.w	ip, #1
 800b6b8:	e002      	b.n	800b6c0 <__cmpdf2+0x4>
 800b6ba:	bf00      	nop

0800b6bc <__cmpdf2>:
 800b6bc:	f04f 0c01 	mov.w	ip, #1
 800b6c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 800b6c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800b6c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800b6cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800b6d0:	bf18      	it	ne
 800b6d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800b6d6:	d01b      	beq.n	800b710 <__cmpdf2+0x54>
 800b6d8:	b001      	add	sp, #4
 800b6da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800b6de:	bf0c      	ite	eq
 800b6e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800b6e4:	ea91 0f03 	teqne	r1, r3
 800b6e8:	bf02      	ittt	eq
 800b6ea:	ea90 0f02 	teqeq	r0, r2
 800b6ee:	2000      	moveq	r0, #0
 800b6f0:	4770      	bxeq	lr
 800b6f2:	f110 0f00 	cmn.w	r0, #0
 800b6f6:	ea91 0f03 	teq	r1, r3
 800b6fa:	bf58      	it	pl
 800b6fc:	4299      	cmppl	r1, r3
 800b6fe:	bf08      	it	eq
 800b700:	4290      	cmpeq	r0, r2
 800b702:	bf2c      	ite	cs
 800b704:	17d8      	asrcs	r0, r3, #31
 800b706:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800b70a:	f040 0001 	orr.w	r0, r0, #1
 800b70e:	4770      	bx	lr
 800b710:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800b714:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800b718:	d102      	bne.n	800b720 <__cmpdf2+0x64>
 800b71a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800b71e:	d107      	bne.n	800b730 <__cmpdf2+0x74>
 800b720:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800b724:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800b728:	d1d6      	bne.n	800b6d8 <__cmpdf2+0x1c>
 800b72a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800b72e:	d0d3      	beq.n	800b6d8 <__cmpdf2+0x1c>
 800b730:	f85d 0b04 	ldr.w	r0, [sp], #4
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop

0800b738 <__aeabi_cdrcmple>:
 800b738:	4684      	mov	ip, r0
 800b73a:	4610      	mov	r0, r2
 800b73c:	4662      	mov	r2, ip
 800b73e:	468c      	mov	ip, r1
 800b740:	4619      	mov	r1, r3
 800b742:	4663      	mov	r3, ip
 800b744:	e000      	b.n	800b748 <__aeabi_cdcmpeq>
 800b746:	bf00      	nop

0800b748 <__aeabi_cdcmpeq>:
 800b748:	b501      	push	{r0, lr}
 800b74a:	f7ff ffb7 	bl	800b6bc <__cmpdf2>
 800b74e:	2800      	cmp	r0, #0
 800b750:	bf48      	it	mi
 800b752:	f110 0f00 	cmnmi.w	r0, #0
 800b756:	bd01      	pop	{r0, pc}

0800b758 <__aeabi_dcmpeq>:
 800b758:	f84d ed08 	str.w	lr, [sp, #-8]!
 800b75c:	f7ff fff4 	bl	800b748 <__aeabi_cdcmpeq>
 800b760:	bf0c      	ite	eq
 800b762:	2001      	moveq	r0, #1
 800b764:	2000      	movne	r0, #0
 800b766:	f85d fb08 	ldr.w	pc, [sp], #8
 800b76a:	bf00      	nop

0800b76c <__aeabi_dcmplt>:
 800b76c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800b770:	f7ff ffea 	bl	800b748 <__aeabi_cdcmpeq>
 800b774:	bf34      	ite	cc
 800b776:	2001      	movcc	r0, #1
 800b778:	2000      	movcs	r0, #0
 800b77a:	f85d fb08 	ldr.w	pc, [sp], #8
 800b77e:	bf00      	nop

0800b780 <__aeabi_dcmple>:
 800b780:	f84d ed08 	str.w	lr, [sp, #-8]!
 800b784:	f7ff ffe0 	bl	800b748 <__aeabi_cdcmpeq>
 800b788:	bf94      	ite	ls
 800b78a:	2001      	movls	r0, #1
 800b78c:	2000      	movhi	r0, #0
 800b78e:	f85d fb08 	ldr.w	pc, [sp], #8
 800b792:	bf00      	nop

0800b794 <__aeabi_dcmpge>:
 800b794:	f84d ed08 	str.w	lr, [sp, #-8]!
 800b798:	f7ff ffce 	bl	800b738 <__aeabi_cdrcmple>
 800b79c:	bf94      	ite	ls
 800b79e:	2001      	movls	r0, #1
 800b7a0:	2000      	movhi	r0, #0
 800b7a2:	f85d fb08 	ldr.w	pc, [sp], #8
 800b7a6:	bf00      	nop

0800b7a8 <__aeabi_dcmpgt>:
 800b7a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800b7ac:	f7ff ffc4 	bl	800b738 <__aeabi_cdrcmple>
 800b7b0:	bf34      	ite	cc
 800b7b2:	2001      	movcc	r0, #1
 800b7b4:	2000      	movcs	r0, #0
 800b7b6:	f85d fb08 	ldr.w	pc, [sp], #8
 800b7ba:	bf00      	nop

0800b7bc <__aeabi_dcmpun>:
 800b7bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800b7c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800b7c4:	d102      	bne.n	800b7cc <__aeabi_dcmpun+0x10>
 800b7c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800b7ca:	d10a      	bne.n	800b7e2 <__aeabi_dcmpun+0x26>
 800b7cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800b7d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800b7d4:	d102      	bne.n	800b7dc <__aeabi_dcmpun+0x20>
 800b7d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800b7da:	d102      	bne.n	800b7e2 <__aeabi_dcmpun+0x26>
 800b7dc:	f04f 0000 	mov.w	r0, #0
 800b7e0:	4770      	bx	lr
 800b7e2:	f04f 0001 	mov.w	r0, #1
 800b7e6:	4770      	bx	lr

0800b7e8 <__aeabi_d2iz>:
 800b7e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800b7ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800b7f0:	d215      	bcs.n	800b81e <__aeabi_d2iz+0x36>
 800b7f2:	d511      	bpl.n	800b818 <__aeabi_d2iz+0x30>
 800b7f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800b7f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800b7fc:	d912      	bls.n	800b824 <__aeabi_d2iz+0x3c>
 800b7fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800b802:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b806:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800b80a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800b80e:	fa23 f002 	lsr.w	r0, r3, r2
 800b812:	bf18      	it	ne
 800b814:	4240      	negne	r0, r0
 800b816:	4770      	bx	lr
 800b818:	f04f 0000 	mov.w	r0, #0
 800b81c:	4770      	bx	lr
 800b81e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800b822:	d105      	bne.n	800b830 <__aeabi_d2iz+0x48>
 800b824:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800b828:	bf08      	it	eq
 800b82a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800b82e:	4770      	bx	lr
 800b830:	f04f 0000 	mov.w	r0, #0
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop

0800b838 <__aeabi_uldivmod>:
 800b838:	b953      	cbnz	r3, 800b850 <__aeabi_uldivmod+0x18>
 800b83a:	b94a      	cbnz	r2, 800b850 <__aeabi_uldivmod+0x18>
 800b83c:	2900      	cmp	r1, #0
 800b83e:	bf08      	it	eq
 800b840:	2800      	cmpeq	r0, #0
 800b842:	bf1c      	itt	ne
 800b844:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800b848:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800b84c:	f000 b974 	b.w	800bb38 <__aeabi_idiv0>
 800b850:	f1ad 0c08 	sub.w	ip, sp, #8
 800b854:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800b858:	f000 f806 	bl	800b868 <__udivmoddi4>
 800b85c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b864:	b004      	add	sp, #16
 800b866:	4770      	bx	lr

0800b868 <__udivmoddi4>:
 800b868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b86c:	9e08      	ldr	r6, [sp, #32]
 800b86e:	460d      	mov	r5, r1
 800b870:	4604      	mov	r4, r0
 800b872:	4688      	mov	r8, r1
 800b874:	2b00      	cmp	r3, #0
 800b876:	d14d      	bne.n	800b914 <__udivmoddi4+0xac>
 800b878:	428a      	cmp	r2, r1
 800b87a:	4694      	mov	ip, r2
 800b87c:	d968      	bls.n	800b950 <__udivmoddi4+0xe8>
 800b87e:	fab2 f282 	clz	r2, r2
 800b882:	b152      	cbz	r2, 800b89a <__udivmoddi4+0x32>
 800b884:	fa01 f302 	lsl.w	r3, r1, r2
 800b888:	f1c2 0120 	rsb	r1, r2, #32
 800b88c:	fa20 f101 	lsr.w	r1, r0, r1
 800b890:	fa0c fc02 	lsl.w	ip, ip, r2
 800b894:	ea41 0803 	orr.w	r8, r1, r3
 800b898:	4094      	lsls	r4, r2
 800b89a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 800b89e:	0c21      	lsrs	r1, r4, #16
 800b8a0:	fbb8 fef5 	udiv	lr, r8, r5
 800b8a4:	fa1f f78c 	uxth.w	r7, ip
 800b8a8:	fb05 831e 	mls	r3, r5, lr, r8
 800b8ac:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b8b0:	fb0e f107 	mul.w	r1, lr, r7
 800b8b4:	4299      	cmp	r1, r3
 800b8b6:	d90b      	bls.n	800b8d0 <__udivmoddi4+0x68>
 800b8b8:	eb1c 0303 	adds.w	r3, ip, r3
 800b8bc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 800b8c0:	f080 811e 	bcs.w	800bb00 <__udivmoddi4+0x298>
 800b8c4:	4299      	cmp	r1, r3
 800b8c6:	f240 811b 	bls.w	800bb00 <__udivmoddi4+0x298>
 800b8ca:	f1ae 0e02 	sub.w	lr, lr, #2
 800b8ce:	4463      	add	r3, ip
 800b8d0:	1a5b      	subs	r3, r3, r1
 800b8d2:	b2a4      	uxth	r4, r4
 800b8d4:	fbb3 f0f5 	udiv	r0, r3, r5
 800b8d8:	fb05 3310 	mls	r3, r5, r0, r3
 800b8dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800b8e0:	fb00 f707 	mul.w	r7, r0, r7
 800b8e4:	42a7      	cmp	r7, r4
 800b8e6:	d90a      	bls.n	800b8fe <__udivmoddi4+0x96>
 800b8e8:	eb1c 0404 	adds.w	r4, ip, r4
 800b8ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b8f0:	f080 8108 	bcs.w	800bb04 <__udivmoddi4+0x29c>
 800b8f4:	42a7      	cmp	r7, r4
 800b8f6:	f240 8105 	bls.w	800bb04 <__udivmoddi4+0x29c>
 800b8fa:	4464      	add	r4, ip
 800b8fc:	3802      	subs	r0, #2
 800b8fe:	1be4      	subs	r4, r4, r7
 800b900:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800b904:	2100      	movs	r1, #0
 800b906:	b11e      	cbz	r6, 800b910 <__udivmoddi4+0xa8>
 800b908:	40d4      	lsrs	r4, r2
 800b90a:	2300      	movs	r3, #0
 800b90c:	e9c6 4300 	strd	r4, r3, [r6]
 800b910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b914:	428b      	cmp	r3, r1
 800b916:	d908      	bls.n	800b92a <__udivmoddi4+0xc2>
 800b918:	2e00      	cmp	r6, #0
 800b91a:	f000 80ee 	beq.w	800bafa <__udivmoddi4+0x292>
 800b91e:	2100      	movs	r1, #0
 800b920:	e9c6 0500 	strd	r0, r5, [r6]
 800b924:	4608      	mov	r0, r1
 800b926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b92a:	fab3 f183 	clz	r1, r3
 800b92e:	2900      	cmp	r1, #0
 800b930:	d14a      	bne.n	800b9c8 <__udivmoddi4+0x160>
 800b932:	42ab      	cmp	r3, r5
 800b934:	d302      	bcc.n	800b93c <__udivmoddi4+0xd4>
 800b936:	4282      	cmp	r2, r0
 800b938:	f200 80f9 	bhi.w	800bb2e <__udivmoddi4+0x2c6>
 800b93c:	1a84      	subs	r4, r0, r2
 800b93e:	eb65 0303 	sbc.w	r3, r5, r3
 800b942:	2001      	movs	r0, #1
 800b944:	4698      	mov	r8, r3
 800b946:	2e00      	cmp	r6, #0
 800b948:	d0e2      	beq.n	800b910 <__udivmoddi4+0xa8>
 800b94a:	e9c6 4800 	strd	r4, r8, [r6]
 800b94e:	e7df      	b.n	800b910 <__udivmoddi4+0xa8>
 800b950:	b902      	cbnz	r2, 800b954 <__udivmoddi4+0xec>
 800b952:	deff      	udf	#255	; 0xff
 800b954:	fab2 f282 	clz	r2, r2
 800b958:	2a00      	cmp	r2, #0
 800b95a:	f040 8091 	bne.w	800ba80 <__udivmoddi4+0x218>
 800b95e:	eba1 050c 	sub.w	r5, r1, ip
 800b962:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800b966:	fa1f fe8c 	uxth.w	lr, ip
 800b96a:	2101      	movs	r1, #1
 800b96c:	fbb5 f3f7 	udiv	r3, r5, r7
 800b970:	fb07 5013 	mls	r0, r7, r3, r5
 800b974:	0c25      	lsrs	r5, r4, #16
 800b976:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800b97a:	fb0e f003 	mul.w	r0, lr, r3
 800b97e:	42a8      	cmp	r0, r5
 800b980:	d908      	bls.n	800b994 <__udivmoddi4+0x12c>
 800b982:	eb1c 0505 	adds.w	r5, ip, r5
 800b986:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800b98a:	d202      	bcs.n	800b992 <__udivmoddi4+0x12a>
 800b98c:	42a8      	cmp	r0, r5
 800b98e:	f200 80cb 	bhi.w	800bb28 <__udivmoddi4+0x2c0>
 800b992:	4643      	mov	r3, r8
 800b994:	1a2d      	subs	r5, r5, r0
 800b996:	b2a4      	uxth	r4, r4
 800b998:	fbb5 f0f7 	udiv	r0, r5, r7
 800b99c:	fb07 5510 	mls	r5, r7, r0, r5
 800b9a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800b9a4:	fb0e fe00 	mul.w	lr, lr, r0
 800b9a8:	45a6      	cmp	lr, r4
 800b9aa:	d908      	bls.n	800b9be <__udivmoddi4+0x156>
 800b9ac:	eb1c 0404 	adds.w	r4, ip, r4
 800b9b0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800b9b4:	d202      	bcs.n	800b9bc <__udivmoddi4+0x154>
 800b9b6:	45a6      	cmp	lr, r4
 800b9b8:	f200 80bb 	bhi.w	800bb32 <__udivmoddi4+0x2ca>
 800b9bc:	4628      	mov	r0, r5
 800b9be:	eba4 040e 	sub.w	r4, r4, lr
 800b9c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800b9c6:	e79e      	b.n	800b906 <__udivmoddi4+0x9e>
 800b9c8:	f1c1 0720 	rsb	r7, r1, #32
 800b9cc:	408b      	lsls	r3, r1
 800b9ce:	fa22 fc07 	lsr.w	ip, r2, r7
 800b9d2:	ea4c 0c03 	orr.w	ip, ip, r3
 800b9d6:	fa20 f407 	lsr.w	r4, r0, r7
 800b9da:	fa05 f301 	lsl.w	r3, r5, r1
 800b9de:	431c      	orrs	r4, r3
 800b9e0:	40fd      	lsrs	r5, r7
 800b9e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800b9e6:	fa00 f301 	lsl.w	r3, r0, r1
 800b9ea:	fbb5 f8f9 	udiv	r8, r5, r9
 800b9ee:	0c20      	lsrs	r0, r4, #16
 800b9f0:	fa1f fe8c 	uxth.w	lr, ip
 800b9f4:	fb09 5518 	mls	r5, r9, r8, r5
 800b9f8:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800b9fc:	fb08 f00e 	mul.w	r0, r8, lr
 800ba00:	42a8      	cmp	r0, r5
 800ba02:	fa02 f201 	lsl.w	r2, r2, r1
 800ba06:	d90b      	bls.n	800ba20 <__udivmoddi4+0x1b8>
 800ba08:	eb1c 0505 	adds.w	r5, ip, r5
 800ba0c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800ba10:	f080 8088 	bcs.w	800bb24 <__udivmoddi4+0x2bc>
 800ba14:	42a8      	cmp	r0, r5
 800ba16:	f240 8085 	bls.w	800bb24 <__udivmoddi4+0x2bc>
 800ba1a:	f1a8 0802 	sub.w	r8, r8, #2
 800ba1e:	4465      	add	r5, ip
 800ba20:	1a2d      	subs	r5, r5, r0
 800ba22:	b2a4      	uxth	r4, r4
 800ba24:	fbb5 f0f9 	udiv	r0, r5, r9
 800ba28:	fb09 5510 	mls	r5, r9, r0, r5
 800ba2c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800ba30:	fb00 fe0e 	mul.w	lr, r0, lr
 800ba34:	45ae      	cmp	lr, r5
 800ba36:	d908      	bls.n	800ba4a <__udivmoddi4+0x1e2>
 800ba38:	eb1c 0505 	adds.w	r5, ip, r5
 800ba3c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800ba40:	d26c      	bcs.n	800bb1c <__udivmoddi4+0x2b4>
 800ba42:	45ae      	cmp	lr, r5
 800ba44:	d96a      	bls.n	800bb1c <__udivmoddi4+0x2b4>
 800ba46:	3802      	subs	r0, #2
 800ba48:	4465      	add	r5, ip
 800ba4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800ba4e:	fba0 9402 	umull	r9, r4, r0, r2
 800ba52:	eba5 050e 	sub.w	r5, r5, lr
 800ba56:	42a5      	cmp	r5, r4
 800ba58:	46c8      	mov	r8, r9
 800ba5a:	46a6      	mov	lr, r4
 800ba5c:	d356      	bcc.n	800bb0c <__udivmoddi4+0x2a4>
 800ba5e:	d053      	beq.n	800bb08 <__udivmoddi4+0x2a0>
 800ba60:	b15e      	cbz	r6, 800ba7a <__udivmoddi4+0x212>
 800ba62:	ebb3 0208 	subs.w	r2, r3, r8
 800ba66:	eb65 050e 	sbc.w	r5, r5, lr
 800ba6a:	fa05 f707 	lsl.w	r7, r5, r7
 800ba6e:	fa22 f301 	lsr.w	r3, r2, r1
 800ba72:	40cd      	lsrs	r5, r1
 800ba74:	431f      	orrs	r7, r3
 800ba76:	e9c6 7500 	strd	r7, r5, [r6]
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba80:	f1c2 0320 	rsb	r3, r2, #32
 800ba84:	fa20 f103 	lsr.w	r1, r0, r3
 800ba88:	fa0c fc02 	lsl.w	ip, ip, r2
 800ba8c:	fa25 f303 	lsr.w	r3, r5, r3
 800ba90:	4095      	lsls	r5, r2
 800ba92:	430d      	orrs	r5, r1
 800ba94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800ba98:	fa1f fe8c 	uxth.w	lr, ip
 800ba9c:	fbb3 f1f7 	udiv	r1, r3, r7
 800baa0:	fb07 3011 	mls	r0, r7, r1, r3
 800baa4:	0c2b      	lsrs	r3, r5, #16
 800baa6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800baaa:	fb01 f00e 	mul.w	r0, r1, lr
 800baae:	4298      	cmp	r0, r3
 800bab0:	fa04 f402 	lsl.w	r4, r4, r2
 800bab4:	d908      	bls.n	800bac8 <__udivmoddi4+0x260>
 800bab6:	eb1c 0303 	adds.w	r3, ip, r3
 800baba:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800babe:	d22f      	bcs.n	800bb20 <__udivmoddi4+0x2b8>
 800bac0:	4298      	cmp	r0, r3
 800bac2:	d92d      	bls.n	800bb20 <__udivmoddi4+0x2b8>
 800bac4:	3902      	subs	r1, #2
 800bac6:	4463      	add	r3, ip
 800bac8:	1a1b      	subs	r3, r3, r0
 800baca:	b2ad      	uxth	r5, r5
 800bacc:	fbb3 f0f7 	udiv	r0, r3, r7
 800bad0:	fb07 3310 	mls	r3, r7, r0, r3
 800bad4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800bad8:	fb00 f30e 	mul.w	r3, r0, lr
 800badc:	42ab      	cmp	r3, r5
 800bade:	d908      	bls.n	800baf2 <__udivmoddi4+0x28a>
 800bae0:	eb1c 0505 	adds.w	r5, ip, r5
 800bae4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800bae8:	d216      	bcs.n	800bb18 <__udivmoddi4+0x2b0>
 800baea:	42ab      	cmp	r3, r5
 800baec:	d914      	bls.n	800bb18 <__udivmoddi4+0x2b0>
 800baee:	3802      	subs	r0, #2
 800baf0:	4465      	add	r5, ip
 800baf2:	1aed      	subs	r5, r5, r3
 800baf4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800baf8:	e738      	b.n	800b96c <__udivmoddi4+0x104>
 800bafa:	4631      	mov	r1, r6
 800bafc:	4630      	mov	r0, r6
 800bafe:	e707      	b.n	800b910 <__udivmoddi4+0xa8>
 800bb00:	4686      	mov	lr, r0
 800bb02:	e6e5      	b.n	800b8d0 <__udivmoddi4+0x68>
 800bb04:	4618      	mov	r0, r3
 800bb06:	e6fa      	b.n	800b8fe <__udivmoddi4+0x96>
 800bb08:	454b      	cmp	r3, r9
 800bb0a:	d2a9      	bcs.n	800ba60 <__udivmoddi4+0x1f8>
 800bb0c:	ebb9 0802 	subs.w	r8, r9, r2
 800bb10:	eb64 0e0c 	sbc.w	lr, r4, ip
 800bb14:	3801      	subs	r0, #1
 800bb16:	e7a3      	b.n	800ba60 <__udivmoddi4+0x1f8>
 800bb18:	4640      	mov	r0, r8
 800bb1a:	e7ea      	b.n	800baf2 <__udivmoddi4+0x28a>
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	e794      	b.n	800ba4a <__udivmoddi4+0x1e2>
 800bb20:	4641      	mov	r1, r8
 800bb22:	e7d1      	b.n	800bac8 <__udivmoddi4+0x260>
 800bb24:	46d0      	mov	r8, sl
 800bb26:	e77b      	b.n	800ba20 <__udivmoddi4+0x1b8>
 800bb28:	3b02      	subs	r3, #2
 800bb2a:	4465      	add	r5, ip
 800bb2c:	e732      	b.n	800b994 <__udivmoddi4+0x12c>
 800bb2e:	4608      	mov	r0, r1
 800bb30:	e709      	b.n	800b946 <__udivmoddi4+0xde>
 800bb32:	4464      	add	r4, ip
 800bb34:	3802      	subs	r0, #2
 800bb36:	e742      	b.n	800b9be <__udivmoddi4+0x156>

0800bb38 <__aeabi_idiv0>:
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop

0800bb3c <_close>:
 800bb3c:	4b02      	ldr	r3, [pc, #8]	; (800bb48 <_close+0xc>)
 800bb3e:	2258      	movs	r2, #88	; 0x58
 800bb40:	601a      	str	r2, [r3, #0]
 800bb42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb46:	4770      	bx	lr
 800bb48:	20000b84 	.word	0x20000b84

0800bb4c <_fstat>:
 800bb4c:	4b02      	ldr	r3, [pc, #8]	; (800bb58 <_fstat+0xc>)
 800bb4e:	2258      	movs	r2, #88	; 0x58
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb56:	4770      	bx	lr
 800bb58:	20000b84 	.word	0x20000b84

0800bb5c <_getpid>:
 800bb5c:	4b02      	ldr	r3, [pc, #8]	; (800bb68 <_getpid+0xc>)
 800bb5e:	2258      	movs	r2, #88	; 0x58
 800bb60:	601a      	str	r2, [r3, #0]
 800bb62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb66:	4770      	bx	lr
 800bb68:	20000b84 	.word	0x20000b84

0800bb6c <_isatty>:
 800bb6c:	4b02      	ldr	r3, [pc, #8]	; (800bb78 <_isatty+0xc>)
 800bb6e:	2258      	movs	r2, #88	; 0x58
 800bb70:	601a      	str	r2, [r3, #0]
 800bb72:	2000      	movs	r0, #0
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	20000b84 	.word	0x20000b84

0800bb7c <_kill>:
 800bb7c:	4b02      	ldr	r3, [pc, #8]	; (800bb88 <_kill+0xc>)
 800bb7e:	2258      	movs	r2, #88	; 0x58
 800bb80:	601a      	str	r2, [r3, #0]
 800bb82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb86:	4770      	bx	lr
 800bb88:	20000b84 	.word	0x20000b84

0800bb8c <_lseek>:
 800bb8c:	4b02      	ldr	r3, [pc, #8]	; (800bb98 <_lseek+0xc>)
 800bb8e:	2258      	movs	r2, #88	; 0x58
 800bb90:	601a      	str	r2, [r3, #0]
 800bb92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb96:	4770      	bx	lr
 800bb98:	20000b84 	.word	0x20000b84

0800bb9c <_read>:
 800bb9c:	4b02      	ldr	r3, [pc, #8]	; (800bba8 <_read+0xc>)
 800bb9e:	2258      	movs	r2, #88	; 0x58
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bba6:	4770      	bx	lr
 800bba8:	20000b84 	.word	0x20000b84

0800bbac <_write>:
 800bbac:	4b02      	ldr	r3, [pc, #8]	; (800bbb8 <_write+0xc>)
 800bbae:	2258      	movs	r2, #88	; 0x58
 800bbb0:	601a      	str	r2, [r3, #0]
 800bbb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbb6:	4770      	bx	lr
 800bbb8:	20000b84 	.word	0x20000b84

0800bbbc <_exit>:
 800bbbc:	e7fe      	b.n	800bbbc <_exit>
 800bbbe:	bf00      	nop
 800bbc0:	00000030 	.word	0x00000030
 800bbc4:	31313031 	.word	0x31313031
 800bbc8:	00000031 	.word	0x00000031
 800bbcc:	30313131 	.word	0x30313131
 800bbd0:	30313031 	.word	0x30313031
 800bbd4:	00000031 	.word	0x00000031
 800bbd8:	30313131 	.word	0x30313131
 800bbdc:	31313031 	.word	0x31313031
 800bbe0:	00313031 	.word	0x00313031
 800bbe4:	30313131 	.word	0x30313131
 800bbe8:	00313031 	.word	0x00313031
 800bbec:	00000031 	.word	0x00000031
 800bbf0:	30313031 	.word	0x30313031
 800bbf4:	30313131 	.word	0x30313131
 800bbf8:	00000031 	.word	0x00000031
 800bbfc:	30313131 	.word	0x30313131
 800bc00:	30313131 	.word	0x30313131
 800bc04:	00000031 	.word	0x00000031
 800bc08:	30313031 	.word	0x30313031
 800bc0c:	00313031 	.word	0x00313031
 800bc10:	00313031 	.word	0x00313031
 800bc14:	31313031 	.word	0x31313031
 800bc18:	31313031 	.word	0x31313031
 800bc1c:	31313031 	.word	0x31313031
 800bc20:	00000031 	.word	0x00000031
 800bc24:	30313131 	.word	0x30313131
 800bc28:	31313031 	.word	0x31313031
 800bc2c:	00000031 	.word	0x00000031
 800bc30:	31313031 	.word	0x31313031
 800bc34:	30313031 	.word	0x30313031
 800bc38:	00000031 	.word	0x00000031
 800bc3c:	30313131 	.word	0x30313131
 800bc40:	00313131 	.word	0x00313131
 800bc44:	30313131 	.word	0x30313131
 800bc48:	00000031 	.word	0x00000031
 800bc4c:	30313131 	.word	0x30313131
 800bc50:	30313131 	.word	0x30313131
 800bc54:	00313131 	.word	0x00313131
 800bc58:	31313031 	.word	0x31313031
 800bc5c:	31313031 	.word	0x31313031
 800bc60:	00313031 	.word	0x00313031
 800bc64:	30313131 	.word	0x30313131
 800bc68:	30313131 	.word	0x30313131
 800bc6c:	31313031 	.word	0x31313031
 800bc70:	00000031 	.word	0x00000031
 800bc74:	31313031 	.word	0x31313031
 800bc78:	00313031 	.word	0x00313031
 800bc7c:	30313031 	.word	0x30313031
 800bc80:	00000031 	.word	0x00000031
 800bc84:	00313131 	.word	0x00313131
 800bc88:	30313031 	.word	0x30313031
 800bc8c:	00313131 	.word	0x00313131
 800bc90:	30313031 	.word	0x30313031
 800bc94:	31313031 	.word	0x31313031
 800bc98:	00000031 	.word	0x00000031
 800bc9c:	31313031 	.word	0x31313031
 800bca0:	31313031 	.word	0x31313031
 800bca4:	00000031 	.word	0x00000031
 800bca8:	30313131 	.word	0x30313131
 800bcac:	30313031 	.word	0x30313031
 800bcb0:	00313131 	.word	0x00313131
 800bcb4:	30313131 	.word	0x30313131
 800bcb8:	31313031 	.word	0x31313031
 800bcbc:	31313031 	.word	0x31313031
 800bcc0:	00000031 	.word	0x00000031
 800bcc4:	30313131 	.word	0x30313131
 800bcc8:	30313131 	.word	0x30313131
 800bccc:	00313031 	.word	0x00313031
 800bcd0:	30313131 	.word	0x30313131
 800bcd4:	30313131 	.word	0x30313131
 800bcd8:	30313131 	.word	0x30313131
 800bcdc:	30313131 	.word	0x30313131
 800bce0:	00313131 	.word	0x00313131
 800bce4:	31313031 	.word	0x31313031
 800bce8:	31313031 	.word	0x31313031
 800bcec:	31313031 	.word	0x31313031
 800bcf0:	31313031 	.word	0x31313031
 800bcf4:	00000031 	.word	0x00000031
 800bcf8:	30313031 	.word	0x30313031
 800bcfc:	30313131 	.word	0x30313131
 800bd00:	30313131 	.word	0x30313131
 800bd04:	00313131 	.word	0x00313131
 800bd08:	30313031 	.word	0x30313031
 800bd0c:	31313031 	.word	0x31313031
 800bd10:	31313031 	.word	0x31313031
 800bd14:	00000031 	.word	0x00000031
 800bd18:	30313031 	.word	0x30313031
 800bd1c:	30313031 	.word	0x30313031
 800bd20:	00313131 	.word	0x00313131
 800bd24:	30313031 	.word	0x30313031
 800bd28:	30313031 	.word	0x30313031
 800bd2c:	00000031 	.word	0x00000031
 800bd30:	30313131 	.word	0x30313131
 800bd34:	30313031 	.word	0x30313031
 800bd38:	00313031 	.word	0x00313031
 800bd3c:	30313131 	.word	0x30313131
 800bd40:	30313131 	.word	0x30313131
 800bd44:	30313031 	.word	0x30313031
 800bd48:	00000031 	.word	0x00000031
 800bd4c:	30313131 	.word	0x30313131
 800bd50:	30313131 	.word	0x30313131
 800bd54:	30313131 	.word	0x30313131
 800bd58:	00313031 	.word	0x00313031
 800bd5c:	30313131 	.word	0x30313131
 800bd60:	30313131 	.word	0x30313131
 800bd64:	30313131 	.word	0x30313131
 800bd68:	30313131 	.word	0x30313131
 800bd6c:	00000031 	.word	0x00000031
 800bd70:	41432049 	.word	0x41432049
 800bd74:	4f4d204e 	.word	0x4f4d204e
 800bd78:	00455352 	.word	0x00455352
 800bd7c:	00000000 	.word	0x00000000
 800bd80:	00303030 	.word	0x00303030

0800bd84 <LED_config>:
 800bd84:	00000080 00010000 00000000 31313131     ............1111
 800bd94:	31313131 31313131 31313131 31313131     1111111111111111
 800bda4:	31313131 31313131 31313131 31313131     1111111111111111
 800bdb4:	31313131 31313131 00313131 00646c25     11111111111.%ld.

0800bdc4 <_global_impure_ptr>:
 800bdc4:	200000e0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
 800bdd4:	006e616e 33323130 37363534 62613938     nan.0123456789ab
 800bde4:	66656463 00000000 33323130 37363534     cdef....01234567
 800bdf4:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
 800be04:	0000296c 00000030                       l)..0...

0800be0c <blanks.1>:
 800be0c:	20202020 20202020 20202020 20202020                     

0800be1c <zeroes.0>:
 800be1c:	30303030 30303030 30303030 30303030     0000000000000000
 800be2c:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
 800be3c:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
 800be4c:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
 800be5c:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 800be6c:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 800be7c:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 800be8c:	656e696c 3833332d 3230325f 31303131     line-338_2021101
 800be9c:	36315f38 31353433 33303236 6372732f     8_1634516203/src
 800beac:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
 800bebc:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
 800becc:	00000063 746e6d2f 726f772f 6170736b     c.../mnt/workspa
 800bedc:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
 800beec:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
 800befc:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 800bf0c:	656e696c 3833332d 3230325f 31303131     line-338_2021101
 800bf1c:	36315f38 31353433 33303236 6372732f     8_1634516203/src
 800bf2c:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
 800bf3c:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
 800bf4c:	0000632e                                .c..

0800bf50 <__mprec_bigtens>:
 800bf50:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 800bf60:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 800bf70:	7f73bf3c 75154fdd                       <.s..O.u

0800bf78 <__mprec_tens>:
 800bf78:	00000000 3ff00000 00000000 40240000     .......?......$@
 800bf88:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 800bf98:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 800bfa8:	00000000 412e8480 00000000 416312d0     .......A......cA
 800bfb8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 800bfc8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 800bfd8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 800bfe8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 800bff8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 800c008:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 800c018:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 800c028:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 800c038:	79d99db4 44ea7843                       ...yCx.D

0800c040 <__mprec_tinytens>:
 800c040:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 800c050:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 800c060:	64ac6f43 0ac80628                       Co.d(...

0800c068 <p05.0>:
 800c068:	00000005 00000019 0000007d              ........}...

0800c074 <blanks.1>:
 800c074:	20202020 20202020 20202020 20202020                     

0800c084 <zeroes.0>:
 800c084:	30303030 30303030 30303030 30303030     0000000000000000
 800c094:	7566202c 6974636e 203a6e6f 00000000     , function: ....
 800c0a4:	65737361 6f697472 2522206e 66202273     assertion "%s" f
 800c0b4:	656c6961 66203a64 20656c69 22732522     ailed: file "%s"
 800c0c4:	696c202c 2520656e 25732564 00000a73     , line %d%s%s...
 800c0d4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0800c0e4 <blanks.1>:
 800c0e4:	20202020 20202020 20202020 20202020                     

0800c0f4 <zeroes.0>:
 800c0f4:	30303030 30303030 30303030 30303030     0000000000000000

0800c104 <_ctype_>:
 800c104:	20202000 20202020 28282020 20282828     .         ((((( 
 800c114:	20202020 20202020 20202020 20202020                     
 800c124:	10108820 10101010 10101010 10101010      ...............
 800c134:	04040410 04040404 10040404 10101010     ................
 800c144:	41411010 41414141 01010101 01010101     ..AAAAAA........
 800c154:	01010101 01010101 01010101 10101010     ................
 800c164:	42421010 42424242 02020202 02020202     ..BBBBBB........
 800c174:	02020202 02020202 02020202 10101010     ................
 800c184:	00000020 00000000 00000000 00000000      ...............
	...
