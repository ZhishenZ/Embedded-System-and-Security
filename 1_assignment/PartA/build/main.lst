
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cbc  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  000208e0  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  000208e0  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  000208e0  2**0
                  CONTENTS
  5 .data         000008e0  20000000  0c003cbc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000f0  200008e0  0c00459c  000208e0  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  000208e0  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  000208e0  2**0
                  CONTENTS
 10 .debug_aranges 00000628  00000000  00000000  000208e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00005cae  00000000  00000000  00020f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00000cea  00000000  00000000  00026bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00003ca9  00000000  00000000  000278a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001ce8  00000000  00000000  0002b54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0007c19a  00000000  00000000  0002d234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0000388c  00000000  00000000  000a93ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000005b8  00000000  00000000  000acc5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .build_attributes 000003c2  00000000  00000000  000ad212  2**0
                  CONTENTS, READONLY
 19 .debug_macro  00019b36  00000000  00000000  000ad5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 d9 05 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
 8000206:	4780      	blx	r0
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)
 800020c:	42ac      	cmp	r4, r5
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
 8000210:	6821      	ldr	r1, [r4, #0]
 8000212:	6862      	ldr	r2, [r4, #4]
 8000214:	68a3      	ldr	r3, [r4, #8]
 8000216:	3b04      	subs	r3, #4
 8000218:	bfa2      	ittt	ge
 800021a:	58c8      	ldrge	r0, [r1, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>
 8000220:	340c      	adds	r4, #12
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)
 8000228:	42a3      	cmp	r3, r4
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	2000      	movs	r0, #0
 8000232:	3a04      	subs	r2, #4
 8000234:	bfa4      	itt	ge
 8000236:	5088      	strge	r0, [r1, r2]
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>
 800023a:	3308      	adds	r3, #8
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
 8000240:	4780      	blx	r0
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c003cbc 	.word	0x0c003cbc
 800024c:	20000000 	.word	0x20000000
 8000250:	000008e0 	.word	0x000008e0
 8000254:	0c00459c 	.word	0x0c00459c
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c003cbc 	.word	0x0c003cbc
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c003cbc 	.word	0x0c003cbc
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200008e0 	.word	0x200008e0
 800027c:	000000f0 	.word	0x000000f0
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
 8000290:	10000800 	.word	0x10000800
 8000294:	08002bed 	.word	0x08002bed
 8000298:	08000248 	.word	0x08000248
 800029c:	08000278 	.word	0x08000278
 80002a0:	08000278 	.word	0x08000278
 80002a4:	08000290 	.word	0x08000290
 80002a8:	08002ff9 	.word	0x08002ff9
 80002ac:	080004e9 	.word	0x080004e9

080002b0 <BusFault_Handler>:
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	db0b      	blt.n	80002de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	f003 021f 	and.w	r2, r3, #31
 80002cc:	4907      	ldr	r1, [pc, #28]	; (80002ec <__NVIC_EnableIRQ+0x38>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	095b      	lsrs	r3, r3, #5
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	460b      	mov	r3, r1
 80002fa:	607a      	str	r2, [r7, #4]
 80002fc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	409a      	lsls	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	605a      	str	r2, [r3, #4]
}
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2101      	movs	r1, #1
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	431a      	orrs	r2, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	60da      	str	r2, [r3, #12]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 800033e:	b480      	push	{r7}
 8000340:	b083      	sub	sp, #12
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2201      	movs	r2, #1
 800034a:	60da      	str	r2, [r3, #12]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	460b      	mov	r3, r1
 8000362:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000364:	887a      	ldrh	r2, [r7, #2]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	635a      	str	r2, [r3, #52]	; 0x34
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8000376:	b480      	push	{r7}
 8000378:	b083      	sub	sp, #12
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]
 800037e:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	683a      	ldr	r2, [r7, #0]
 8000384:	611a      	str	r2, [r3, #16]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8000392:	b480      	push	{r7}
 8000394:	b083      	sub	sp, #12
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	460b      	mov	r3, r1
 800039c:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80003a4:	78fb      	ldrb	r3, [r7, #3]
 80003a6:	2101      	movs	r1, #1
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <get_morse>:
char * output_str = "";
int str_len;
int str_counter = 0;
int pause_ticks = 50;

char * get_morse(char input_letter){
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
    for (size_t i = 0; i < char_len; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	e011      	b.n	80003f4 <get_morse+0x34>
        if (input_letter==letter[i]){
 80003d0:	4a0e      	ldr	r2, [pc, #56]	; (800040c <get_morse+0x4c>)
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	4413      	add	r3, r2
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	79fa      	ldrb	r2, [r7, #7]
 80003da:	429a      	cmp	r2, r3
 80003dc:	d107      	bne.n	80003ee <get_morse+0x2e>
        lookuptable_counter = 0;
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <get_morse+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
        return morse_code[i];
 80003e4:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <get_morse+0x54>)
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ec:	e008      	b.n	8000400 <get_morse+0x40>
    for (size_t i = 0; i < char_len; i++) {
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	3301      	adds	r3, #1
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <get_morse+0x58>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	461a      	mov	r2, r3
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d3e7      	bcc.n	80003d0 <get_morse+0x10>
        };
    };
}
 8000400:	4618      	mov	r0, r3
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	20000000 	.word	0x20000000
 8000410:	200008e0 	.word	0x200008e0
 8000414:	2000001c 	.word	0x2000001c
 8000418:	20000088 	.word	0x20000088

0800041c <str_concat>:

//string concatenate function 
char* str_concat(const char *s1, const char *s2)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
    char *result = malloc(strlen(s1) + strlen(s2) + 1); // +1 for the null-terminator
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f003 f96a 	bl	8003700 <strlen>
 800042c:	4604      	mov	r4, r0
 800042e:	6838      	ldr	r0, [r7, #0]
 8000430:	f003 f966 	bl	8003700 <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	4423      	add	r3, r4
 8000438:	3301      	adds	r3, #1
 800043a:	4618      	mov	r0, r3
 800043c:	f002 fe00 	bl	8003040 <malloc>
 8000440:	4603      	mov	r3, r0
 8000442:	60fb      	str	r3, [r7, #12]
    // in real code you would check for errors in malloc here
    strcpy(result, s1);
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	68f8      	ldr	r0, [r7, #12]
 8000448:	f003 f8f8 	bl	800363c <strcpy>
    strcat(result, s2);
 800044c:	6839      	ldr	r1, [r7, #0]
 800044e:	68f8      	ldr	r0, [r7, #12]
 8000450:	f003 f8d4 	bl	80035fc <strcat>
    return result;
 8000454:	68fb      	ldr	r3, [r7, #12]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3714      	adds	r7, #20
 800045a:	46bd      	mov	sp, r7
 800045c:	bd90      	pop	{r4, r7, pc}
	...

08000460 <creat_morse_code>:

void creat_morse_code(){
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
int i;

for (i = 0; i < strlen(user_input); i++){
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	e029      	b.n	80004c0 <creat_morse_code+0x60>

    char * return_value;
    return_value = get_morse(user_input[i]);
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <creat_morse_code+0x7c>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	4413      	add	r3, r2
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ffa2 	bl	80003c0 <get_morse>
 800047c:	60b8      	str	r0, [r7, #8]
    output_str = str_concat(output_str,return_value);
 800047e:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <creat_morse_code+0x80>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	68b9      	ldr	r1, [r7, #8]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ffc9 	bl	800041c <str_concat>
 800048a:	4603      	mov	r3, r0
 800048c:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <creat_morse_code+0x80>)
 800048e:	6013      	str	r3, [r2, #0]
    if(i<(strlen(user_input)-1)){
 8000490:	4b12      	ldr	r3, [pc, #72]	; (80004dc <creat_morse_code+0x7c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f003 f933 	bl	8003700 <strlen>
 800049a:	4603      	mov	r3, r0
 800049c:	1e5a      	subs	r2, r3, #1
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d90a      	bls.n	80004ba <creat_morse_code+0x5a>
        char * three_0 = "000";
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <creat_morse_code+0x84>)
 80004a6:	607b      	str	r3, [r7, #4]
        output_str = str_concat(output_str,three_0);
 80004a8:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <creat_morse_code+0x80>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ffb4 	bl	800041c <str_concat>
 80004b4:	4603      	mov	r3, r0
 80004b6:	4a0a      	ldr	r2, [pc, #40]	; (80004e0 <creat_morse_code+0x80>)
 80004b8:	6013      	str	r3, [r2, #0]
for (i = 0; i < strlen(user_input); i++){
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	3301      	adds	r3, #1
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	4b06      	ldr	r3, [pc, #24]	; (80004dc <creat_morse_code+0x7c>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f003 f91b 	bl	8003700 <strlen>
 80004ca:	4602      	mov	r2, r0
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d8cc      	bhi.n	800046c <creat_morse_code+0xc>
    }
  }
}
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	2000008c 	.word	0x2000008c
 80004e0:	20000090 	.word	0x20000090
 80004e4:	08003ca8 	.word	0x08003ca8

080004e8 <main>:
    .passive_level = 0U/*XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW*/ ,
    .timer_concatenation = 0U
    };


int main(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
   

  creat_morse_code();
 80004ec:	f7ff ffb8 	bl	8000460 <creat_morse_code>
  str_len = strlen(output_str);
 80004f0:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <main+0xcc>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 f903 	bl	8003700 <strlen>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	4b2e      	ldr	r3, [pc, #184]	; (80005b8 <main+0xd0>)
 8000500:	601a      	str	r2, [r3, #0]
  XMC_GPIO_Init(XMC_GPIO_PORT1 , 1 , & LED_config ) ;
 8000502:	4a2e      	ldr	r2, [pc, #184]	; (80005bc <main+0xd4>)
 8000504:	2101      	movs	r1, #1
 8000506:	482e      	ldr	r0, [pc, #184]	; (80005c0 <main+0xd8>)
 8000508:	f000 f8d8 	bl	80006bc <XMC_GPIO_Init>
  /* Initialize CCU40 , the MCMS transfer is irrelevant for our
  * application . Calls EnableModule ( SCU enable clock , SCU ungate
  * clock , SCU deassert reset ) and StartPrescaler ( GIDLC . SPRB ) */
  XMC_CCU4_Init( CCU40 , XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR ) ;
 800050c:	2100      	movs	r1, #0
 800050e:	482d      	ldr	r0, [pc, #180]	; (80005c4 <main+0xdc>)
 8000510:	f000 fa55 	bl	80009be <XMC_CCU4_Init>
  XMC_CCU4_SLICE_CompareInit ( CCU40_CC40 , & CCU_compare_config ) ;
 8000514:	492c      	ldr	r1, [pc, #176]	; (80005c8 <main+0xe0>)
 8000516:	482d      	ldr	r0, [pc, #180]	; (80005cc <main+0xe4>)
 8000518:	f000 faa7 	bl	8000a6a <XMC_CCU4_SLICE_CompareInit>
  XMC_CCU4_SLICE_SetTimerPeriodMatch ( CCU40_CC40 , 0x2DC7 ) ;//1719 as 0x
 800051c:	f642 51c7 	movw	r1, #11719	; 0x2dc7
 8000520:	482a      	ldr	r0, [pc, #168]	; (80005cc <main+0xe4>)
 8000522:	f7ff ff19 	bl	8000358 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  XMC_CCU4_EnableShadowTransfer ( CCU40 , XMC_CCU4_SHADOW_TRANSFER_SLICE_0 ) ;
 8000526:	2101      	movs	r1, #1
 8000528:	4826      	ldr	r0, [pc, #152]	; (80005c4 <main+0xdc>)
 800052a:	f7ff ff24 	bl	8000376 <XMC_CCU4_EnableShadowTransfer>
  /* Map IRQ to NVIC IRQ input , enable IRQ in CCU4 */
  XMC_CCU4_SLICE_SetInterruptNode( CCU40_CC40 ,\
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	4826      	ldr	r0, [pc, #152]	; (80005cc <main+0xe4>)
 8000534:	f000 fe72 	bl	800121c <XMC_CCU4_SLICE_SetInterruptNode>
      XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH ,\
      XMC_CCU4_SLICE_SR_ID_0 ) ;
  XMC_CCU4_SLICE_EnableEvent( CCU40_CC40 ,\
 8000538:	2100      	movs	r1, #0
 800053a:	4824      	ldr	r0, [pc, #144]	; (80005cc <main+0xe4>)
 800053c:	f7ff ff29 	bl	8000392 <XMC_CCU4_SLICE_EnableEvent>
      XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH ) ;
  /* Enable IRQ input in NVIC ( IRQ number from XMC4500 . h ) */
  NVIC_EnableIRQ( CCU40_0_IRQn ) ;
 8000540:	202c      	movs	r0, #44	; 0x2c
 8000542:	f7ff feb7 	bl	80002b4 <__NVIC_EnableIRQ>
  /* enable clock to slice CC40 */
  XMC_CCU4_EnableClock( CCU40 , 0) ;
 8000546:	2100      	movs	r1, #0
 8000548:	481e      	ldr	r0, [pc, #120]	; (80005c4 <main+0xdc>)
 800054a:	f7ff fee3 	bl	8000314 <XMC_CCU4_EnableClock>
  /* start timer */
  XMC_CCU4_SLICE_StartTimer( CCU40_CC40 ) ;
 800054e:	481f      	ldr	r0, [pc, #124]	; (80005cc <main+0xe4>)
 8000550:	f7ff fef5 	bl	800033e <XMC_CCU4_SLICE_StartTimer>

// 101000000011101011101000101110001110100000001110111000111011101110001011101000101010001
while(1){


  if(str_counter < str_len){
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <main+0xe8>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <main+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	da14      	bge.n	800058a <main+0xa2>
    if(output_str[str_counter]=='1'){
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <main+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a1a      	ldr	r2, [pc, #104]	; (80005d0 <main+0xe8>)
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	4413      	add	r3, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b31      	cmp	r3, #49	; 0x31
 800056e:	d105      	bne.n	800057c <main+0x94>
      XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_HIGH);//XMC_GPIO_OUTPUT_LEVEL_HIGH
 8000570:	2201      	movs	r2, #1
 8000572:	2101      	movs	r1, #1
 8000574:	4812      	ldr	r0, [pc, #72]	; (80005c0 <main+0xd8>)
 8000576:	f7ff febb 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
 800057a:	e7eb      	b.n	8000554 <main+0x6c>
    }else{ 
      XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_LOW);//XMC_GPIO_OUTPUT_LEVEL_HIGH
 800057c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000580:	2101      	movs	r1, #1
 8000582:	480f      	ldr	r0, [pc, #60]	; (80005c0 <main+0xd8>)
 8000584:	f7ff feb4 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
 8000588:	e7e4      	b.n	8000554 <main+0x6c>
  }

  }else{
//pause_ticks
    if(str_counter < (str_len+pause_ticks)){
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <main+0xd0>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <main+0xec>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	441a      	add	r2, r3
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <main+0xe8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	429a      	cmp	r2, r3
 800059a:	dd06      	ble.n	80005aa <main+0xc2>
      XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_LOW);
 800059c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a0:	2101      	movs	r1, #1
 80005a2:	4807      	ldr	r0, [pc, #28]	; (80005c0 <main+0xd8>)
 80005a4:	f7ff fea4 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
 80005a8:	e7d4      	b.n	8000554 <main+0x6c>
    }else{
      str_counter = 0;
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <main+0xe8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
  if(str_counter < str_len){
 80005b0:	e7d0      	b.n	8000554 <main+0x6c>
 80005b2:	bf00      	nop
 80005b4:	20000090 	.word	0x20000090
 80005b8:	200008e4 	.word	0x200008e4
 80005bc:	08003cac 	.word	0x08003cac
 80005c0:	48028100 	.word	0x48028100
 80005c4:	4000c000 	.word	0x4000c000
 80005c8:	20000098 	.word	0x20000098
 80005cc:	4000c100 	.word	0x4000c100
 80005d0:	200008e8 	.word	0x200008e8
 80005d4:	20000094 	.word	0x20000094

080005d8 <CCU40_0_IRQHandler>:
}

return 0;
}

void CCU40_0_IRQHandler ( void ) {
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  str_counter++;
 80005dc:	4b04      	ldr	r3, [pc, #16]	; (80005f0 <CCU40_0_IRQHandler+0x18>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <CCU40_0_IRQHandler+0x18>)
 80005e4:	6013      	str	r3, [r2, #0]
  //   //pause for 5 sec
  //   pause_counter++;
  //   }
  //   pause_counter =0;
  // }
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	200008e8 	.word	0x200008e8

080005f4 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
 8000600:	4613      	mov	r3, r2
 8000602:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	089b      	lsrs	r3, r3, #2
 8000608:	b2db      	uxtb	r3, r3
 800060a:	461a      	mov	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3204      	adds	r2, #4
 8000610:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	f003 0303 	and.w	r3, r3, #3
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	21f8      	movs	r1, #248	; 0xf8
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	43db      	mvns	r3, r3
 8000624:	78f9      	ldrb	r1, [r7, #3]
 8000626:	0889      	lsrs	r1, r1, #2
 8000628:	b2c9      	uxtb	r1, r1
 800062a:	4608      	mov	r0, r1
 800062c:	ea02 0103 	and.w	r1, r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	1d02      	adds	r2, r0, #4
 8000634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	089b      	lsrs	r3, r3, #2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3204      	adds	r2, #4
 8000644:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000648:	78b9      	ldrb	r1, [r7, #2]
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	f003 0303 	and.w	r3, r3, #3
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	78f9      	ldrb	r1, [r7, #3]
 8000658:	0889      	lsrs	r1, r1, #2
 800065a:	b2c9      	uxtb	r1, r1
 800065c:	4608      	mov	r0, r1
 800065e:	ea42 0103 	orr.w	r1, r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	1d02      	adds	r2, r0, #4
 8000666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	460b      	mov	r3, r1
 8000680:	70fb      	strb	r3, [r7, #3]
 8000682:	4613      	mov	r3, r2
 8000684:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	2103      	movs	r1, #3
 8000690:	fa01 f303 	lsl.w	r3, r1, r3
 8000694:	43db      	mvns	r3, r3
 8000696:	401a      	ands	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80006a0:	78b9      	ldrb	r1, [r7, #2]
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	431a      	orrs	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	675a      	str	r2, [r3, #116]	; 0x74
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	460b      	mov	r3, r1
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80006ca:	7afb      	ldrb	r3, [r7, #11]
 80006cc:	089b      	lsrs	r3, r3, #2
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3204      	adds	r2, #4
 80006d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006da:	7afb      	ldrb	r3, [r7, #11]
 80006dc:	f003 0303 	and.w	r3, r3, #3
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	21f8      	movs	r1, #248	; 0xf8
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	7af9      	ldrb	r1, [r7, #11]
 80006ec:	0889      	lsrs	r1, r1, #2
 80006ee:	b2c9      	uxtb	r1, r1
 80006f0:	4608      	mov	r0, r1
 80006f2:	ea02 0103 	and.w	r1, r2, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	1d02      	adds	r2, r0, #4
 80006fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000702:	7afb      	ldrb	r3, [r7, #11]
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	2103      	movs	r1, #3
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	43db      	mvns	r3, r3
 800070e:	401a      	ands	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4a38      	ldr	r2, [pc, #224]	; (80007f8 <XMC_GPIO_Init+0x13c>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d003      	beq.n	8000724 <XMC_GPIO_Init+0x68>
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4a37      	ldr	r2, [pc, #220]	; (80007fc <XMC_GPIO_Init+0x140>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d10a      	bne.n	800073a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000728:	7afb      	ldrb	r3, [r7, #11]
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f303 	lsl.w	r3, r1, r3
 8000730:	43db      	mvns	r3, r3
 8000732:	401a      	ands	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	661a      	str	r2, [r3, #96]	; 0x60
 8000738:	e03c      	b.n	80007b4 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	685a      	ldr	r2, [r3, #4]
 800073e:	7afb      	ldrb	r3, [r7, #11]
 8000740:	409a      	lsls	r2, r3
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000746:	7afb      	ldrb	r3, [r7, #11]
 8000748:	08db      	lsrs	r3, r3, #3
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3210      	adds	r2, #16
 8000752:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000756:	7afb      	ldrb	r3, [r7, #11]
 8000758:	f003 0307 	and.w	r3, r3, #7
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	2107      	movs	r1, #7
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	43db      	mvns	r3, r3
 8000766:	7af9      	ldrb	r1, [r7, #11]
 8000768:	08c9      	lsrs	r1, r1, #3
 800076a:	b2c9      	uxtb	r1, r1
 800076c:	4608      	mov	r0, r1
 800076e:	ea02 0103 	and.w	r1, r2, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f100 0210 	add.w	r2, r0, #16
 8000778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800077c:	7afb      	ldrb	r3, [r7, #11]
 800077e:	08db      	lsrs	r3, r3, #3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	3210      	adds	r2, #16
 8000788:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7a1b      	ldrb	r3, [r3, #8]
 8000790:	4619      	mov	r1, r3
 8000792:	7afb      	ldrb	r3, [r7, #11]
 8000794:	f003 0307 	and.w	r3, r3, #7
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	7af9      	ldrb	r1, [r7, #11]
 80007a0:	08c9      	lsrs	r1, r1, #3
 80007a2:	b2c9      	uxtb	r1, r1
 80007a4:	4608      	mov	r0, r1
 80007a6:	ea42 0103 	orr.w	r1, r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	f100 0210 	add.w	r2, r0, #16
 80007b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80007b4:	7afb      	ldrb	r3, [r7, #11]
 80007b6:	089b      	lsrs	r3, r3, #2
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3204      	adds	r2, #4
 80007c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	7afb      	ldrb	r3, [r7, #11]
 80007cc:	f003 0303 	and.w	r3, r3, #3
 80007d0:	00db      	lsls	r3, r3, #3
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	7af9      	ldrb	r1, [r7, #11]
 80007d8:	0889      	lsrs	r1, r1, #2
 80007da:	b2c9      	uxtb	r1, r1
 80007dc:	4608      	mov	r0, r1
 80007de:	ea42 0103 	orr.w	r1, r2, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1d02      	adds	r2, r0, #4
 80007e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	48028e00 	.word	0x48028e00
 80007fc:	48028f00 	.word	0x48028f00

08000800 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	70fb      	strb	r3, [r7, #3]
 800080c:	4613      	mov	r3, r2
 800080e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000810:	78fb      	ldrb	r3, [r7, #3]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3210      	adds	r2, #16
 800081c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	2107      	movs	r1, #7
 800082a:	fa01 f303 	lsl.w	r3, r1, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	78f9      	ldrb	r1, [r7, #3]
 8000832:	08c9      	lsrs	r1, r1, #3
 8000834:	b2c9      	uxtb	r1, r1
 8000836:	4608      	mov	r0, r1
 8000838:	ea02 0103 	and.w	r1, r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f100 0210 	add.w	r2, r0, #16
 8000842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000846:	78fb      	ldrb	r3, [r7, #3]
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	461a      	mov	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3210      	adds	r2, #16
 8000852:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000856:	78b9      	ldrb	r1, [r7, #2]
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	78f9      	ldrb	r1, [r7, #3]
 8000866:	08c9      	lsrs	r1, r1, #3
 8000868:	b2c9      	uxtb	r1, r1
 800086a:	4608      	mov	r0, r1
 800086c:	ea42 0103 	orr.w	r1, r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f100 0210 	add.w	r2, r0, #16
 8000876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <XMC_CCU4_StartPrescaler>:
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	60da      	str	r2, [r3, #12]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <XMC_CCU4_SLICE_SetDitherCompareValue>:
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
 80008ae:	460b      	mov	r3, r1
 80008b0:	70fb      	strb	r3, [r7, #3]
  slice->DITS = comp_val;
 80008b2:	78fa      	ldrb	r2, [r7, #3]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	621a      	str	r2, [r3, #32]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <XMC_CCU4_lAssertReset>:
/*********************************************************************************************************************
 * LOCAL ROUTINES
 ********************************************************************************************************************/
#if defined(PERIPHERAL_RESET_SUPPORTED)
__STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <XMC_CCU4_lAssertReset+0x50>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d103      	bne.n	80008dc <XMC_CCU4_lAssertReset+0x18>
  {
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80008d4:	2004      	movs	r0, #4
 80008d6:	f001 f8bd 	bl	8001a54 <XMC_SCU_RESET_AssertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}
 80008da:	e016      	b.n	800090a <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU41)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <XMC_CCU4_lAssertReset+0x54>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d103      	bne.n	80008ec <XMC_CCU4_lAssertReset+0x28>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80008e4:	2008      	movs	r0, #8
 80008e6:	f001 f8b5 	bl	8001a54 <XMC_SCU_RESET_AssertPeripheralReset>
}
 80008ea:	e00e      	b.n	800090a <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU42)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <XMC_CCU4_lAssertReset+0x58>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d103      	bne.n	80008fc <XMC_CCU4_lAssertReset+0x38>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80008f4:	2010      	movs	r0, #16
 80008f6:	f001 f8ad 	bl	8001a54 <XMC_SCU_RESET_AssertPeripheralReset>
}
 80008fa:	e006      	b.n	800090a <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU43)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <XMC_CCU4_lAssertReset+0x5c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d102      	bne.n	800090a <XMC_CCU4_lAssertReset+0x46>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000904:	4807      	ldr	r0, [pc, #28]	; (8000924 <XMC_CCU4_lAssertReset+0x60>)
 8000906:	f001 f8a5 	bl	8001a54 <XMC_SCU_RESET_AssertPeripheralReset>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	4000c000 	.word	0x4000c000
 8000918:	40010000 	.word	0x40010000
 800091c:	40014000 	.word	0x40014000
 8000920:	48004000 	.word	0x48004000
 8000924:	10000001 	.word	0x10000001

08000928 <XMC_CCU4_lDeassertReset>:

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <XMC_CCU4_lDeassertReset+0x50>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d103      	bne.n	8000940 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000938:	2004      	movs	r0, #4
 800093a:	f001 f8a9 	bl	8001a90 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800093e:	e016      	b.n	800096e <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU41)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <XMC_CCU4_lDeassertReset+0x54>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d103      	bne.n	8000950 <XMC_CCU4_lDeassertReset+0x28>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000948:	2008      	movs	r0, #8
 800094a:	f001 f8a1 	bl	8001a90 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800094e:	e00e      	b.n	800096e <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU42)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <XMC_CCU4_lDeassertReset+0x58>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d103      	bne.n	8000960 <XMC_CCU4_lDeassertReset+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000958:	2010      	movs	r0, #16
 800095a:	f001 f899 	bl	8001a90 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800095e:	e006      	b.n	800096e <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU43)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <XMC_CCU4_lDeassertReset+0x5c>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d102      	bne.n	800096e <XMC_CCU4_lDeassertReset+0x46>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000968:	4807      	ldr	r0, [pc, #28]	; (8000988 <XMC_CCU4_lDeassertReset+0x60>)
 800096a:	f001 f891 	bl	8001a90 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	4000c000 	.word	0x4000c000
 800097c:	40010000 	.word	0x40010000
 8000980:	40014000 	.word	0x40014000
 8000984:	48004000 	.word	0x48004000
 8000988:	10000001 	.word	0x10000001

0800098c <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000994:	2010      	movs	r0, #16
 8000996:	f001 fb65 	bl	8002064 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffc4 	bl	8000928 <XMC_CCU4_lDeassertReset>
#endif
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <XMC_CCU4_DisableModule>:

void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_DisableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lAssertReset(module);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff87 	bl	80008c4 <XMC_CCU4_lAssertReset>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lGateClock(module);
#endif
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <XMC_CCU4_Init>:

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f7ff ffde 	bl	800098c <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f7ff ff58 	bl	8000886 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009e2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	039b      	lsls	r3, r3, #14
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a14:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8000a16:	78fb      	ldrb	r3, [r7, #3]
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <XMC_CCU4_SetMultiChannelShadowTransferMode>:

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b085      	sub	sp, #20
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	0c1b      	lsrs	r3, r3, #16
 8000a46:	43db      	mvns	r3, r3
 8000a48:	68fa      	ldr	r2, [r7, #12]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	601a      	str	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	795b      	ldrb	r3, [r3, #5]
 8000a80:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	051a      	lsls	r2, r3, #20
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	461a      	mov	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	795b      	ldrb	r3, [r3, #5]
 8000aa0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	795b      	ldrb	r3, [r3, #5]
 8000ab0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	791b      	ldrb	r3, [r3, #4]
 8000ac0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	795b      	ldrb	r3, [r3, #5]
 8000aee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	051a      	lsls	r2, r3, #20
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	461a      	mov	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	791b      	ldrb	r3, [r3, #4]
 8000b0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b085      	sub	sp, #20
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	70fb      	strb	r3, [r7, #3]
 8000b32:	4613      	mov	r3, r2
 8000b34:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	f023 0303 	bic.w	r3, r3, #3
 8000b42:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8000b58:	78bb      	ldrb	r3, [r7, #2]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	e003      	b.n	8000b70 <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b6e:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	615a      	str	r2, [r3, #20]
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	70fb      	strb	r3, [r7, #3]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f023 030c 	bic.w	r3, r3, #12
 8000b9e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bbc:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 8000bbe:	78bb      	ldrb	r3, [r7, #2]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	615a      	str	r2, [r3, #20]
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b085      	sub	sp, #20
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	460b      	mov	r3, r1
 8000be4:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bf2:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	031b      	lsls	r3, r3, #12
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	605a      	str	r2, [r3, #4]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	4608      	mov	r0, r1
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4603      	mov	r3, r0
 8000c20:	70fb      	strb	r3, [r7, #3]
 8000c22:	460b      	mov	r3, r1
 8000c24:	70bb      	strb	r3, [r7, #2]
 8000c26:	4613      	mov	r3, r2
 8000c28:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000c3c:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 8000c3e:	78fb      	ldrb	r3, [r7, #3]
 8000c40:	049b      	lsls	r3, r3, #18
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 8000c4e:	78bb      	ldrb	r3, [r7, #2]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d104      	bne.n	8000c5e <XMC_CCU4_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	e003      	b.n	8000c66 <XMC_CCU4_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 8000c66:	787b      	ldrb	r3, [r7, #1]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <XMC_CCU4_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	e003      	b.n	8000c7e <XMC_CCU4_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c7c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	615a      	str	r2, [r3, #20]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	039b      	lsls	r3, r3, #14
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	605a      	str	r2, [r3, #4]
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cde:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	605a      	str	r2, [r3, #4]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <XMC_CCU4_SLICE_Capture0Config>:

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000d14:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 8000d16:	78fb      	ldrb	r3, [r7, #3]
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	605a      	str	r2, [r3, #4]
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <XMC_CCU4_SLICE_Capture1Config>:

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b085      	sub	sp, #20
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d4a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	019b      	lsls	r3, r3, #6
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68fa      	ldr	r2, [r7, #12]
 8000d5a:	605a      	str	r2, [r3, #4]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <XMC_CCU4_SLICE_DirectionConfig>:

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d80:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	029b      	lsls	r3, r3, #10
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	605a      	str	r2, [r3, #4]
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b085      	sub	sp, #20
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000db2:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dba:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	605a      	str	r2, [r3, #4]
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	70fb      	strb	r3, [r7, #3]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000dea:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df2:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
 8000e00:	78bb      	ldrb	r3, [r7, #2]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d004      	beq.n	8000e10 <XMC_CCU4_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	e003      	b.n	8000e18 <XMC_CCU4_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e16:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d104      	bne.n	8000e28 <XMC_CCU4_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	e003      	b.n	8000e30 <XMC_CCU4_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000e2e:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	615a      	str	r2, [r3, #20]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b087      	sub	sp, #28
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000e5a:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	785b      	ldrb	r3, [r3, #1]
 8000e60:	049b      	lsls	r3, r3, #18
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000e6e:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	051b      	lsls	r3, r3, #20
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e82:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	789b      	ldrb	r3, [r3, #2]
 8000e88:	05db      	lsls	r3, r3, #23
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e96:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	789b      	ldrb	r3, [r3, #2]
 8000e9c:	061b      	lsls	r3, r3, #24
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8000eaa:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	78db      	ldrb	r3, [r3, #3]
 8000eb0:	06db      	lsls	r3, r3, #27
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8000ebe:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	78db      	ldrb	r3, [r3, #3]
 8000ec4:	075b      	lsls	r3, r3, #29
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ed2:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ee6:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	601a      	str	r2, [r3, #0]
#endif
}
 8000efa:	bf00      	nop
 8000efc:	371c      	adds	r7, #28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b089      	sub	sp, #36	; 0x24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	3310      	adds	r3, #16
 8000f28:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	785b      	ldrb	r3, [r3, #1]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	7dfb      	ldrb	r3, [r7, #23]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8000f4c:	7ffb      	ldrb	r3, [r7, #31]
 8000f4e:	3316      	adds	r3, #22
 8000f50:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	2201      	movs	r2, #1
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	789b      	ldrb	r3, [r3, #2]
 8000f66:	461a      	mov	r2, r3
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8000f74:	7ffb      	ldrb	r3, [r7, #31]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	3319      	adds	r3, #25
 8000f7c:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	78db      	ldrb	r3, [r3, #3]
 8000f92:	461a      	mov	r2, r3
 8000f94:	7dfb      	ldrb	r3, [r7, #23]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8000fa0:	7ffb      	ldrb	r3, [r7, #31]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	7dfb      	ldrb	r3, [r7, #23]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	601a      	str	r2, [r3, #0]
#endif
}
 8000fce:	bf00      	nop
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <XMC_CCU4_SLICE_SetInput>:

/* API to bind an input to a slice trigger event */
void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
                         const XMC_CCU4_SLICE_EVENT_t event,
                             const XMC_CCU4_SLICE_INPUT_t input)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	70fb      	strb	r3, [r7, #3]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(input));
  
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) input) << pos;

  slice->INS1 = ins;
#else
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	73bb      	strb	r3, [r7, #14]

  ins = slice->INS;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60bb      	str	r3, [r7, #8]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  ins |= ((uint32_t) input) << pos;
 800100c:	78ba      	ldrb	r2, [r7, #2]
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	4313      	orrs	r3, r2
 8001018:	60bb      	str	r3, [r7, #8]

  slice->INS = ins;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	601a      	str	r2, [r3, #0]
#endif
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <XMC_CCU4_SLICE_SetTimerRepeatMode>:

/* API to program timer repeat mode - Single shot vs repeat */
void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t mode)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
             ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
          (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
  
  if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d106      	bne.n	800104c <XMC_CCU4_SLICE_SetTimerRepeatMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f023 0202 	bic.w	r2, r3, #2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	615a      	str	r2, [r3, #20]
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
  }
}
 800104a:	e005      	b.n	8001058 <XMC_CCU4_SLICE_SetTimerRepeatMode+0x2c>
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	f043 0202 	orr.w	r2, r3, #2
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	615a      	str	r2, [r3, #20]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <XMC_CCU4_SLICE_SetTimerCountingMode>:

/* Programs timer counting mode */
void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_COUNT_MODE_t mode)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA) ||\
                                                                              (mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA)));
  
  if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d106      	bne.n	8001084 <XMC_CCU4_SLICE_SetTimerCountingMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f023 0201 	bic.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	615a      	str	r2, [r3, #20]
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
  }
}
 8001082:	e005      	b.n	8001090 <XMC_CCU4_SLICE_SetTimerCountingMode+0x2c>
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f043 0201 	orr.w	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	615a      	str	r2, [r3, #20]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <XMC_CCU4_SLICE_GetCaptureRegisterValue>:

/* Retrieves desired capture register value */
uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t reg_num)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
  return(slice->CV[reg_num]);
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	331c      	adds	r3, #28
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	685b      	ldr	r3, [r3, #4]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <XMC_CCU4_SLICE_GetLastCapturedTimerValue>:

/* @brief Retrieves the latest captured timer value */
XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
                                                           const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                           uint32_t *val_ptr)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	460b      	mov	r3, r1
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	72fb      	strb	r3, [r7, #11]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Register Set", ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) ||\
                                                                               (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
  
  retval = XMC_CCU4_STATUS_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	75fb      	strb	r3, [r7, #23]

  /* First check if extended capture mode is enabled */
  if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x28>
  {
    /* Extended capture mode has been enabled. So start with the lowest capture register and work your way up */
    start = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	757b      	strb	r3, [r7, #21]
    end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 80010e2:	2304      	movs	r3, #4
 80010e4:	753b      	strb	r3, [r7, #20]
 80010e6:	e00b      	b.n	8001100 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
  }
  else
  {
    /* Extended capture mode is not enabled */
    if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d104      	bne.n	80010f8 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x38>
    {
      start = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 80010ee:	2302      	movs	r3, #2
 80010f0:	757b      	strb	r3, [r7, #21]
      end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
 80010f2:	2304      	movs	r3, #4
 80010f4:	753b      	strb	r3, [r7, #20]
 80010f6:	e003      	b.n	8001100 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
    }
    else
    {
      start = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	757b      	strb	r3, [r7, #21]
      end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 80010fc:	2302      	movs	r3, #2
 80010fe:	753b      	strb	r3, [r7, #20]
    }
  }

  for(i=start; i < end; i++)
 8001100:	7d7b      	ldrb	r3, [r7, #21]
 8001102:	75bb      	strb	r3, [r7, #22]
 8001104:	e017      	b.n	8001136 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x76>
  {
    if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 8001106:	7dbb      	ldrb	r3, [r7, #22]
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	331c      	adds	r3, #28
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00a      	beq.n	8001130 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x70>
    {
      *val_ptr = slice->CV[i];
 800111a:	7dbb      	ldrb	r3, [r7, #22]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	331c      	adds	r3, #28
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
      retval = XMC_CCU4_STATUS_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
      break;
 800112e:	e006      	b.n	800113e <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x7e>
  for(i=start; i < end; i++)
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	3301      	adds	r3, #1
 8001134:	75bb      	strb	r3, [r7, #22]
 8001136:	7dba      	ldrb	r2, [r7, #22]
 8001138:	7d3b      	ldrb	r3, [r7, #20]
 800113a:	429a      	cmp	r2, r3
 800113c:	d3e3      	bcc.n	8001106 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x46>
    }
  }

  return retval;
 800113e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001140:	4618      	mov	r0, r3
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <XMC_CCU4_GetCapturedValueFromFifo>:

/* Retrieves timer capture value from a FIFO made of capture registers */
#if defined(CCU4V1) /* Defined for XMC4500, XMC400, XMC4200, XMC4100 devices only */
int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
  uint32_t  extracted_slice;
  
  XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));

  /* First read the global fifo register */
  cap = (int32_t) module->ECRD;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800115c:	60fb      	str	r3, [r7, #12]

  extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	0d1b      	lsrs	r3, r3, #20
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	60bb      	str	r3, [r7, #8]

  /* Return captured result only if it were applicable to this slice */
  if(extracted_slice != ((uint32_t)slice_number))
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	429a      	cmp	r2, r3
 800116e:	d002      	beq.n	8001176 <XMC_CCU4_GetCapturedValueFromFifo+0x2a>
  {
    cap = -1;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001174:	60fb      	str	r3, [r7, #12]
  }

  return (cap);
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <XMC_CCU4_SLICE_EnableDithering>:
/* Enables PWM dithering feature */
void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
                                    const bool period_dither,
                                    const bool duty_dither,
                                    const uint8_t spread)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	4608      	mov	r0, r1
 800118e:	4611      	mov	r1, r2
 8001190:	461a      	mov	r2, r3
 8001192:	4603      	mov	r3, r0
 8001194:	70fb      	strb	r3, [r7, #3]
 8001196:	460b      	mov	r3, r1
 8001198:	70bb      	strb	r3, [r7, #2]
 800119a:	4613      	mov	r3, r2
 800119c:	707b      	strb	r3, [r7, #1]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  tc = slice->TC;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	60fb      	str	r3, [r7, #12]
  tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80011aa:	60fb      	str	r3, [r7, #12]

  if ((bool) true == period_dither)
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <XMC_CCU4_SLICE_EnableDithering+0x36>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b8:	60fb      	str	r3, [r7, #12]
  }
  if ((bool) true == duty_dither)
 80011ba:	78bb      	ldrb	r3, [r7, #2]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <XMC_CCU4_SLICE_EnableDithering+0x44>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	615a      	str	r2, [r3, #20]
  
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
 80011ce:	787b      	ldrb	r3, [r7, #1]
 80011d0:	4619      	mov	r1, r3
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fb67 	bl	80008a6 <XMC_CCU4_SLICE_SetDitherCompareValue>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <XMC_CCU4_SLICE_SetPrescaler>:

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011f8:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
 8001228:	4613      	mov	r3, r2
 800122a:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001232:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	2b09      	cmp	r3, #9
 8001238:	d82c      	bhi.n	8001294 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	08001269 	.word	0x08001269
 8001244:	08001269 	.word	0x08001269
 8001248:	08001273 	.word	0x08001273
 800124c:	08001273 	.word	0x08001273
 8001250:	08001295 	.word	0x08001295
 8001254:	08001295 	.word	0x08001295
 8001258:	08001295 	.word	0x08001295
 800125c:	08001295 	.word	0x08001295
 8001260:	0800127d 	.word	0x0800127d
 8001264:	08001289 	.word	0x08001289
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001268:	2303      	movs	r3, #3
 800126a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
      break;
 8001270:	e016      	b.n	80012a0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8001272:	230c      	movs	r3, #12
 8001274:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001276:	2302      	movs	r3, #2
 8001278:	617b      	str	r3, [r7, #20]
      break;
 800127a:	e011      	b.n	80012a0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 800127c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001280:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8001282:	2308      	movs	r3, #8
 8001284:	617b      	str	r3, [r7, #20]
      break;
 8001286:	e00b      	b.n	80012a0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001288:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800128c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800128e:	230a      	movs	r3, #10
 8001290:	617b      	str	r3, [r7, #20]
      break;
 8001292:	e005      	b.n	80012a0 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001294:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001298:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800129a:	230c      	movs	r3, #12
 800129c:	617b      	str	r3, [r7, #20]
      break;
 800129e:	bf00      	nop
  }
  
  srs &= ~mask; 
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	4013      	ands	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 80012aa:	78ba      	ldrb	r2, [r7, #2]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 80012c0:	bf00      	nop
 80012c2:	371c      	adds	r7, #28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <XMC_CCU4_SLICE_SetPassiveLevel>:

/* Asserts passive level for the slice output */
void XMC_CCU4_SLICE_SetPassiveLevel(XMC_CCU4_SLICE_t *const slice,
                                    const XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
                                                                      (level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
  
  psl = slice->PSL;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	60fb      	str	r3, [r7, #12]
  psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
  psl |= (uint32_t) level;
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  
  /* Program CC4 slice output passive level */
  slice->PSL = psl;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	619a      	str	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	50004600 	.word	0x50004600

0800131c <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	50004600 	.word	0x50004600

08001338 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	b2db      	uxtb	r3, r3
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	50004600 	.word	0x50004600

08001358 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	2000ffc0 	.word	0x2000ffc0
 800137c:	50004600 	.word	0x50004600

08001380 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2000ffc0 	.word	0x2000ffc0

08001398 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <XMC_SCU_GetMirrorStatus+0x14>)
 800139e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	50004000 	.word	0x50004000

080013b0 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80013b8:	f001 fd68 	bl	8002e8c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <XMC_SCU_lDelay+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <XMC_SCU_lDelay+0x44>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9a      	lsrs	r2, r3, #18
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e003      	b.n	80013de <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80013d6:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3301      	adds	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d3f7      	bcc.n	80013d6 <XMC_SCU_lDelay+0x26>
  }
}
 80013e6:	bf00      	nop
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000ffc0 	.word	0x2000ffc0
 80013f4:	431bde83 	.word	0x431bde83

080013f8 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	4904      	ldr	r1, [pc, #16]	; (8001418 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	608b      	str	r3, [r1, #8]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	50004074 	.word	0x50004074

0800141c <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	43db      	mvns	r3, r3
 800142c:	4904      	ldr	r1, [pc, #16]	; (8001440 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 800142e:	4013      	ands	r3, r2
 8001430:	608b      	str	r3, [r1, #8]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	50004074 	.word	0x50004074

08001444 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	4904      	ldr	r1, [pc, #16]	; (8001464 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4313      	orrs	r3, r2
 8001456:	610b      	str	r3, [r1, #16]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	50004074 	.word	0x50004074

08001468 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800146e:	685b      	ldr	r3, [r3, #4]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	50004074 	.word	0x50004074

08001480 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60d3      	str	r3, [r2, #12]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	50004074 	.word	0x50004074

080014a0 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <XMC_SCU_GetBootMode+0x18>)
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	50004000 	.word	0x50004000

080014bc <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <XMC_SCU_SetBootMode+0x1c>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	6113      	str	r3, [r2, #16]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	50004000 	.word	0x50004000

080014dc <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 80014e4:	4a05      	ldr	r2, [pc, #20]	; (80014fc <XMC_SCU_ReadGPR+0x20>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	330a      	adds	r3, #10
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	685b      	ldr	r3, [r3, #4]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	50004000 	.word	0x50004000

08001500 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 800150a:	4a06      	ldr	r2, [pc, #24]	; (8001524 <XMC_SCU_WriteGPR+0x24>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	330a      	adds	r3, #10
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	605a      	str	r2, [r3, #4]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	50004000 	.word	0x50004000

08001528 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3328      	adds	r3, #40	; 0x28
 8001538:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800153c:	2101      	movs	r1, #1
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	4905      	ldr	r1, [pc, #20]	; (800155c <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3328      	adds	r3, #40	; 0x28
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	50004000 	.word	0x50004000

08001560 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3328      	adds	r3, #40	; 0x28
 8001570:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001574:	2101      	movs	r1, #1
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	4906      	ldr	r1, [pc, #24]	; (8001598 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8001580:	401a      	ands	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3328      	adds	r3, #40	; 0x28
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	50004000 	.word	0x50004000

0800159c <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80015ae:	4313      	orrs	r3, r2
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 80015b2:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 80015b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	50004000 	.word	0x50004000

080015cc <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <XMC_SCU_EnableTemperatureSensor+0x20>)
 80015d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <XMC_SCU_EnableTemperatureSensor+0x20>)
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	50004000 	.word	0x50004000

080015f0 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <XMC_SCU_DisableTemperatureSensor+0x20>)
 80015f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <XMC_SCU_DisableTemperatureSensor+0x20>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	50004000 	.word	0x50004000

08001614 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 800161a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	bf0c      	ite	eq
 8001626:	2301      	moveq	r3, #1
 8001628:	2300      	movne	r3, #0
 800162a:	b2db      	uxtb	r3, r3
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	50004000 	.word	0x50004000

0800163c <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <XMC_SCU_IsTemperatureSensorReady+0x24>)
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	2b00      	cmp	r3, #0
 800164c:	bf14      	ite	ne
 800164e:	2301      	movne	r3, #1
 8001650:	2300      	moveq	r3, #0
 8001652:	b2db      	uxtb	r3, r3
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	50004000 	.word	0x50004000

08001664 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 800166e:	f7ff ffd1 	bl	8001614 <XMC_SCU_IsTemperatureSensorEnabled>
 8001672:	4603      	mov	r3, r0
 8001674:	f083 0301 	eor.w	r3, r3, #1
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8001682:	f000 f831 	bl	80016e8 <XMC_SCU_IsTemperatureSensorBusy>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 800168c:	2302      	movs	r3, #2
 800168e:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8001692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 80016a0:	79fb      	ldrb	r3, [r7, #7]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	50004000 	.word	0x50004000

080016b0 <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 80016b6:	f7ff ffad 	bl	8001614 <XMC_SCU_IsTemperatureSensorEnabled>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 80016c6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	e005      	b.n	80016da <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016d8:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 80016da:	687b      	ldr	r3, [r7, #4]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	50004000 	.word	0x50004000

080016e8 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	bf14      	ite	ne
 80016fa:	2301      	movne	r3, #1
 80016fc:	2300      	moveq	r3, #0
 80016fe:	b2db      	uxtb	r3, r3
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	50004000 	.word	0x50004000

08001710 <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	041b      	lsls	r3, r3, #16
 800171e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001722:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 800172c:	4a0b      	ldr	r2, [pc, #44]	; (800175c <XMC_SCU_WriteToRetentionMemory+0x4c>)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8001734:	4a09      	ldr	r2, [pc, #36]	; (800175c <XMC_SCU_WriteToRetentionMemory+0x4c>)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 800173c:	bf00      	nop
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <XMC_SCU_WriteToRetentionMemory+0x4c>)
 8001740:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f8      	bne.n	800173e <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	50004000 	.word	0x50004000

08001760 <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	041b      	lsls	r3, r3, #16
 800176c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001770:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 8001782:	bf00      	nop
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001786:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800178a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f8      	bne.n	8001784 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001794:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 8001798:	4618      	mov	r0, r3
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	50004000 	.word	0x50004000

080017a8 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 faf1 	bl	8001d98 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80017b6:	f000 fd7f 	bl	80022b8 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	79db      	ldrb	r3, [r3, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00a      	beq.n	80017d8 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80017c2:	f000 ff77 	bl	80026b4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80017c6:	bf00      	nop
 80017c8:	f000 ff62 	bl	8002690 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f083 0301 	eor.w	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f7      	bne.n	80017c8 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7a5b      	ldrb	r3, [r3, #9]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fb6f 	bl	8001ec0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80017e2:	bf00      	nop
 80017e4:	f7ff fdd8 	bl	8001398 <XMC_SCU_GetMirrorStatus>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1fa      	bne.n	80017e4 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	7a1b      	ldrb	r3, [r3, #8]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fd0c 	bl	8002210 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	7c1b      	ldrb	r3, [r3, #16]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fb7f 	bl	8001f00 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7c5b      	ldrb	r3, [r3, #17]
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fba6 	bl	8001f58 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7c9b      	ldrb	r3, [r3, #18]
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fb8b 	bl	8001f2c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7cdb      	ldrb	r3, [r3, #19]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fbb2 	bl	8001f84 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	799b      	ldrb	r3, [r3, #6]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8001828:	f000 ffd8 	bl	80027dc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 800182c:	bf00      	nop
 800182e:	f000 fffd 	bl	800282c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 8001832:	4603      	mov	r3, r0
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f7      	bne.n	800182e <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	78db      	ldrb	r3, [r3, #3]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8001846:	f001 f855 	bl	80028f4 <XMC_SCU_CLOCK_DisableSystemPll>
 800184a:	e011      	b.n	8001870 <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800184c:	f001 f840 	bl	80028d0 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	8898      	ldrh	r0, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800185c:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001862:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	4623      	mov	r3, r4
 800186c:	f001 f854 	bl	8002918 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001878:	d103      	bne.n	8001882 <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 800187a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800187e:	f000 fa8b 	bl	8001d98 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8001882:	f001 fb03 	bl	8002e8c <SystemCoreClockUpdate>
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	bd90      	pop	{r4, r7, pc}
	...

08001890 <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <XMC_SCU_TRAP_Enable+0x24>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	43db      	mvns	r3, r3
 80018a0:	4904      	ldr	r1, [pc, #16]	; (80018b4 <XMC_SCU_TRAP_Enable+0x24>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	608b      	str	r3, [r1, #8]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	50004160 	.word	0x50004160

080018b8 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <XMC_SCU_TRAP_Disable+0x20>)
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	4904      	ldr	r1, [pc, #16]	; (80018d8 <XMC_SCU_TRAP_Disable+0x20>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	50004160 	.word	0x50004160

080018dc <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <XMC_SCU_TRAP_GetStatus+0x14>)
 80018e2:	685b      	ldr	r3, [r3, #4]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	50004160 	.word	0x50004160

080018f4 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <XMC_SCU_TRAP_Trigger+0x1c>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6113      	str	r3, [r2, #16]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	50004160 	.word	0x50004160

08001914 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <XMC_SCU_TRAP_ClearStatus+0x1c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60d3      	str	r3, [r2, #12]
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	50004160 	.word	0x50004160

08001934 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <XMC_SCU_PARITY_ClearStatus+0x20>)
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	4904      	ldr	r1, [pc, #16]	; (8001954 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4313      	orrs	r3, r2
 8001946:	614b      	str	r3, [r1, #20]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	5000413c 	.word	0x5000413c

08001958 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <XMC_SCU_PARITY_GetStatus+0x14>)
 800195e:	695b      	ldr	r3, [r3, #20]
} 
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	5000413c 	.word	0x5000413c

08001970 <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <XMC_SCU_PARITY_Enable+0x20>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4904      	ldr	r1, [pc, #16]	; (8001990 <XMC_SCU_PARITY_Enable+0x20>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	5000413c 	.word	0x5000413c

08001994 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <XMC_SCU_PARITY_Disable+0x24>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	4904      	ldr	r1, [pc, #16]	; (80019b8 <XMC_SCU_PARITY_Disable+0x24>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	5000413c 	.word	0x5000413c

080019bc <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	4904      	ldr	r1, [pc, #16]	; (80019dc <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	5000413c 	.word	0x5000413c

080019e0 <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	4904      	ldr	r1, [pc, #16]	; (8001a04 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	5000413c 	.word	0x5000413c

08001a08 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	4904      	ldr	r1, [pc, #16]	; (8001a28 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	614b      	str	r3, [r1, #20]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	50004074 	.word	0x50004074

08001a2c <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001a36:	695a      	ldr	r2, [r3, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4904      	ldr	r1, [pc, #16]	; (8001a50 <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	614b      	str	r3, [r1, #20]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	50004074 	.word	0x50004074

08001a54 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0f1b      	lsrs	r3, r3, #28
 8001a60:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001a68:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 8001a78:	4413      	add	r3, r2
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	601a      	str	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	50004410 	.word	0x50004410

08001a90 <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	0f1b      	lsrs	r3, r3, #28
 8001a9c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001aa4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	601a      	str	r2, [r3, #0]
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	50004414 	.word	0x50004414

08001acc <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0f1b      	lsrs	r3, r3, #28
 8001ad8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ae0:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8001af0:	4413      	add	r3, r2
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	5000440c 	.word	0x5000440c

08001b14 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 8001b1a:	f000 f839 	bl	8001b90 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 8001b1e:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d009      	beq.n	8001b40 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b34:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e01f      	b.n	8001b80 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	0e1b      	lsrs	r3, r3, #24
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b58:	3301      	adds	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b66:	3301      	adds	r3, #1
 8001b68:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	fb03 f202 	mul.w	r2, r3, r2
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	6839      	ldr	r1, [r7, #0]
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 8001b80:	68fb      	ldr	r3, [r7, #12]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	50004710 	.word	0x50004710

08001b90 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 8001ba2:	f001 f9dd 	bl	8002f60 <OSCHP_GetFrequency>
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	e001      	b.n	8001bae <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 8001baa:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 8001bac:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 8001bae:	687b      	ldr	r3, [r7, #4]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	50004710 	.word	0x50004710
 8001bbc:	016e3600 	.word	0x016e3600

08001bc0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 8001bc6:	f001 f9cb 	bl	8002f60 <OSCHP_GetFrequency>
 8001bca:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d116      	bne.n	8001c06 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001be2:	3301      	adds	r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	0e1b      	lsrs	r3, r3, #24
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	fb03 f202 	mul.w	r2, r3, r2
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c04:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	50004710 	.word	0x50004710

08001c14 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001c1e:	f7ff fb9b 	bl	8001358 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001c22:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	50004600 	.word	0x50004600

08001c40 <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 8001c4a:	f7ff fb59 	bl	8001300 <XMC_SCU_CLOCK_GetUsbClockSource>
 8001c4e:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c56:	d103      	bne.n	8001c60 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001c58:	f7ff ff5c 	bl	8001b14 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	e005      	b.n	8001c6c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001c66:	f7ff ffab 	bl	8001bc0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001c6a:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8001c74:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	50004600 	.word	0x50004600

08001c88 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001c8e:	f7ff ff41 	bl	8001b14 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001c92:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8001c9c:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	50004600 	.word	0x50004600

08001cb0 <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 8001cba:	f7ff fb2f 	bl	800131c <XMC_SCU_CLOCK_GetWdtClockSource>
 8001cbe:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cc6:	d103      	bne.n	8001cd0 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001cc8:	f7ff ff24 	bl	8001b14 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	e00c      	b.n	8001cea <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	e006      	b.n	8001cea <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d102      	bne.n	8001cea <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 8001ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce8:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8001cf0:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	016e3600 	.word	0x016e3600
 8001d04:	50004600 	.word	0x50004600

08001d08 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 8001d12:	f7ff fb11 	bl	8001338 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 8001d16:	4603      	mov	r3, r0
 8001d18:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d10d      	bne.n	8001d3c <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001d20:	f7ff fef8 	bl	8001b14 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001d24:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001d30:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	e016      	b.n	8001d6a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d103      	bne.n	8001d4a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001d42:	f7ff fb09 	bl	8001358 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	e00f      	b.n	8001d6a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d10c      	bne.n	8001d6a <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001d50:	f7ff ff36 	bl	8001bc0 <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001d54:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001d56:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	0c1b      	lsrs	r3, r3, #16
 8001d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001d60:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 8001d6a:	687b      	ldr	r3, [r7, #4]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	50004600 	.word	0x50004600

08001d78 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001d7c:	f7ff fb00 	bl	8001380 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8001d80:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001d8a:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	50004600 	.word	0x50004600

08001d98 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001da8:	4904      	ldr	r1, [pc, #16]	; (8001dbc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	50004600 	.word	0x50004600

08001dc0 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001dd0:	4904      	ldr	r1, [pc, #16]	; (8001de4 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	50004600 	.word	0x50004600

08001de8 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001df8:	4904      	ldr	r1, [pc, #16]	; (8001e0c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	50004600 	.word	0x50004600

08001e10 <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 8001e22:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001e24:	4904      	ldr	r1, [pc, #16]	; (8001e38 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	50004600 	.word	0x50004600

08001e3c <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d108      	bne.n	8001e5e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001e52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 8001e5c:	e007      	b.n	8001e6e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	60d3      	str	r3, [r2, #12]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	50004710 	.word	0x50004710

08001e80 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001e8a:	bf00      	nop
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8001e8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f8      	bne.n	8001e8c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001ea4:	4905      	ldr	r1, [pc, #20]	; (8001ebc <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60cb      	str	r3, [r1, #12]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	50004000 	.word	0x50004000
 8001ebc:	50004300 	.word	0x50004300

08001ec0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001eca:	bf00      	nop
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8001ece:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f8      	bne.n	8001ecc <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001ee4:	4905      	ldr	r1, [pc, #20]	; (8001efc <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60cb      	str	r3, [r1, #12]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	50004000 	.word	0x50004000
 8001efc:	50004300 	.word	0x50004300

08001f00 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001f14:	4904      	ldr	r1, [pc, #16]	; (8001f28 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60cb      	str	r3, [r1, #12]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	50004600 	.word	0x50004600

08001f2c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8001f40:	4904      	ldr	r1, [pc, #16]	; (8001f54 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	620b      	str	r3, [r1, #32]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	50004600 	.word	0x50004600

08001f58 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8001f6c:	4904      	ldr	r1, [pc, #16]	; (8001f80 <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	610b      	str	r3, [r1, #16]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	50004600 	.word	0x50004600

08001f84 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8001f98:	4904      	ldr	r1, [pc, #16]	; (8001fac <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	614b      	str	r3, [r1, #20]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	50004600 	.word	0x50004600

08001fb0 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8001fc4:	4904      	ldr	r1, [pc, #16]	; (8001fd8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	618b      	str	r3, [r1, #24]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	50004600 	.word	0x50004600

08001fdc <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001fe4:	4b07      	ldr	r3, [pc, #28]	; (8002004 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8001ff0:	4904      	ldr	r1, [pc, #16]	; (8002004 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61cb      	str	r3, [r1, #28]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	50004600 	.word	0x50004600

08002008 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800201c:	4904      	ldr	r1, [pc, #16]	; (8002030 <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 800201e:	4313      	orrs	r3, r2
 8002020:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	50004600 	.word	0x50004600

08002034 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	3a01      	subs	r2, #1
 800204c:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800204e:	4904      	ldr	r1, [pc, #16]	; (8002060 <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 8002050:	4313      	orrs	r3, r2
 8002052:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	50004600 	.word	0x50004600

08002064 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	6053      	str	r3, [r2, #4]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	50004600 	.word	0x50004600

08002084 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <XMC_SCU_CLOCK_DisableClock+0x1c>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	6093      	str	r3, [r2, #8]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	50004600 	.word	0x50004600

080020a4 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	50004600 	.word	0x50004600

080020d0 <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	ee07 3a90 	vmov	s15, r3
 80020de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80020fc <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 80020e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ea:	ee17 3a90 	vmov	r3, s15
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	50004200 	.word	0x50004200
 80020fc:	3bbe0ded 	.word	0x3bbe0ded

08002100 <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	0a1b      	lsrs	r3, r3, #8
 800210a:	b2db      	uxtb	r3, r3
 800210c:	ee07 3a90 	vmov	s15, r3
 8002110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002114:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002130 <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 8002118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211c:	ee17 3a90 	vmov	r3, s15
}
 8002120:	4618      	mov	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	50004200 	.word	0x50004200
 8002130:	3cb851ec 	.word	0x3cb851ec

08002134 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	4a05      	ldr	r2, [pc, #20]	; (8002154 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	f023 0302 	bic.w	r3, r3, #2
 8002146:	6153      	str	r3, [r2, #20]
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	50004710 	.word	0x50004710

08002158 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	4a05      	ldr	r2, [pc, #20]	; (8002178 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	f043 0302 	orr.w	r3, r3, #2
 800216a:	6153      	str	r3, [r2, #20]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	50004710 	.word	0x50004710

0800217c <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4a19      	ldr	r2, [pc, #100]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	4a16      	ldr	r2, [pc, #88]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80021aa:	4911      	ldr	r1, [pc, #68]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80021b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ba:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80021c2:	f023 0310 	bic.w	r3, r3, #16
 80021c6:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80021ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d2:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80021d4:	bf00      	nop
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f9      	beq.n	80021d6 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	50004710 	.word	0x50004710

080021f4 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 80021fa:	4a04      	ldr	r2, [pc, #16]	; (800220c <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 80021fc:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	50004710 	.word	0x50004710
 800220c:	00010003 	.word	0x00010003

08002210 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8002220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002224:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10e      	bne.n	800224a <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a09      	ldr	r2, [pc, #36]	; (8002258 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8002232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002236:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	f7ff f8b9 	bl	80013b0 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4a05      	ldr	r2, [pc, #20]	; (8002258 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8002244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002248:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 800224a:	2064      	movs	r0, #100	; 0x64
 800224c:	f7ff f8b0 	bl	80013b0 <XMC_SCU_lDelay>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	50004710 	.word	0x50004710

0800225c <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <XMC_SCU_POWER_EnableUsb+0x18>)
 8002262:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002266:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	50004200 	.word	0x50004200

08002278 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <XMC_SCU_POWER_DisableUsb+0x18>)
 800227e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002282:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	50004200 	.word	0x50004200

08002294 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	bf14      	ite	ne
 80022a4:	2301      	movne	r3, #1
 80022a6:	2300      	moveq	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	50004710 	.word	0x50004710

080022b8 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80022ce:	bf00      	nop
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f9      	beq.n	80022d0 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80022ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ee:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80022f0:	bf00      	nop
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f9      	bne.n	80022f2 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	50004200 	.word	0x50004200
 800230c:	50004400 	.word	0x50004400

08002310 <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 8002316:	2201      	movs	r2, #1
 8002318:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 800231c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002320:	605a      	str	r2, [r3, #4]
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	50004200 	.word	0x50004200
 8002330:	50004400 	.word	0x50004400

08002334 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8002354:	2300      	movs	r3, #0
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	50004200 	.word	0x50004200
 800236c:	50004400 	.word	0x50004400

08002370 <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002374:	bf00      	nop
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8002378:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f8      	bne.n	8002376 <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6153      	str	r3, [r2, #20]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	50004000 	.word	0x50004000
 80023a0:	50004300 	.word	0x50004300

080023a4 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 80023a8:	bf00      	nop
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 80023ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023b0:	f003 0320 	and.w	r3, r3, #32
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f8      	bne.n	80023aa <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	4a05      	ldr	r2, [pc, #20]	; (80023d4 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6153      	str	r3, [r2, #20]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	50004000 	.word	0x50004000
 80023d4:	50004300 	.word	0x50004300

080023d8 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 80023e0:	bf00      	nop
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 80023e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f8      	bne.n	80023e2 <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 80023f0:	4a05      	ldr	r2, [pc, #20]	; (8002408 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6053      	str	r3, [r2, #4]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	50004000 	.word	0x50004000
 8002408:	50004300 	.word	0x50004300

0800240c <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 8002414:	bf00      	nop
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 8002418:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f8      	bne.n	8002416 <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 8002424:	4a05      	ldr	r2, [pc, #20]	; (800243c <XMC_SCU_HIB_TriggerEvent+0x30>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6093      	str	r3, [r2, #8]
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	50004000 	.word	0x50004000
 800243c:	50004300 	.word	0x50004300

08002440 <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002448:	bf00      	nop
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <XMC_SCU_HIB_EnableEvent+0x30>)
 800244c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f8      	bne.n	800244a <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <XMC_SCU_HIB_EnableEvent+0x34>)
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4905      	ldr	r1, [pc, #20]	; (8002474 <XMC_SCU_HIB_EnableEvent+0x34>)
 8002460:	4313      	orrs	r3, r2
 8002462:	60cb      	str	r3, [r1, #12]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	50004000 	.word	0x50004000
 8002474:	50004300 	.word	0x50004300

08002478 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002480:	bf00      	nop
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <XMC_SCU_HIB_DisableEvent+0x34>)
 8002484:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f8      	bne.n	8002482 <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <XMC_SCU_HIB_DisableEvent+0x38>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	43d2      	mvns	r2, r2
 8002498:	4611      	mov	r1, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <XMC_SCU_HIB_DisableEvent+0x38>)
 800249c:	400b      	ands	r3, r1
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	50004000 	.word	0x50004000
 80024b0:	50004300 	.word	0x50004300

080024b4 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80024b8:	bf00      	nop
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 80024bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f8      	bne.n	80024ba <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a05      	ldr	r2, [pc, #20]	; (80024e4 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	50004000 	.word	0x50004000
 80024e4:	50004300 	.word	0x50004300

080024e8 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 80024f8:	f7ff ffdc 	bl	80024b4 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800250e:	bf00      	nop
 8002510:	4b0e      	ldr	r3, [pc, #56]	; (800254c <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 8002512:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f8      	bne.n	8002510 <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 8002524:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a09      	ldr	r2, [pc, #36]	; (8002550 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 800252a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800252e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 8002530:	e005      	b.n	800253e <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 8002532:	4b07      	ldr	r3, [pc, #28]	; (8002550 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	4a06      	ldr	r2, [pc, #24]	; (8002550 <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8002538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800253c:	60d3      	str	r3, [r2, #12]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	50004000 	.word	0x50004000
 8002550:	50004300 	.word	0x50004300

08002554 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002560:	bf00      	nop
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <XMC_SCU_HIB_SetPinMode+0x4c>)
 8002564:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f8      	bne.n	8002562 <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <XMC_SCU_HIB_SetPinMode+0x50>)
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	6839      	ldr	r1, [r7, #0]
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 800258e:	4905      	ldr	r1, [pc, #20]	; (80025a4 <XMC_SCU_HIB_SetPinMode+0x50>)
 8002590:	4313      	orrs	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	50004000 	.word	0x50004000
 80025a4:	50004300 	.word	0x50004300

080025a8 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	460a      	mov	r2, r1
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	4613      	mov	r3, r2
 80025b6:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80025b8:	bf00      	nop
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 80025bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f8      	bne.n	80025ba <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	4013      	ands	r3, r2
                        (level << pin);
 80025da:	88b9      	ldrh	r1, [r7, #4]
 80025dc:	79fa      	ldrb	r2, [r7, #7]
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80025e4:	4a05      	ldr	r2, [pc, #20]	; (80025fc <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 80025e6:	430b      	orrs	r3, r1
 80025e8:	60d3      	str	r3, [r2, #12]
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	50004000 	.word	0x50004000
 80025fc:	50004300 	.word	0x50004300

08002600 <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800260a:	bf00      	nop
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <XMC_SCU_HIB_SetInput0+0x48>)
 800260e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f8      	bne.n	800260c <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <XMC_SCU_HIB_SetInput0+0x4c>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a09      	ldr	r2, [pc, #36]	; (800264c <XMC_SCU_HIB_SetInput0+0x4c>)
 8002626:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800262a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 800262c:	e005      	b.n	800263a <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <XMC_SCU_HIB_SetInput0+0x4c>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	4a06      	ldr	r2, [pc, #24]	; (800264c <XMC_SCU_HIB_SetInput0+0x4c>)
 8002634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002638:	60d3      	str	r3, [r2, #12]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	50004000 	.word	0x50004000
 800264c:	50004300 	.word	0x50004300

08002650 <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800265a:	bf00      	nop
 800265c:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <XMC_SCU_HIB_SetSR0Input+0x38>)
 800265e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f8      	bne.n	800265c <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <XMC_SCU_HIB_SetSR0Input+0x3c>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	4905      	ldr	r1, [pc, #20]	; (800268c <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	50004000 	.word	0x50004000
 800268c:	50004300 	.word	0x50004300

08002690 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	50004300 	.word	0x50004300

080026b4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80026b8:	bf00      	nop
 80026ba:	4b17      	ldr	r3, [pc, #92]	; (8002718 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80026bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f8      	bne.n	80026ba <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80026ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026d2:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80026d4:	bf00      	nop
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80026d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f8      	bne.n	80026d6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a0c      	ldr	r2, [pc, #48]	; (800271c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80026ea:	f043 0308 	orr.w	r3, r3, #8
 80026ee:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80026f0:	bf00      	nop
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80026f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f8      	bne.n	80026f2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002702:	2208      	movs	r2, #8
 8002704:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 8002706:	bf00      	nop
 8002708:	f7fe fe46 	bl	8001398 <XMC_SCU_GetMirrorStatus>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1fa      	bne.n	8002708 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	50004000 	.word	0x50004000
 800271c:	50004300 	.word	0x50004300

08002720 <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002724:	bf00      	nop
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 8002728:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800272c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f8      	bne.n	8002726 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	4a05      	ldr	r2, [pc, #20]	; (8002750 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 800273a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800273e:	61d3      	str	r3, [r2, #28]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	50004000 	.word	0x50004000
 8002750:	50004300 	.word	0x50004300

08002754 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002758:	bf00      	nop
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 800275c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f8      	bne.n	800275a <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002768:	4b06      	ldr	r3, [pc, #24]	; (8002784 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	4a05      	ldr	r2, [pc, #20]	; (8002784 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800276e:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8002772:	61d3      	str	r3, [r2, #28]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	50004000 	.word	0x50004000
 8002784:	50004300 	.word	0x50004300

08002788 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 800278c:	bf00      	nop
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8002790:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f8      	bne.n	800278e <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 80027a4:	4a05      	ldr	r2, [pc, #20]	; (80027bc <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 80027a6:	f043 0320 	orr.w	r3, r3, #32
 80027aa:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	50004000 	.word	0x50004000
 80027bc:	50004300 	.word	0x50004300

080027c0 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0301 	and.w	r3, r3, #1
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	50004300 	.word	0x50004300

080027dc <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80027dc:	b598      	push	{r3, r4, r7, lr}
 80027de:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80027e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ea:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 80027f4:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80027f8:	f000 fbb2 	bl	8002f60 <OSCHP_GetFrequency>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	0d1b      	lsrs	r3, r3, #20
 8002806:	3b01      	subs	r3, #1
 8002808:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 800280a:	4a06      	ldr	r2, [pc, #24]	; (8002824 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 800280c:	4323      	orrs	r3, r4
 800280e:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a02      	ldr	r2, [pc, #8]	; (8002820 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002816:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800281a:	6053      	str	r3, [r2, #4]
}
 800281c:	bf00      	nop
 800281e:	bd98      	pop	{r3, r4, r7, pc}
 8002820:	50004710 	.word	0x50004710
 8002824:	50004700 	.word	0x50004700
 8002828:	6b5fca6b 	.word	0x6b5fca6b

0800282c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002838:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	50004710 	.word	0x50004710

08002854 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 800285e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002862:	6053      	str	r3, [r2, #4]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	50004700 	.word	0x50004700

08002874 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	6053      	str	r3, [r2, #4]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	50004700 	.word	0x50004700

08002894 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	6053      	str	r3, [r2, #4]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	50004700 	.word	0x50004700

080028b4 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0301 	and.w	r3, r3, #1
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	50004700 	.word	0x50004700

080028d0 <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	f023 0302 	bic.w	r3, r3, #2
 80028e2:	6053      	str	r3, [r2, #4]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	50004710 	.word	0x50004710

080028f4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a05      	ldr	r2, [pc, #20]	; (8002914 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002902:	f043 0302 	orr.w	r3, r3, #2
 8002906:	6053      	str	r3, [r2, #4]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	50004710 	.word	0x50004710

08002918 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60ba      	str	r2, [r7, #8]
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	4603      	mov	r3, r0
 8002924:	81fb      	strh	r3, [r7, #14]
 8002926:	460b      	mov	r3, r1
 8002928:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fa85 	bl	8001e3c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002932:	7b7b      	ldrb	r3, [r7, #13]
 8002934:	2b01      	cmp	r3, #1
 8002936:	f040 8084 	bne.w	8002a42 <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 800293a:	89fb      	ldrh	r3, [r7, #14]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8002940:	f000 fb0e 	bl	8002f60 <OSCHP_GetFrequency>
 8002944:	4603      	mov	r3, r0
 8002946:	4a4c      	ldr	r2, [pc, #304]	; (8002a78 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	0c9b      	lsrs	r3, r3, #18
 800294e:	059b      	lsls	r3, r3, #22
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e002      	b.n	800295a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002954:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002958:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	fb03 f202 	mul.w	r2, r3, r2
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	4a43      	ldr	r2, [pc, #268]	; (8002a7c <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	0d9b      	lsrs	r3, r3, #22
 8002976:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002978:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4a40      	ldr	r2, [pc, #256]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002984:	4b3e      	ldr	r3, [pc, #248]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a3d      	ldr	r2, [pc, #244]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 800298a:	f043 0310 	orr.w	r3, r3, #16
 800298e:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002990:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8002996:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	3a01      	subs	r2, #1
 800299c:	0212      	lsls	r2, r2, #8
 800299e:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 80029a6:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 80029ae:	4934      	ldr	r1, [pc, #208]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80029b4:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4a31      	ldr	r2, [pc, #196]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029be:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 80029c0:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a2e      	ldr	r2, [pc, #184]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029c6:	f023 0310 	bic.w	r3, r3, #16
 80029ca:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 80029cc:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80029d8:	bf00      	nop
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f9      	beq.n	80029da <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029ec:	f023 0301 	bic.w	r3, r3, #1
 80029f0:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80029f2:	bf00      	nop
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f9      	bne.n	80029f4 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	0d9b      	lsrs	r3, r3, #22
 8002a0c:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002a0e:	6a3a      	ldr	r2, [r7, #32]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d202      	bcs.n	8002a1c <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002a16:	6938      	ldr	r0, [r7, #16]
 8002a18:	f000 f84a 	bl	8002ab0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	0d9b      	lsrs	r3, r3, #22
 8002a2a:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002a2c:	6a3a      	ldr	r2, [r7, #32]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d202      	bcs.n	8002a3a <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002a34:	6938      	ldr	r0, [r7, #16]
 8002a36:	f000 f83b 	bl	8002ab0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002a3a:	6a38      	ldr	r0, [r7, #32]
 8002a3c:	f000 f838 	bl	8002ab0 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8002a40:	e015      	b.n	8002a6e <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002a4e:	490c      	ldr	r1, [pc, #48]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002a54:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002a60:	bf00      	nop
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f9      	beq.n	8002a62 <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 8002a6e:	bf00      	nop
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	431bde83 	.word	0x431bde83
 8002a7c:	aaaaaaab 	.word	0xaaaaaaab
 8002a80:	50004710 	.word	0x50004710
 8002a84:	f08080ff 	.word	0xf08080ff
 8002a88:	88888889 	.word	0x88888889
 8002a8c:	b60b60b7 	.word	0xb60b60b7

08002a90 <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	6053      	str	r3, [r2, #4]
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	50004710 	.word	0x50004710

08002ab0 <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002ac6:	4905      	ldr	r1, [pc, #20]	; (8002adc <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 8002acc:	2032      	movs	r0, #50	; 0x32
 8002ace:	f7fe fc6f 	bl	80013b0 <XMC_SCU_lDelay>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	50004710 	.word	0x50004710

08002ae0 <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	50004710 	.word	0x50004710

08002b04 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002b12:	e002      	b.n	8002b1a <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3301      	adds	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d102      	bne.n	8002b30 <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b1f      	cmp	r3, #31
 8002b2e:	d9f1      	bls.n	8002b14 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d102      	bne.n	8002b3c <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	72fb      	strb	r3, [r7, #11]
 8002b3a:	e006      	b.n	8002b4a <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 8002b3c:	4906      	ldr	r1, [pc, #24]	; (8002b58 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8002b46:	2300      	movs	r3, #0
 8002b48:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	200008ec 	.word	0x200008ec

08002b5c <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8002b68:	f7fe fc7e 	bl	8001468 <XMC_SCU_INTERUPT_GetEventStatus>
 8002b6c:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8002b6e:	e01c      	b.n	8002baa <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d011      	beq.n	8002ba4 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <XMC_SCU_IRQHandler+0x60>)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b88:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8002b94:	2201      	movs	r2, #1
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fc6f 	bl	8001480 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 8002ba2:	e006      	b.n	8002bb2 <XMC_SCU_IRQHandler+0x56>
    }   
    index++;    
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b1f      	cmp	r3, #31
 8002bae:	d9df      	bls.n	8002b70 <XMC_SCU_IRQHandler+0x14>
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	200008ec 	.word	0x200008ec

08002bc0 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e003      	b.n	8002bd6 <delay+0x16>
  {
    __NOP();
 8002bce:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d8f7      	bhi.n	8002bce <delay+0xe>
  }
}
 8002bde:	bf00      	nop
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8002bec:	b598      	push	{r3, r4, r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8002bf0:	4a06      	ldr	r2, [pc, #24]	; (8002c0c <SystemInit+0x20>)
 8002bf2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002bf6:	4614      	mov	r4, r2
 8002bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8002bfe:	f000 f807 	bl	8002c10 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8002c02:	f000 f83f 	bl	8002c84 <SystemCoreClockSetup>
}
 8002c06:	bf00      	nop
 8002c08:	bd98      	pop	{r3, r4, r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	2000ffc4 	.word	0x2000ffc4

08002c10 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c16:	b672      	cpsid	i
}
 8002c18:	bf00      	nop
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002c1a:	4b17      	ldr	r3, [pc, #92]	; (8002c78 <SystemCoreSetup+0x68>)
 8002c1c:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <SystemCoreSetup+0x6c>)
 8002c1e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c20:	f3bf 8f4f 	dsb	sy
}
 8002c24:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8002c26:	b662      	cpsie	i
}
 8002c28:	bf00      	nop
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <SystemCoreSetup+0x68>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c30:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <SystemCoreSetup+0x68>)
 8002c32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <SystemCoreSetup+0x68>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	4a0e      	ldr	r2, [pc, #56]	; (8002c78 <SystemCoreSetup+0x68>)
 8002c40:	f023 0308 	bic.w	r3, r3, #8
 8002c44:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <SystemCoreSetup+0x70>)
 8002c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f023 030f 	bic.w	r3, r3, #15
 8002c56:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f043 0303 	orr.w	r3, r3, #3
 8002c5e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002c60:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <SystemCoreSetup+0x70>)
 8002c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c66:	461a      	mov	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6153      	str	r3, [r2, #20]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00
 8002c7c:	08000000 	.word	0x08000000
 8002c80:	58001000 	.word	0x58001000

08002c84 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002c88:	4b75      	ldr	r3, [pc, #468]	; (8002e60 <SystemCoreClockSetup+0x1dc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10c      	bne.n	8002cae <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8002c94:	4b72      	ldr	r3, [pc, #456]	; (8002e60 <SystemCoreClockSetup+0x1dc>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a71      	ldr	r2, [pc, #452]	; (8002e60 <SystemCoreClockSetup+0x1dc>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002ca0:	bf00      	nop
 8002ca2:	4b6f      	ldr	r3, [pc, #444]	; (8002e60 <SystemCoreClockSetup+0x1dc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f9      	beq.n	8002ca2 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8002cae:	4b6d      	ldr	r3, [pc, #436]	; (8002e64 <SystemCoreClockSetup+0x1e0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8002cba:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <SystemCoreClockSetup+0x1e0>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4a69      	ldr	r2, [pc, #420]	; (8002e64 <SystemCoreClockSetup+0x1e0>)
 8002cc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc4:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8002cc6:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8002cca:	f7ff ff79 	bl	8002bc0 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8002cce:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4a65      	ldr	r2, [pc, #404]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cd8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8002cda:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002cde:	f7ff ff6f 	bl	8002bc0 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002ce2:	4b61      	ldr	r3, [pc, #388]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a60      	ldr	r2, [pc, #384]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cec:	f023 0302 	bic.w	r3, r3, #2
 8002cf0:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8002cf2:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <SystemCoreClockSetup+0x1e8>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d029      	beq.n	8002d52 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8002cfe:	4b5b      	ldr	r3, [pc, #364]	; (8002e6c <SystemCoreClockSetup+0x1e8>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4a5a      	ldr	r2, [pc, #360]	; (8002e6c <SystemCoreClockSetup+0x1e8>)
 8002d04:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002d08:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d0c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8002d0e:	f000 f927 	bl	8002f60 <OSCHP_GetFrequency>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4a56      	ldr	r2, [pc, #344]	; (8002e70 <SystemCoreClockSetup+0x1ec>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	0d1b      	lsrs	r3, r3, #20
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	041a      	lsls	r2, r3, #16
 8002d20:	4b52      	ldr	r3, [pc, #328]	; (8002e6c <SystemCoreClockSetup+0x1e8>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4951      	ldr	r1, [pc, #324]	; (8002e6c <SystemCoreClockSetup+0x1e8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8002d2a:	4b4f      	ldr	r3, [pc, #316]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4a4e      	ldr	r2, [pc, #312]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002d36:	4b4c      	ldr	r3, [pc, #304]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4a4b      	ldr	r2, [pc, #300]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d40:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8002d42:	bf00      	nop
 8002d44:	4b48      	ldr	r3, [pc, #288]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002d4c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002d50:	d1f8      	bne.n	8002d44 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002d52:	4b45      	ldr	r3, [pc, #276]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4a44      	ldr	r2, [pc, #272]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8002d5e:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4a41      	ldr	r2, [pc, #260]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d64:	f043 0310 	orr.w	r3, r3, #16
 8002d68:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d6c:	4a41      	ldr	r2, [pc, #260]	; (8002e74 <SystemCoreClockSetup+0x1f0>)
 8002d6e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002d70:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a3c      	ldr	r2, [pc, #240]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d7a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4a39      	ldr	r2, [pc, #228]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d82:	f023 0310 	bic.w	r3, r3, #16
 8002d86:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8002d88:	4b37      	ldr	r3, [pc, #220]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a36      	ldr	r2, [pc, #216]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d92:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002d94:	bf00      	nop
 8002d96:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f9      	beq.n	8002d96 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a30      	ldr	r2, [pc, #192]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002dae:	bf00      	nop
 8002db0:	4b2d      	ldr	r3, [pc, #180]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f9      	bne.n	8002db0 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8002dbc:	4b2e      	ldr	r3, [pc, #184]	; (8002e78 <SystemCoreClockSetup+0x1f4>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a2d      	ldr	r2, [pc, #180]	; (8002e78 <SystemCoreClockSetup+0x1f4>)
 8002dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc6:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <SystemCoreClockSetup+0x1f4>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8002dce:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <SystemCoreClockSetup+0x1f4>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8002dd4:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <SystemCoreClockSetup+0x1f4>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <SystemCoreClockSetup+0x1f4>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8002de0:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <SystemCoreClockSetup+0x1f4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8002de6:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <SystemCoreClockSetup+0x1f4>)
 8002de8:	2203      	movs	r2, #3
 8002dea:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002dec:	4b1e      	ldr	r3, [pc, #120]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002df6:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002dfa:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <SystemCoreClockSetup+0x1f8>)
 8002dfc:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8002dfe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e02:	f7ff fedd 	bl	8002bc0 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002e06:	bf00      	nop
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f9      	beq.n	8002e08 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002e14:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002e16:	4a1a      	ldr	r2, [pc, #104]	; (8002e80 <SystemCoreClockSetup+0x1fc>)
 8002e18:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8002e1a:	f241 1094 	movw	r0, #4500	; 0x1194
 8002e1e:	f7ff fecf 	bl	8002bc0 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002e22:	bf00      	nop
 8002e24:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f9      	beq.n	8002e24 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002e30:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002e32:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <SystemCoreClockSetup+0x200>)
 8002e34:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8002e36:	f241 7070 	movw	r0, #6000	; 0x1770
 8002e3a:	f7ff fec1 	bl	8002bc0 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002e3e:	bf00      	nop
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <SystemCoreClockSetup+0x1e4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f9      	beq.n	8002e40 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8002e4c:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <SystemCoreClockSetup+0x204>)
 8002e4e:	2205      	movs	r2, #5
 8002e50:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <SystemCoreClockSetup+0x1f4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8002e58:	f000 f818 	bl	8002e8c <SystemCoreClockUpdate>
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	50004200 	.word	0x50004200
 8002e64:	50004400 	.word	0x50004400
 8002e68:	50004710 	.word	0x50004710
 8002e6c:	50004700 	.word	0x50004700
 8002e70:	6b5fca6b 	.word	0x6b5fca6b
 8002e74:	01134f00 	.word	0x01134f00
 8002e78:	50004600 	.word	0x50004600
 8002e7c:	01074f00 	.word	0x01074f00
 8002e80:	01044f00 	.word	0x01044f00
 8002e84:	01034f00 	.word	0x01034f00
 8002e88:	50004160 	.word	0x50004160

08002e8c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8002e92:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <SystemCoreClockUpdate+0xc4>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03e      	beq.n	8002f1c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <SystemCoreClockUpdate+0xc8>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <SystemCoreClockUpdate+0xcc>)
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e002      	b.n	8002eb6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8002eb0:	f000 f856 	bl	8002f60 <OSCHP_GetFrequency>
 8002eb4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8002eb6:	4b27      	ldr	r3, [pc, #156]	; (8002f54 <SystemCoreClockUpdate+0xc8>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8002ec2:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <SystemCoreClockUpdate+0xc8>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	0e1b      	lsrs	r3, r3, #24
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	3301      	adds	r3, #1
 8002ece:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8002ed0:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <SystemCoreClockUpdate+0xc8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eda:	3301      	adds	r3, #1
 8002edc:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <SystemCoreClockUpdate+0xc8>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	0c1b      	lsrs	r3, r3, #16
 8002ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ee8:	3301      	adds	r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	fb02 f303 	mul.w	r3, r2, r3
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	e00d      	b.n	8002f20 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8002f04:	4b13      	ldr	r3, [pc, #76]	; (8002f54 <SystemCoreClockUpdate+0xc8>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e001      	b.n	8002f20 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <SystemCoreClockUpdate+0xcc>)
 8002f1e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <SystemCoreClockUpdate+0xc4>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002f30:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <SystemCoreClockUpdate+0xc4>)
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	3301      	adds	r3, #1
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8002f42:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <SystemCoreClockUpdate+0xd0>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	50004600 	.word	0x50004600
 8002f54:	50004710 	.word	0x50004710
 8002f58:	016e3600 	.word	0x016e3600
 8002f5c:	2000ffc0 	.word	0x2000ffc0

08002f60 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8002f64:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <OSCHP_GetFrequency+0x10>)
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	00b71b00 	.word	0x00b71b00

08002f74 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <_sbrk+0x5c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8002f84:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <_sbrk+0x5c>)
 8002f86:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <_sbrk+0x60>)
 8002f88:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <_sbrk+0x5c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3303      	adds	r3, #3
 8002f94:	f023 0303 	bic.w	r3, r3, #3
 8002f98:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <_sbrk+0x5c>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <_sbrk+0x64>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d207      	bcs.n	8002fb8 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <_sbrk+0x5c>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a07      	ldr	r2, [pc, #28]	; (8002fd0 <_sbrk+0x5c>)
 8002fb2:	6013      	str	r3, [r2, #0]
    return (base);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	e006      	b.n	8002fc6 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8002fb8:	f000 f818 	bl	8002fec <__errno>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	220c      	movs	r2, #12
 8002fc0:	601a      	str	r2, [r3, #0]
    return ((caddr_t)-1);
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000970 	.word	0x20000970
 8002fd4:	200009d0 	.word	0x200009d0
 8002fd8:	2000ffc0 	.word	0x2000ffc0

08002fdc <_init>:

/* Init */
void _init(void)
{}
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <__errno>:
 8002fec:	4b01      	ldr	r3, [pc, #4]	; (8002ff4 <__errno+0x8>)
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	200000a0 	.word	0x200000a0

08002ff8 <__libc_init_array>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	4e0d      	ldr	r6, [pc, #52]	; (8003030 <__libc_init_array+0x38>)
 8002ffc:	4d0d      	ldr	r5, [pc, #52]	; (8003034 <__libc_init_array+0x3c>)
 8002ffe:	1b76      	subs	r6, r6, r5
 8003000:	10b6      	asrs	r6, r6, #2
 8003002:	d006      	beq.n	8003012 <__libc_init_array+0x1a>
 8003004:	2400      	movs	r4, #0
 8003006:	f855 3b04 	ldr.w	r3, [r5], #4
 800300a:	3401      	adds	r4, #1
 800300c:	4798      	blx	r3
 800300e:	42a6      	cmp	r6, r4
 8003010:	d1f9      	bne.n	8003006 <__libc_init_array+0xe>
 8003012:	4e09      	ldr	r6, [pc, #36]	; (8003038 <__libc_init_array+0x40>)
 8003014:	4d09      	ldr	r5, [pc, #36]	; (800303c <__libc_init_array+0x44>)
 8003016:	1b76      	subs	r6, r6, r5
 8003018:	f7ff ffe0 	bl	8002fdc <_init>
 800301c:	10b6      	asrs	r6, r6, #2
 800301e:	d006      	beq.n	800302e <__libc_init_array+0x36>
 8003020:	2400      	movs	r4, #0
 8003022:	f855 3b04 	ldr.w	r3, [r5], #4
 8003026:	3401      	adds	r4, #1
 8003028:	4798      	blx	r3
 800302a:	42a6      	cmp	r6, r4
 800302c:	d1f9      	bne.n	8003022 <__libc_init_array+0x2a>
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	200008e0 	.word	0x200008e0
 8003034:	200008e0 	.word	0x200008e0
 8003038:	200008e0 	.word	0x200008e0
 800303c:	200008e0 	.word	0x200008e0

08003040 <malloc>:
 8003040:	4b02      	ldr	r3, [pc, #8]	; (800304c <malloc+0xc>)
 8003042:	4601      	mov	r1, r0
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	f000 b80b 	b.w	8003060 <_malloc_r>
 800304a:	bf00      	nop
 800304c:	200000a0 	.word	0x200000a0

08003050 <free>:
 8003050:	4b02      	ldr	r3, [pc, #8]	; (800305c <free+0xc>)
 8003052:	4601      	mov	r1, r0
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	f000 bc11 	b.w	800387c <_free_r>
 800305a:	bf00      	nop
 800305c:	200000a0 	.word	0x200000a0

08003060 <_malloc_r>:
 8003060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003064:	f101 060b 	add.w	r6, r1, #11
 8003068:	2e16      	cmp	r6, #22
 800306a:	b083      	sub	sp, #12
 800306c:	4604      	mov	r4, r0
 800306e:	d824      	bhi.n	80030ba <_malloc_r+0x5a>
 8003070:	2910      	cmp	r1, #16
 8003072:	f200 80ba 	bhi.w	80031ea <_malloc_r+0x18a>
 8003076:	f000 faa3 	bl	80035c0 <__malloc_lock>
 800307a:	2610      	movs	r6, #16
 800307c:	2218      	movs	r2, #24
 800307e:	2002      	movs	r0, #2
 8003080:	4fb5      	ldr	r7, [pc, #724]	; (8003358 <_malloc_r+0x2f8>)
 8003082:	443a      	add	r2, r7
 8003084:	f1a2 0108 	sub.w	r1, r2, #8
 8003088:	6853      	ldr	r3, [r2, #4]
 800308a:	428b      	cmp	r3, r1
 800308c:	f000 80ba 	beq.w	8003204 <_malloc_r+0x1a4>
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	68d9      	ldr	r1, [r3, #12]
 8003094:	f022 0203 	bic.w	r2, r2, #3
 8003098:	441a      	add	r2, r3
 800309a:	689d      	ldr	r5, [r3, #8]
 800309c:	60e9      	str	r1, [r5, #12]
 800309e:	608d      	str	r5, [r1, #8]
 80030a0:	6851      	ldr	r1, [r2, #4]
 80030a2:	f041 0101 	orr.w	r1, r1, #1
 80030a6:	4620      	mov	r0, r4
 80030a8:	6051      	str	r1, [r2, #4]
 80030aa:	f103 0508 	add.w	r5, r3, #8
 80030ae:	f000 fa8d 	bl	80035cc <__malloc_unlock>
 80030b2:	4628      	mov	r0, r5
 80030b4:	b003      	add	sp, #12
 80030b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ba:	f036 0607 	bics.w	r6, r6, #7
 80030be:	f100 8094 	bmi.w	80031ea <_malloc_r+0x18a>
 80030c2:	42b1      	cmp	r1, r6
 80030c4:	f200 8091 	bhi.w	80031ea <_malloc_r+0x18a>
 80030c8:	f000 fa7a 	bl	80035c0 <__malloc_lock>
 80030cc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 80030d0:	f0c0 819a 	bcc.w	8003408 <_malloc_r+0x3a8>
 80030d4:	0a73      	lsrs	r3, r6, #9
 80030d6:	f000 808f 	beq.w	80031f8 <_malloc_r+0x198>
 80030da:	2b04      	cmp	r3, #4
 80030dc:	f200 816f 	bhi.w	80033be <_malloc_r+0x35e>
 80030e0:	09b3      	lsrs	r3, r6, #6
 80030e2:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80030e6:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 80030ea:	00c3      	lsls	r3, r0, #3
 80030ec:	4f9a      	ldr	r7, [pc, #616]	; (8003358 <_malloc_r+0x2f8>)
 80030ee:	443b      	add	r3, r7
 80030f0:	f1a3 0508 	sub.w	r5, r3, #8
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	429d      	cmp	r5, r3
 80030f8:	d106      	bne.n	8003108 <_malloc_r+0xa8>
 80030fa:	e00c      	b.n	8003116 <_malloc_r+0xb6>
 80030fc:	2900      	cmp	r1, #0
 80030fe:	f280 8127 	bge.w	8003350 <_malloc_r+0x2f0>
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	429d      	cmp	r5, r3
 8003106:	d006      	beq.n	8003116 <_malloc_r+0xb6>
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	f022 0203 	bic.w	r2, r2, #3
 800310e:	1b91      	subs	r1, r2, r6
 8003110:	290f      	cmp	r1, #15
 8003112:	ddf3      	ble.n	80030fc <_malloc_r+0x9c>
 8003114:	4660      	mov	r0, ip
 8003116:	693d      	ldr	r5, [r7, #16]
 8003118:	f8df c240 	ldr.w	ip, [pc, #576]	; 800335c <_malloc_r+0x2fc>
 800311c:	4565      	cmp	r5, ip
 800311e:	d07c      	beq.n	800321a <_malloc_r+0x1ba>
 8003120:	686a      	ldr	r2, [r5, #4]
 8003122:	f022 0203 	bic.w	r2, r2, #3
 8003126:	1b93      	subs	r3, r2, r6
 8003128:	2b0f      	cmp	r3, #15
 800312a:	f300 817b 	bgt.w	8003424 <_malloc_r+0x3c4>
 800312e:	2b00      	cmp	r3, #0
 8003130:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8003134:	f280 816c 	bge.w	8003410 <_malloc_r+0x3b0>
 8003138:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800313c:	f080 811a 	bcs.w	8003374 <_malloc_r+0x314>
 8003140:	08d3      	lsrs	r3, r2, #3
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	3301      	adds	r3, #1
 8003146:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800314a:	2201      	movs	r2, #1
 800314c:	fa02 f20e 	lsl.w	r2, r2, lr
 8003150:	430a      	orrs	r2, r1
 8003152:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 8003156:	f8c5 e008 	str.w	lr, [r5, #8]
 800315a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 800315e:	3908      	subs	r1, #8
 8003160:	60e9      	str	r1, [r5, #12]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8003168:	f8ce 500c 	str.w	r5, [lr, #12]
 800316c:	1083      	asrs	r3, r0, #2
 800316e:	2101      	movs	r1, #1
 8003170:	4099      	lsls	r1, r3
 8003172:	4291      	cmp	r1, r2
 8003174:	d857      	bhi.n	8003226 <_malloc_r+0x1c6>
 8003176:	4211      	tst	r1, r2
 8003178:	d106      	bne.n	8003188 <_malloc_r+0x128>
 800317a:	f020 0003 	bic.w	r0, r0, #3
 800317e:	0049      	lsls	r1, r1, #1
 8003180:	4211      	tst	r1, r2
 8003182:	f100 0004 	add.w	r0, r0, #4
 8003186:	d0fa      	beq.n	800317e <_malloc_r+0x11e>
 8003188:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 800318c:	464d      	mov	r5, r9
 800318e:	4686      	mov	lr, r0
 8003190:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8003194:	4545      	cmp	r5, r8
 8003196:	d108      	bne.n	80031aa <_malloc_r+0x14a>
 8003198:	e11d      	b.n	80033d6 <_malloc_r+0x376>
 800319a:	2b00      	cmp	r3, #0
 800319c:	f280 8124 	bge.w	80033e8 <_malloc_r+0x388>
 80031a0:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80031a4:	4545      	cmp	r5, r8
 80031a6:	f000 8116 	beq.w	80033d6 <_malloc_r+0x376>
 80031aa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80031ae:	f022 0203 	bic.w	r2, r2, #3
 80031b2:	1b93      	subs	r3, r2, r6
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	ddf0      	ble.n	800319a <_malloc_r+0x13a>
 80031b8:	4620      	mov	r0, r4
 80031ba:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 80031be:	eb08 0106 	add.w	r1, r8, r6
 80031c2:	f046 0601 	orr.w	r6, r6, #1
 80031c6:	f8c8 6004 	str.w	r6, [r8, #4]
 80031ca:	60ec      	str	r4, [r5, #12]
 80031cc:	60a5      	str	r5, [r4, #8]
 80031ce:	f043 0401 	orr.w	r4, r3, #1
 80031d2:	e9c7 1104 	strd	r1, r1, [r7, #16]
 80031d6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 80031da:	604c      	str	r4, [r1, #4]
 80031dc:	f848 3002 	str.w	r3, [r8, r2]
 80031e0:	f000 f9f4 	bl	80035cc <__malloc_unlock>
 80031e4:	f108 0508 	add.w	r5, r8, #8
 80031e8:	e002      	b.n	80031f0 <_malloc_r+0x190>
 80031ea:	230c      	movs	r3, #12
 80031ec:	6023      	str	r3, [r4, #0]
 80031ee:	2500      	movs	r5, #0
 80031f0:	4628      	mov	r0, r5
 80031f2:	b003      	add	sp, #12
 80031f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031fc:	2040      	movs	r0, #64	; 0x40
 80031fe:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8003202:	e773      	b.n	80030ec <_malloc_r+0x8c>
 8003204:	68d3      	ldr	r3, [r2, #12]
 8003206:	429a      	cmp	r2, r3
 8003208:	bf08      	it	eq
 800320a:	3002      	addeq	r0, #2
 800320c:	f47f af40 	bne.w	8003090 <_malloc_r+0x30>
 8003210:	693d      	ldr	r5, [r7, #16]
 8003212:	f8df c148 	ldr.w	ip, [pc, #328]	; 800335c <_malloc_r+0x2fc>
 8003216:	4565      	cmp	r5, ip
 8003218:	d182      	bne.n	8003120 <_malloc_r+0xc0>
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	1083      	asrs	r3, r0, #2
 800321e:	2101      	movs	r1, #1
 8003220:	4099      	lsls	r1, r3
 8003222:	4291      	cmp	r1, r2
 8003224:	d9a7      	bls.n	8003176 <_malloc_r+0x116>
 8003226:	68bd      	ldr	r5, [r7, #8]
 8003228:	686b      	ldr	r3, [r5, #4]
 800322a:	f023 0903 	bic.w	r9, r3, #3
 800322e:	454e      	cmp	r6, r9
 8003230:	d803      	bhi.n	800323a <_malloc_r+0x1da>
 8003232:	eba9 0306 	sub.w	r3, r9, r6
 8003236:	2b0f      	cmp	r3, #15
 8003238:	dc7a      	bgt.n	8003330 <_malloc_r+0x2d0>
 800323a:	f8df b124 	ldr.w	fp, [pc, #292]	; 8003360 <_malloc_r+0x300>
 800323e:	4b49      	ldr	r3, [pc, #292]	; (8003364 <_malloc_r+0x304>)
 8003240:	f8db 2000 	ldr.w	r2, [fp]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3201      	adds	r2, #1
 8003248:	4433      	add	r3, r6
 800324a:	eb05 0a09 	add.w	sl, r5, r9
 800324e:	f000 8133 	beq.w	80034b8 <_malloc_r+0x458>
 8003252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003256:	330f      	adds	r3, #15
 8003258:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
 800325c:	f028 080f 	bic.w	r8, r8, #15
 8003260:	4641      	mov	r1, r8
 8003262:	4620      	mov	r0, r4
 8003264:	f000 f9b8 	bl	80035d8 <_sbrk_r>
 8003268:	1c41      	adds	r1, r0, #1
 800326a:	4602      	mov	r2, r0
 800326c:	f000 80f3 	beq.w	8003456 <_malloc_r+0x3f6>
 8003270:	4582      	cmp	sl, r0
 8003272:	f200 80ee 	bhi.w	8003452 <_malloc_r+0x3f2>
 8003276:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <_malloc_r+0x308>)
 8003278:	6819      	ldr	r1, [r3, #0]
 800327a:	4441      	add	r1, r8
 800327c:	6019      	str	r1, [r3, #0]
 800327e:	4608      	mov	r0, r1
 8003280:	f000 814e 	beq.w	8003520 <_malloc_r+0x4c0>
 8003284:	f8db 1000 	ldr.w	r1, [fp]
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	3101      	adds	r1, #1
 800328c:	bf1b      	ittet	ne
 800328e:	eba2 0a0a 	subne.w	sl, r2, sl
 8003292:	4450      	addne	r0, sl
 8003294:	f8cb 2000 	streq.w	r2, [fp]
 8003298:	6018      	strne	r0, [r3, #0]
 800329a:	f012 0b07 	ands.w	fp, r2, #7
 800329e:	f000 8117 	beq.w	80034d0 <_malloc_r+0x470>
 80032a2:	f1cb 0108 	rsb	r1, fp, #8
 80032a6:	440a      	add	r2, r1
 80032a8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
 80032ac:	4490      	add	r8, r2
 80032ae:	3108      	adds	r1, #8
 80032b0:	eba1 0108 	sub.w	r1, r1, r8
 80032b4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80032b8:	4651      	mov	r1, sl
 80032ba:	4620      	mov	r0, r4
 80032bc:	9200      	str	r2, [sp, #0]
 80032be:	f000 f98b 	bl	80035d8 <_sbrk_r>
 80032c2:	1c42      	adds	r2, r0, #1
 80032c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80032c8:	f000 814f 	beq.w	800356a <_malloc_r+0x50a>
 80032cc:	1a80      	subs	r0, r0, r2
 80032ce:	eb00 080a 	add.w	r8, r0, sl
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	60ba      	str	r2, [r7, #8]
 80032d6:	f048 0001 	orr.w	r0, r8, #1
 80032da:	4451      	add	r1, sl
 80032dc:	42bd      	cmp	r5, r7
 80032de:	6050      	str	r0, [r2, #4]
 80032e0:	6019      	str	r1, [r3, #0]
 80032e2:	f000 8129 	beq.w	8003538 <_malloc_r+0x4d8>
 80032e6:	f1b9 0f0f 	cmp.w	r9, #15
 80032ea:	f240 8127 	bls.w	800353c <_malloc_r+0x4dc>
 80032ee:	6868      	ldr	r0, [r5, #4]
 80032f0:	f1a9 0c0c 	sub.w	ip, r9, #12
 80032f4:	f02c 0c07 	bic.w	ip, ip, #7
 80032f8:	f000 0001 	and.w	r0, r0, #1
 80032fc:	ea40 000c 	orr.w	r0, r0, ip
 8003300:	6068      	str	r0, [r5, #4]
 8003302:	f04f 0e05 	mov.w	lr, #5
 8003306:	eb05 000c 	add.w	r0, r5, ip
 800330a:	f1bc 0f0f 	cmp.w	ip, #15
 800330e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
 8003312:	f200 8132 	bhi.w	800357a <_malloc_r+0x51a>
 8003316:	6850      	ldr	r0, [r2, #4]
 8003318:	4615      	mov	r5, r2
 800331a:	4b14      	ldr	r3, [pc, #80]	; (800336c <_malloc_r+0x30c>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	428a      	cmp	r2, r1
 8003320:	bf38      	it	cc
 8003322:	6019      	strcc	r1, [r3, #0]
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <_malloc_r+0x310>)
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	428a      	cmp	r2, r1
 800332a:	bf38      	it	cc
 800332c:	6019      	strcc	r1, [r3, #0]
 800332e:	e094      	b.n	800345a <_malloc_r+0x3fa>
 8003330:	19aa      	adds	r2, r5, r6
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	f046 0601 	orr.w	r6, r6, #1
 800333a:	606e      	str	r6, [r5, #4]
 800333c:	4620      	mov	r0, r4
 800333e:	60ba      	str	r2, [r7, #8]
 8003340:	6053      	str	r3, [r2, #4]
 8003342:	f000 f943 	bl	80035cc <__malloc_unlock>
 8003346:	3508      	adds	r5, #8
 8003348:	4628      	mov	r0, r5
 800334a:	b003      	add	sp, #12
 800334c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003350:	68d9      	ldr	r1, [r3, #12]
 8003352:	441a      	add	r2, r3
 8003354:	e6a1      	b.n	800309a <_malloc_r+0x3a>
 8003356:	bf00      	nop
 8003358:	200004d0 	.word	0x200004d0
 800335c:	200004d8 	.word	0x200004d8
 8003360:	200008d8 	.word	0x200008d8
 8003364:	200009a4 	.word	0x200009a4
 8003368:	20000974 	.word	0x20000974
 800336c:	2000099c 	.word	0x2000099c
 8003370:	200009a0 	.word	0x200009a0
 8003374:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 8003378:	ea4f 2352 	mov.w	r3, r2, lsr #9
 800337c:	d363      	bcc.n	8003446 <_malloc_r+0x3e6>
 800337e:	2b14      	cmp	r3, #20
 8003380:	f200 80b7 	bhi.w	80034f2 <_malloc_r+0x492>
 8003384:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003388:	00c9      	lsls	r1, r1, #3
 800338a:	335b      	adds	r3, #91	; 0x5b
 800338c:	eb07 0e01 	add.w	lr, r7, r1
 8003390:	5879      	ldr	r1, [r7, r1]
 8003392:	f1ae 0e08 	sub.w	lr, lr, #8
 8003396:	458e      	cmp	lr, r1
 8003398:	f000 8091 	beq.w	80034be <_malloc_r+0x45e>
 800339c:	684b      	ldr	r3, [r1, #4]
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d902      	bls.n	80033ac <_malloc_r+0x34c>
 80033a6:	6889      	ldr	r1, [r1, #8]
 80033a8:	458e      	cmp	lr, r1
 80033aa:	d1f7      	bne.n	800339c <_malloc_r+0x33c>
 80033ac:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 80033b6:	f8ce 5008 	str.w	r5, [lr, #8]
 80033ba:	60cd      	str	r5, [r1, #12]
 80033bc:	e6d6      	b.n	800316c <_malloc_r+0x10c>
 80033be:	2b14      	cmp	r3, #20
 80033c0:	d959      	bls.n	8003476 <_malloc_r+0x416>
 80033c2:	2b54      	cmp	r3, #84	; 0x54
 80033c4:	f200 809d 	bhi.w	8003502 <_malloc_r+0x4a2>
 80033c8:	0b33      	lsrs	r3, r6, #12
 80033ca:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 80033ce:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 80033d2:	00c3      	lsls	r3, r0, #3
 80033d4:	e68a      	b.n	80030ec <_malloc_r+0x8c>
 80033d6:	f10e 0e01 	add.w	lr, lr, #1
 80033da:	f01e 0f03 	tst.w	lr, #3
 80033de:	f105 0508 	add.w	r5, r5, #8
 80033e2:	f47f aed5 	bne.w	8003190 <_malloc_r+0x130>
 80033e6:	e051      	b.n	800348c <_malloc_r+0x42c>
 80033e8:	4442      	add	r2, r8
 80033ea:	4645      	mov	r5, r8
 80033ec:	6853      	ldr	r3, [r2, #4]
 80033ee:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6053      	str	r3, [r2, #4]
 80033f8:	f855 3f08 	ldr.w	r3, [r5, #8]!
 80033fc:	4620      	mov	r0, r4
 80033fe:	60d9      	str	r1, [r3, #12]
 8003400:	608b      	str	r3, [r1, #8]
 8003402:	f000 f8e3 	bl	80035cc <__malloc_unlock>
 8003406:	e6f3      	b.n	80031f0 <_malloc_r+0x190>
 8003408:	08f0      	lsrs	r0, r6, #3
 800340a:	f106 0208 	add.w	r2, r6, #8
 800340e:	e637      	b.n	8003080 <_malloc_r+0x20>
 8003410:	442a      	add	r2, r5
 8003412:	4620      	mov	r0, r4
 8003414:	6853      	ldr	r3, [r2, #4]
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6053      	str	r3, [r2, #4]
 800341c:	3508      	adds	r5, #8
 800341e:	f000 f8d5 	bl	80035cc <__malloc_unlock>
 8003422:	e6e5      	b.n	80031f0 <_malloc_r+0x190>
 8003424:	19a9      	adds	r1, r5, r6
 8003426:	4620      	mov	r0, r4
 8003428:	f046 0601 	orr.w	r6, r6, #1
 800342c:	f043 0401 	orr.w	r4, r3, #1
 8003430:	606e      	str	r6, [r5, #4]
 8003432:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8003436:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800343a:	604c      	str	r4, [r1, #4]
 800343c:	50ab      	str	r3, [r5, r2]
 800343e:	f000 f8c5 	bl	80035cc <__malloc_unlock>
 8003442:	3508      	adds	r5, #8
 8003444:	e6d4      	b.n	80031f0 <_malloc_r+0x190>
 8003446:	0993      	lsrs	r3, r2, #6
 8003448:	f103 0139 	add.w	r1, r3, #57	; 0x39
 800344c:	00c9      	lsls	r1, r1, #3
 800344e:	3338      	adds	r3, #56	; 0x38
 8003450:	e79c      	b.n	800338c <_malloc_r+0x32c>
 8003452:	42bd      	cmp	r5, r7
 8003454:	d05f      	beq.n	8003516 <_malloc_r+0x4b6>
 8003456:	68bd      	ldr	r5, [r7, #8]
 8003458:	6868      	ldr	r0, [r5, #4]
 800345a:	f020 0803 	bic.w	r8, r0, #3
 800345e:	4546      	cmp	r6, r8
 8003460:	eba8 0306 	sub.w	r3, r8, r6
 8003464:	d802      	bhi.n	800346c <_malloc_r+0x40c>
 8003466:	2b0f      	cmp	r3, #15
 8003468:	f73f af62 	bgt.w	8003330 <_malloc_r+0x2d0>
 800346c:	4620      	mov	r0, r4
 800346e:	f000 f8ad 	bl	80035cc <__malloc_unlock>
 8003472:	2500      	movs	r5, #0
 8003474:	e6bc      	b.n	80031f0 <_malloc_r+0x190>
 8003476:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800347a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 800347e:	00c3      	lsls	r3, r0, #3
 8003480:	e634      	b.n	80030ec <_malloc_r+0x8c>
 8003482:	f859 3908 	ldr.w	r3, [r9], #-8
 8003486:	454b      	cmp	r3, r9
 8003488:	f040 8096 	bne.w	80035b8 <_malloc_r+0x558>
 800348c:	f010 0f03 	tst.w	r0, #3
 8003490:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8003494:	d1f5      	bne.n	8003482 <_malloc_r+0x422>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	ea23 0301 	bic.w	r3, r3, r1
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	0049      	lsls	r1, r1, #1
 80034a0:	4299      	cmp	r1, r3
 80034a2:	f63f aec0 	bhi.w	8003226 <_malloc_r+0x1c6>
 80034a6:	b919      	cbnz	r1, 80034b0 <_malloc_r+0x450>
 80034a8:	e6bd      	b.n	8003226 <_malloc_r+0x1c6>
 80034aa:	0049      	lsls	r1, r1, #1
 80034ac:	f10e 0e04 	add.w	lr, lr, #4
 80034b0:	4219      	tst	r1, r3
 80034b2:	d0fa      	beq.n	80034aa <_malloc_r+0x44a>
 80034b4:	4670      	mov	r0, lr
 80034b6:	e667      	b.n	8003188 <_malloc_r+0x128>
 80034b8:	f103 0810 	add.w	r8, r3, #16
 80034bc:	e6d0      	b.n	8003260 <_malloc_r+0x200>
 80034be:	109a      	asrs	r2, r3, #2
 80034c0:	f04f 0801 	mov.w	r8, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	fa08 f202 	lsl.w	r2, r8, r2
 80034ca:	431a      	orrs	r2, r3
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	e770      	b.n	80033b2 <_malloc_r+0x352>
 80034d0:	eb02 0108 	add.w	r1, r2, r8
 80034d4:	4249      	negs	r1, r1
 80034d6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80034da:	4651      	mov	r1, sl
 80034dc:	4620      	mov	r0, r4
 80034de:	9200      	str	r2, [sp, #0]
 80034e0:	f000 f87a 	bl	80035d8 <_sbrk_r>
 80034e4:	1c43      	adds	r3, r0, #1
 80034e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034ea:	f47f aeef 	bne.w	80032cc <_malloc_r+0x26c>
 80034ee:	46da      	mov	sl, fp
 80034f0:	e6ef      	b.n	80032d2 <_malloc_r+0x272>
 80034f2:	2b54      	cmp	r3, #84	; 0x54
 80034f4:	d825      	bhi.n	8003542 <_malloc_r+0x4e2>
 80034f6:	0b13      	lsrs	r3, r2, #12
 80034f8:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 80034fc:	00c9      	lsls	r1, r1, #3
 80034fe:	336e      	adds	r3, #110	; 0x6e
 8003500:	e744      	b.n	800338c <_malloc_r+0x32c>
 8003502:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003506:	d825      	bhi.n	8003554 <_malloc_r+0x4f4>
 8003508:	0bf3      	lsrs	r3, r6, #15
 800350a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800350e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8003512:	00c3      	lsls	r3, r0, #3
 8003514:	e5ea      	b.n	80030ec <_malloc_r+0x8c>
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <_malloc_r+0x55c>)
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	4440      	add	r0, r8
 800351c:	6018      	str	r0, [r3, #0]
 800351e:	e6b1      	b.n	8003284 <_malloc_r+0x224>
 8003520:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 8003524:	f1bc 0f00 	cmp.w	ip, #0
 8003528:	f47f aeac 	bne.w	8003284 <_malloc_r+0x224>
 800352c:	68bd      	ldr	r5, [r7, #8]
 800352e:	44c8      	add	r8, r9
 8003530:	f048 0001 	orr.w	r0, r8, #1
 8003534:	6068      	str	r0, [r5, #4]
 8003536:	e6f0      	b.n	800331a <_malloc_r+0x2ba>
 8003538:	4615      	mov	r5, r2
 800353a:	e6ee      	b.n	800331a <_malloc_r+0x2ba>
 800353c:	2301      	movs	r3, #1
 800353e:	6053      	str	r3, [r2, #4]
 8003540:	e794      	b.n	800346c <_malloc_r+0x40c>
 8003542:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003546:	d823      	bhi.n	8003590 <_malloc_r+0x530>
 8003548:	0bd3      	lsrs	r3, r2, #15
 800354a:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800354e:	00c9      	lsls	r1, r1, #3
 8003550:	3377      	adds	r3, #119	; 0x77
 8003552:	e71b      	b.n	800338c <_malloc_r+0x32c>
 8003554:	f240 5254 	movw	r2, #1364	; 0x554
 8003558:	4293      	cmp	r3, r2
 800355a:	d823      	bhi.n	80035a4 <_malloc_r+0x544>
 800355c:	0cb3      	lsrs	r3, r6, #18
 800355e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8003562:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8003566:	00c3      	lsls	r3, r0, #3
 8003568:	e5c0      	b.n	80030ec <_malloc_r+0x8c>
 800356a:	f1ab 0b08 	sub.w	fp, fp, #8
 800356e:	44d8      	add	r8, fp
 8003570:	eba8 0802 	sub.w	r8, r8, r2
 8003574:	f04f 0a00 	mov.w	sl, #0
 8003578:	e6ab      	b.n	80032d2 <_malloc_r+0x272>
 800357a:	f105 0108 	add.w	r1, r5, #8
 800357e:	4620      	mov	r0, r4
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	f000 f97b 	bl	800387c <_free_r>
 8003586:	68bd      	ldr	r5, [r7, #8]
 8003588:	9b00      	ldr	r3, [sp, #0]
 800358a:	6868      	ldr	r0, [r5, #4]
 800358c:	6819      	ldr	r1, [r3, #0]
 800358e:	e6c4      	b.n	800331a <_malloc_r+0x2ba>
 8003590:	f240 5154 	movw	r1, #1364	; 0x554
 8003594:	428b      	cmp	r3, r1
 8003596:	d80b      	bhi.n	80035b0 <_malloc_r+0x550>
 8003598:	0c93      	lsrs	r3, r2, #18
 800359a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 800359e:	00c9      	lsls	r1, r1, #3
 80035a0:	337c      	adds	r3, #124	; 0x7c
 80035a2:	e6f3      	b.n	800338c <_malloc_r+0x32c>
 80035a4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80035a8:	207f      	movs	r0, #127	; 0x7f
 80035aa:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80035ae:	e59d      	b.n	80030ec <_malloc_r+0x8c>
 80035b0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80035b4:	237e      	movs	r3, #126	; 0x7e
 80035b6:	e6e9      	b.n	800338c <_malloc_r+0x32c>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	e770      	b.n	800349e <_malloc_r+0x43e>
 80035bc:	20000974 	.word	0x20000974

080035c0 <__malloc_lock>:
 80035c0:	4801      	ldr	r0, [pc, #4]	; (80035c8 <__malloc_lock+0x8>)
 80035c2:	f000 ba6b 	b.w	8003a9c <__retarget_lock_acquire_recursive>
 80035c6:	bf00      	nop
 80035c8:	200009bc 	.word	0x200009bc

080035cc <__malloc_unlock>:
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <__malloc_unlock+0x8>)
 80035ce:	f000 ba6d 	b.w	8003aac <__retarget_lock_release_recursive>
 80035d2:	bf00      	nop
 80035d4:	200009bc 	.word	0x200009bc

080035d8 <_sbrk_r>:
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	4d07      	ldr	r5, [pc, #28]	; (80035f8 <_sbrk_r+0x20>)
 80035dc:	2200      	movs	r2, #0
 80035de:	4604      	mov	r4, r0
 80035e0:	4608      	mov	r0, r1
 80035e2:	602a      	str	r2, [r5, #0]
 80035e4:	f7ff fcc6 	bl	8002f74 <_sbrk>
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	d000      	beq.n	80035ee <_sbrk_r+0x16>
 80035ec:	bd38      	pop	{r3, r4, r5, pc}
 80035ee:	682b      	ldr	r3, [r5, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0fb      	beq.n	80035ec <_sbrk_r+0x14>
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	200009cc 	.word	0x200009cc

080035fc <strcat>:
 80035fc:	0783      	lsls	r3, r0, #30
 80035fe:	b510      	push	{r4, lr}
 8003600:	4604      	mov	r4, r0
 8003602:	d110      	bne.n	8003626 <strcat+0x2a>
 8003604:	6802      	ldr	r2, [r0, #0]
 8003606:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800360a:	ea23 0302 	bic.w	r3, r3, r2
 800360e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8003612:	d108      	bne.n	8003626 <strcat+0x2a>
 8003614:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8003618:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
 800361c:	ea23 0302 	bic.w	r3, r3, r2
 8003620:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 8003624:	d0f6      	beq.n	8003614 <strcat+0x18>
 8003626:	7803      	ldrb	r3, [r0, #0]
 8003628:	b11b      	cbz	r3, 8003632 <strcat+0x36>
 800362a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1fb      	bne.n	800362a <strcat+0x2e>
 8003632:	f000 f803 	bl	800363c <strcpy>
 8003636:	4620      	mov	r0, r4
 8003638:	bd10      	pop	{r4, pc}
 800363a:	bf00      	nop

0800363c <strcpy>:
 800363c:	ea80 0201 	eor.w	r2, r0, r1
 8003640:	4684      	mov	ip, r0
 8003642:	f012 0f03 	tst.w	r2, #3
 8003646:	d14f      	bne.n	80036e8 <strcpy+0xac>
 8003648:	f011 0f03 	tst.w	r1, #3
 800364c:	d132      	bne.n	80036b4 <strcpy+0x78>
 800364e:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8003652:	f011 0f04 	tst.w	r1, #4
 8003656:	f851 3b04 	ldr.w	r3, [r1], #4
 800365a:	d00b      	beq.n	8003674 <strcpy+0x38>
 800365c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8003660:	439a      	bics	r2, r3
 8003662:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8003666:	bf04      	itt	eq
 8003668:	f84c 3b04 	streq.w	r3, [ip], #4
 800366c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003670:	d116      	bne.n	80036a0 <strcpy+0x64>
 8003672:	bf00      	nop
 8003674:	f851 4b04 	ldr.w	r4, [r1], #4
 8003678:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800367c:	439a      	bics	r2, r3
 800367e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8003682:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8003686:	d10b      	bne.n	80036a0 <strcpy+0x64>
 8003688:	f84c 3b04 	str.w	r3, [ip], #4
 800368c:	43a2      	bics	r2, r4
 800368e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8003692:	bf04      	itt	eq
 8003694:	f851 3b04 	ldreq.w	r3, [r1], #4
 8003698:	f84c 4b04 	streq.w	r4, [ip], #4
 800369c:	d0ea      	beq.n	8003674 <strcpy+0x38>
 800369e:	4623      	mov	r3, r4
 80036a0:	f80c 3b01 	strb.w	r3, [ip], #1
 80036a4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80036a8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80036ac:	d1f8      	bne.n	80036a0 <strcpy+0x64>
 80036ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	f011 0f01 	tst.w	r1, #1
 80036b8:	d006      	beq.n	80036c8 <strcpy+0x8c>
 80036ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036be:	f80c 2b01 	strb.w	r2, [ip], #1
 80036c2:	2a00      	cmp	r2, #0
 80036c4:	bf08      	it	eq
 80036c6:	4770      	bxeq	lr
 80036c8:	f011 0f02 	tst.w	r1, #2
 80036cc:	d0bf      	beq.n	800364e <strcpy+0x12>
 80036ce:	f831 2b02 	ldrh.w	r2, [r1], #2
 80036d2:	f012 0fff 	tst.w	r2, #255	; 0xff
 80036d6:	bf16      	itet	ne
 80036d8:	f82c 2b02 	strhne.w	r2, [ip], #2
 80036dc:	f88c 2000 	strbeq.w	r2, [ip]
 80036e0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 80036e4:	d1b3      	bne.n	800364e <strcpy+0x12>
 80036e6:	4770      	bx	lr
 80036e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036ec:	f80c 2b01 	strb.w	r2, [ip], #1
 80036f0:	2a00      	cmp	r2, #0
 80036f2:	d1f9      	bne.n	80036e8 <strcpy+0xac>
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
	...

08003700 <strlen>:
 8003700:	f890 f000 	pld	[r0]
 8003704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8003708:	f020 0107 	bic.w	r1, r0, #7
 800370c:	f06f 0c00 	mvn.w	ip, #0
 8003710:	f010 0407 	ands.w	r4, r0, #7
 8003714:	f891 f020 	pld	[r1, #32]
 8003718:	f040 8049 	bne.w	80037ae <strlen+0xae>
 800371c:	f04f 0400 	mov.w	r4, #0
 8003720:	f06f 0007 	mvn.w	r0, #7
 8003724:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003728:	f891 f040 	pld	[r1, #64]	; 0x40
 800372c:	f100 0008 	add.w	r0, r0, #8
 8003730:	fa82 f24c 	uadd8	r2, r2, ip
 8003734:	faa4 f28c 	sel	r2, r4, ip
 8003738:	fa83 f34c 	uadd8	r3, r3, ip
 800373c:	faa2 f38c 	sel	r3, r2, ip
 8003740:	bb4b      	cbnz	r3, 8003796 <strlen+0x96>
 8003742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8003746:	fa82 f24c 	uadd8	r2, r2, ip
 800374a:	f100 0008 	add.w	r0, r0, #8
 800374e:	faa4 f28c 	sel	r2, r4, ip
 8003752:	fa83 f34c 	uadd8	r3, r3, ip
 8003756:	faa2 f38c 	sel	r3, r2, ip
 800375a:	b9e3      	cbnz	r3, 8003796 <strlen+0x96>
 800375c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8003760:	fa82 f24c 	uadd8	r2, r2, ip
 8003764:	f100 0008 	add.w	r0, r0, #8
 8003768:	faa4 f28c 	sel	r2, r4, ip
 800376c:	fa83 f34c 	uadd8	r3, r3, ip
 8003770:	faa2 f38c 	sel	r3, r2, ip
 8003774:	b97b      	cbnz	r3, 8003796 <strlen+0x96>
 8003776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800377a:	f101 0120 	add.w	r1, r1, #32
 800377e:	fa82 f24c 	uadd8	r2, r2, ip
 8003782:	f100 0008 	add.w	r0, r0, #8
 8003786:	faa4 f28c 	sel	r2, r4, ip
 800378a:	fa83 f34c 	uadd8	r3, r3, ip
 800378e:	faa2 f38c 	sel	r3, r2, ip
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0c6      	beq.n	8003724 <strlen+0x24>
 8003796:	2a00      	cmp	r2, #0
 8003798:	bf04      	itt	eq
 800379a:	3004      	addeq	r0, #4
 800379c:	461a      	moveq	r2, r3
 800379e:	ba12      	rev	r2, r2
 80037a0:	fab2 f282 	clz	r2, r2
 80037a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80037a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80037ac:	4770      	bx	lr
 80037ae:	e9d1 2300 	ldrd	r2, r3, [r1]
 80037b2:	f004 0503 	and.w	r5, r4, #3
 80037b6:	f1c4 0000 	rsb	r0, r4, #0
 80037ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80037be:	f014 0f04 	tst.w	r4, #4
 80037c2:	f891 f040 	pld	[r1, #64]	; 0x40
 80037c6:	fa0c f505 	lsl.w	r5, ip, r5
 80037ca:	ea62 0205 	orn	r2, r2, r5
 80037ce:	bf1c      	itt	ne
 80037d0:	ea63 0305 	ornne	r3, r3, r5
 80037d4:	4662      	movne	r2, ip
 80037d6:	f04f 0400 	mov.w	r4, #0
 80037da:	e7a9      	b.n	8003730 <strlen+0x30>

080037dc <_malloc_trim_r>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	4f24      	ldr	r7, [pc, #144]	; (8003870 <_malloc_trim_r+0x94>)
 80037e0:	460c      	mov	r4, r1
 80037e2:	4606      	mov	r6, r0
 80037e4:	f7ff feec 	bl	80035c0 <__malloc_lock>
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	6855      	ldr	r5, [r2, #4]
 80037ec:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 80037f0:	330f      	adds	r3, #15
 80037f2:	f025 0503 	bic.w	r5, r5, #3
 80037f6:	442b      	add	r3, r5
 80037f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80037fc:	f023 030f 	bic.w	r3, r3, #15
 8003800:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 8003804:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003808:	db07      	blt.n	800381a <_malloc_trim_r+0x3e>
 800380a:	2100      	movs	r1, #0
 800380c:	4630      	mov	r0, r6
 800380e:	f7ff fee3 	bl	80035d8 <_sbrk_r>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	442b      	add	r3, r5
 8003816:	4298      	cmp	r0, r3
 8003818:	d004      	beq.n	8003824 <_malloc_trim_r+0x48>
 800381a:	4630      	mov	r0, r6
 800381c:	f7ff fed6 	bl	80035cc <__malloc_unlock>
 8003820:	2000      	movs	r0, #0
 8003822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003824:	4261      	negs	r1, r4
 8003826:	4630      	mov	r0, r6
 8003828:	f7ff fed6 	bl	80035d8 <_sbrk_r>
 800382c:	3001      	adds	r0, #1
 800382e:	d00d      	beq.n	800384c <_malloc_trim_r+0x70>
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <_malloc_trim_r+0x98>)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1b2d      	subs	r5, r5, r4
 8003836:	f045 0501 	orr.w	r5, r5, #1
 800383a:	605d      	str	r5, [r3, #4]
 800383c:	6813      	ldr	r3, [r2, #0]
 800383e:	4630      	mov	r0, r6
 8003840:	1b1b      	subs	r3, r3, r4
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	f7ff fec2 	bl	80035cc <__malloc_unlock>
 8003848:	2001      	movs	r0, #1
 800384a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800384c:	2100      	movs	r1, #0
 800384e:	4630      	mov	r0, r6
 8003850:	f7ff fec2 	bl	80035d8 <_sbrk_r>
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	1a83      	subs	r3, r0, r2
 8003858:	2b0f      	cmp	r3, #15
 800385a:	ddde      	ble.n	800381a <_malloc_trim_r+0x3e>
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6053      	str	r3, [r2, #4]
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <_malloc_trim_r+0x9c>)
 8003864:	4903      	ldr	r1, [pc, #12]	; (8003874 <_malloc_trim_r+0x98>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	1ac0      	subs	r0, r0, r3
 800386a:	6008      	str	r0, [r1, #0]
 800386c:	e7d5      	b.n	800381a <_malloc_trim_r+0x3e>
 800386e:	bf00      	nop
 8003870:	200004d0 	.word	0x200004d0
 8003874:	20000974 	.word	0x20000974
 8003878:	200008d8 	.word	0x200008d8

0800387c <_free_r>:
 800387c:	2900      	cmp	r1, #0
 800387e:	d061      	beq.n	8003944 <_free_r+0xc8>
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	460c      	mov	r4, r1
 8003884:	4606      	mov	r6, r0
 8003886:	f7ff fe9b 	bl	80035c0 <__malloc_lock>
 800388a:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800388e:	4f7b      	ldr	r7, [pc, #492]	; (8003a7c <_free_r+0x200>)
 8003890:	f1a4 0508 	sub.w	r5, r4, #8
 8003894:	f022 0101 	bic.w	r1, r2, #1
 8003898:	eb05 0c01 	add.w	ip, r5, r1
 800389c:	68b8      	ldr	r0, [r7, #8]
 800389e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80038a2:	4560      	cmp	r0, ip
 80038a4:	f023 0303 	bic.w	r3, r3, #3
 80038a8:	f000 808b 	beq.w	80039c2 <_free_r+0x146>
 80038ac:	07d2      	lsls	r2, r2, #31
 80038ae:	f8cc 3004 	str.w	r3, [ip, #4]
 80038b2:	d432      	bmi.n	800391a <_free_r+0x9e>
 80038b4:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80038b8:	1aad      	subs	r5, r5, r2
 80038ba:	4411      	add	r1, r2
 80038bc:	68aa      	ldr	r2, [r5, #8]
 80038be:	f107 0008 	add.w	r0, r7, #8
 80038c2:	4282      	cmp	r2, r0
 80038c4:	d06a      	beq.n	800399c <_free_r+0x120>
 80038c6:	eb0c 0403 	add.w	r4, ip, r3
 80038ca:	f8d4 e004 	ldr.w	lr, [r4, #4]
 80038ce:	68ec      	ldr	r4, [r5, #12]
 80038d0:	60d4      	str	r4, [r2, #12]
 80038d2:	f01e 0f01 	tst.w	lr, #1
 80038d6:	60a2      	str	r2, [r4, #8]
 80038d8:	f000 8097 	beq.w	8003a0a <_free_r+0x18e>
 80038dc:	f041 0301 	orr.w	r3, r1, #1
 80038e0:	606b      	str	r3, [r5, #4]
 80038e2:	f8cc 1000 	str.w	r1, [ip]
 80038e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80038ea:	d235      	bcs.n	8003958 <_free_r+0xdc>
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	08cb      	lsrs	r3, r1, #3
 80038f0:	0948      	lsrs	r0, r1, #5
 80038f2:	2101      	movs	r1, #1
 80038f4:	3301      	adds	r3, #1
 80038f6:	4081      	lsls	r1, r0
 80038f8:	4311      	orrs	r1, r2
 80038fa:	6079      	str	r1, [r7, #4]
 80038fc:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8003900:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8003904:	3a08      	subs	r2, #8
 8003906:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800390a:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 800390e:	60cd      	str	r5, [r1, #12]
 8003910:	4630      	mov	r0, r6
 8003912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003916:	f7ff be59 	b.w	80035cc <__malloc_unlock>
 800391a:	eb0c 0203 	add.w	r2, ip, r3
 800391e:	6852      	ldr	r2, [r2, #4]
 8003920:	07d0      	lsls	r0, r2, #31
 8003922:	d410      	bmi.n	8003946 <_free_r+0xca>
 8003924:	4419      	add	r1, r3
 8003926:	f107 0008 	add.w	r0, r7, #8
 800392a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800392e:	4283      	cmp	r3, r0
 8003930:	d073      	beq.n	8003a1a <_free_r+0x19e>
 8003932:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	6093      	str	r3, [r2, #8]
 800393a:	f041 0301 	orr.w	r3, r1, #1
 800393e:	606b      	str	r3, [r5, #4]
 8003940:	5069      	str	r1, [r5, r1]
 8003942:	e7d0      	b.n	80038e6 <_free_r+0x6a>
 8003944:	4770      	bx	lr
 8003946:	f041 0301 	orr.w	r3, r1, #1
 800394a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800394e:	f844 3c04 	str.w	r3, [r4, #-4]
 8003952:	f8cc 1000 	str.w	r1, [ip]
 8003956:	d3c9      	bcc.n	80038ec <_free_r+0x70>
 8003958:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 800395c:	ea4f 2351 	mov.w	r3, r1, lsr #9
 8003960:	d248      	bcs.n	80039f4 <_free_r+0x178>
 8003962:	098b      	lsrs	r3, r1, #6
 8003964:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8003968:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800396c:	00c3      	lsls	r3, r0, #3
 800396e:	18f8      	adds	r0, r7, r3
 8003970:	58fb      	ldr	r3, [r7, r3]
 8003972:	3808      	subs	r0, #8
 8003974:	4298      	cmp	r0, r3
 8003976:	d059      	beq.n	8003a2c <_free_r+0x1b0>
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	f022 0203 	bic.w	r2, r2, #3
 800397e:	428a      	cmp	r2, r1
 8003980:	d902      	bls.n	8003988 <_free_r+0x10c>
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4298      	cmp	r0, r3
 8003986:	d1f7      	bne.n	8003978 <_free_r+0xfc>
 8003988:	68d8      	ldr	r0, [r3, #12]
 800398a:	e9c5 3002 	strd	r3, r0, [r5, #8]
 800398e:	6085      	str	r5, [r0, #8]
 8003990:	60dd      	str	r5, [r3, #12]
 8003992:	4630      	mov	r0, r6
 8003994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003998:	f7ff be18 	b.w	80035cc <__malloc_unlock>
 800399c:	eb0c 0203 	add.w	r2, ip, r3
 80039a0:	6852      	ldr	r2, [r2, #4]
 80039a2:	07d2      	lsls	r2, r2, #31
 80039a4:	d463      	bmi.n	8003a6e <_free_r+0x1f2>
 80039a6:	440b      	add	r3, r1
 80039a8:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 80039ac:	60ca      	str	r2, [r1, #12]
 80039ae:	6091      	str	r1, [r2, #8]
 80039b0:	f043 0201 	orr.w	r2, r3, #1
 80039b4:	606a      	str	r2, [r5, #4]
 80039b6:	4630      	mov	r0, r6
 80039b8:	50eb      	str	r3, [r5, r3]
 80039ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039be:	f7ff be05 	b.w	80035cc <__malloc_unlock>
 80039c2:	440b      	add	r3, r1
 80039c4:	07d1      	lsls	r1, r2, #31
 80039c6:	d407      	bmi.n	80039d8 <_free_r+0x15c>
 80039c8:	f854 2c08 	ldr.w	r2, [r4, #-8]
 80039cc:	1aad      	subs	r5, r5, r2
 80039ce:	4413      	add	r3, r2
 80039d0:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 80039d4:	60ca      	str	r2, [r1, #12]
 80039d6:	6091      	str	r1, [r2, #8]
 80039d8:	f043 0201 	orr.w	r2, r3, #1
 80039dc:	606a      	str	r2, [r5, #4]
 80039de:	4a28      	ldr	r2, [pc, #160]	; (8003a80 <_free_r+0x204>)
 80039e0:	60bd      	str	r5, [r7, #8]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d893      	bhi.n	8003910 <_free_r+0x94>
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <_free_r+0x208>)
 80039ea:	4630      	mov	r0, r6
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	f7ff fef5 	bl	80037dc <_malloc_trim_r>
 80039f2:	e78d      	b.n	8003910 <_free_r+0x94>
 80039f4:	2b14      	cmp	r3, #20
 80039f6:	d90a      	bls.n	8003a0e <_free_r+0x192>
 80039f8:	2b54      	cmp	r3, #84	; 0x54
 80039fa:	d81f      	bhi.n	8003a3c <_free_r+0x1c0>
 80039fc:	0b0b      	lsrs	r3, r1, #12
 80039fe:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8003a02:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8003a06:	00c3      	lsls	r3, r0, #3
 8003a08:	e7b1      	b.n	800396e <_free_r+0xf2>
 8003a0a:	4419      	add	r1, r3
 8003a0c:	e78d      	b.n	800392a <_free_r+0xae>
 8003a0e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8003a12:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8003a16:	00c3      	lsls	r3, r0, #3
 8003a18:	e7a9      	b.n	800396e <_free_r+0xf2>
 8003a1a:	f041 0301 	orr.w	r3, r1, #1
 8003a1e:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8003a22:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8003a26:	606b      	str	r3, [r5, #4]
 8003a28:	5069      	str	r1, [r5, r1]
 8003a2a:	e771      	b.n	8003910 <_free_r+0x94>
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	1092      	asrs	r2, r2, #2
 8003a30:	2401      	movs	r4, #1
 8003a32:	fa04 f202 	lsl.w	r2, r4, r2
 8003a36:	430a      	orrs	r2, r1
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	e7a6      	b.n	800398a <_free_r+0x10e>
 8003a3c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003a40:	d806      	bhi.n	8003a50 <_free_r+0x1d4>
 8003a42:	0bcb      	lsrs	r3, r1, #15
 8003a44:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8003a48:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8003a4c:	00c3      	lsls	r3, r0, #3
 8003a4e:	e78e      	b.n	800396e <_free_r+0xf2>
 8003a50:	f240 5254 	movw	r2, #1364	; 0x554
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d806      	bhi.n	8003a66 <_free_r+0x1ea>
 8003a58:	0c8b      	lsrs	r3, r1, #18
 8003a5a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8003a5e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8003a62:	00c3      	lsls	r3, r0, #3
 8003a64:	e783      	b.n	800396e <_free_r+0xf2>
 8003a66:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8003a6a:	227e      	movs	r2, #126	; 0x7e
 8003a6c:	e77f      	b.n	800396e <_free_r+0xf2>
 8003a6e:	f041 0301 	orr.w	r3, r1, #1
 8003a72:	606b      	str	r3, [r5, #4]
 8003a74:	f8cc 1000 	str.w	r1, [ip]
 8003a78:	e74a      	b.n	8003910 <_free_r+0x94>
 8003a7a:	bf00      	nop
 8003a7c:	200004d0 	.word	0x200004d0
 8003a80:	200008dc 	.word	0x200008dc
 8003a84:	200009a4 	.word	0x200009a4

08003a88 <__retarget_lock_init>:
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop

08003a8c <__retarget_lock_init_recursive>:
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop

08003a90 <__retarget_lock_close>:
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop

08003a94 <__retarget_lock_close_recursive>:
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <__retarget_lock_acquire>:
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop

08003a9c <__retarget_lock_acquire_recursive>:
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop

08003aa0 <__retarget_lock_try_acquire>:
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	4770      	bx	lr

08003aa4 <__retarget_lock_try_acquire_recursive>:
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	4770      	bx	lr

08003aa8 <__retarget_lock_release>:
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop

08003aac <__retarget_lock_release_recursive>:
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop

08003ab0 <cleanup_glue>:
 8003ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab4:	680e      	ldr	r6, [r1, #0]
 8003ab6:	460c      	mov	r4, r1
 8003ab8:	4605      	mov	r5, r0
 8003aba:	b1be      	cbz	r6, 8003aec <cleanup_glue+0x3c>
 8003abc:	6837      	ldr	r7, [r6, #0]
 8003abe:	b18f      	cbz	r7, 8003ae4 <cleanup_glue+0x34>
 8003ac0:	f8d7 8000 	ldr.w	r8, [r7]
 8003ac4:	f1b8 0f00 	cmp.w	r8, #0
 8003ac8:	d008      	beq.n	8003adc <cleanup_glue+0x2c>
 8003aca:	f8d8 1000 	ldr.w	r1, [r8]
 8003ace:	b109      	cbz	r1, 8003ad4 <cleanup_glue+0x24>
 8003ad0:	f7ff ffee 	bl	8003ab0 <cleanup_glue>
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	f7ff fed0 	bl	800387c <_free_r>
 8003adc:	4639      	mov	r1, r7
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f7ff fecc 	bl	800387c <_free_r>
 8003ae4:	4631      	mov	r1, r6
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f7ff fec8 	bl	800387c <_free_r>
 8003aec:	4621      	mov	r1, r4
 8003aee:	4628      	mov	r0, r5
 8003af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003af4:	f7ff bec2 	b.w	800387c <_free_r>

08003af8 <_reclaim_reent>:
 8003af8:	4b22      	ldr	r3, [pc, #136]	; (8003b84 <_reclaim_reent+0x8c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4283      	cmp	r3, r0
 8003afe:	d040      	beq.n	8003b82 <_reclaim_reent+0x8a>
 8003b00:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8003b02:	b570      	push	{r4, r5, r6, lr}
 8003b04:	4605      	mov	r5, r0
 8003b06:	b181      	cbz	r1, 8003b2a <_reclaim_reent+0x32>
 8003b08:	2600      	movs	r6, #0
 8003b0a:	598c      	ldr	r4, [r1, r6]
 8003b0c:	b13c      	cbz	r4, 8003b1e <_reclaim_reent+0x26>
 8003b0e:	4621      	mov	r1, r4
 8003b10:	6824      	ldr	r4, [r4, #0]
 8003b12:	4628      	mov	r0, r5
 8003b14:	f7ff feb2 	bl	800387c <_free_r>
 8003b18:	2c00      	cmp	r4, #0
 8003b1a:	d1f8      	bne.n	8003b0e <_reclaim_reent+0x16>
 8003b1c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8003b1e:	3604      	adds	r6, #4
 8003b20:	2e80      	cmp	r6, #128	; 0x80
 8003b22:	d1f2      	bne.n	8003b0a <_reclaim_reent+0x12>
 8003b24:	4628      	mov	r0, r5
 8003b26:	f7ff fea9 	bl	800387c <_free_r>
 8003b2a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003b2c:	b111      	cbz	r1, 8003b34 <_reclaim_reent+0x3c>
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f7ff fea4 	bl	800387c <_free_r>
 8003b34:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8003b38:	b154      	cbz	r4, 8003b50 <_reclaim_reent+0x58>
 8003b3a:	f505 76a6 	add.w	r6, r5, #332	; 0x14c
 8003b3e:	42b4      	cmp	r4, r6
 8003b40:	d006      	beq.n	8003b50 <_reclaim_reent+0x58>
 8003b42:	4621      	mov	r1, r4
 8003b44:	6824      	ldr	r4, [r4, #0]
 8003b46:	4628      	mov	r0, r5
 8003b48:	f7ff fe98 	bl	800387c <_free_r>
 8003b4c:	42a6      	cmp	r6, r4
 8003b4e:	d1f8      	bne.n	8003b42 <_reclaim_reent+0x4a>
 8003b50:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8003b52:	b111      	cbz	r1, 8003b5a <_reclaim_reent+0x62>
 8003b54:	4628      	mov	r0, r5
 8003b56:	f7ff fe91 	bl	800387c <_free_r>
 8003b5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003b5c:	b183      	cbz	r3, 8003b80 <_reclaim_reent+0x88>
 8003b5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8003b60:	4628      	mov	r0, r5
 8003b62:	4798      	blx	r3
 8003b64:	f8d5 42e0 	ldr.w	r4, [r5, #736]	; 0x2e0
 8003b68:	b154      	cbz	r4, 8003b80 <_reclaim_reent+0x88>
 8003b6a:	6821      	ldr	r1, [r4, #0]
 8003b6c:	b111      	cbz	r1, 8003b74 <_reclaim_reent+0x7c>
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f7ff ff9e 	bl	8003ab0 <cleanup_glue>
 8003b74:	4621      	mov	r1, r4
 8003b76:	4628      	mov	r0, r5
 8003b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003b7c:	f7ff be7e 	b.w	800387c <_free_r>
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
 8003b82:	4770      	bx	lr
 8003b84:	200000a0 	.word	0x200000a0
 8003b88:	00000030 	.word	0x00000030
 8003b8c:	31313031 	.word	0x31313031
 8003b90:	00000031 	.word	0x00000031
 8003b94:	30313131 	.word	0x30313131
 8003b98:	30313031 	.word	0x30313031
 8003b9c:	00000031 	.word	0x00000031
 8003ba0:	30313131 	.word	0x30313131
 8003ba4:	31313031 	.word	0x31313031
 8003ba8:	00313031 	.word	0x00313031
 8003bac:	30313131 	.word	0x30313131
 8003bb0:	00313031 	.word	0x00313031
 8003bb4:	00000031 	.word	0x00000031
 8003bb8:	30313031 	.word	0x30313031
 8003bbc:	30313131 	.word	0x30313131
 8003bc0:	00000031 	.word	0x00000031
 8003bc4:	30313131 	.word	0x30313131
 8003bc8:	30313131 	.word	0x30313131
 8003bcc:	00000031 	.word	0x00000031
 8003bd0:	30313031 	.word	0x30313031
 8003bd4:	00313031 	.word	0x00313031
 8003bd8:	00313031 	.word	0x00313031
 8003bdc:	31313031 	.word	0x31313031
 8003be0:	31313031 	.word	0x31313031
 8003be4:	31313031 	.word	0x31313031
 8003be8:	00000031 	.word	0x00000031
 8003bec:	30313131 	.word	0x30313131
 8003bf0:	31313031 	.word	0x31313031
 8003bf4:	00000031 	.word	0x00000031
 8003bf8:	31313031 	.word	0x31313031
 8003bfc:	30313031 	.word	0x30313031
 8003c00:	00000031 	.word	0x00000031
 8003c04:	30313131 	.word	0x30313131
 8003c08:	00313131 	.word	0x00313131
 8003c0c:	30313131 	.word	0x30313131
 8003c10:	00000031 	.word	0x00000031
 8003c14:	30313131 	.word	0x30313131
 8003c18:	30313131 	.word	0x30313131
 8003c1c:	00313131 	.word	0x00313131
 8003c20:	31313031 	.word	0x31313031
 8003c24:	31313031 	.word	0x31313031
 8003c28:	00313031 	.word	0x00313031
 8003c2c:	30313131 	.word	0x30313131
 8003c30:	30313131 	.word	0x30313131
 8003c34:	31313031 	.word	0x31313031
 8003c38:	00000031 	.word	0x00000031
 8003c3c:	31313031 	.word	0x31313031
 8003c40:	00313031 	.word	0x00313031
 8003c44:	30313031 	.word	0x30313031
 8003c48:	00000031 	.word	0x00000031
 8003c4c:	00313131 	.word	0x00313131
 8003c50:	30313031 	.word	0x30313031
 8003c54:	00313131 	.word	0x00313131
 8003c58:	30313031 	.word	0x30313031
 8003c5c:	31313031 	.word	0x31313031
 8003c60:	00000031 	.word	0x00000031
 8003c64:	31313031 	.word	0x31313031
 8003c68:	31313031 	.word	0x31313031
 8003c6c:	00000031 	.word	0x00000031
 8003c70:	30313131 	.word	0x30313131
 8003c74:	30313031 	.word	0x30313031
 8003c78:	00313131 	.word	0x00313131
 8003c7c:	30313131 	.word	0x30313131
 8003c80:	31313031 	.word	0x31313031
 8003c84:	31313031 	.word	0x31313031
 8003c88:	00000031 	.word	0x00000031
 8003c8c:	30313131 	.word	0x30313131
 8003c90:	30313131 	.word	0x30313131
 8003c94:	00313031 	.word	0x00313031
 8003c98:	41432049 	.word	0x41432049
 8003c9c:	4f4d204e 	.word	0x4f4d204e
 8003ca0:	00455352 	.word	0x00455352
 8003ca4:	00000000 	.word	0x00000000
 8003ca8:	00303030 	.word	0x00303030

08003cac <LED_config>:
 8003cac:	00000080 00010000 00000000              ............

08003cb8 <_global_impure_ptr>:
 8003cb8:	200000a8                                ... 
