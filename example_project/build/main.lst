
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032c8  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  000204c0  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  000204c0  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  000204c0  2**0
                  CONTENTS
  5 .data         000004c0  20000000  0c0032c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e8  200004c0  0c003788  000204c0  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  000204c0  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  000204c0  2**0
                  CONTENTS
 10 .debug_aranges 00000638  00000000  00000000  000204c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000099f3  00000000  00000000  00020af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000011dc  00000000  00000000  0002a4eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002984  00000000  00000000  0002b6c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001af8  00000000  00000000  0002e04c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0007c519  00000000  00000000  0002fb44  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000037ca  00000000  00000000  000ac05d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005a8  00000000  00000000  000af827  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 0000024c  00000000  00000000  000afdcf  2**0
                  CONTENTS, READONLY
 19 .debug_macro  000198dd  00000000  00000000  000b001b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 c1 03 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0032c8 	.word	0x0c0032c8
 800024c:	20000000 	.word	0x20000000
 8000250:	000004c0 	.word	0x000004c0
 8000254:	0c003788 	.word	0x0c003788
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c0032c8 	.word	0x0c0032c8
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c0032c8 	.word	0x0c0032c8
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	200004c0 	.word	0x200004c0
 800027c:	000000e8 	.word	0x000000e8
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08002cb5 	.word	0x08002cb5
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	080030bd 	.word	0x080030bd
    ldr  r0, =main
 80002ac:	08000431 	.word	0x08000431

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	db0b      	blt.n	80002de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	f003 021f 	and.w	r2, r3, #31
 80002cc:	4907      	ldr	r1, [pc, #28]	; (80002ec <__NVIC_EnableIRQ+0x38>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	095b      	lsrs	r3, r3, #5
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <XMC_GPIO_SetOutputLevel>:
 *
 */


__STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_OUTPUT_LEVEL_t level)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	460b      	mov	r3, r1
 80002fa:	607a      	str	r2, [r7, #4]
 80002fc:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
  
  port->OMR = (uint32_t)level << pin;
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	409a      	lsls	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	605a      	str	r2, [r3, #4]
}
 8000308:	bf00      	nop
 800030a:	3714      	adds	r7, #20
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	78fb      	ldrb	r3, [r7, #3]
 8000326:	2101      	movs	r1, #1
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	431a      	orrs	r2, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	60da      	str	r2, [r3, #12]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 800033e:	b480      	push	{r7}
 8000340:	b083      	sub	sp, #12
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2201      	movs	r2, #1
 800034a:	60da      	str	r2, [r3, #12]
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	460b      	mov	r3, r1
 8000362:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8000364:	887a      	ldrh	r2, [r7, #2]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	635a      	str	r2, [r3, #52]	; 0x34
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr

08000376 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8000376:	b480      	push	{r7}
 8000378:	b083      	sub	sp, #12
 800037a:	af00      	add	r7, sp, #0
 800037c:	6078      	str	r0, [r7, #4]
 800037e:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	683a      	ldr	r2, [r7, #0]
 8000384:	611a      	str	r2, [r3, #16]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8000392:	b480      	push	{r7}
 8000394:	b083      	sub	sp, #12
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	460b      	mov	r3, r1
 800039c:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80003a4:	78fb      	ldrb	r3, [r7, #3]
 80003a6:	2101      	movs	r1, #1
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr

080003c0 <CCU40_0_IRQHandler>:
    .passive_level = 0U/*XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW*/ ,
    .timer_concatenation = 0U
    };
    

void CCU40_0_IRQHandler ( void ) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  //CCU4_periods ++;
  //XMC_GPIO_ToggleOutput ( XMC_GPIO_PORT1 , 0) ;
  if(led_on_off_k < intoutputk){
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <CCU40_0_IRQHandler+0x60>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4b16      	ldr	r3, [pc, #88]	; (8000424 <CCU40_0_IRQHandler+0x64>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	429a      	cmp	r2, r3
 80003d0:	d21b      	bcs.n	800040a <CCU40_0_IRQHandler+0x4a>
    if(intoutput[led_on_off_k]==1)
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <CCU40_0_IRQHandler+0x60>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	4b13      	ldr	r3, [pc, #76]	; (8000428 <CCU40_0_IRQHandler+0x68>)
 80003dc:	5c9b      	ldrb	r3, [r3, r2]
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d105      	bne.n	80003ee <CCU40_0_IRQHandler+0x2e>
      XMC_GPIO_SetOutputLevel (XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_HIGH);//XMC_GPIO_OUTPUT_LEVEL_HIGH
 80003e2:	2201      	movs	r2, #1
 80003e4:	2101      	movs	r1, #1
 80003e6:	4811      	ldr	r0, [pc, #68]	; (800042c <CCU40_0_IRQHandler+0x6c>)
 80003e8:	f7ff ff82 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
 80003ec:	e005      	b.n	80003fa <CCU40_0_IRQHandler+0x3a>
    else 
      XMC_GPIO_SetOutputLevel (XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_LOW);//XMC_GPIO_OUTPUT_LEVEL_HIGH
 80003ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003f2:	2101      	movs	r1, #1
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <CCU40_0_IRQHandler+0x6c>)
 80003f6:	f7ff ff7b 	bl	80002f0 <XMC_GPIO_SetOutputLevel>

    led_on_off_k++;
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <CCU40_0_IRQHandler+0x60>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	3301      	adds	r3, #1
 8000402:	b2da      	uxtb	r2, r3
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <CCU40_0_IRQHandler+0x60>)
 8000406:	701a      	strb	r2, [r3, #0]
  }else{
    led_on_off_k = 0;
    XMC_GPIO_SetOutputLevel (XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_LOW);
  }
}
 8000408:	e008      	b.n	800041c <CCU40_0_IRQHandler+0x5c>
    led_on_off_k = 0;
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <CCU40_0_IRQHandler+0x60>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
    XMC_GPIO_SetOutputLevel (XMC_GPIO_PORT1, 1, XMC_GPIO_OUTPUT_LEVEL_LOW);
 8000410:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000414:	2101      	movs	r1, #1
 8000416:	4805      	ldr	r0, [pc, #20]	; (800042c <CCU40_0_IRQHandler+0x6c>)
 8000418:	f7ff ff6a 	bl	80002f0 <XMC_GPIO_SetOutputLevel>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	200004c0 	.word	0x200004c0
 8000424:	200004c1 	.word	0x200004c1
 8000428:	200004d0 	.word	0x200004d0
 800042c:	48028100 	.word	0x48028100

08000430 <main>:

int main ( void ) {
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  
  morse();
 8000434:	f000 f834 	bl	80004a0 <morse>


  XMC_GPIO_Init(XMC_GPIO_PORT1 , 1 , & LED_config ) ;
 8000438:	4a14      	ldr	r2, [pc, #80]	; (800048c <main+0x5c>)
 800043a:	2101      	movs	r1, #1
 800043c:	4814      	ldr	r0, [pc, #80]	; (8000490 <main+0x60>)
 800043e:	f000 f9a5 	bl	800078c <XMC_GPIO_Init>
  /* Initialize CCU40 , the MCMS transfer is irrelevant for our
  * application . Calls EnableModule ( SCU enable clock , SCU ungate
  * clock , SCU deassert reset ) and StartPrescaler ( GIDLC . SPRB ) */
  XMC_CCU4_Init( CCU40 , XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR ) ;
 8000442:	2100      	movs	r1, #0
 8000444:	4813      	ldr	r0, [pc, #76]	; (8000494 <main+0x64>)
 8000446:	f000 fb22 	bl	8000a8e <XMC_CCU4_Init>
  XMC_CCU4_SLICE_CompareInit ( CCU40_CC40 , & CCU_compare_config ) ;
 800044a:	4913      	ldr	r1, [pc, #76]	; (8000498 <main+0x68>)
 800044c:	4813      	ldr	r0, [pc, #76]	; (800049c <main+0x6c>)
 800044e:	f000 fb74 	bl	8000b3a <XMC_CCU4_SLICE_CompareInit>
  XMC_CCU4_SLICE_SetTimerPeriodMatch ( CCU40_CC40 , 0x7530 ) ;
 8000452:	f247 5130 	movw	r1, #30000	; 0x7530
 8000456:	4811      	ldr	r0, [pc, #68]	; (800049c <main+0x6c>)
 8000458:	f7ff ff7e 	bl	8000358 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  XMC_CCU4_EnableShadowTransfer ( CCU40 , XMC_CCU4_SHADOW_TRANSFER_SLICE_0 ) ;
 800045c:	2101      	movs	r1, #1
 800045e:	480d      	ldr	r0, [pc, #52]	; (8000494 <main+0x64>)
 8000460:	f7ff ff89 	bl	8000376 <XMC_CCU4_EnableShadowTransfer>
  /* Map IRQ to NVIC IRQ input , enable IRQ in CCU4 */
  XMC_CCU4_SLICE_SetInterruptNode( CCU40_CC40 ,\
 8000464:	2200      	movs	r2, #0
 8000466:	2100      	movs	r1, #0
 8000468:	480c      	ldr	r0, [pc, #48]	; (800049c <main+0x6c>)
 800046a:	f000 ff3f 	bl	80012ec <XMC_CCU4_SLICE_SetInterruptNode>
      XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH ,\
      XMC_CCU4_SLICE_SR_ID_0 ) ;
  XMC_CCU4_SLICE_EnableEvent( CCU40_CC40 ,\
 800046e:	2100      	movs	r1, #0
 8000470:	480a      	ldr	r0, [pc, #40]	; (800049c <main+0x6c>)
 8000472:	f7ff ff8e 	bl	8000392 <XMC_CCU4_SLICE_EnableEvent>
      XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH ) ;
  /* Enable IRQ input in NVIC ( IRQ number from XMC4500 . h ) */
  NVIC_EnableIRQ( CCU40_0_IRQn ) ;
 8000476:	202c      	movs	r0, #44	; 0x2c
 8000478:	f7ff ff1c 	bl	80002b4 <__NVIC_EnableIRQ>
  /* enable clock to slice CC40 */
  XMC_CCU4_EnableClock( CCU40 , 0) ;
 800047c:	2100      	movs	r1, #0
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <main+0x64>)
 8000480:	f7ff ff48 	bl	8000314 <XMC_CCU4_EnableClock>
  /* start timer */
  XMC_CCU4_SLICE_StartTimer( CCU40_CC40 ) ;
 8000484:	4805      	ldr	r0, [pc, #20]	; (800049c <main+0x6c>)
 8000486:	f7ff ff5a 	bl	800033e <XMC_CCU4_SLICE_StartTimer>
  


  while (1){
 800048a:	e7fe      	b.n	800048a <main+0x5a>
 800048c:	080032b8 	.word	0x080032b8
 8000490:	48028100 	.word	0x48028100
 8000494:	4000c000 	.word	0x4000c000
 8000498:	2000008c 	.word	0x2000008c
 800049c:	4000c100 	.word	0x4000c100

080004a0 <morse>:
  return 0;
}



void morse() {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b0ea      	sub	sp, #424	; 0x1a8
 80004a4:	af00      	add	r7, sp, #0

    int arrayLenth = strlen(site);
 80004a6:	4882      	ldr	r0, [pc, #520]	; (80006b0 <morse+0x210>)
 80004a8:	f002 fe4a 	bl	8003140 <strlen>
 80004ac:	4603      	mov	r3, r0
 80004ae:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    char *output[100];
    
    for(int i=0;i<arrayLenth;i++){
 80004b2:	2300      	movs	r3, #0
 80004b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80004b8:	e028      	b.n	800050c <morse+0x6c>
        for(int k=0;k<27;k++){
 80004ba:	2300      	movs	r3, #0
 80004bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80004c0:	e01b      	b.n	80004fa <morse+0x5a>
            if (site[i] == characters[k]){
 80004c2:	4a7b      	ldr	r2, [pc, #492]	; (80006b0 <morse+0x210>)
 80004c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80004c8:	4413      	add	r3, r2
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	4979      	ldr	r1, [pc, #484]	; (80006b4 <morse+0x214>)
 80004ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80004d2:	440b      	add	r3, r1
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d10a      	bne.n	80004f0 <morse+0x50>
                output[i]=morsecode[k];
 80004da:	4a77      	ldr	r2, [pc, #476]	; (80006b8 <morse+0x218>)
 80004dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80004e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80004e4:	463b      	mov	r3, r7
 80004e6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80004ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                break;
 80004ee:	e008      	b.n	8000502 <morse+0x62>
        for(int k=0;k<27;k++){
 80004f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80004f4:	3301      	adds	r3, #1
 80004f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80004fa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80004fe:	2b1a      	cmp	r3, #26
 8000500:	dddf      	ble.n	80004c2 <morse+0x22>
    for(int i=0;i<arrayLenth;i++){
 8000502:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000506:	3301      	adds	r3, #1
 8000508:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800050c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000510:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000514:	429a      	cmp	r2, r3
 8000516:	dbd0      	blt.n	80004ba <morse+0x1a>
            }
        }
    }

    for (int i = 0; i < arrayLenth; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800051e:	e0bb      	b.n	8000698 <morse+0x1f8>
    {
        int charMorseCodeLenth = strlen(output[i]);
 8000520:	463b      	mov	r3, r7
 8000522:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fe08 	bl	8003140 <strlen>
 8000530:	4603      	mov	r3, r0
 8000532:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
        for (int k = 0; k < charMorseCodeLenth; k++)
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800053c:	e076      	b.n	800062c <morse+0x18c>
        {
            if(output[i][k]=='-'){
 800053e:	463b      	mov	r3, r7
 8000540:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000544:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000548:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800054c:	4413      	add	r3, r2
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b2d      	cmp	r3, #45	; 0x2d
 8000552:	d124      	bne.n	800059e <morse+0xfe>
                intoutput[intoutputk]=1;
 8000554:	4b59      	ldr	r3, [pc, #356]	; (80006bc <morse+0x21c>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	4b59      	ldr	r3, [pc, #356]	; (80006c0 <morse+0x220>)
 800055c:	2101      	movs	r1, #1
 800055e:	5499      	strb	r1, [r3, r2]
                intoutputk++;
 8000560:	4b56      	ldr	r3, [pc, #344]	; (80006bc <morse+0x21c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b54      	ldr	r3, [pc, #336]	; (80006bc <morse+0x21c>)
 800056a:	701a      	strb	r2, [r3, #0]
                intoutput[intoutputk]=1;
 800056c:	4b53      	ldr	r3, [pc, #332]	; (80006bc <morse+0x21c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	461a      	mov	r2, r3
 8000572:	4b53      	ldr	r3, [pc, #332]	; (80006c0 <morse+0x220>)
 8000574:	2101      	movs	r1, #1
 8000576:	5499      	strb	r1, [r3, r2]
                intoutputk++;
 8000578:	4b50      	ldr	r3, [pc, #320]	; (80006bc <morse+0x21c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b4e      	ldr	r3, [pc, #312]	; (80006bc <morse+0x21c>)
 8000582:	701a      	strb	r2, [r3, #0]
                intoutput[intoutputk]=1;
 8000584:	4b4d      	ldr	r3, [pc, #308]	; (80006bc <morse+0x21c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	4b4d      	ldr	r3, [pc, #308]	; (80006c0 <morse+0x220>)
 800058c:	2101      	movs	r1, #1
 800058e:	5499      	strb	r1, [r3, r2]
                intoutputk++;
 8000590:	4b4a      	ldr	r3, [pc, #296]	; (80006bc <morse+0x21c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	3301      	adds	r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	4b48      	ldr	r3, [pc, #288]	; (80006bc <morse+0x21c>)
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	e02e      	b.n	80005fc <morse+0x15c>
                
            }else if (output[i][k]=='.')
 800059e:	463b      	mov	r3, r7
 80005a0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80005a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005a8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b2e      	cmp	r3, #46	; 0x2e
 80005b2:	d10c      	bne.n	80005ce <morse+0x12e>
            {
                intoutput[intoutputk]=1;
 80005b4:	4b41      	ldr	r3, [pc, #260]	; (80006bc <morse+0x21c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b41      	ldr	r3, [pc, #260]	; (80006c0 <morse+0x220>)
 80005bc:	2101      	movs	r1, #1
 80005be:	5499      	strb	r1, [r3, r2]
                intoutputk++;
 80005c0:	4b3e      	ldr	r3, [pc, #248]	; (80006bc <morse+0x21c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <morse+0x21c>)
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e016      	b.n	80005fc <morse+0x15c>

            }else if (output[i][k]=='0'){
 80005ce:	463b      	mov	r3, r7
 80005d0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80005d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005d8:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80005dc:	4413      	add	r3, r2
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b30      	cmp	r3, #48	; 0x30
 80005e2:	d10b      	bne.n	80005fc <morse+0x15c>
                intoutput[intoutputk]=0;
 80005e4:	4b35      	ldr	r3, [pc, #212]	; (80006bc <morse+0x21c>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <morse+0x220>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	5499      	strb	r1, [r3, r2]
                intoutputk++;
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <morse+0x21c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3301      	adds	r3, #1
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <morse+0x21c>)
 80005fa:	701a      	strb	r2, [r3, #0]
            }
            
            if (k!=(charMorseCodeLenth-1))
 80005fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000600:	3b01      	subs	r3, #1
 8000602:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000606:	429a      	cmp	r2, r3
 8000608:	d00b      	beq.n	8000622 <morse+0x182>
            {
                intoutput[intoutputk]=0;
 800060a:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <morse+0x21c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <morse+0x220>)
 8000612:	2100      	movs	r1, #0
 8000614:	5499      	strb	r1, [r3, r2]
                intoutputk++;
 8000616:	4b29      	ldr	r3, [pc, #164]	; (80006bc <morse+0x21c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	3301      	adds	r3, #1
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <morse+0x21c>)
 8000620:	701a      	strb	r2, [r3, #0]
        for (int k = 0; k < charMorseCodeLenth; k++)
 8000622:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000626:	3301      	adds	r3, #1
 8000628:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800062c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000630:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000634:	429a      	cmp	r2, r3
 8000636:	db82      	blt.n	800053e <morse+0x9e>
            }
            
        }
        if (i!=(arrayLenth-1))
 8000638:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800063c:	3b01      	subs	r3, #1
 800063e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000642:	429a      	cmp	r2, r3
 8000644:	d023      	beq.n	800068e <morse+0x1ee>
        {
            intoutput[intoutputk]=0;
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <morse+0x21c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <morse+0x220>)
 800064e:	2100      	movs	r1, #0
 8000650:	5499      	strb	r1, [r3, r2]
            intoutputk++;
 8000652:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <morse+0x21c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	3301      	adds	r3, #1
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <morse+0x21c>)
 800065c:	701a      	strb	r2, [r3, #0]
            intoutput[intoutputk]=0;
 800065e:	4b17      	ldr	r3, [pc, #92]	; (80006bc <morse+0x21c>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <morse+0x220>)
 8000666:	2100      	movs	r1, #0
 8000668:	5499      	strb	r1, [r3, r2]
            intoutputk++;
 800066a:	4b14      	ldr	r3, [pc, #80]	; (80006bc <morse+0x21c>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <morse+0x21c>)
 8000674:	701a      	strb	r2, [r3, #0]
            intoutput[intoutputk]=0;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <morse+0x21c>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <morse+0x220>)
 800067e:	2100      	movs	r1, #0
 8000680:	5499      	strb	r1, [r3, r2]
            intoutputk++;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <morse+0x21c>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <morse+0x21c>)
 800068c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < arrayLenth; i++)
 800068e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000692:	3301      	adds	r3, #1
 8000694:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000698:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800069c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80006a0:	429a      	cmp	r2, r3
 80006a2:	f6ff af3d 	blt.w	8000520 <morse+0x80>
        }
    }
}
 80006a6:	bf00      	nop
 80006a8:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000088 	.word	0x20000088
 80006b4:	20000000 	.word	0x20000000
 80006b8:	2000001c 	.word	0x2000001c
 80006bc:	200004c1 	.word	0x200004c1
 80006c0:	200004d0 	.word	0x200004d0

080006c4 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
 80006d0:	4613      	mov	r3, r2
 80006d2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	089b      	lsrs	r3, r3, #2
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	461a      	mov	r2, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3204      	adds	r2, #4
 80006e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	f003 0303 	and.w	r3, r3, #3
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	21f8      	movs	r1, #248	; 0xf8
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43db      	mvns	r3, r3
 80006f4:	78f9      	ldrb	r1, [r7, #3]
 80006f6:	0889      	lsrs	r1, r1, #2
 80006f8:	b2c9      	uxtb	r1, r1
 80006fa:	4608      	mov	r0, r1
 80006fc:	ea02 0103 	and.w	r1, r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	1d02      	adds	r2, r0, #4
 8000704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	089b      	lsrs	r3, r3, #2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3204      	adds	r2, #4
 8000714:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000718:	78b9      	ldrb	r1, [r7, #2]
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	f003 0303 	and.w	r3, r3, #3
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	78f9      	ldrb	r1, [r7, #3]
 8000728:	0889      	lsrs	r1, r1, #2
 800072a:	b2c9      	uxtb	r1, r1
 800072c:	4608      	mov	r0, r1
 800072e:	ea42 0103 	orr.w	r1, r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	1d02      	adds	r2, r0, #4
 8000736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr

08000746 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	70fb      	strb	r3, [r7, #3]
 8000752:	4613      	mov	r3, r2
 8000754:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	2103      	movs	r1, #3
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	43db      	mvns	r3, r3
 8000766:	401a      	ands	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000770:	78b9      	ldrb	r1, [r7, #2]
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	431a      	orrs	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	460b      	mov	r3, r1
 8000796:	607a      	str	r2, [r7, #4]
 8000798:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800079a:	7afb      	ldrb	r3, [r7, #11]
 800079c:	089b      	lsrs	r3, r3, #2
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3204      	adds	r2, #4
 80007a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007aa:	7afb      	ldrb	r3, [r7, #11]
 80007ac:	f003 0303 	and.w	r3, r3, #3
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	21f8      	movs	r1, #248	; 0xf8
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	7af9      	ldrb	r1, [r7, #11]
 80007bc:	0889      	lsrs	r1, r1, #2
 80007be:	b2c9      	uxtb	r1, r1
 80007c0:	4608      	mov	r0, r1
 80007c2:	ea02 0103 	and.w	r1, r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	1d02      	adds	r2, r0, #4
 80007ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80007d2:	7afb      	ldrb	r3, [r7, #11]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	2103      	movs	r1, #3
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	43db      	mvns	r3, r3
 80007de:	401a      	ands	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4a38      	ldr	r2, [pc, #224]	; (80008c8 <XMC_GPIO_Init+0x13c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d003      	beq.n	80007f4 <XMC_GPIO_Init+0x68>
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4a37      	ldr	r2, [pc, #220]	; (80008cc <XMC_GPIO_Init+0x140>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d10a      	bne.n	800080a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007f8:	7afb      	ldrb	r3, [r7, #11]
 80007fa:	2101      	movs	r1, #1
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	401a      	ands	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	661a      	str	r2, [r3, #96]	; 0x60
 8000808:	e03c      	b.n	8000884 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	685a      	ldr	r2, [r3, #4]
 800080e:	7afb      	ldrb	r3, [r7, #11]
 8000810:	409a      	lsls	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000816:	7afb      	ldrb	r3, [r7, #11]
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	3210      	adds	r2, #16
 8000822:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000826:	7afb      	ldrb	r3, [r7, #11]
 8000828:	f003 0307 	and.w	r3, r3, #7
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	2107      	movs	r1, #7
 8000830:	fa01 f303 	lsl.w	r3, r1, r3
 8000834:	43db      	mvns	r3, r3
 8000836:	7af9      	ldrb	r1, [r7, #11]
 8000838:	08c9      	lsrs	r1, r1, #3
 800083a:	b2c9      	uxtb	r1, r1
 800083c:	4608      	mov	r0, r1
 800083e:	ea02 0103 	and.w	r1, r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f100 0210 	add.w	r2, r0, #16
 8000848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800084c:	7afb      	ldrb	r3, [r7, #11]
 800084e:	08db      	lsrs	r3, r3, #3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3210      	adds	r2, #16
 8000858:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7a1b      	ldrb	r3, [r3, #8]
 8000860:	4619      	mov	r1, r3
 8000862:	7afb      	ldrb	r3, [r7, #11]
 8000864:	f003 0307 	and.w	r3, r3, #7
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	7af9      	ldrb	r1, [r7, #11]
 8000870:	08c9      	lsrs	r1, r1, #3
 8000872:	b2c9      	uxtb	r1, r1
 8000874:	4608      	mov	r0, r1
 8000876:	ea42 0103 	orr.w	r1, r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	f100 0210 	add.w	r2, r0, #16
 8000880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000884:	7afb      	ldrb	r3, [r7, #11]
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	b2db      	uxtb	r3, r3
 800088a:	461a      	mov	r2, r3
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3204      	adds	r2, #4
 8000890:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	7af9      	ldrb	r1, [r7, #11]
 80008a8:	0889      	lsrs	r1, r1, #2
 80008aa:	b2c9      	uxtb	r1, r1
 80008ac:	4608      	mov	r0, r1
 80008ae:	ea42 0103 	orr.w	r1, r2, r3
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	1d02      	adds	r2, r0, #4
 80008b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	48028e00 	.word	0x48028e00
 80008cc:	48028f00 	.word	0x48028f00

080008d0 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
 80008dc:	4613      	mov	r3, r2
 80008de:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	08db      	lsrs	r3, r3, #3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	461a      	mov	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3210      	adds	r2, #16
 80008ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	2107      	movs	r1, #7
 80008fa:	fa01 f303 	lsl.w	r3, r1, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	78f9      	ldrb	r1, [r7, #3]
 8000902:	08c9      	lsrs	r1, r1, #3
 8000904:	b2c9      	uxtb	r1, r1
 8000906:	4608      	mov	r0, r1
 8000908:	ea02 0103 	and.w	r1, r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f100 0210 	add.w	r2, r0, #16
 8000912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000916:	78fb      	ldrb	r3, [r7, #3]
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	461a      	mov	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3210      	adds	r2, #16
 8000922:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000926:	78b9      	ldrb	r1, [r7, #2]
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	78f9      	ldrb	r1, [r7, #3]
 8000936:	08c9      	lsrs	r1, r1, #3
 8000938:	b2c9      	uxtb	r1, r1
 800093a:	4608      	mov	r0, r1
 800093c:	ea42 0103 	orr.w	r1, r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f100 0210 	add.w	r2, r0, #16
 8000946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <XMC_CCU4_StartPrescaler>:
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68db      	ldr	r3, [r3, #12]
 8000962:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	60da      	str	r2, [r3, #12]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <XMC_CCU4_SLICE_SetDitherCompareValue>:
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	460b      	mov	r3, r1
 8000980:	70fb      	strb	r3, [r7, #3]
  slice->DITS = comp_val;
 8000982:	78fa      	ldrb	r2, [r7, #3]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	621a      	str	r2, [r3, #32]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <XMC_CCU4_lAssertReset>:
/*********************************************************************************************************************
 * LOCAL ROUTINES
 ********************************************************************************************************************/
#if defined(PERIPHERAL_RESET_SUPPORTED)
__STATIC_INLINE void XMC_CCU4_lAssertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <XMC_CCU4_lAssertReset+0x50>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d103      	bne.n	80009ac <XMC_CCU4_lAssertReset+0x18>
  {
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 80009a4:	2004      	movs	r0, #4
 80009a6:	f001 f8bb 	bl	8001b20 <XMC_SCU_RESET_AssertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}
 80009aa:	e016      	b.n	80009da <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU41)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <XMC_CCU4_lAssertReset+0x54>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d103      	bne.n	80009bc <XMC_CCU4_lAssertReset+0x28>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 80009b4:	2008      	movs	r0, #8
 80009b6:	f001 f8b3 	bl	8001b20 <XMC_SCU_RESET_AssertPeripheralReset>
}
 80009ba:	e00e      	b.n	80009da <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU42)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <XMC_CCU4_lAssertReset+0x58>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d103      	bne.n	80009cc <XMC_CCU4_lAssertReset+0x38>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 80009c4:	2010      	movs	r0, #16
 80009c6:	f001 f8ab 	bl	8001b20 <XMC_SCU_RESET_AssertPeripheralReset>
}
 80009ca:	e006      	b.n	80009da <XMC_CCU4_lAssertReset+0x46>
  else if (module == CCU43)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <XMC_CCU4_lAssertReset+0x5c>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d102      	bne.n	80009da <XMC_CCU4_lAssertReset+0x46>
    XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <XMC_CCU4_lAssertReset+0x60>)
 80009d6:	f001 f8a3 	bl	8001b20 <XMC_SCU_RESET_AssertPeripheralReset>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	4000c000 	.word	0x4000c000
 80009e8:	40010000 	.word	0x40010000
 80009ec:	40014000 	.word	0x40014000
 80009f0:	48004000 	.word	0x48004000
 80009f4:	10000001 	.word	0x10000001

080009f8 <XMC_CCU4_lDeassertReset>:

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a11      	ldr	r2, [pc, #68]	; (8000a48 <XMC_CCU4_lDeassertReset+0x50>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d103      	bne.n	8000a10 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000a08:	2004      	movs	r0, #4
 8000a0a:	f001 f8a7 	bl	8001b5c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000a0e:	e016      	b.n	8000a3e <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU41)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <XMC_CCU4_lDeassertReset+0x54>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d103      	bne.n	8000a20 <XMC_CCU4_lDeassertReset+0x28>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000a18:	2008      	movs	r0, #8
 8000a1a:	f001 f89f 	bl	8001b5c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8000a1e:	e00e      	b.n	8000a3e <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU42)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <XMC_CCU4_lDeassertReset+0x58>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d103      	bne.n	8000a30 <XMC_CCU4_lDeassertReset+0x38>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8000a28:	2010      	movs	r0, #16
 8000a2a:	f001 f897 	bl	8001b5c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8000a2e:	e006      	b.n	8000a3e <XMC_CCU4_lDeassertReset+0x46>
  else if (module == CCU43)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <XMC_CCU4_lDeassertReset+0x5c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d102      	bne.n	8000a3e <XMC_CCU4_lDeassertReset+0x46>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <XMC_CCU4_lDeassertReset+0x60>)
 8000a3a:	f001 f88f 	bl	8001b5c <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	4000c000 	.word	0x4000c000
 8000a4c:	40010000 	.word	0x40010000
 8000a50:	40014000 	.word	0x40014000
 8000a54:	48004000 	.word	0x48004000
 8000a58:	10000001 	.word	0x10000001

08000a5c <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000a64:	2010      	movs	r0, #16
 8000a66:	f001 fb63 	bl	8002130 <XMC_SCU_CLOCK_EnableClock>
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffc4 	bl	80009f8 <XMC_CCU4_lDeassertReset>
#endif
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <XMC_CCU4_DisableModule>:

void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_DisableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lAssertReset(module);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff87 	bl	8000994 <XMC_CCU4_lAssertReset>
#endif
  
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lGateClock(module);
#endif
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <XMC_CCU4_Init>:

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	460b      	mov	r3, r1
 8000a98:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ffde 	bl	8000a5c <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff58 	bl	8000956 <XMC_CCU4_StartPrescaler>
  
  gctrl = module->GCTRL;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab2:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	039b      	lsls	r3, r3, #14
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <XMC_CCU4_SetModuleClock>:

/* API to select CCU4 module clock */
void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ae4:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	011b      	lsls	r3, r3, #4
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	601a      	str	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <XMC_CCU4_SetMultiChannelShadowTransferMode>:

/* API to configure the multichannel shadow transfer request via SW and via the CCU4x.MCSS input. */
void XMC_CCU4_SetMultiChannelShadowTransferMode(XMC_CCU4_MODULE_t *const module, const uint32_t slice_mode_msk)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU4_IsValidModule(module));
  
  gctrl = module->GCTRL;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	0c1b      	lsrs	r3, r3, #16
 8000b16:	43db      	mvns	r3, r3
 8000b18:	68fa      	ldr	r2, [r7, #12]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	601a      	str	r2, [r3, #0]
}
 8000b2e:	bf00      	nop
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <XMC_CCU4_SLICE_CompareInit>:

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	b083      	sub	sp, #12
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	795b      	ldrb	r3, [r3, #5]
 8000b50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	051a      	lsls	r2, r3, #20
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	791b      	ldrb	r3, [r3, #4]
 8000b60:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	795b      	ldrb	r3, [r3, #5]
 8000b70:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	795b      	ldrb	r3, [r3, #5]
 8000b80:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	461a      	mov	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	791b      	ldrb	r3, [r3, #4]
 8000b90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	461a      	mov	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <XMC_CCU4_SLICE_CaptureInit>:

/* API to configure CC4 Slice for Capture */
void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CaptureInit:Capture Init Pointer is NULL",
             (XMC_CCU4_SLICE_CAPTURE_CONFIG_t *) NULL != capture_init);

  /* Program the capture mode */
  slice->TC = capture_init->tc;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t)capture_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	795b      	ldrb	r3, [r3, #5]
 8000bbe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	051a      	lsls	r2, r3, #20
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) capture_init->prescaler_initval;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program initial floating prescaler compare value */
  slice->FPCS = (uint32_t) capture_init->float_limit;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	791b      	ldrb	r3, [r3, #4]
 8000bde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <XMC_CCU4_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice */
void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
                            const XMC_CCU4_SLICE_EVENT_t event,
                                const XMC_CCU4_SLICE_START_MODE_t start_mode)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b085      	sub	sp, #20
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70fb      	strb	r3, [r7, #3]
 8000c02:	4613      	mov	r3, r2
 8000c04:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StartConfig:Invalid Start Mode", 
             ((start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR) ||\
              (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START)));
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_STRTS_Msk);
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	f023 0303 	bic.w	r3, r3, #3
 8000c12:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_STRTS_Pos;
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	605a      	str	r2, [r3, #4]
  
  tc  = slice->TC;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	60fb      	str	r3, [r7, #12]
  /* Next, Configure the start mode */
  if (start_mode == XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR)
 8000c28:	78bb      	ldrb	r3, [r7, #2]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d104      	bne.n	8000c38 <XMC_CCU4_SLICE_StartConfig+0x42>
  {
    tc |= (uint32_t)CCU4_CC4_TC_STRM_Msk;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	e003      	b.n	8000c40 <XMC_CCU4_SLICE_StartConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t)CCU4_CC4_TC_STRM_Msk);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c3e:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	615a      	str	r2, [r3, #20]
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <XMC_CCU4_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
                           const XMC_CCU4_SLICE_EVENT_t event,
                               const XMC_CCU4_SLICE_END_MODE_t end_mode)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	70fb      	strb	r3, [r7, #3]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_StopConfig:Invalid Start Mode", XMC_CCU4_CHECK_END_MODE(end_mode));
  
  /* First, Bind the event with the stop function */
  cmc = slice->CMC;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_ENDS_Msk);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f023 030c 	bic.w	r3, r3, #12
 8000c6e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_ENDS_Pos;
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure the stop mode */
  tc = slice->TC;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU4_CC4_TC_ENDM_Msk);
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c8c:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU4_CC4_TC_ENDM_Pos;
 8000c8e:	78bb      	ldrb	r3, [r7, #2]
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	615a      	str	r2, [r3, #20]
}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <XMC_CCU4_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice */
void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_LoadConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the load function */
  cmc = slice->CMC;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_LDS_Msk);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cc2:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_LDS_Pos;
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	031b      	lsls	r3, r3, #12
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	605a      	str	r2, [r3, #4]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <XMC_CCU4_SLICE_ModulationConfig>:
/* API to configure the slice modulation function */
void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_EVENT_t event,
                                     const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
                                     const bool synch_with_pwm)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	4608      	mov	r0, r1
 8000cea:	4611      	mov	r1, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	4603      	mov	r3, r0
 8000cf0:	70fb      	strb	r3, [r7, #3]
 8000cf2:	460b      	mov	r3, r1
 8000cf4:	70bb      	strb	r3, [r7, #2]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	707b      	strb	r3, [r7, #1]
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT) ||\
              (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT)));
  
  tc  = slice->TC;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	60fb      	str	r3, [r7, #12]
  cmc = slice->CMC;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	60bb      	str	r3, [r7, #8]
  
  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_MOS_Msk);
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000d0c:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_MOS_Pos;
 8000d0e:	78fb      	ldrb	r3, [r7, #3]
 8000d10:	049b      	lsls	r3, r3, #18
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	605a      	str	r2, [r3, #4]
  
  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT)
 8000d1e:	78bb      	ldrb	r3, [r7, #2]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d104      	bne.n	8000d2e <XMC_CCU4_SLICE_ModulationConfig+0x4e>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMT_Msk;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e003      	b.n	8000d36 <XMC_CCU4_SLICE_ModulationConfig+0x56>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMT_Msk);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == (bool) true)
 8000d36:	787b      	ldrb	r3, [r7, #1]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d004      	beq.n	8000d46 <XMC_CCU4_SLICE_ModulationConfig+0x66>
  {
    tc |= (uint32_t) CCU4_CC4_TC_EMS_Msk;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	e003      	b.n	8000d4e <XMC_CCU4_SLICE_ModulationConfig+0x6e>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_EMS_Msk);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d4c:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	615a      	str	r2, [r3, #20]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <XMC_CCU4_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d78:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	039b      	lsls	r3, r3, #14
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	605a      	str	r2, [r3, #4]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dae:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 8000db0:	78fb      	ldrb	r3, [r7, #3]
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	605a      	str	r2, [r3, #4]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <XMC_CCU4_SLICE_Capture0Config>:

/* API to configure Capture-0 function */
void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture0Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP0S_Msk);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000de4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP0S_Pos;
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	011b      	lsls	r3, r3, #4
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	605a      	str	r2, [r3, #4]
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <XMC_CCU4_SLICE_Capture1Config>:

/* API to configure Capture-1 function */
void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_Capture1Config:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CAP1S_Msk);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000e1a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CAP1S_Pos;
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	019b      	lsls	r3, r3, #6
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	605a      	str	r2, [r3, #4]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <XMC_CCU4_SLICE_DirectionConfig>:

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000e50:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	029b      	lsls	r3, r3, #10
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	605a      	str	r2, [r3, #4]
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <XMC_CCU4_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b085      	sub	sp, #20
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  uint32_t cmc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  
  /* Bind the event with the override function */
  cmc = slice->CMC;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]
  /* Map status bit trigger override to Event 1 & 
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU4_CC4_CMC_OFS_Msk);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e82:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_OFS_Pos;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	605a      	str	r2, [r3, #4]
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <XMC_CCU4_SLICE_TrapConfig>:

/* API to configure trap function */
void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
                               const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b085      	sub	sp, #20
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	70fb      	strb	r3, [r7, #3]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC) ||\
                                                             (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)));
    
  /* First, Map trap function to Event 2 */
  cmc = slice->CMC;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	60bb      	str	r3, [r7, #8]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_TS_Msk);
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000eba:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU4_CC4_CMC_TS_Pos;
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec2:	60bb      	str	r3, [r7, #8]
  slice->CMC = cmc;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	605a      	str	r2, [r3, #4]
  
  /* Next, Configure synchronization option */
  tc = slice->TC;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	60fb      	str	r3, [r7, #12]

  if (synch_with_pwm == (bool) true)
 8000ed0:	78bb      	ldrb	r3, [r7, #2]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <XMC_CCU4_SLICE_TrapConfig+0x42>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSE_Msk;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	e003      	b.n	8000ee8 <XMC_CCU4_SLICE_TrapConfig+0x4a>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSE_Msk);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ee6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Configure exit mode */
  if (exit_mode == XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW)
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d104      	bne.n	8000ef8 <XMC_CCU4_SLICE_TrapConfig+0x5a>
  {
    tc |= (uint32_t) CCU4_CC4_TC_TRPSW_Msk;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	e003      	b.n	8000f00 <XMC_CCU4_SLICE_TrapConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU4_CC4_TC_TRPSW_Msk);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000efe:	60fb      	str	r3, [r7, #12]
  }
  
  slice->TC = tc;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	615a      	str	r2, [r3, #20]
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_config,
                                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_config)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b087      	sub	sp, #28
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	60f8      	str	r0, [r7, #12]
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS1_EV2IS_Pos;
  
  slice->INS1 = ins;
#else
  ins = slice->INS;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV1EM_Pos);
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000f2a:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU4_CC4_INS_EV1EM_Pos;
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	785b      	ldrb	r3, [r3, #1]
 8000f30:	049b      	lsls	r3, r3, #18
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU4_CC4_INS_EV2EM_Pos);
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000f3e:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU4_CC4_INS_EV2EM_Pos;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	785b      	ldrb	r3, [r3, #1]
 8000f44:	051b      	lsls	r3, r3, #20
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV1LM_Pos);
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f52:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU4_CC4_INS_EV1LM_Pos;
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	789b      	ldrb	r3, [r3, #2]
 8000f58:	05db      	lsls	r3, r3, #23
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU4_CC4_INS_EV2LM_Pos);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f66:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU4_CC4_INS_EV2LM_Pos;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	789b      	ldrb	r3, [r3, #2]
 8000f6c:	061b      	lsls	r3, r3, #24
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF1M_Pos);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f023 53c0 	bic.w	r3, r3, #402653184	; 0x18000000
 8000f7a:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU4_CC4_INS_LPF1M_Pos;
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	78db      	ldrb	r3, [r3, #3]
 8000f80:	06db      	lsls	r3, r3, #27
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU4_CC4_INS_LPF2M_Pos);
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8000f8e:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU4_CC4_INS_LPF2M_Pos;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	78db      	ldrb	r3, [r3, #3]
 8000f94:	075b      	lsls	r3, r3, #29
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV1IS_Pos);
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fa2:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU4_CC4_INS_EV1IS_Pos;
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU4_CC4_INS_EV2IS_Pos);
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fb6:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU4_CC4_INS_EV2IS_Pos;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	021b      	lsls	r3, r3, #8
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]
  
  slice->INS = ins;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	601a      	str	r2, [r3, #0]
#endif
}
 8000fca:	bf00      	nop
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
                                   const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b089      	sub	sp, #36	; 0x24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	77fb      	strb	r3, [r7, #31]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	61bb      	str	r3, [r7, #24]
  
  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8000ff0:	7ffb      	ldrb	r3, [r7, #31]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	3310      	adds	r3, #16
 8000ff8:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8000ffa:	7dfb      	ldrb	r3, [r7, #23]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	461a      	mov	r2, r3
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 800101c:	7ffb      	ldrb	r3, [r7, #31]
 800101e:	3316      	adds	r3, #22
 8001020:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	2201      	movs	r2, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->level) << pos;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	461a      	mov	r2, r3
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8001044:	7ffb      	ldrb	r3, [r7, #31]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	3319      	adds	r3, #25
 800104c:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	78db      	ldrb	r3, [r3, #3]
 8001062:	461a      	mov	r2, r3
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8001070:	7ffb      	ldrb	r3, [r7, #31]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	75fb      	strb	r3, [r7, #23]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	601a      	str	r2, [r3, #0]
#endif
}
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <XMC_CCU4_SLICE_SetInput>:

/* API to bind an input to a slice trigger event */
void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
                         const XMC_CCU4_SLICE_EVENT_t event,
                             const XMC_CCU4_SLICE_INPUT_t input)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b085      	sub	sp, #20
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	70fb      	strb	r3, [r7, #3]
 80010b6:	4613      	mov	r3, r2
 80010b8:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInput:Invalid Input", XMC_CCU4_SLICE_IsInputvalid(input));
  
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	3b01      	subs	r3, #1
 80010be:	73fb      	strb	r3, [r7, #15]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
  ins |= ((uint32_t) input) << pos;

  slice->INS1 = ins;
#else
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t) (offset << 2U);
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	73bb      	strb	r3, [r7, #14]

  ins = slice->INS;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60bb      	str	r3, [r7, #8]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  ins |= ((uint32_t) input) << pos;
 80010dc:	78ba      	ldrb	r2, [r7, #2]
 80010de:	7bbb      	ldrb	r3, [r7, #14]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60bb      	str	r3, [r7, #8]

  slice->INS = ins;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	601a      	str	r2, [r3, #0]
#endif
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <XMC_CCU4_SLICE_SetTimerRepeatMode>:

/* API to program timer repeat mode - Single shot vs repeat */
void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t mode)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerRepeatMode:Invalid Timer Repeat Mode",
             ((mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT) ||\
          (mode == XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE)));
  
  if (XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT == mode)
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <XMC_CCU4_SLICE_SetTimerRepeatMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TSSM_Msk);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	f023 0202 	bic.w	r2, r3, #2
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	615a      	str	r2, [r3, #20]
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
  }
}
 800111a:	e005      	b.n	8001128 <XMC_CCU4_SLICE_SetTimerRepeatMode+0x2c>
    slice->TC |= (uint32_t) CCU4_CC4_TC_TSSM_Msk;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	f043 0202 	orr.w	r2, r3, #2
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	615a      	str	r2, [r3, #20]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <XMC_CCU4_SLICE_SetTimerCountingMode>:

/* Programs timer counting mode */
void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_COUNT_MODE_t mode)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA) ||\
                                                                              (mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA)));
  
  if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d106      	bne.n	8001154 <XMC_CCU4_SLICE_SetTimerCountingMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	f023 0201 	bic.w	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	615a      	str	r2, [r3, #20]
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
  }
}
 8001152:	e005      	b.n	8001160 <XMC_CCU4_SLICE_SetTimerCountingMode+0x2c>
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	f043 0201 	orr.w	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	615a      	str	r2, [r3, #20]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <XMC_CCU4_SLICE_GetCaptureRegisterValue>:

/* Retrieves desired capture register value */
uint32_t XMC_CCU4_SLICE_GetCaptureRegisterValue(const XMC_CCU4_SLICE_t *const slice, const uint8_t reg_num)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetCaptureRegisterValue:Invalid register number", (reg_num < 4U));
  return(slice->CV[reg_num]);
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	331c      	adds	r3, #28
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	685b      	ldr	r3, [r3, #4]
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <XMC_CCU4_SLICE_GetLastCapturedTimerValue>:

/* @brief Retrieves the latest captured timer value */
XMC_CCU4_STATUS_t XMC_CCU4_SLICE_GetLastCapturedTimerValue(const XMC_CCU4_SLICE_t *const slice,
                                                           const XMC_CCU4_SLICE_CAP_REG_SET_t set,
                                                           uint32_t *val_ptr)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	460b      	mov	r3, r1
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	72fb      	strb	r3, [r7, #11]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetLastCapturedTimerValue:Invalid Register Set", ((set == XMC_CCU4_SLICE_CAP_REG_SET_LOW) ||\
                                                                               (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)));
  
  retval = XMC_CCU4_STATUS_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	75fb      	strb	r3, [r7, #23]

  /* First check if extended capture mode is enabled */
  if ((slice->TC) & CCU4_CC4_TC_ECM_Msk)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x28>
  {
    /* Extended capture mode has been enabled. So start with the lowest capture register and work your way up */
    start = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	757b      	strb	r3, [r7, #21]
    end = XMC_CCU4_NUM_SLICES_PER_MODULE;
 80011b2:	2304      	movs	r3, #4
 80011b4:	753b      	strb	r3, [r7, #20]
 80011b6:	e00b      	b.n	80011d0 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
  }
  else
  {
    /* Extended capture mode is not enabled */
    if (set == XMC_CCU4_SLICE_CAP_REG_SET_HIGH)
 80011b8:	7afb      	ldrb	r3, [r7, #11]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d104      	bne.n	80011c8 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x38>
    {
      start = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 80011be:	2302      	movs	r3, #2
 80011c0:	757b      	strb	r3, [r7, #21]
      end   = (uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE;
 80011c2:	2304      	movs	r3, #4
 80011c4:	753b      	strb	r3, [r7, #20]
 80011c6:	e003      	b.n	80011d0 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x40>
    }
    else
    {
      start = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	757b      	strb	r3, [r7, #21]
      end = ((uint8_t) XMC_CCU4_NUM_SLICES_PER_MODULE) >> 1U;
 80011cc:	2302      	movs	r3, #2
 80011ce:	753b      	strb	r3, [r7, #20]
    }
  }

  for(i=start; i < end; i++)
 80011d0:	7d7b      	ldrb	r3, [r7, #21]
 80011d2:	75bb      	strb	r3, [r7, #22]
 80011d4:	e017      	b.n	8001206 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x76>
  {
    if ( (slice->CV[i]) & CCU4_CC4_CV_FFL_Msk )
 80011d6:	7dbb      	ldrb	r3, [r7, #22]
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	331c      	adds	r3, #28
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00a      	beq.n	8001200 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x70>
    {
      *val_ptr = slice->CV[i];
 80011ea:	7dbb      	ldrb	r3, [r7, #22]
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	331c      	adds	r3, #28
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	601a      	str	r2, [r3, #0]
      retval = XMC_CCU4_STATUS_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	75fb      	strb	r3, [r7, #23]
      break;
 80011fe:	e006      	b.n	800120e <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x7e>
  for(i=start; i < end; i++)
 8001200:	7dbb      	ldrb	r3, [r7, #22]
 8001202:	3301      	adds	r3, #1
 8001204:	75bb      	strb	r3, [r7, #22]
 8001206:	7dba      	ldrb	r2, [r7, #22]
 8001208:	7d3b      	ldrb	r3, [r7, #20]
 800120a:	429a      	cmp	r2, r3
 800120c:	d3e3      	bcc.n	80011d6 <XMC_CCU4_SLICE_GetLastCapturedTimerValue+0x46>
    }
  }

  return retval;
 800120e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001210:	4618      	mov	r0, r3
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <XMC_CCU4_GetCapturedValueFromFifo>:

/* Retrieves timer capture value from a FIFO made of capture registers */
#if defined(CCU4V1) /* Defined for XMC4500, XMC400, XMC4200, XMC4100 devices only */
int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
  uint32_t  extracted_slice;
  
  XMC_ASSERT("XMC_CCU4_GetCapturedValueFromFifo:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));

  /* First read the global fifo register */
  cap = (int32_t) module->ECRD;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800122c:	60fb      	str	r3, [r7, #12]

  extracted_slice = (((uint32_t) cap) & ((uint32_t) CCU4_ECRD_SPTR_Msk)) >> CCU4_ECRD_SPTR_Pos;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	0d1b      	lsrs	r3, r3, #20
 8001232:	f003 0303 	and.w	r3, r3, #3
 8001236:	60bb      	str	r3, [r7, #8]

  /* Return captured result only if it were applicable to this slice */
  if(extracted_slice != ((uint32_t)slice_number))
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	429a      	cmp	r2, r3
 800123e:	d002      	beq.n	8001246 <XMC_CCU4_GetCapturedValueFromFifo+0x2a>
  {
    cap = -1;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001244:	60fb      	str	r3, [r7, #12]
  }

  return (cap);
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <XMC_CCU4_SLICE_EnableDithering>:
/* Enables PWM dithering feature */
void XMC_CCU4_SLICE_EnableDithering(XMC_CCU4_SLICE_t *const slice,
                                    const bool period_dither,
                                    const bool duty_dither,
                                    const uint8_t spread)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4603      	mov	r3, r0
 8001264:	70fb      	strb	r3, [r7, #3]
 8001266:	460b      	mov	r3, r1
 8001268:	70bb      	strb	r3, [r7, #2]
 800126a:	4613      	mov	r3, r2
 800126c:	707b      	strb	r3, [r7, #1]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU4_SLICE_EnableDithering:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  tc = slice->TC;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	60fb      	str	r3, [r7, #12]
  tc &= ~((uint32_t) CCU4_CC4_TC_DITHE_Msk);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800127a:	60fb      	str	r3, [r7, #12]

  if ((bool) true == period_dither)
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <XMC_CCU4_SLICE_EnableDithering+0x36>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_PERIOD_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001288:	60fb      	str	r3, [r7, #12]
  }
  if ((bool) true == duty_dither)
 800128a:	78bb      	ldrb	r3, [r7, #2]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <XMC_CCU4_SLICE_EnableDithering+0x44>
  {
    tc |= (((uint32_t) XMC_CCU4_SLICE_DITHER_DUTYCYCLE_MASK) << CCU4_CC4_TC_DITHE_Pos);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	615a      	str	r2, [r3, #20]
  
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
 800129e:	787b      	ldrb	r3, [r7, #1]
 80012a0:	4619      	mov	r1, r3
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fb67 	bl	8000976 <XMC_CCU4_SLICE_SetDitherCompareValue>
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <XMC_CCU4_SLICE_SetPrescaler>:

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c0:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80012c8:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
 80012f8:	4613      	mov	r3, r2
 80012fa:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001302:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2b09      	cmp	r3, #9
 8001308:	d82c      	bhi.n	8001364 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	08001339 	.word	0x08001339
 8001314:	08001339 	.word	0x08001339
 8001318:	08001343 	.word	0x08001343
 800131c:	08001343 	.word	0x08001343
 8001320:	08001365 	.word	0x08001365
 8001324:	08001365 	.word	0x08001365
 8001328:	08001365 	.word	0x08001365
 800132c:	08001365 	.word	0x08001365
 8001330:	0800134d 	.word	0x0800134d
 8001334:	08001359 	.word	0x08001359
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8001338:	2303      	movs	r3, #3
 800133a:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
      break;
 8001340:	e016      	b.n	8001370 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8001342:	230c      	movs	r3, #12
 8001344:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8001346:	2302      	movs	r3, #2
 8001348:	617b      	str	r3, [r7, #20]
      break;
 800134a:	e011      	b.n	8001370 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 800134c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001350:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8001352:	2308      	movs	r3, #8
 8001354:	617b      	str	r3, [r7, #20]
      break;
 8001356:	e00b      	b.n	8001370 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001358:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800135c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800135e:	230a      	movs	r3, #10
 8001360:	617b      	str	r3, [r7, #20]
      break;
 8001362:	e005      	b.n	8001370 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001364:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001368:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800136a:	230c      	movs	r3, #12
 800136c:	617b      	str	r3, [r7, #20]
      break;
 800136e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	68fa      	ldr	r2, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 800137a:	78ba      	ldrb	r2, [r7, #2]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <XMC_CCU4_SLICE_SetPassiveLevel>:

/* Asserts passive level for the slice output */
void XMC_CCU4_SLICE_SetPassiveLevel(XMC_CCU4_SLICE_t *const slice,
                                    const XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t level)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetPassiveLevel:Invalid Passive level", ((level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW) ||\
                                                                      (level == XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH)));
  
  psl = slice->PSL;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	60fb      	str	r3, [r7, #12]
  psl &= ~((uint32_t) CCU4_CC4_PSL_PSL_Msk);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
  psl |= (uint32_t) level;
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  
  /* Program CC4 slice output passive level */
  slice->PSL = psl;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	619a      	str	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <XMC_SCU_CLOCK_GetUsbClockSource>:
 * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <XMC_SCU_CLOCK_GetUsbClockSource+0x18>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	50004600 	.word	0x50004600

080013ec <XMC_SCU_CLOCK_GetWdtClockSource>:
 * the clock source selected.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <XMC_SCU_CLOCK_GetWdtClockSource+0x18>)
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	50004600 	.word	0x50004600

08001408 <XMC_SCU_CLOCK_GetExternalOutputClockSource>:
 * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n\n
 */
__STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <XMC_SCU_CLOCK_GetExternalOutputClockSource+0x1c>)
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	b2db      	uxtb	r3, r3
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	50004600 	.word	0x50004600

08001428 <XMC_SCU_CLOCK_GetSystemClockFrequency>:
 * fSYS = fCPU << CPUDIV.
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <XMC_SCU_CLOCK_GetSystemClockFrequency+0x20>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <XMC_SCU_CLOCK_GetSystemClockFrequency+0x24>)
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	2000ffc0 	.word	0x2000ffc0
 800144c:	50004600 	.word	0x50004600

08001450 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2000ffc0 	.word	0x2000ffc0

08001468 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return(SCU_GENERAL->MIRRSTS);
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <XMC_SCU_GetMirrorStatus+0x14>)
 800146e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	50004000 	.word	0x50004000

08001480 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8001488:	f001 fd62 	bl	8002f50 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <XMC_SCU_lDelay+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0c      	ldr	r2, [pc, #48]	; (80014c4 <XMC_SCU_lDelay+0x44>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0c9a      	lsrs	r2, r3, #18
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	e003      	b.n	80014ae <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80014a6:	bf00      	nop
  for (i = 0U; i < delay; ++i)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3301      	adds	r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3f7      	bcc.n	80014a6 <XMC_SCU_lDelay+0x26>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000ffc0 	.word	0x2000ffc0
 80014c4:	431bde83 	.word	0x431bde83

080014c8 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80014d2:	689a      	ldr	r2, [r3, #8]
 80014d4:	4904      	ldr	r1, [pc, #16]	; (80014e8 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	608b      	str	r3, [r1, #8]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	50004074 	.word	0x50004074

080014ec <XMC_SCU_INTERRUPT_DisableEvent>:

/* API to disable the SCU event */
void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4904      	ldr	r1, [pc, #16]	; (8001510 <XMC_SCU_INTERRUPT_DisableEvent+0x24>)
 80014fe:	4013      	ands	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	50004074 	.word	0x50004074

08001514 <XMC_SCU_INTERRUPT_TriggerEvent>:

/* API to trigger the SCU event */
void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 800151e:	691a      	ldr	r2, [r3, #16]
 8001520:	4904      	ldr	r1, [pc, #16]	; (8001534 <XMC_SCU_INTERRUPT_TriggerEvent+0x20>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4313      	orrs	r3, r2
 8001526:	610b      	str	r3, [r1, #16]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	50004074 	.word	0x50004074

08001538 <XMC_SCU_INTERUPT_GetEventStatus>:

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800153e:	685b      	ldr	r3, [r3, #4]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	50004074 	.word	0x50004074

08001550 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <XMC_SCU_INTERRUPT_ClearEventStatus+0x1c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60d3      	str	r3, [r2, #12]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	50004074 	.word	0x50004074

08001570 <XMC_SCU_GetBootMode>:


/* API to retrieve the currently deployed device bootmode */
uint32_t XMC_SCU_GetBootMode(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <XMC_SCU_GetBootMode+0x18>)
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	50004000 	.word	0x50004000

0800158c <XMC_SCU_SetBootMode>:

/* API to program a new device bootmode */
void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	80fb      	strh	r3, [r7, #6]
  SCU_GENERAL->STCON = (uint32_t)bootmode;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <XMC_SCU_SetBootMode+0x1c>)
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	6113      	str	r3, [r2, #16]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	50004000 	.word	0x50004000

080015ac <XMC_SCU_ReadGPR>:

/* API to read from General purpose register */
uint32_t XMC_SCU_ReadGPR(const uint32_t index)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return (SCU_GENERAL->GPR[index]);
 80015b4:	4a05      	ldr	r2, [pc, #20]	; (80015cc <XMC_SCU_ReadGPR+0x20>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	330a      	adds	r3, #10
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	685b      	ldr	r3, [r3, #4]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	50004000 	.word	0x50004000

080015d0 <XMC_SCU_WriteGPR>:

/* API to write to GPR */
void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->GPR[index] = data;
 80015da:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <XMC_SCU_WriteGPR+0x24>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	330a      	adds	r3, #10
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	605a      	str	r2, [r3, #4]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	50004000 	.word	0x50004000

080015f8 <XMC_SCU_EnableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3328      	adds	r3, #40	; 0x28
 8001608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800160c:	2101      	movs	r1, #1
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	fa01 f303 	lsl.w	r3, r1, r3
 8001614:	4905      	ldr	r1, [pc, #20]	; (800162c <XMC_SCU_EnableOutOfRangeComparator+0x34>)
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3328      	adds	r3, #40	; 0x28
 800161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	50004000 	.word	0x50004000

08001630 <XMC_SCU_DisableOutOfRangeComparator>:

/* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
  XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel));
   
  SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3328      	adds	r3, #40	; 0x28
 8001640:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001644:	2101      	movs	r1, #1
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	4906      	ldr	r1, [pc, #24]	; (8001668 <XMC_SCU_DisableOutOfRangeComparator+0x38>)
 8001650:	401a      	ands	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3328      	adds	r3, #40	; 0x28
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	50004000 	.word	0x50004000

0800166c <XMC_SCU_CalibrateTemperatureSensor>:

/* API to calibrate temperature sensor */
void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	011a      	lsls	r2, r3, #4
                        (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	02db      	lsls	r3, r3, #11
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 800167e:	4313      	orrs	r3, r2
 8001680:	4a05      	ldr	r2, [pc, #20]	; (8001698 <XMC_SCU_CalibrateTemperatureSensor+0x2c>)
                        (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 8001682:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
  SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 8001686:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                        (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	50004000 	.word	0x50004000

0800169c <XMC_SCU_EnableTemperatureSensor>:
/* API to enable die temperature measurement by powering the DTS module. */
void XMC_SCU_EnableTemperatureSensor(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <XMC_SCU_EnableTemperatureSensor+0x20>)
 80016a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <XMC_SCU_EnableTemperatureSensor+0x20>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	50004000 	.word	0x50004000

080016c0 <XMC_SCU_DisableTemperatureSensor>:

/* API to disable die temperature measurement by powering the DTS module off. */
void XMC_SCU_DisableTemperatureSensor(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <XMC_SCU_DisableTemperatureSensor+0x20>)
 80016c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <XMC_SCU_DisableTemperatureSensor+0x20>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	50004000 	.word	0x50004000

080016e4 <XMC_SCU_IsTemperatureSensorEnabled>:

/* API to provide the die temperature sensor power status. */
bool XMC_SCU_IsTemperatureSensorEnabled(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <XMC_SCU_IsTemperatureSensorEnabled+0x24>)
 80016ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf0c      	ite	eq
 80016f6:	2301      	moveq	r3, #1
 80016f8:	2300      	movne	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	50004000 	.word	0x50004000

0800170c <XMC_SCU_IsTemperatureSensorReady>:

/* API to check if the die temperature sensor is ready to start a measurement. */
bool XMC_SCU_IsTemperatureSensorReady(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <XMC_SCU_IsTemperatureSensorReady+0x24>)
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171a:	2b00      	cmp	r3, #0
 800171c:	bf14      	ite	ne
 800171e:	2301      	movne	r3, #1
 8001720:	2300      	moveq	r3, #0
 8001722:	b2db      	uxtb	r3, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	50004000 	.word	0x50004000

08001734 <XMC_SCU_StartTemperatureMeasurement>:
/* API to start device temperature measurements */
XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	71fb      	strb	r3, [r7, #7]

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 800173e:	f7ff ffd1 	bl	80016e4 <XMC_SCU_IsTemperatureSensorEnabled>
 8001742:	4603      	mov	r3, r0
 8001744:	f083 0301 	eor.w	r3, r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <XMC_SCU_StartTemperatureMeasurement+0x1e>
  {
    status = XMC_SCU_STATUS_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	71fb      	strb	r3, [r7, #7]
  }
   
  if (XMC_SCU_IsTemperatureSensorBusy() == true)
 8001752:	f000 f831 	bl	80017b8 <XMC_SCU_IsTemperatureSensorBusy>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <XMC_SCU_StartTemperatureMeasurement+0x2c>
  {
    status = XMC_SCU_STATUS_BUSY;
 800175c:	2302      	movs	r3, #2
 800175e:	71fb      	strb	r3, [r7, #7]
  }

  /* And start the measurement */
  SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8001762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <XMC_SCU_StartTemperatureMeasurement+0x48>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  return (status);
 8001770:	79fb      	ldrb	r3, [r7, #7]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	50004000 	.word	0x50004000

08001780 <XMC_SCU_GetTemperatureMeasurement>:

/* API to retrieve the temperature measured */
uint32_t XMC_SCU_GetTemperatureMeasurement(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
  uint32_t temperature;

  if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 8001786:	f7ff ffad 	bl	80016e4 <XMC_SCU_IsTemperatureSensorEnabled>
 800178a:	4603      	mov	r3, r0
 800178c:	f083 0301 	eor.w	r3, r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <XMC_SCU_GetTemperatureMeasurement+0x1e>
  {
    temperature = 0x7FFFFFFFUL;
 8001796:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	e005      	b.n	80017aa <XMC_SCU_GetTemperatureMeasurement+0x2a>
  }
  else
  {
    temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL_DTSSTAT_RESULT_Pos);
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <XMC_SCU_GetTemperatureMeasurement+0x34>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a8:	607b      	str	r3, [r7, #4]
  }
  
  return ((uint32_t)temperature);
 80017aa:	687b      	ldr	r3, [r7, #4]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	50004000 	.word	0x50004000

080017b8 <XMC_SCU_IsTemperatureSensorBusy>:

/* API to know whether Die temperature sensor is busy */
bool XMC_SCU_IsTemperatureSensorBusy(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <XMC_SCU_IsTemperatureSensorBusy+0x24>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	bf14      	ite	ne
 80017ca:	2301      	movne	r3, #1
 80017cc:	2300      	moveq	r3, #0
 80017ce:	b2db      	uxtb	r3, r3
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	50004000 	.word	0x50004000

080017e0 <XMC_SCU_WriteToRetentionMemory>:
}
#endif  

/* API to write into Retention memory in hibernate domain */
void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t rmacr;
  
  /* Get the address right */  
  rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	041b      	lsls	r3, r3, #16
 80017ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80017f2:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
  
  /* Write desired data into RMDATA register */  
  SCU_GENERAL->RMDATA = data;
 80017fc:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <XMC_SCU_WriteToRetentionMemory+0x48>)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  
  /* Write address & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8001804:	4a08      	ldr	r2, [pc, #32]	; (8001828 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 800180c:	bf00      	nop
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <XMC_SCU_WriteToRetentionMemory+0x48>)
 8001810:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f8      	bne.n	800180e <XMC_SCU_WriteToRetentionMemory+0x2e>
  {
  }
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	50004000 	.word	0x50004000

0800182c <XMC_SCU_ReadFromRetentionMemory>:

/* API to read from Retention memory in hibernate domain */
uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t rmacr;

  /* Get the address right */  
  rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800183c:	60fb      	str	r3, [r7, #12]
  
  /* Transfer from RMDATA to Retention memory */
  rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
  
  /* Writing an adress & direction of transfer into RMACR register */  
  SCU_GENERAL->RMACR = rmacr;
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  
  /* Wait until the update of RMX register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 800184e:	bf00      	nop
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001852:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001856:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f8      	bne.n	8001850 <XMC_SCU_ReadFromRetentionMemory+0x24>
  {
  }

  return (SCU_GENERAL->RMDATA);
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <XMC_SCU_ReadFromRetentionMemory+0x44>)
 8001860:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	50004000 	.word	0x50004000

08001874 <XMC_SCU_CLOCK_Init>:

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b085      	sub	sp, #20
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
                 (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                 (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800187c:	2000      	movs	r0, #0
 800187e:	f000 faf1 	bl	8001e64 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8001882:	f000 fd7f 	bl	8002384 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	79db      	ldrb	r3, [r3, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800188e:	f000 ff77 	bl	8002780 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8001892:	bf00      	nop
 8001894:	f000 ff62 	bl	800275c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8001898:	4603      	mov	r3, r0
 800189a:	f083 0301 	eor.w	r3, r3, #1
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f7      	bne.n	8001894 <XMC_SCU_CLOCK_Init+0x20>
  }
  
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);  
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7a5b      	ldrb	r3, [r3, #9]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fb6f 	bl	8001f8c <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80018ae:	bf00      	nop
 80018b0:	f7ff fdda 	bl	8001468 <XMC_SCU_GetMirrorStatus>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1fa      	bne.n	80018b0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7a1b      	ldrb	r3, [r3, #8]
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fd0c 	bl	80022dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7c1b      	ldrb	r3, [r3, #16]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 fb7f 	bl	8001fcc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7c5b      	ldrb	r3, [r3, #17]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fba6 	bl	8002024 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7c9b      	ldrb	r3, [r3, #18]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fb8b 	bl	8001ff8 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7cdb      	ldrb	r3, [r3, #19]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fbb2 	bl	8002050 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	799b      	ldrb	r3, [r3, #6]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00a      	beq.n	800190a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80018f4:	f000 ffd8 	bl	80028a8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while(XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80018f8:	bf00      	nop
 80018fa:	f000 fffd 	bl	80028f8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80018fe:	4603      	mov	r3, r0
 8001900:	f083 0301 	eor.w	r3, r3, #1
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f7      	bne.n	80018fa <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	78db      	ldrb	r3, [r3, #3]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <XMC_SCU_CLOCK_Init+0xa4>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8001912:	f001 f855 	bl	80029c0 <XMC_SCU_CLOCK_DisableSystemPll>
 8001916:	e011      	b.n	800193c <XMC_SCU_CLOCK_Init+0xc8>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8001918:	f001 f840 	bl	800299c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	8898      	ldrh	r0, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	78d9      	ldrb	r1, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	785b      	ldrb	r3, [r3, #1]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001928:	461a      	mov	r2, r3
                                 (uint32_t)config->syspll_config.n_div,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	781b      	ldrb	r3, [r3, #0]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800192e:	461c      	mov	r4, r3
                                 (uint32_t)config->syspll_config.k_div);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	789b      	ldrb	r3, [r3, #2]
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	4623      	mov	r3, r4
 8001938:	f001 f854 	bl	80029e4 <XMC_SCU_CLOCK_StartSystemPll>
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d103      	bne.n	800194e <XMC_SCU_CLOCK_Init+0xda>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8001946:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800194a:	f000 fa8b 	bl	8001e64 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800194e:	f001 faff 	bl	8002f50 <SystemCoreClockUpdate>
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}
	...

0800195c <XMC_SCU_TRAP_Enable>:

/* API to enable a trap source */
void XMC_SCU_TRAP_Enable(const uint32_t trap)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <XMC_SCU_TRAP_Enable+0x24>)
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	43db      	mvns	r3, r3
 800196c:	4904      	ldr	r1, [pc, #16]	; (8001980 <XMC_SCU_TRAP_Enable+0x24>)
 800196e:	4013      	ands	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	50004160 	.word	0x50004160

08001984 <XMC_SCU_TRAP_Disable>:

/* API to disable a trap source */
void XMC_SCU_TRAP_Disable(const uint32_t trap)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <XMC_SCU_TRAP_Disable+0x20>)
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	4904      	ldr	r1, [pc, #16]	; (80019a4 <XMC_SCU_TRAP_Disable+0x20>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	50004160 	.word	0x50004160

080019a8 <XMC_SCU_TRAP_GetStatus>:

/* API to determine if a trap source has generated event */
uint32_t XMC_SCU_TRAP_GetStatus(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return (SCU_TRAP->TRAPRAW);
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <XMC_SCU_TRAP_GetStatus+0x14>)
 80019ae:	685b      	ldr	r3, [r3, #4]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	50004160 	.word	0x50004160

080019c0 <XMC_SCU_TRAP_Trigger>:

/* API to manually trigger a trap event */
void XMC_SCU_TRAP_Trigger(const uint32_t trap)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPSET = (uint32_t)trap;
 80019c8:	4a04      	ldr	r2, [pc, #16]	; (80019dc <XMC_SCU_TRAP_Trigger+0x1c>)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6113      	str	r3, [r2, #16]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	50004160 	.word	0x50004160

080019e0 <XMC_SCU_TRAP_ClearStatus>:

/* API to clear a trap event */
void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  SCU_TRAP->TRAPCLR = (uint32_t)trap;
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <XMC_SCU_TRAP_ClearStatus+0x1c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60d3      	str	r3, [r2, #12]
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	50004160 	.word	0x50004160

08001a00 <XMC_SCU_PARITY_ClearStatus>:

/* API to clear parity error event */
void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	4904      	ldr	r1, [pc, #16]	; (8001a20 <XMC_SCU_PARITY_ClearStatus+0x20>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	614b      	str	r3, [r1, #20]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	5000413c 	.word	0x5000413c

08001a24 <XMC_SCU_PARITY_GetStatus>:

/* API to determine if the specified parity error has occured or not */
uint32_t XMC_SCU_PARITY_GetStatus(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return (SCU_PARITY->PEFLAG);
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <XMC_SCU_PARITY_GetStatus+0x14>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
} 
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	5000413c 	.word	0x5000413c

08001a3c <XMC_SCU_PARITY_Enable>:

/* API to enable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Enable(const uint32_t memory)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN |= (uint32_t)memory; 
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <XMC_SCU_PARITY_Enable+0x20>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4904      	ldr	r1, [pc, #16]	; (8001a5c <XMC_SCU_PARITY_Enable+0x20>)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	5000413c 	.word	0x5000413c

08001a60 <XMC_SCU_PARITY_Disable>:

/* API to disable parity error checking for the selected on-chip RAM type */
void XMC_SCU_PARITY_Disable(const uint32_t memory)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PEEN &= (uint32_t)~memory; 
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <XMC_SCU_PARITY_Disable+0x24>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	4904      	ldr	r1, [pc, #16]	; (8001a84 <XMC_SCU_PARITY_Disable+0x24>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	5000413c 	.word	0x5000413c

08001a88 <XMC_SCU_PARITY_EnableTrapGeneration>:

/* API to enable trap assertion for the parity error source */
void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE |= (uint32_t)memory; 
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4904      	ldr	r1, [pc, #16]	; (8001aa8 <XMC_SCU_PARITY_EnableTrapGeneration+0x20>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	5000413c 	.word	0x5000413c

08001aac <XMC_SCU_PARITY_DisableTrapGeneration>:

/* API to disable the assertion of trap for the parity error source */
void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  SCU_PARITY->PETE &= (uint32_t)~memory; 
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	4904      	ldr	r1, [pc, #16]	; (8001ad0 <XMC_SCU_PARITY_DisableTrapGeneration+0x24>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	608b      	str	r3, [r1, #8]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	5000413c 	.word	0x5000413c

08001ad4 <XMC_SCU_INTERRUPT_EnableNmiRequest>:

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	4904      	ldr	r1, [pc, #16]	; (8001af4 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	614b      	str	r3, [r1, #20]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	50004074 	.word	0x50004074

08001af8 <XMC_SCU_INTERRUPT_DisableNmiRequest>:

/* Disables a NMI source */
void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001b02:	695a      	ldr	r2, [r3, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	4904      	ldr	r1, [pc, #16]	; (8001b1c <XMC_SCU_INTERRUPT_DisableNmiRequest+0x24>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	614b      	str	r3, [r1, #20]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	50004074 	.word	0x50004074

08001b20 <XMC_SCU_RESET_AssertPeripheralReset>:

/* API to manually assert a reset request */
void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0f1b      	lsrs	r3, r3, #28
 8001b2c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b34:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <XMC_SCU_RESET_AssertPeripheralReset+0x38>)
 8001b44:	4413      	add	r3, r2
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	601a      	str	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	50004410 	.word	0x50004410

08001b5c <XMC_SCU_RESET_DeassertPeripheralReset>:

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0f1b      	lsrs	r3, r3, #28
 8001b68:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b70:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8001b80:	4413      	add	r3, r2
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	50004414 	.word	0x50004414

08001b98 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0f1b      	lsrs	r3, r3, #28
 8001ba4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001bac:	60bb      	str	r3, [r7, #8]

  return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	5000440c 	.word	0x5000440c

08001be0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>:

/*
 * API to retrieve frequency of System PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t p_div;
  uint32_t n_div;
  uint32_t k2_div;

  clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 8001be6:	f000 f839 	bl	8001c5c <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>
 8001bea:	60f8      	str	r0, [r7, #12]
  if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d009      	beq.n	8001c0c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x2c>
  {
    /* Prescalar mode - fOSC is the parent*/
    clock_frequency = (uint32_t)(clock_frequency / 
                      ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1UL));
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c00:	3301      	adds	r3, #1
    clock_frequency = (uint32_t)(clock_frequency / 
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e01f      	b.n	8001c4c <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x6c>
  }
  else
  {
    p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1UL);
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	0e1b      	lsrs	r3, r3, #24
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3301      	adds	r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
    n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1UL);
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c24:	3301      	adds	r3, #1
 8001c26:	607b      	str	r3, [r7, #4]
    k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1UL);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <XMC_SCU_CLOCK_GetSystemPllClockFrequency+0x78>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c32:	3301      	adds	r3, #1
 8001c34:	603b      	str	r3, [r7, #0]
       
    clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	fb02 f203 	mul.w	r2, r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	6839      	ldr	r1, [r7, #0]
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	60fb      	str	r3, [r7, #12]
  }

  return (clock_frequency);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	50004710 	.word	0x50004710

08001c5c <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency>:

/**
 * API to retrieve frequency of System PLL VCO input clock
 */
uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;

  /* Prescalar mode - fOSC is the parent*/
  if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x28>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d103      	bne.n	8001c76 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1a>
  {
    clock_frequency = OSCHP_GetFrequency();
 8001c6e:	f001 f9d9 	bl	8003024 <OSCHP_GetFrequency>
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	e001      	b.n	8001c7a <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x1e>
  }
  else
  {
    clock_frequency = OFI_FREQUENCY;
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency+0x2c>)
 8001c78:	607b      	str	r3, [r7, #4]
  }
  
  return (clock_frequency);
 8001c7a:	687b      	ldr	r3, [r7, #4]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	50004710 	.word	0x50004710
 8001c88:	016e3600 	.word	0x016e3600

08001c8c <XMC_SCU_CLOCK_GetUsbPllClockFrequency>:

/*
 * API to retrieve frequency of USB PLL output clock
 */
uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
  uint32_t clock_frequency;
  uint32_t n_div;
  uint32_t p_div;
  
  clock_frequency = OSCHP_GetFrequency();
 8001c92:	f001 f9c7 	bl	8003024 <OSCHP_GetFrequency>
 8001c96:	60f8      	str	r0, [r7, #12]
  if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d116      	bne.n	8001cd2 <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x46>
  {
    /* Normal mode - fVCO is the parent*/
    n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_NDIV_Pos) + 1UL);
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cae:	3301      	adds	r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
    p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PDIV_Pos) + 1UL);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <XMC_SCU_CLOCK_GetUsbPllClockFrequency+0x50>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	0e1b      	lsrs	r3, r3, #24
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	607b      	str	r3, [r7, #4]
    clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	fb02 f203 	mul.w	r2, r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	60fb      	str	r3, [r7, #12]
  }
  return (clock_frequency);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	50004710 	.word	0x50004710

08001ce0 <XMC_SCU_CLOCK_GetCcuClockFrequency>:

/*
 * API to retrieve frequency of CCU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001cea:	f7ff fb9d 	bl	8001428 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001cee:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <XMC_SCU_CLOCK_GetCcuClockFrequency+0x28>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	fa22 f303 	lsr.w	r3, r2, r3
                                              SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	50004600 	.word	0x50004600

08001d0c <XMC_SCU_CLOCK_GetUsbClockFrequency>:

/*
 * API to retrieve USB and SDMMC clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_USBCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 8001d16:	f7ff fb5b 	bl	80013d0 <XMC_SCU_CLOCK_GetUsbClockSource>
 8001d1a:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d22:	d103      	bne.n	8001d2c <XMC_SCU_CLOCK_GetUsbClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001d24:	f7ff ff5c 	bl	8001be0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	e005      	b.n	8001d38 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  }
  else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x2c>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001d32:	f7ff ffab 	bl	8001c8c <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001d36:	6078      	str	r0, [r7, #4]
  }
  else
  {
  }

  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <XMC_SCU_CLOCK_GetUsbClockFrequency+0x44>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
                                   SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 8001d40:	3301      	adds	r3, #1
  return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	50004600 	.word	0x50004600

08001d54 <XMC_SCU_CLOCK_GetEbuClockFrequency>:
#if defined(EBU)
/*
 * API to retrieve EBU clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
  uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001d5a:	f7ff ff41 	bl	8001be0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001d5e:	6078      	str	r0, [r7, #4]
  
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <XMC_SCU_CLOCK_GetEbuClockFrequency+0x24>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                                   SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 8001d68:	3301      	adds	r3, #1
  return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	50004600 	.word	0x50004600

08001d7c <XMC_SCU_CLOCK_GetWdtClockFrequency>:

/*
 * API to retrieve WDT clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 8001d86:	f7ff fb31 	bl	80013ec <XMC_SCU_CLOCK_GetWdtClockSource>
 8001d8a:	6038      	str	r0, [r7, #0]

  if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d92:	d103      	bne.n	8001d9c <XMC_SCU_CLOCK_GetWdtClockFrequency+0x20>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001d94:	f7ff ff24 	bl	8001be0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	e00c      	b.n	8001db6 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x2c>
  {
    frequency = OFI_FREQUENCY;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <XMC_SCU_CLOCK_GetWdtClockFrequency+0x50>)
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	e006      	b.n	8001db6 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  }
  else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dae:	d102      	bne.n	8001db6 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x3a>
  {
    frequency = OSI_FREQUENCY;
 8001db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001db4:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <XMC_SCU_CLOCK_GetWdtClockFrequency+0x54>)
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	b2db      	uxtb	r3, r3
                                    SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 8001dbc:	3301      	adds	r3, #1
  return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	016e3600 	.word	0x016e3600
 8001dd0:	50004600 	.word	0x50004600

08001dd4 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency>:
/**
 * @brief API to retrieve EXTERNAL-OUT clock frequency
 * @retval Clock frequency
 */
uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0UL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;

  clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 8001dde:	f7ff fb13 	bl	8001408 <XMC_SCU_CLOCK_GetExternalOutputClockSource>
 8001de2:	4603      	mov	r3, r0
 8001de4:	70fb      	strb	r3, [r7, #3]

  if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d10d      	bne.n	8001e08 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x34>
  {
    frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 8001dec:	f7ff fef8 	bl	8001be0 <XMC_SCU_CLOCK_GetSystemPllClockFrequency>
 8001df0:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001dfc:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	607b      	str	r3, [r7, #4]
 8001e06:	e016      	b.n	8001e36 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x42>
  {
    frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 8001e0e:	f7ff fb0b 	bl	8001428 <XMC_SCU_CLOCK_GetSystemClockFrequency>
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	e00f      	b.n	8001e36 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  }
  else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 8001e16:	78fb      	ldrb	r3, [r7, #3]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d10c      	bne.n	8001e36 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x62>
  {
    frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 8001e1c:	f7ff ff36 	bl	8001c8c <XMC_SCU_CLOCK_GetUsbPllClockFrequency>
 8001e20:	6078      	str	r0, [r7, #4]
    
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <XMC_SCU_CLOCK_GetExternalOutputClockFrequency+0x6c>)
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
                 SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 8001e2c:	3301      	adds	r3, #1
    frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	607b      	str	r3, [r7, #4]
  else
  {

  }

  return (frequency);
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	50004600 	.word	0x50004600

08001e44 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001e48:	f7ff fb02 	bl	8001450 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8001e4c:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f003 0301 	and.w	r3, r3, #1
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8001e56:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	50004600 	.word	0x50004600

08001e64 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001e74:	4904      	ldr	r1, [pc, #16]	; (8001e88 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	50004600 	.word	0x50004600

08001e8c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001e9c:	4904      	ldr	r1, [pc, #16]	; (8001eb0 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	50004600 	.word	0x50004600

08001eb4 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ec4:	4904      	ldr	r1, [pc, #16]	; (8001ed8 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	50004600 	.word	0x50004600

08001edc <XMC_SCU_CLOCK_SetExternalOutputClockSource>:

/* API to select fEXT */
void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	f023 0203 	bic.w	r2, r3, #3
                      ((uint32_t)source);
 8001eee:	79fb      	ldrb	r3, [r7, #7]
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 8001ef0:	4904      	ldr	r1, [pc, #16]	; (8001f04 <XMC_SCU_CLOCK_SetExternalOutputClockSource+0x28>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	50004600 	.word	0x50004600

08001f08 <XMC_SCU_CLOCK_SetSystemPllClockSource>:

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d108      	bne.n	8001f2a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001f1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
  }
}
 8001f28:	e007      	b.n	8001f3a <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8001f2a:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	4a06      	ldr	r2, [pc, #24]	; (8001f48 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x40>)
 8001f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	60d3      	str	r3, [r2, #12]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	50004710 	.word	0x50004710

08001f4c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001f56:	bf00      	nop
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8001f5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f8      	bne.n	8001f58 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8001f70:	4905      	ldr	r1, [pc, #20]	; (8001f88 <XMC_SCU_HIB_SetRtcClockSource+0x3c>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60cb      	str	r3, [r1, #12]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	50004000 	.word	0x50004000
 8001f88:	50004300 	.word	0x50004300

08001f8c <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8001f96:	bf00      	nop
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8001f9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f8      	bne.n	8001f98 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8001fae:	79fb      	ldrb	r3, [r7, #7]
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8001fb0:	4905      	ldr	r1, [pc, #20]	; (8001fc8 <XMC_SCU_HIB_SetStandbyClockSource+0x3c>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60cb      	str	r3, [r1, #12]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	50004000 	.word	0x50004000
 8001fc8:	50004300 	.word	0x50004300

08001fcc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001fd4:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8001fe0:	4904      	ldr	r1, [pc, #16]	; (8001ff4 <XMC_SCU_CLOCK_SetSystemClockDivider+0x28>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60cb      	str	r3, [r1, #12]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	50004600 	.word	0x50004600

08001ff8 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800200c:	4904      	ldr	r1, [pc, #16]	; (8002020 <XMC_SCU_CLOCK_SetCcuClockDivider+0x28>)
 800200e:	4313      	orrs	r3, r2
 8002010:	620b      	str	r3, [r1, #32]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	50004600 	.word	0x50004600

08002024 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8002038:	4904      	ldr	r1, [pc, #16]	; (800204c <XMC_SCU_CLOCK_SetCpuClockDivider+0x28>)
 800203a:	4313      	orrs	r3, r2
 800203c:	610b      	str	r3, [r1, #16]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	50004600 	.word	0x50004600

08002050 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8002064:	4904      	ldr	r1, [pc, #16]	; (8002078 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x28>)
 8002066:	4313      	orrs	r3, r2
 8002068:	614b      	str	r3, [r1, #20]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	50004600 	.word	0x50004600

0800207c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <XMC_SCU_CLOCK_SetUsbClockDivider+0x28>)
 8002092:	4313      	orrs	r3, r2
 8002094:	618b      	str	r3, [r1, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	50004600 	.word	0x50004600

080020a8 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80020bc:	4904      	ldr	r1, [pc, #16]	; (80020d0 <XMC_SCU_CLOCK_SetEbuClockDivider+0x28>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	61cb      	str	r3, [r1, #28]
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	50004600 	.word	0x50004600

080020d4 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80020e8:	4904      	ldr	r1, [pc, #16]	; (80020fc <XMC_SCU_CLOCK_SetWdtClockDivider+0x28>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	624b      	str	r3, [r1, #36]	; 0x24
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	50004600 	.word	0x50004600

08002100 <XMC_SCU_CLOCK_SetExternalOutputClockDivider>:

/* API to program the divider placed between fext and its parent */
void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
              (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );

  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	3a01      	subs	r2, #1
 8002118:	0412      	lsls	r2, r2, #16
  SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 800211a:	4904      	ldr	r1, [pc, #16]	; (800212c <XMC_SCU_CLOCK_SetExternalOutputClockDivider+0x2c>)
 800211c:	4313      	orrs	r3, r2
 800211e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	50004600 	.word	0x50004600

08002130 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800213a:	4a04      	ldr	r2, [pc, #16]	; (800214c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	6053      	str	r3, [r2, #4]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	50004600 	.word	0x50004600

08002150 <XMC_SCU_CLOCK_DisableClock>:

/* API to disable a given module clock */
void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKCLR = ((uint32_t)clock);
 800215a:	4a04      	ldr	r2, [pc, #16]	; (800216c <XMC_SCU_CLOCK_DisableClock+0x1c>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	6093      	str	r3, [r2, #8]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	50004600 	.word	0x50004600

08002170 <XMC_SCU_CLOCK_IsClockEnabled>:

/* API to determine if module clock of the given peripheral is enabled */
bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <XMC_SCU_CLOCK_IsClockEnabled+0x28>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	bf14      	ite	ne
 8002186:	2301      	movne	r3, #1
 8002188:	2300      	moveq	r3, #0
 800218a:	b2db      	uxtb	r3, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	50004600 	.word	0x50004600

0800219c <XMC_SCU_POWER_GetEVR13Voltage>:
  return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
}
#endif

float XMC_SCU_POWER_GetEVR13Voltage(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 80021a0:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <XMC_SCU_POWER_GetEVR13Voltage+0x28>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021c8 <XMC_SCU_POWER_GetEVR13Voltage+0x2c>
 80021b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021b6:	ee17 3a90 	vmov	r3, s15
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	50004200 	.word	0x50004200
 80021c8:	3bbe0ded 	.word	0x3bbe0ded

080021cc <XMC_SCU_POWER_GetEVR33Voltage>:

float XMC_SCU_POWER_GetEVR33Voltage(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <XMC_SCU_POWER_GetEVR33Voltage+0x2c>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	ee07 3a90 	vmov	s15, r3
 80021dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80021fc <XMC_SCU_POWER_GetEVR33Voltage+0x30>
 80021e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e8:	ee17 3a90 	vmov	r3, s15
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	50004200 	.word	0x50004200
 80021fc:	3cb851ec 	.word	0x3cb851ec

08002200 <XMC_SCU_CLOCK_EnableUsbPll>:

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	4a05      	ldr	r2, [pc, #20]	; (8002220 <XMC_SCU_CLOCK_EnableUsbPll+0x20>)
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	f023 0302 	bic.w	r3, r3, #2
 8002212:	6153      	str	r3, [r2, #20]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	50004710 	.word	0x50004710

08002224 <XMC_SCU_CLOCK_DisableUsbPll>:

/* API to disable USB PLL for USB clock */
void XMC_SCU_CLOCK_DisableUsbPll(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	4a05      	ldr	r2, [pc, #20]	; (8002244 <XMC_SCU_CLOCK_DisableUsbPll+0x20>)
 800222e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002232:	f043 0302 	orr.w	r3, r3, #2
 8002236:	6153      	str	r3, [r2, #20]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	50004710 	.word	0x50004710

08002248 <XMC_SCU_CLOCK_StartUsbPll>:

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4a19      	ldr	r2, [pc, #100]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	4a16      	ldr	r2, [pc, #88]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002264:	f043 0310 	orr.w	r3, r3, #16
 8002268:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3b01      	subs	r3, #1
 800226e:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	061b      	lsls	r3, r3, #24
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8002276:	4911      	ldr	r1, [pc, #68]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002278:	4313      	orrs	r3, r2
 800227a:	614b      	str	r3, [r1, #20]

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	4a0e      	ldr	r2, [pc, #56]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002286:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800228e:	f023 0310 	bic.w	r3, r3, #16
 8002292:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	4a08      	ldr	r2, [pc, #32]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 800229a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229e:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80022a0:	bf00      	nop
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <XMC_SCU_CLOCK_StartUsbPll+0x74>)
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f9      	beq.n	80022a2 <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	50004710 	.word	0x50004710

080022c0 <XMC_SCU_CLOCK_StopUsbPll>:

/* API to disable USB PLL operation */
void XMC_SCU_CLOCK_StopUsbPll(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <XMC_SCU_CLOCK_StopUsbPll+0x14>)
 80022c6:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <XMC_SCU_CLOCK_StopUsbPll+0x18>)
 80022c8:	615a      	str	r2, [r3, #20]
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	50004710 	.word	0x50004710
 80022d8:	00010003 	.word	0x00010003

080022dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80022ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f0:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d10e      	bne.n	8002316 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a09      	ldr	r2, [pc, #36]	; (8002324 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80022fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002302:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8002304:	2064      	movs	r0, #100	; 0x64
 8002306:	f7ff f8bb 	bl	8001480 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a05      	ldr	r2, [pc, #20]	; (8002324 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8002310:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002314:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8002316:	2064      	movs	r0, #100	; 0x64
 8002318:	f7ff f8b2 	bl	8001480 <XMC_SCU_lDelay>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	50004710 	.word	0x50004710

08002328 <XMC_SCU_POWER_EnableUsb>:



/* API to enable USB Phy and comparator */
void XMC_SCU_POWER_EnableUsb(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <XMC_SCU_POWER_EnableUsb+0x18>)
 800232e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002332:	605a      	str	r2, [r3, #4]
#else
  SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
#endif
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	50004200 	.word	0x50004200

08002344 <XMC_SCU_POWER_DisableUsb>:

/* API to power down USB Phy and comparator */
void XMC_SCU_POWER_DisableUsb(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
#if defined(USB_OTG_SUPPORTED)
  SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <XMC_SCU_POWER_DisableUsb+0x18>)
 800234a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800234e:	609a      	str	r2, [r3, #8]
#else
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
#endif    
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	50004200 	.word	0x50004200

08002360 <XMC_SCU_CLOCK_IsUsbPllLocked>:

/* API to check USB PLL is locked or not */
bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <XMC_SCU_CLOCK_IsUsbPllLocked+0x20>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	50004710 	.word	0x50004710

08002384 <XMC_SCU_HIB_EnableHibernateDomain>:

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8002396:	2201      	movs	r2, #1
 8002398:	605a      	str	r2, [r3, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 800239a:	bf00      	nop
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f9      	beq.n	800239c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80023b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ba:	609a      	str	r2, [r3, #8]
    while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 80023bc:	bf00      	nop
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	50004200 	.word	0x50004200
 80023d8:	50004400 	.word	0x50004400

080023dc <XMC_SCU_HIB_DisableHibernateDomain>:

/* API to power down the hibernation domain */
void XMC_SCU_HIB_DisableHibernateDomain(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* Disable hibernate domain */   
  SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <XMC_SCU_HIB_DisableHibernateDomain+0x1c>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	609a      	str	r2, [r3, #8]
  /* Reset of hibernate domain reset */  
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <XMC_SCU_HIB_DisableHibernateDomain+0x20>)
 80023e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ec:	605a      	str	r2, [r3, #4]
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	50004200 	.word	0x50004200
 80023fc:	50004400 	.word	0x50004400

08002400 <XMC_SCU_HIB_IsHibernateDomainEnabled>:

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7300 	and.w	r3, r3, #512	; 0x200
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8002420:	2300      	movs	r3, #0
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	b2db      	uxtb	r3, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	50004200 	.word	0x50004200
 8002438:	50004400 	.word	0x50004400

0800243c <XMC_SCU_HIB_EnableInternalSlowClock>:

/* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_EnableInternalSlowClock(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002440:	bf00      	nop
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <XMC_SCU_HIB_EnableInternalSlowClock+0x2c>)
 8002444:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f8      	bne.n	8002442 <XMC_SCU_HIB_EnableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	4a05      	ldr	r2, [pc, #20]	; (800246c <XMC_SCU_HIB_EnableInternalSlowClock+0x30>)
 8002456:	f023 0301 	bic.w	r3, r3, #1
 800245a:	6153      	str	r3, [r2, #20]
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	50004000 	.word	0x50004000
 800246c:	50004300 	.word	0x50004300

08002470 <XMC_SCU_HIB_DisableInternalSlowClock>:

/* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
void XMC_SCU_HIB_DisableInternalSlowClock(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 8002474:	bf00      	nop
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <XMC_SCU_HIB_DisableInternalSlowClock+0x2c>)
 8002478:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f8      	bne.n	8002476 <XMC_SCU_HIB_DisableInternalSlowClock+0x6>
  {
    /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	4a05      	ldr	r2, [pc, #20]	; (80024a0 <XMC_SCU_HIB_DisableInternalSlowClock+0x30>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6153      	str	r3, [r2, #20]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	50004000 	.word	0x50004000
 80024a0:	50004300 	.word	0x50004300

080024a4 <XMC_SCU_HIB_ClearEventStatus>:

void XMC_SCU_HIB_ClearEventStatus(int32_t event)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 80024ac:	bf00      	nop
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <XMC_SCU_HIB_ClearEventStatus+0x2c>)
 80024b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f8      	bne.n	80024ae <XMC_SCU_HIB_ClearEventStatus+0xa>
  {
    /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
  }
  SCU_HIBERNATE->HDCLR = event;
 80024bc:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <XMC_SCU_HIB_ClearEventStatus+0x30>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6053      	str	r3, [r2, #4]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	50004000 	.word	0x50004000
 80024d4:	50004300 	.word	0x50004300

080024d8 <XMC_SCU_HIB_TriggerEvent>:

void XMC_SCU_HIB_TriggerEvent(int32_t event)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80024e0:	bf00      	nop
 80024e2:	4b08      	ldr	r3, [pc, #32]	; (8002504 <XMC_SCU_HIB_TriggerEvent+0x2c>)
 80024e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f8      	bne.n	80024e2 <XMC_SCU_HIB_TriggerEvent+0xa>
  {
    /* Wait until HDSET register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDSET = event;
 80024f0:	4a05      	ldr	r2, [pc, #20]	; (8002508 <XMC_SCU_HIB_TriggerEvent+0x30>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6093      	str	r3, [r2, #8]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	50004000 	.word	0x50004000
 8002508:	50004300 	.word	0x50004300

0800250c <XMC_SCU_HIB_EnableEvent>:

void XMC_SCU_HIB_EnableEvent(int32_t event)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002514:	bf00      	nop
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <XMC_SCU_HIB_EnableEvent+0x30>)
 8002518:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f8      	bne.n	8002516 <XMC_SCU_HIB_EnableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= event;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <XMC_SCU_HIB_EnableEvent+0x34>)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4905      	ldr	r1, [pc, #20]	; (8002540 <XMC_SCU_HIB_EnableEvent+0x34>)
 800252c:	4313      	orrs	r3, r2
 800252e:	60cb      	str	r3, [r1, #12]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	50004000 	.word	0x50004000
 8002540:	50004300 	.word	0x50004300

08002544 <XMC_SCU_HIB_DisableEvent>:

void XMC_SCU_HIB_DisableEvent(int32_t event)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1HI_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1PEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_POSEDGE);
  event = ((event & XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE) << (SCU_HIBERNATE_HDCR_AHIBIO1LO_Pos - SCU_HIBERNATE_HDSTAT_AHIBIO1NEV_Pos)) | (event & (uint32_t)~XMC_SCU_HIB_EVENT_LPAC_HIB_IO_1_NEGEDGE);
#endif
#endif

  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800254c:	bf00      	nop
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <XMC_SCU_HIB_DisableEvent+0x34>)
 8002550:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1f8      	bne.n	800254e <XMC_SCU_HIB_DisableEvent+0xa>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR &= ~event;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <XMC_SCU_HIB_DisableEvent+0x38>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	43d2      	mvns	r2, r2
 8002564:	4611      	mov	r1, r2
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <XMC_SCU_HIB_DisableEvent+0x38>)
 8002568:	400b      	ands	r3, r1
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	50004000 	.word	0x50004000
 800257c:	50004300 	.word	0x50004300

08002580 <XMC_SCU_HIB_EnterHibernateState>:

void XMC_SCU_HIB_EnterHibernateState(void) 
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002584:	bf00      	nop
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <XMC_SCU_HIB_EnterHibernateState+0x2c>)
 8002588:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f8      	bne.n	8002586 <XMC_SCU_HIB_EnterHibernateState+0x6>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <XMC_SCU_HIB_EnterHibernateState+0x30>)
 800259a:	f043 0310 	orr.w	r3, r3, #16
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	50004000 	.word	0x50004000
 80025b0:	50004300 	.word	0x50004300

080025b4 <XMC_SCU_HIB_EnterHibernateStateEx>:

void XMC_SCU_HIB_EnterHibernateStateEx(XMC_SCU_HIB_HIBERNATE_MODE_t mode)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if (mode == XMC_SCU_HIB_HIBERNATE_MODE_EXTERNAL)
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <XMC_SCU_HIB_EnterHibernateStateEx+0x14>
  {
    XMC_SCU_HIB_EnterHibernateState();
 80025c4:	f7ff ffdc 	bl	8002580 <XMC_SCU_HIB_EnterHibernateState>
      /* Wait until HDCR register in hibernate domain is ready to accept a write */
    }
    SCU_HIBERNATE->HINTSET = SCU_HIBERNATE_HINTSET_HIBNINT_Msk;
  }
#endif
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <XMC_SCU_HIB_SetWakeupTriggerInput>:

void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80025da:	bf00      	nop
 80025dc:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <XMC_SCU_HIB_SetWakeupTriggerInput+0x48>)
 80025de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f8      	bne.n	80025dc <XMC_SCU_HIB_SetWakeupTriggerInput+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d106      	bne.n	80025fe <XMC_SCU_HIB_SetWakeupTriggerInput+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a09      	ldr	r2, [pc, #36]	; (800261c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fa:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
  }
}
 80025fc:	e005      	b.n	800260a <XMC_SCU_HIB_SetWakeupTriggerInput+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	4a06      	ldr	r2, [pc, #24]	; (800261c <XMC_SCU_HIB_SetWakeupTriggerInput+0x4c>)
 8002604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002608:	60d3      	str	r3, [r2, #12]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	50004000 	.word	0x50004000
 800261c:	50004300 	.word	0x50004300

08002620 <XMC_SCU_HIB_SetPinMode>:

void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800262c:	bf00      	nop
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <XMC_SCU_HIB_SetPinMode+0x4c>)
 8002630:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f8      	bne.n	800262e <XMC_SCU_HIB_SetPinMode+0xe>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <XMC_SCU_HIB_SetPinMode+0x50>)
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	401a      	ands	r2, r3
                        (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	6839      	ldr	r1, [r7, #0]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin))) |
 800265a:	4905      	ldr	r1, [pc, #20]	; (8002670 <XMC_SCU_HIB_SetPinMode+0x50>)
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	50004000 	.word	0x50004000
 8002670:	50004300 	.word	0x50004300

08002674 <XMC_SCU_HIB_SetPinOutputLevel>:

void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	460a      	mov	r2, r1
 800267e:	71fb      	strb	r3, [r7, #7]
 8002680:	4613      	mov	r3, r2
 8002682:	80bb      	strh	r3, [r7, #4]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002684:	bf00      	nop
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <XMC_SCU_HIB_SetPinOutputLevel+0x50>)
 8002688:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f8      	bne.n	8002686 <XMC_SCU_HIB_SetPinOutputLevel+0x12>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	4013      	ands	r3, r2
                        (level << pin);
 80026a6:	88b9      	ldrh	r1, [r7, #4]
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	fa01 f202 	lsl.w	r2, r1, r2
 80026ae:	4611      	mov	r1, r2
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 80026b0:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <XMC_SCU_HIB_SetPinOutputLevel+0x54>)
 80026b2:	430b      	orrs	r3, r1
 80026b4:	60d3      	str	r3, [r2, #12]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	50004000 	.word	0x50004000
 80026c8:	50004300 	.word	0x50004300

080026cc <XMC_SCU_HIB_SetInput0>:

void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80026d6:	bf00      	nop
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <XMC_SCU_HIB_SetInput0+0x48>)
 80026da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f8      	bne.n	80026d8 <XMC_SCU_HIB_SetInput0+0xc>
  {
    /* Wait until HDCR register in hibernate domain is ready to accept a write */    
  }

  if (pin == XMC_SCU_HIB_IO_0)
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d106      	bne.n	80026fa <XMC_SCU_HIB_SetInput0+0x2e>
  {
    SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <XMC_SCU_HIB_SetInput0+0x4c>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4a09      	ldr	r2, [pc, #36]	; (8002718 <XMC_SCU_HIB_SetInput0+0x4c>)
 80026f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026f6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
  }
}
 80026f8:	e005      	b.n	8002706 <XMC_SCU_HIB_SetInput0+0x3a>
    SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <XMC_SCU_HIB_SetInput0+0x4c>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	4a06      	ldr	r2, [pc, #24]	; (8002718 <XMC_SCU_HIB_SetInput0+0x4c>)
 8002700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002704:	60d3      	str	r3, [r2, #12]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	50004000 	.word	0x50004000
 8002718:	50004300 	.word	0x50004300

0800271c <XMC_SCU_HIB_SetSR0Input>:

void XMC_SCU_HIB_SetSR0Input(XMC_SCU_HIB_SR0_INPUT_t input)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8002726:	bf00      	nop
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <XMC_SCU_HIB_SetSR0Input+0x38>)
 800272a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f8      	bne.n	8002728 <XMC_SCU_HIB_SetSR0Input+0xc>
    /* Wait until HDCR register in hibernate domain is ready to accept a write */
  }
#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk | SCU_HIBERNATE_HDCR_ADIG0SEL_Msk)) | 
#else
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & (uint32_t)~(SCU_HIBERNATE_HDCR_GPI0SEL_Msk)) | 
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	4905      	ldr	r1, [pc, #20]	; (8002758 <XMC_SCU_HIB_SetSR0Input+0x3c>)
 8002742:	4313      	orrs	r3, r2
 8002744:	60cb      	str	r3, [r1, #12]
#endif  
                        input;
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	50004000 	.word	0x50004000
 8002758:	50004300 	.word	0x50004300

0800275c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	bf0c      	ite	eq
 800276c:	2301      	moveq	r3, #1
 800276e:	2300      	movne	r3, #0
 8002770:	b2db      	uxtb	r3, r3
}
 8002772:	4618      	mov	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	50004300 	.word	0x50004300

08002780 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002784:	bf00      	nop
 8002786:	4b17      	ldr	r3, [pc, #92]	; (80027e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 8002788:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800278c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f8      	bne.n	8002786 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until no pending update to OSCULCTRL register in hibernate domain */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 800279a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800279e:	61d3      	str	r3, [r2, #28]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80027a0:	bf00      	nop
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80027a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f8      	bne.n	80027a2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80027b0:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80027b6:	f043 0308 	orr.w	r3, r3, #8
 80027ba:	60d3      	str	r3, [r2, #12]

  /* Enable OSC_ULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 80027bc:	bf00      	nop
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x64>)
 80027c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f8      	bne.n	80027be <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDSET = (uint32_t)SCU_HIBERNATE_HDSET_ULPWDG_Msk;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x68>)
 80027ce:	2208      	movs	r2, #8
 80027d0:	609a      	str	r2, [r3, #8]

  while (XMC_SCU_GetMirrorStatus() != 0)
 80027d2:	bf00      	nop
 80027d4:	f7fe fe48 	bl	8001468 <XMC_SCU_GetMirrorStatus>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1fa      	bne.n	80027d4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x54>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */    
  }
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	50004000 	.word	0x50004000
 80027e8:	50004300 	.word	0x50004300

080027ec <XMC_SCU_CLOCK_DisableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 80027f0:	bf00      	nop
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x2c>)
 80027f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80027f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f8      	bne.n	80027f2 <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	4a05      	ldr	r2, [pc, #20]	; (800281c <XMC_SCU_CLOCK_DisableLowPowerOscillator+0x30>)
 8002806:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800280a:	61d3      	str	r3, [r2, #28]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	50004000 	.word	0x50004000
 800281c:	50004300 	.word	0x50004300

08002820 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002824:	bf00      	nop
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x2c>)
 8002828:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f8      	bne.n	8002826 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL |= SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	4a05      	ldr	r2, [pc, #20]	; (8002850 <XMC_SCU_CLOCK_EnableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800283a:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 800283e:	61d3      	str	r3, [r2, #28]
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	50004000 	.word	0x50004000
 8002850:	50004300 	.word	0x50004300

08002854 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8002858:	bf00      	nop
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x30>)
 800285c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f8      	bne.n	800285a <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x6>
  {
    /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
  }
  SCU_HIBERNATE->OSCULCTRL = (SCU_HIBERNATE->OSCULCTRL & ~(uint32_t)(SCU_HIBERNATE_OSCULCTRL_X1DEN_Msk | SCU_HIBERNATE_OSCULCTRL_MODE_Msk)) |
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 8002870:	4a05      	ldr	r2, [pc, #20]	; (8002888 <XMC_SCU_CLOCK_DisableLowPowerOscillatorGeneralPurposeInput+0x34>)
 8002872:	f043 0320 	orr.w	r3, r3, #32
 8002876:	61d3      	str	r3, [r2, #28]
                             (SCU_HIBERNATE_OSCULCTRL_MODE_OSC_POWER_DOWN << SCU_HIBERNATE_OSCULCTRL_MODE_Pos);                       
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	50004000 	.word	0x50004000
 8002888:	50004300 	.word	0x50004300

0800288c <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <XMC_SCU_CLOCK_GetLowPowerOscillatorGeneralPurposeInputStatus+0x18>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0301 	and.w	r3, r3, #1
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	50004300 	.word	0x50004300

080028a8 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 80028a8:	b598      	push	{r3, r4, r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 80028c0:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 80028c4:	f000 fbae 	bl	8003024 <OSCHP_GetFrequency>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 80028cc:	fba3 2302 	umull	r2, r3, r3, r2
 80028d0:	0d1b      	lsrs	r3, r3, #20
 80028d2:	3b01      	subs	r3, #1
 80028d4:	041b      	lsls	r3, r3, #16
  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 80028d6:	4a06      	ldr	r2, [pc, #24]	; (80028f0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 80028d8:	4323      	orrs	r3, r4
 80028da:	6053      	str	r3, [r2, #4]

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a02      	ldr	r2, [pc, #8]	; (80028ec <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 80028e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80028e6:	6053      	str	r3, [r2, #4]
}
 80028e8:	bf00      	nop
 80028ea:	bd98      	pop	{r3, r4, r7, pc}
 80028ec:	50004710 	.word	0x50004710
 80028f0:	50004700 	.word	0x50004700
 80028f4:	6b5fca6b 	.word	0x6b5fca6b

080028f8 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002904:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	50004710 	.word	0x50004710

08002920 <XMC_SCU_CLOCK_DisableHighPerformanceOscillator>:

/* API to disable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <XMC_SCU_CLOCK_DisableHighPerformanceOscillator+0x1c>)
 800292a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800292e:	6053      	str	r3, [r2, #4]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	50004700 	.word	0x50004700

08002940 <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL |= SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a04      	ldr	r2, [pc, #16]	; (800295c <XMC_SCU_CLOCK_EnableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6053      	str	r3, [r2, #4]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	50004700 	.word	0x50004700

08002960 <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput>:

void XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  SCU_OSC->OSCHPCTRL &= ~SCU_OSC_OSCHPCTRL_X1DEN_Msk;
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <XMC_SCU_CLOCK_DisableHighPerformanceOscillatorGeneralPurposeInput+0x1c>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6053      	str	r3, [r2, #4]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	50004700 	.word	0x50004700

08002980 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus>:

uint32_t XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <XMC_SCU_CLOCK_GetHighPerformanceOscillatorGeneralPurposeInputStatus+0x18>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	50004700 	.word	0x50004700

0800299c <XMC_SCU_CLOCK_EnableSystemPll>:

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a05      	ldr	r2, [pc, #20]	; (80029bc <XMC_SCU_CLOCK_EnableSystemPll+0x20>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	f023 0302 	bic.w	r3, r3, #2
 80029ae:	6053      	str	r3, [r2, #4]
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	50004710 	.word	0x50004710

080029c0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <XMC_SCU_CLOCK_DisableSystemPll+0x20>)
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	6053      	str	r3, [r2, #4]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	50004710 	.word	0x50004710

080029e4 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60ba      	str	r2, [r7, #8]
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	4603      	mov	r3, r0
 80029f0:	81fb      	strh	r3, [r7, #14]
 80029f2:	460b      	mov	r3, r1
 80029f4:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80029f6:	89fb      	ldrh	r3, [r7, #14]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff fa85 	bl	8001f08 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80029fe:	7b7b      	ldrb	r3, [r7, #13]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	f040 8084 	bne.w	8002b0e <XMC_SCU_CLOCK_StartSystemPll+0x12a>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002a06:	89fb      	ldrh	r3, [r7, #14]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8002a0c:	f000 fb0a 	bl	8003024 <OSCHP_GetFrequency>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <XMC_SCU_CLOCK_StartSystemPll+0x160>)
 8002a14:	fba3 2302 	umull	r2, r3, r3, r2
 8002a18:	0c9b      	lsrs	r3, r3, #18
 8002a1a:	059b      	lsls	r3, r3, #22
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e002      	b.n	8002a26 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002a20:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002a24:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	fb02 f203 	mul.w	r2, r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4a43      	ldr	r2, [pc, #268]	; (8002b48 <XMC_SCU_CLOCK_StartSystemPll+0x164>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	0d9b      	lsrs	r3, r3, #22
 8002a42:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002a44:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a40      	ldr	r2, [pc, #256]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002a50:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a3d      	ldr	r2, [pc, #244]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a56:	f043 0310 	orr.w	r3, r3, #16
 8002a5a:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <XMC_SCU_CLOCK_StartSystemPll+0x16c>)
 8002a62:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	3a01      	subs	r2, #1
 8002a68:	0212      	lsls	r2, r2, #8
 8002a6a:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	041b      	lsls	r3, r3, #16
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002a72:	431a      	orrs	r2, r3
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	061b      	lsls	r3, r3, #24
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002a7a:	4934      	ldr	r1, [pc, #208]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002a80:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	4a31      	ldr	r2, [pc, #196]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a8a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002a8c:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a2e      	ldr	r2, [pc, #184]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a92:	f023 0310 	bic.w	r3, r3, #16
 8002a96:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002a98:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002aa4:	bf00      	nop
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f9      	beq.n	8002aa6 <XMC_SCU_CLOCK_StartSystemPll+0xc2>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002ab2:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002abe:	bf00      	nop
 8002ac0:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f9      	bne.n	8002ac0 <XMC_SCU_CLOCK_StartSystemPll+0xdc>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x170>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	0d9b      	lsrs	r3, r3, #22
 8002ad8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002ada:	6a3a      	ldr	r2, [r7, #32]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d202      	bcs.n	8002ae8 <XMC_SCU_CLOCK_StartSystemPll+0x104>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002ae2:	6938      	ldr	r0, [r7, #16]
 8002ae4:	f000 f84a 	bl	8002b7c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <XMC_SCU_CLOCK_StartSystemPll+0x174>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	095b      	lsrs	r3, r3, #5
 8002af4:	0d9b      	lsrs	r3, r3, #22
 8002af6:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002af8:	6a3a      	ldr	r2, [r7, #32]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d202      	bcs.n	8002b06 <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002b00:	6938      	ldr	r0, [r7, #16]
 8002b02:	f000 f83b 	bl	8002b7c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002b06:	6a38      	ldr	r0, [r7, #32]
 8002b08:	f000 f838 	bl	8002b7c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
    {
      /* wait for prescaler mode */
    }
  }
}
 8002b0c:	e015      	b.n	8002b3a <XMC_SCU_CLOCK_StartSystemPll+0x156>
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	3b01      	subs	r3, #1
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002b1a:	490c      	ldr	r1, [pc, #48]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002b2c:	bf00      	nop
 8002b2e:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x168>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f9      	beq.n	8002b2e <XMC_SCU_CLOCK_StartSystemPll+0x14a>
}
 8002b3a:	bf00      	nop
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	431bde83 	.word	0x431bde83
 8002b48:	aaaaaaab 	.word	0xaaaaaaab
 8002b4c:	50004710 	.word	0x50004710
 8002b50:	f08080ff 	.word	0xf08080ff
 8002b54:	88888889 	.word	0x88888889
 8002b58:	b60b60b7 	.word	0xb60b60b7

08002b5c <XMC_SCU_CLOCK_StopSystemPll>:

/* API to stop main PLL operation */
void XMC_SCU_CLOCK_StopSystemPll(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <XMC_SCU_CLOCK_StopSystemPll+0x1c>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6a:	6053      	str	r3, [r2, #4]
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	50004710 	.word	0x50004710

08002b7c <XMC_SCU_CLOCK_StepSystemPllFrequency>:

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002b92:	4905      	ldr	r1, [pc, #20]	; (8002ba8 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x2c>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]

  XMC_SCU_lDelay(50U);
 8002b98:	2032      	movs	r0, #50	; 0x32
 8002b9a:	f7fe fc71 	bl	8001480 <XMC_SCU_lDelay>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	50004710 	.word	0x50004710

08002bac <XMC_SCU_CLOCK_IsSystemPllLocked>:

/* API to check main PLL is locked or not */
bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <XMC_SCU_CLOCK_IsSystemPllLocked+0x20>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	50004710 	.word	0x50004710

08002bd0 <XMC_SCU_INTERRUPT_SetEventHandler>:
/*
 * API to assign the event handler function to be executed on occurrence of the selected event.
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
                                                   const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t index;
  XMC_SCU_STATUS_t status;
  
  index = 0U;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002bde:	e002      	b.n	8002be6 <XMC_SCU_INTERRUPT_SetEventHandler+0x16>
  {
    index++;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3301      	adds	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <XMC_SCU_INTERRUPT_SetEventHandler+0x2c>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b1f      	cmp	r3, #31
 8002bfa:	d9f1      	bls.n	8002be0 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
  }
  
  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d102      	bne.n	8002c08 <XMC_SCU_INTERRUPT_SetEventHandler+0x38>
  {
    status = XMC_SCU_STATUS_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	72fb      	strb	r3, [r7, #11]
 8002c06:	e006      	b.n	8002c16 <XMC_SCU_INTERRUPT_SetEventHandler+0x46>
  }
  else
  {
    event_handler_list[index] = handler;
 8002c08:	4906      	ldr	r1, [pc, #24]	; (8002c24 <XMC_SCU_INTERRUPT_SetEventHandler+0x54>)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    status = XMC_SCU_STATUS_OK;      
 8002c12:	2300      	movs	r3, #0
 8002c14:	72fb      	strb	r3, [r7, #11]
  }
  
  return (status);
 8002c16:	7afb      	ldrb	r3, [r7, #11]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	20000528 	.word	0x20000528

08002c28 <XMC_SCU_IRQHandler>:

/*
 * API to execute callback functions for multiple events.
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
  
  XMC_UNUSED_ARG(sr_num);
  
  index = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  event = XMC_SCU_INTERUPT_GetEventStatus();
 8002c34:	f7fe fc80 	bl	8001538 <XMC_SCU_INTERUPT_GetEventStatus>
 8002c38:	6138      	str	r0, [r7, #16]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8002c3a:	e01c      	b.n	8002c76 <XMC_SCU_IRQHandler+0x4e>
  {    
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	fa22 f303 	lsr.w	r3, r2, r3
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d011      	beq.n	8002c70 <XMC_SCU_IRQHandler+0x48>
    {
      event_handler = event_handler_list[index];
 8002c4c:	4a0d      	ldr	r2, [pc, #52]	; (8002c84 <XMC_SCU_IRQHandler+0x5c>)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c54:	60fb      	str	r3, [r7, #12]
      if (event_handler != NULL)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <XMC_SCU_IRQHandler+0x38>
      {
          (event_handler)();
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4798      	blx	r3
      }
      
      XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 8002c60:	2201      	movs	r2, #1
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fc71 	bl	8001550 <XMC_SCU_INTERRUPT_ClearEventStatus>
      
      break;
 8002c6e:	e005      	b.n	8002c7c <XMC_SCU_IRQHandler+0x54>
    }   
    index++;    
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	3301      	adds	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
  while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b1f      	cmp	r3, #31
 8002c7a:	d9df      	bls.n	8002c3c <XMC_SCU_IRQHandler+0x14>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000528 	.word	0x20000528

08002c88 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	e003      	b.n	8002c9e <delay+0x16>
  {
    __NOP();
 8002c96:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d8f7      	bhi.n	8002c96 <delay+0xe>
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8002cb4:	b598      	push	{r3, r4, r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8002cb8:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <SystemInit+0x20>)
 8002cba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002cbe:	4614      	mov	r4, r2
 8002cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8002cc6:	f000 f807 	bl	8002cd8 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8002cca:	f000 f83d 	bl	8002d48 <SystemCoreClockSetup>
}
 8002cce:	bf00      	nop
 8002cd0:	bd98      	pop	{r3, r4, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	2000ffc4 	.word	0x2000ffc4

08002cd8 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cde:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8002ce0:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <SystemCoreSetup+0x64>)
 8002ce2:	4a17      	ldr	r2, [pc, #92]	; (8002d40 <SystemCoreSetup+0x68>)
 8002ce4:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ce6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8002cea:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <SystemCoreSetup+0x64>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <SystemCoreSetup+0x64>)
 8002cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8002cfc:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <SystemCoreSetup+0x64>)
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <SystemCoreSetup+0x64>)
 8002d02:	f023 0308 	bic.w	r3, r3, #8
 8002d06:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <SystemCoreSetup+0x6c>)
 8002d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0e:	3314      	adds	r3, #20
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f023 030f 	bic.w	r3, r3, #15
 8002d1a:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f043 0303 	orr.w	r3, r3, #3
 8002d22:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002d24:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <SystemCoreSetup+0x6c>)
 8002d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2a:	3314      	adds	r3, #20
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	601a      	str	r2, [r3, #0]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00
 8002d40:	08000000 	.word	0x08000000
 8002d44:	58001000 	.word	0x58001000

08002d48 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002d4c:	4b75      	ldr	r3, [pc, #468]	; (8002f24 <SystemCoreClockSetup+0x1dc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10c      	bne.n	8002d72 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8002d58:	4b72      	ldr	r3, [pc, #456]	; (8002f24 <SystemCoreClockSetup+0x1dc>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a71      	ldr	r2, [pc, #452]	; (8002f24 <SystemCoreClockSetup+0x1dc>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8002d64:	bf00      	nop
 8002d66:	4b6f      	ldr	r3, [pc, #444]	; (8002f24 <SystemCoreClockSetup+0x1dc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f9      	beq.n	8002d66 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8002d72:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <SystemCoreClockSetup+0x1e0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8002d7e:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <SystemCoreClockSetup+0x1e0>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4a69      	ldr	r2, [pc, #420]	; (8002f28 <SystemCoreClockSetup+0x1e0>)
 8002d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d88:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8002d8a:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8002d8e:	f7ff ff7b 	bl	8002c88 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8002d92:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4a65      	ldr	r2, [pc, #404]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002d98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d9c:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8002d9e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002da2:	f7ff ff71 	bl	8002c88 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002da6:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4a60      	ldr	r2, [pc, #384]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db0:	f023 0302 	bic.w	r3, r3, #2
 8002db4:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8002db6:	4b5e      	ldr	r3, [pc, #376]	; (8002f30 <SystemCoreClockSetup+0x1e8>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d029      	beq.n	8002e16 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	; (8002f30 <SystemCoreClockSetup+0x1e8>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4a5a      	ldr	r2, [pc, #360]	; (8002f30 <SystemCoreClockSetup+0x1e8>)
 8002dc8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002dcc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002dd0:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8002dd2:	f000 f927 	bl	8003024 <OSCHP_GetFrequency>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <SystemCoreClockSetup+0x1ec>)
 8002dda:	fba3 2302 	umull	r2, r3, r3, r2
 8002dde:	0d1b      	lsrs	r3, r3, #20
 8002de0:	3b01      	subs	r3, #1
 8002de2:	041a      	lsls	r2, r3, #16
 8002de4:	4b52      	ldr	r3, [pc, #328]	; (8002f30 <SystemCoreClockSetup+0x1e8>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4951      	ldr	r1, [pc, #324]	; (8002f30 <SystemCoreClockSetup+0x1e8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8002dee:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4a4e      	ldr	r2, [pc, #312]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002dfa:	4b4c      	ldr	r3, [pc, #304]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4a4b      	ldr	r2, [pc, #300]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e04:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8002e06:	bf00      	nop
 8002e08:	4b48      	ldr	r3, [pc, #288]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002e10:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002e14:	d1f8      	bne.n	8002e08 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002e16:	4b45      	ldr	r3, [pc, #276]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4a44      	ldr	r2, [pc, #272]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8002e22:	4b42      	ldr	r3, [pc, #264]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4a41      	ldr	r2, [pc, #260]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e28:	f043 0310 	orr.w	r3, r3, #16
 8002e2c:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002e2e:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e30:	4a41      	ldr	r2, [pc, #260]	; (8002f38 <SystemCoreClockSetup+0x1f0>)
 8002e32:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002e34:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a3c      	ldr	r2, [pc, #240]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e3e:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002e40:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a39      	ldr	r2, [pc, #228]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e46:	f023 0310 	bic.w	r3, r3, #16
 8002e4a:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8002e4c:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4a36      	ldr	r2, [pc, #216]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e56:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002e58:	bf00      	nop
 8002e5a:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f9      	beq.n	8002e5a <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a30      	ldr	r2, [pc, #192]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002e72:	bf00      	nop
 8002e74:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8002e80:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <SystemCoreClockSetup+0x1f4>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a2d      	ldr	r2, [pc, #180]	; (8002f3c <SystemCoreClockSetup+0x1f4>)
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8a:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <SystemCoreClockSetup+0x1f4>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8002e92:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <SystemCoreClockSetup+0x1f4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8002e98:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <SystemCoreClockSetup+0x1f4>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8002e9e:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <SystemCoreClockSetup+0x1f4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <SystemCoreClockSetup+0x1f4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8002eaa:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <SystemCoreClockSetup+0x1f4>)
 8002eac:	2203      	movs	r2, #3
 8002eae:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a1d      	ldr	r2, [pc, #116]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eba:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002ebe:	4a20      	ldr	r2, [pc, #128]	; (8002f40 <SystemCoreClockSetup+0x1f8>)
 8002ec0:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8002ec2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ec6:	f7ff fedf 	bl	8002c88 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002eca:	bf00      	nop
 8002ecc:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f9      	beq.n	8002ecc <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002eda:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <SystemCoreClockSetup+0x1fc>)
 8002edc:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8002ede:	f241 1094 	movw	r0, #4500	; 0x1194
 8002ee2:	f7ff fed1 	bl	8002c88 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002ee6:	bf00      	nop
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f9      	beq.n	8002ee8 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002ef4:	4b0d      	ldr	r3, [pc, #52]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002ef6:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <SystemCoreClockSetup+0x200>)
 8002ef8:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8002efa:	f241 7070 	movw	r0, #6000	; 0x1770
 8002efe:	f7ff fec3 	bl	8002c88 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002f02:	bf00      	nop
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <SystemCoreClockSetup+0x1e4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f9      	beq.n	8002f04 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <SystemCoreClockSetup+0x204>)
 8002f12:	2205      	movs	r2, #5
 8002f14:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <SystemCoreClockSetup+0x1f4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8002f1c:	f000 f818 	bl	8002f50 <SystemCoreClockUpdate>
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	50004200 	.word	0x50004200
 8002f28:	50004400 	.word	0x50004400
 8002f2c:	50004710 	.word	0x50004710
 8002f30:	50004700 	.word	0x50004700
 8002f34:	6b5fca6b 	.word	0x6b5fca6b
 8002f38:	01134f00 	.word	0x01134f00
 8002f3c:	50004600 	.word	0x50004600
 8002f40:	01074f00 	.word	0x01074f00
 8002f44:	01044f00 	.word	0x01044f00
 8002f48:	01034f00 	.word	0x01034f00
 8002f4c:	50004160 	.word	0x50004160

08002f50 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <SystemCoreClockUpdate+0xc4>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d03e      	beq.n	8002fe0 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8002f62:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <SystemCoreClockUpdate+0xc8>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	; (800301c <SystemCoreClockUpdate+0xcc>)
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	e002      	b.n	8002f7a <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8002f74:	f000 f856 	bl	8003024 <OSCHP_GetFrequency>
 8002f78:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <SystemCoreClockUpdate+0xc8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d020      	beq.n	8002fc8 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <SystemCoreClockUpdate+0xc8>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	0e1b      	lsrs	r3, r3, #24
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	3301      	adds	r3, #1
 8002f92:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8002f94:	4b20      	ldr	r3, [pc, #128]	; (8003018 <SystemCoreClockUpdate+0xc8>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8002fa2:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <SystemCoreClockUpdate+0xc8>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fac:	3301      	adds	r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e00d      	b.n	8002fe4 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <SystemCoreClockUpdate+0xc8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	e001      	b.n	8002fe4 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <SystemCoreClockUpdate+0xcc>)
 8002fe2:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <SystemCoreClockUpdate+0xc4>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <SystemCoreClockUpdate+0xc4>)
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	fbb2 f3f3 	udiv	r3, r2, r3
 8003004:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8003006:	4a06      	ldr	r2, [pc, #24]	; (8003020 <SystemCoreClockUpdate+0xd0>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	50004600 	.word	0x50004600
 8003018:	50004710 	.word	0x50004710
 800301c:	016e3600 	.word	0x016e3600
 8003020:	2000ffc0 	.word	0x2000ffc0

08003024 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8003028:	4b02      	ldr	r3, [pc, #8]	; (8003034 <OSCHP_GetFrequency+0x10>)
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	00b71b00 	.word	0x00b71b00

08003038 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <_sbrk+0x5c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8003048:	4b12      	ldr	r3, [pc, #72]	; (8003094 <_sbrk+0x5c>)
 800304a:	4a13      	ldr	r2, [pc, #76]	; (8003098 <_sbrk+0x60>)
 800304c:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <_sbrk+0x5c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3303      	adds	r3, #3
 8003058:	f023 0303 	bic.w	r3, r3, #3
 800305c:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <_sbrk+0x5c>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	4a0d      	ldr	r2, [pc, #52]	; (800309c <_sbrk+0x64>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d207      	bcs.n	800307c <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <_sbrk+0x5c>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	4a07      	ldr	r2, [pc, #28]	; (8003094 <_sbrk+0x5c>)
 8003076:	6013      	str	r3, [r2, #0]
    return (base);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	e006      	b.n	800308a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 800307c:	f000 f818 	bl	80030b0 <__errno>
 8003080:	4602      	mov	r2, r0
 8003082:	230c      	movs	r3, #12
 8003084:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8003086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200004cc 	.word	0x200004cc
 8003098:	200005a8 	.word	0x200005a8
 800309c:	2000ffc0 	.word	0x2000ffc0

080030a0 <_init>:

/* Init */
void _init(void)
{}
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <__errno>:
 80030b0:	4b01      	ldr	r3, [pc, #4]	; (80030b8 <__errno+0x8>)
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	20000094 	.word	0x20000094

080030bc <__libc_init_array>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	4e0d      	ldr	r6, [pc, #52]	; (80030f4 <__libc_init_array+0x38>)
 80030c0:	4d0d      	ldr	r5, [pc, #52]	; (80030f8 <__libc_init_array+0x3c>)
 80030c2:	1b76      	subs	r6, r6, r5
 80030c4:	10b6      	asrs	r6, r6, #2
 80030c6:	d006      	beq.n	80030d6 <__libc_init_array+0x1a>
 80030c8:	2400      	movs	r4, #0
 80030ca:	3401      	adds	r4, #1
 80030cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d0:	4798      	blx	r3
 80030d2:	42a6      	cmp	r6, r4
 80030d4:	d1f9      	bne.n	80030ca <__libc_init_array+0xe>
 80030d6:	4e09      	ldr	r6, [pc, #36]	; (80030fc <__libc_init_array+0x40>)
 80030d8:	4d09      	ldr	r5, [pc, #36]	; (8003100 <__libc_init_array+0x44>)
 80030da:	1b76      	subs	r6, r6, r5
 80030dc:	f7ff ffe0 	bl	80030a0 <_init>
 80030e0:	10b6      	asrs	r6, r6, #2
 80030e2:	d006      	beq.n	80030f2 <__libc_init_array+0x36>
 80030e4:	2400      	movs	r4, #0
 80030e6:	3401      	adds	r4, #1
 80030e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ec:	4798      	blx	r3
 80030ee:	42a6      	cmp	r6, r4
 80030f0:	d1f9      	bne.n	80030e6 <__libc_init_array+0x2a>
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	200004c0 	.word	0x200004c0
 80030f8:	200004c0 	.word	0x200004c0
 80030fc:	200004c0 	.word	0x200004c0
 8003100:	200004c0 	.word	0x200004c0
	...

08003140 <strlen>:
 8003140:	f890 f000 	pld	[r0]
 8003144:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8003148:	f020 0107 	bic.w	r1, r0, #7
 800314c:	f06f 0c00 	mvn.w	ip, #0
 8003150:	f010 0407 	ands.w	r4, r0, #7
 8003154:	f891 f020 	pld	[r1, #32]
 8003158:	f040 8049 	bne.w	80031ee <strlen+0xae>
 800315c:	f04f 0400 	mov.w	r4, #0
 8003160:	f06f 0007 	mvn.w	r0, #7
 8003164:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003168:	f891 f040 	pld	[r1, #64]	; 0x40
 800316c:	f100 0008 	add.w	r0, r0, #8
 8003170:	fa82 f24c 	uadd8	r2, r2, ip
 8003174:	faa4 f28c 	sel	r2, r4, ip
 8003178:	fa83 f34c 	uadd8	r3, r3, ip
 800317c:	faa2 f38c 	sel	r3, r2, ip
 8003180:	bb4b      	cbnz	r3, 80031d6 <strlen+0x96>
 8003182:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8003186:	fa82 f24c 	uadd8	r2, r2, ip
 800318a:	f100 0008 	add.w	r0, r0, #8
 800318e:	faa4 f28c 	sel	r2, r4, ip
 8003192:	fa83 f34c 	uadd8	r3, r3, ip
 8003196:	faa2 f38c 	sel	r3, r2, ip
 800319a:	b9e3      	cbnz	r3, 80031d6 <strlen+0x96>
 800319c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80031a0:	fa82 f24c 	uadd8	r2, r2, ip
 80031a4:	f100 0008 	add.w	r0, r0, #8
 80031a8:	faa4 f28c 	sel	r2, r4, ip
 80031ac:	fa83 f34c 	uadd8	r3, r3, ip
 80031b0:	faa2 f38c 	sel	r3, r2, ip
 80031b4:	b97b      	cbnz	r3, 80031d6 <strlen+0x96>
 80031b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80031ba:	f101 0120 	add.w	r1, r1, #32
 80031be:	fa82 f24c 	uadd8	r2, r2, ip
 80031c2:	f100 0008 	add.w	r0, r0, #8
 80031c6:	faa4 f28c 	sel	r2, r4, ip
 80031ca:	fa83 f34c 	uadd8	r3, r3, ip
 80031ce:	faa2 f38c 	sel	r3, r2, ip
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0c6      	beq.n	8003164 <strlen+0x24>
 80031d6:	2a00      	cmp	r2, #0
 80031d8:	bf04      	itt	eq
 80031da:	3004      	addeq	r0, #4
 80031dc:	461a      	moveq	r2, r3
 80031de:	ba12      	rev	r2, r2
 80031e0:	fab2 f282 	clz	r2, r2
 80031e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80031e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80031ec:	4770      	bx	lr
 80031ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80031f2:	f004 0503 	and.w	r5, r4, #3
 80031f6:	f1c4 0000 	rsb	r0, r4, #0
 80031fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80031fe:	f014 0f04 	tst.w	r4, #4
 8003202:	f891 f040 	pld	[r1, #64]	; 0x40
 8003206:	fa0c f505 	lsl.w	r5, ip, r5
 800320a:	ea62 0205 	orn	r2, r2, r5
 800320e:	bf1c      	itt	ne
 8003210:	ea63 0305 	ornne	r3, r3, r5
 8003214:	4662      	movne	r2, ip
 8003216:	f04f 0400 	mov.w	r4, #0
 800321a:	e7a9      	b.n	8003170 <strlen+0x30>
 800321c:	00002d2e 	.word	0x00002d2e
 8003220:	2e2e2e2d 	.word	0x2e2e2e2d
 8003224:	00000000 	.word	0x00000000
 8003228:	2e2d2e2d 	.word	0x2e2d2e2d
 800322c:	00000000 	.word	0x00000000
 8003230:	002e2e2d 	.word	0x002e2e2d
 8003234:	0000002e 	.word	0x0000002e
 8003238:	2e2d2e2e 	.word	0x2e2d2e2e
 800323c:	00000000 	.word	0x00000000
 8003240:	002e2d2d 	.word	0x002e2d2d
 8003244:	2e2e2e2e 	.word	0x2e2e2e2e
 8003248:	00000000 	.word	0x00000000
 800324c:	00002e2e 	.word	0x00002e2e
 8003250:	2d2d2d2e 	.word	0x2d2d2d2e
 8003254:	00000000 	.word	0x00000000
 8003258:	002d2e2d 	.word	0x002d2e2d
 800325c:	2e2e2d2e 	.word	0x2e2e2d2e
 8003260:	00000000 	.word	0x00000000
 8003264:	00002d2d 	.word	0x00002d2d
 8003268:	00002e2d 	.word	0x00002e2d
 800326c:	002d2d2d 	.word	0x002d2d2d
 8003270:	2e2d2d2e 	.word	0x2e2d2d2e
 8003274:	00000000 	.word	0x00000000
 8003278:	2d2e2d2d 	.word	0x2d2e2d2d
 800327c:	00000000 	.word	0x00000000
 8003280:	002e2d2e 	.word	0x002e2d2e
 8003284:	002e2e2e 	.word	0x002e2e2e
 8003288:	0000002d 	.word	0x0000002d
 800328c:	002d2e2e 	.word	0x002d2e2e
 8003290:	2d2e2e2e 	.word	0x2d2e2e2e
 8003294:	00000000 	.word	0x00000000
 8003298:	002d2d2e 	.word	0x002d2d2e
 800329c:	2d2e2e2d 	.word	0x2d2e2e2d
 80032a0:	00000000 	.word	0x00000000
 80032a4:	2d2d2e2d 	.word	0x2d2d2e2d
 80032a8:	00000000 	.word	0x00000000
 80032ac:	2e2e2d2d 	.word	0x2e2e2d2d
 80032b0:	00000000 	.word	0x00000000
 80032b4:	00000030 	.word	0x00000030

080032b8 <LED_config>:
 80032b8:	00000080 00010000 00000000              ............

080032c4 <_global_impure_ptr>:
 80032c4:	20000098                                ... 
