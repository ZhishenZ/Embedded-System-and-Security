
uart_transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003198  08003198  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003198  08003198  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003198  08003198  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003198  08003198  00013198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800319c  0800319c  0001319c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000fc  200000fc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcbb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019ca  00000000  00000000  0002dcf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc8  00000000  00000000  0002f6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b30  00000000  00000000  00030290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cf2f  00000000  00000000  00030dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e76e  00000000  00000000  0004dcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2e89  00000000  00000000  0005c45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010f2e6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031b8  00000000  00000000  0010f33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003140 	.word	0x08003140

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003140 	.word	0x08003140

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa18 	bl	8000600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8f0 	bl	80003b8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d8:	f000 f86a 	bl	80002b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80001dc:	f000 f8bc 	bl	8000358 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80001e0:	4806      	ldr	r0, [pc, #24]	; (80001fc <main+0x34>)
 80001e2:	f002 f83d 	bl	8002260 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart1,(uint8_t*)"TEST ", 6, 100);
 80001e6:	2364      	movs	r3, #100	; 0x64
 80001e8:	2206      	movs	r2, #6
 80001ea:	4905      	ldr	r1, [pc, #20]	; (8000200 <main+0x38>)
 80001ec:	4805      	ldr	r0, [pc, #20]	; (8000204 <main+0x3c>)
 80001ee:	f002 fb63 	bl	80028b8 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80001f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f6:	f000 fa69 	bl	80006cc <HAL_Delay>
	  HAL_UART_Transmit(&huart1,(uint8_t*)"TEST ", 6, 100);
 80001fa:	e7f4      	b.n	80001e6 <main+0x1e>
 80001fc:	200000ac 	.word	0x200000ac
 8000200:	08003158 	.word	0x08003158
 8000204:	20000028 	.word	0x20000028

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b09e      	sub	sp, #120	; 0x78
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f002 ff8a 	bl	8003130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	223c      	movs	r2, #60	; 0x3c
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 ff7c 	bl	8003130 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000238:	2302      	movs	r3, #2
 800023a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023c:	2301      	movs	r3, #1
 800023e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000240:	2310      	movs	r3, #16
 8000242:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000244:	2300      	movs	r3, #0
 8000246:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fcc1 	bl	8000bd4 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000258:	f000 f8de 	bl	8000418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000260:	2300      	movs	r3, #0
 8000262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000270:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fbb4 	bl	80019e4 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000282:	f000 f8c9 	bl	8000418 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1;
 8000286:	f241 0301 	movw	r3, #4097	; 0x1001
 800028a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800028c:	2300      	movs	r3, #0
 800028e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000290:	2300      	movs	r3, #0
 8000292:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000294:	463b      	mov	r3, r7
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fdda 	bl	8001e50 <HAL_RCCEx_PeriphCLKConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002a2:	f000 f8b9 	bl	8000418 <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3778      	adds	r7, #120	; 0x78
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002ce:	4b20      	ldr	r3, [pc, #128]	; (8000350 <MX_TIM1_Init+0xa0>)
 80002d0:	4a20      	ldr	r2, [pc, #128]	; (8000354 <MX_TIM1_Init+0xa4>)
 80002d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <MX_TIM1_Init+0xa0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002da:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <MX_TIM1_Init+0xa0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <MX_TIM1_Init+0xa0>)
 80002e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e8:	4b19      	ldr	r3, [pc, #100]	; (8000350 <MX_TIM1_Init+0xa0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_TIM1_Init+0xa0>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <MX_TIM1_Init+0xa0>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002fa:	4815      	ldr	r0, [pc, #84]	; (8000350 <MX_TIM1_Init+0xa0>)
 80002fc:	f001 ff58 	bl	80021b0 <HAL_TIM_Base_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000306:	f000 f887 	bl	8000418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800030a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800030e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000310:	f107 0310 	add.w	r3, r7, #16
 8000314:	4619      	mov	r1, r3
 8000316:	480e      	ldr	r0, [pc, #56]	; (8000350 <MX_TIM1_Init+0xa0>)
 8000318:	f002 f80c 	bl	8002334 <HAL_TIM_ConfigClockSource>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000322:	f000 f879 	bl	8000418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800032a:	2300      	movs	r3, #0
 800032c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4619      	mov	r1, r3
 8000336:	4806      	ldr	r0, [pc, #24]	; (8000350 <MX_TIM1_Init+0xa0>)
 8000338:	f002 f9f0 	bl	800271c <HAL_TIMEx_MasterConfigSynchronization>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000342:	f000 f869 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200000ac 	.word	0x200000ac
 8000354:	40012c00 	.word	0x40012c00

08000358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 800035e:	4a15      	ldr	r2, [pc, #84]	; (80003b4 <MX_USART1_UART_Init+0x5c>)
 8000360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 8000364:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 8000378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800037c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 8000380:	220c      	movs	r2, #12
 8000382:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <MX_USART1_UART_Init+0x58>)
 800039e:	f002 fa3d 	bl	800281c <HAL_UART_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80003a8:	f000 f836 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000028 	.word	0x20000028
 80003b4:	40013800 	.word	0x40013800

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_GPIO_Init+0x5c>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	4a14      	ldr	r2, [pc, #80]	; (8000414 <MX_GPIO_Init+0x5c>)
 80003c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003c8:	6153      	str	r3, [r2, #20]
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_GPIO_Init+0x5c>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003d2:	60fb      	str	r3, [r7, #12]
 80003d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_GPIO_Init+0x5c>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a0e      	ldr	r2, [pc, #56]	; (8000414 <MX_GPIO_Init+0x5c>)
 80003dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e0:	6153      	str	r3, [r2, #20]
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_GPIO_Init+0x5c>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_GPIO_Init+0x5c>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a08      	ldr	r2, [pc, #32]	; (8000414 <MX_GPIO_Init+0x5c>)
 80003f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_GPIO_Init+0x5c>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

}
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	e7fe      	b.n	8000420 <Error_Handler+0x8>
	...

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x44>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a0e      	ldr	r2, [pc, #56]	; (8000468 <HAL_MspInit+0x44>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x44>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_MspInit+0x44>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <HAL_MspInit+0x44>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <HAL_MspInit+0x44>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000456:	603b      	str	r3, [r7, #0]
 8000458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a0a      	ldr	r2, [pc, #40]	; (80004a4 <HAL_TIM_Base_MspInit+0x38>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d10b      	bne.n	8000496 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <HAL_TIM_Base_MspInit+0x3c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a09      	ldr	r2, [pc, #36]	; (80004a8 <HAL_TIM_Base_MspInit+0x3c>)
 8000484:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <HAL_TIM_Base_MspInit+0x3c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000496:	bf00      	nop
 8000498:	3714      	adds	r7, #20
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40012c00 	.word	0x40012c00
 80004a8:	40021000 	.word	0x40021000

080004ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08a      	sub	sp, #40	; 0x28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a17      	ldr	r2, [pc, #92]	; (8000528 <HAL_UART_MspInit+0x7c>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d127      	bne.n	800051e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <HAL_UART_MspInit+0x80>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	4a16      	ldr	r2, [pc, #88]	; (800052c <HAL_UART_MspInit+0x80>)
 80004d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d8:	6193      	str	r3, [r2, #24]
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <HAL_UART_MspInit+0x80>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e2:	613b      	str	r3, [r7, #16]
 80004e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <HAL_UART_MspInit+0x80>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a10      	ldr	r2, [pc, #64]	; (800052c <HAL_UART_MspInit+0x80>)
 80004ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_UART_MspInit+0x80>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004fe:	2330      	movs	r3, #48	; 0x30
 8000500:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000502:	2302      	movs	r3, #2
 8000504:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000506:	2300      	movs	r3, #0
 8000508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800050a:	2303      	movs	r3, #3
 800050c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800050e:	2307      	movs	r3, #7
 8000510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4619      	mov	r1, r3
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <HAL_UART_MspInit+0x84>)
 800051a:	f000 f9e1 	bl	80008e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40013800 	.word	0x40013800
 800052c:	40021000 	.word	0x40021000
 8000530:	48000800 	.word	0x48000800

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <NMI_Handler+0x4>

0800053a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <MemManage_Handler+0x4>

08000546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <UsageFault_Handler+0x4>

08000552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000580:	f000 f884 	bl	800068c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <SystemInit+0x20>)
 800058e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000592:	4a05      	ldr	r2, [pc, #20]	; (80005a8 <SystemInit+0x20>)
 8000594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b2:	490e      	ldr	r1, [pc, #56]	; (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b8:	e002      	b.n	80005c0 <LoopCopyDataInit>

080005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005be:	3304      	adds	r3, #4

080005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c4:	d3f9      	bcc.n	80005ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c8:	4c0b      	ldr	r4, [pc, #44]	; (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005cc:	e001      	b.n	80005d2 <LoopFillZerobss>

080005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d0:	3204      	adds	r2, #4

080005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d4:	d3fb      	bcc.n	80005ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005d6:	f7ff ffd7 	bl	8000588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005da:	f002 fd85 	bl	80030e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005de:	f7ff fdf3 	bl	80001c8 <main>

080005e2 <LoopForever>:

LoopForever:
    b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f0:	080031a0 	.word	0x080031a0
  ldr r2, =_sbss
 80005f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f8:	200000fc 	.word	0x200000fc

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_Init+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_Init+0x28>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f931 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000616:	200f      	movs	r0, #15
 8000618:	f000 f808 	bl	800062c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800061c:	f7ff ff02 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40022000 	.word	0x40022000

0800062c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <HAL_InitTick+0x54>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <HAL_InitTick+0x58>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000642:	fbb3 f3f1 	udiv	r3, r3, r1
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f93b 	bl	80008c6 <HAL_SYSTICK_Config>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	e00e      	b.n	8000678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b0f      	cmp	r3, #15
 800065e:	d80a      	bhi.n	8000676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000660:	2200      	movs	r2, #0
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000668:	f000 f911 	bl	800088e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800066c:	4a06      	ldr	r2, [pc, #24]	; (8000688 <HAL_InitTick+0x5c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	20000008 	.word	0x20000008
 8000688:	20000004 	.word	0x20000004

0800068c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_IncTick+0x20>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_IncTick+0x24>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <HAL_IncTick+0x24>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000008 	.word	0x20000008
 80006b0:	200000f8 	.word	0x200000f8

080006b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <HAL_GetTick+0x14>)
 80006ba:	681b      	ldr	r3, [r3, #0]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	200000f8 	.word	0x200000f8

080006cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff ffee 	bl	80006b4 <HAL_GetTick>
 80006d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006e4:	d005      	beq.n	80006f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_Delay+0x44>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006f2:	bf00      	nop
 80006f4:	f7ff ffde 	bl	80006b4 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	429a      	cmp	r2, r3
 8000702:	d8f7      	bhi.n	80006f4 <HAL_Delay+0x28>
  {
  }
}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000008 	.word	0x20000008

08000714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800073c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000746:	4a04      	ldr	r2, [pc, #16]	; (8000758 <__NVIC_SetPriorityGrouping+0x44>)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	60d3      	str	r3, [r2, #12]
}
 800074c:	bf00      	nop
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <__NVIC_GetPriorityGrouping+0x18>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 0307 	and.w	r3, r3, #7
}
 800076a:	4618      	mov	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	db0a      	blt.n	80007a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	490c      	ldr	r1, [pc, #48]	; (80007c4 <__NVIC_SetPriority+0x4c>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a0:	e00a      	b.n	80007b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4908      	ldr	r1, [pc, #32]	; (80007c8 <__NVIC_SetPriority+0x50>)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	3b04      	subs	r3, #4
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	761a      	strb	r2, [r3, #24]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	; 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f1c3 0307 	rsb	r3, r3, #7
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	bf28      	it	cs
 80007ea:	2304      	movcs	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d902      	bls.n	80007fc <NVIC_EncodePriority+0x30>
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3b03      	subs	r3, #3
 80007fa:	e000      	b.n	80007fe <NVIC_EncodePriority+0x32>
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43da      	mvns	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	401a      	ands	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43d9      	mvns	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	4313      	orrs	r3, r2
         );
}
 8000826:	4618      	mov	r0, r3
 8000828:	3724      	adds	r7, #36	; 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000844:	d301      	bcc.n	800084a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2301      	movs	r3, #1
 8000848:	e00f      	b.n	800086a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <SysTick_Config+0x40>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000852:	210f      	movs	r1, #15
 8000854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000858:	f7ff ff8e 	bl	8000778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <SysTick_Config+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	; (8000874 <SysTick_Config+0x40>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff47 	bl	8000714 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff5c 	bl	800075c <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff8e 	bl	80007cc <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff5d 	bl	8000778 <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff ffb0 	bl	8000834 <SysTick_Config>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008ee:	e154      	b.n	8000b9a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	2101      	movs	r1, #1
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	4013      	ands	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2b00      	cmp	r3, #0
 8000904:	f000 8146 	beq.w	8000b94 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 0303 	and.w	r3, r3, #3
 8000910:	2b01      	cmp	r3, #1
 8000912:	d005      	beq.n	8000920 <HAL_GPIO_Init+0x40>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 0303 	and.w	r3, r3, #3
 800091c:	2b02      	cmp	r3, #2
 800091e:	d130      	bne.n	8000982 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	2203      	movs	r2, #3
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68da      	ldr	r2, [r3, #12]
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4313      	orrs	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000956:	2201      	movs	r2, #1
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	693a      	ldr	r2, [r7, #16]
 8000962:	4013      	ands	r3, r2
 8000964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	091b      	lsrs	r3, r3, #4
 800096c:	f003 0201 	and.w	r2, r3, #1
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4313      	orrs	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	f003 0303 	and.w	r3, r3, #3
 800098a:	2b03      	cmp	r3, #3
 800098c:	d017      	beq.n	80009be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2203      	movs	r2, #3
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4013      	ands	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d123      	bne.n	8000a12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	08da      	lsrs	r2, r3, #3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3208      	adds	r2, #8
 80009d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	220f      	movs	r2, #15
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	691a      	ldr	r2, [r3, #16]
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	f003 0307 	and.w	r3, r3, #7
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	08da      	lsrs	r2, r3, #3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3208      	adds	r2, #8
 8000a0c:	6939      	ldr	r1, [r7, #16]
 8000a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 0203 	and.w	r2, r3, #3
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 80a0 	beq.w	8000b94 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a54:	4b58      	ldr	r3, [pc, #352]	; (8000bb8 <HAL_GPIO_Init+0x2d8>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a57      	ldr	r2, [pc, #348]	; (8000bb8 <HAL_GPIO_Init+0x2d8>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b55      	ldr	r3, [pc, #340]	; (8000bb8 <HAL_GPIO_Init+0x2d8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a6c:	4a53      	ldr	r2, [pc, #332]	; (8000bbc <HAL_GPIO_Init+0x2dc>)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	3302      	adds	r3, #2
 8000a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	220f      	movs	r2, #15
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a96:	d019      	beq.n	8000acc <HAL_GPIO_Init+0x1ec>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a49      	ldr	r2, [pc, #292]	; (8000bc0 <HAL_GPIO_Init+0x2e0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d013      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e8>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a48      	ldr	r2, [pc, #288]	; (8000bc4 <HAL_GPIO_Init+0x2e4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d00d      	beq.n	8000ac4 <HAL_GPIO_Init+0x1e4>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a47      	ldr	r2, [pc, #284]	; (8000bc8 <HAL_GPIO_Init+0x2e8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d007      	beq.n	8000ac0 <HAL_GPIO_Init+0x1e0>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a46      	ldr	r2, [pc, #280]	; (8000bcc <HAL_GPIO_Init+0x2ec>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d101      	bne.n	8000abc <HAL_GPIO_Init+0x1dc>
 8000ab8:	2304      	movs	r3, #4
 8000aba:	e008      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000abc:	2305      	movs	r3, #5
 8000abe:	e006      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	e004      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	e002      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <HAL_GPIO_Init+0x1ee>
 8000acc:	2300      	movs	r3, #0
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	f002 0203 	and.w	r2, r2, #3
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	4093      	lsls	r3, r2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ade:	4937      	ldr	r1, [pc, #220]	; (8000bbc <HAL_GPIO_Init+0x2dc>)
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aec:	4b38      	ldr	r3, [pc, #224]	; (8000bd0 <HAL_GPIO_Init+0x2f0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	43db      	mvns	r3, r3
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4013      	ands	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b10:	4a2f      	ldr	r2, [pc, #188]	; (8000bd0 <HAL_GPIO_Init+0x2f0>)
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b16:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <HAL_GPIO_Init+0x2f0>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	4013      	ands	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b3a:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <HAL_GPIO_Init+0x2f0>)
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <HAL_GPIO_Init+0x2f0>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b64:	4a1a      	ldr	r2, [pc, #104]	; (8000bd0 <HAL_GPIO_Init+0x2f0>)
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_GPIO_Init+0x2f0>)
 8000b6c:	68db      	ldr	r3, [r3, #12]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_GPIO_Init+0x2f0>)
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f47f aea3 	bne.w	80008f0 <HAL_GPIO_Init+0x10>
  }
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	371c      	adds	r7, #28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	48000800 	.word	0x48000800
 8000bc8:	48000c00 	.word	0x48000c00
 8000bcc:	48001000 	.word	0x48001000
 8000bd0:	40010400 	.word	0x40010400

08000bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f000 bef4 	b.w	80019d6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 816a 	beq.w	8000ed2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bfe:	4bb3      	ldr	r3, [pc, #716]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d00c      	beq.n	8000c24 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c0a:	4bb0      	ldr	r3, [pc, #704]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f003 030c 	and.w	r3, r3, #12
 8000c12:	2b08      	cmp	r3, #8
 8000c14:	d159      	bne.n	8000cca <HAL_RCC_OscConfig+0xf6>
 8000c16:	4bad      	ldr	r3, [pc, #692]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c22:	d152      	bne.n	8000cca <HAL_RCC_OscConfig+0xf6>
 8000c24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c28:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c2c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c30:	fa93 f3a3 	rbit	r3, r3
 8000c34:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c3c:	fab3 f383 	clz	r3, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d102      	bne.n	8000c56 <HAL_RCC_OscConfig+0x82>
 8000c50:	4b9e      	ldr	r3, [pc, #632]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	e015      	b.n	8000c82 <HAL_RCC_OscConfig+0xae>
 8000c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c5a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c62:	fa93 f3a3 	rbit	r3, r3
 8000c66:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c6e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c72:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c76:	fa93 f3a3 	rbit	r3, r3
 8000c7a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c7e:	4b93      	ldr	r3, [pc, #588]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c86:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c8a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c8e:	fa92 f2a2 	rbit	r2, r2
 8000c92:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c96:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	f042 0220 	orr.w	r2, r2, #32
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	f002 021f 	and.w	r2, r2, #31
 8000caa:	2101      	movs	r1, #1
 8000cac:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 810c 	beq.w	8000ed0 <HAL_RCC_OscConfig+0x2fc>
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8106 	bne.w	8000ed0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f000 be86 	b.w	80019d6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd4:	d106      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x110>
 8000cd6:	4b7d      	ldr	r3, [pc, #500]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a7c      	ldr	r2, [pc, #496]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e030      	b.n	8000d46 <HAL_RCC_OscConfig+0x172>
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10c      	bne.n	8000d08 <HAL_RCC_OscConfig+0x134>
 8000cee:	4b77      	ldr	r3, [pc, #476]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a76      	ldr	r2, [pc, #472]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b74      	ldr	r3, [pc, #464]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a73      	ldr	r2, [pc, #460]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	e01e      	b.n	8000d46 <HAL_RCC_OscConfig+0x172>
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d12:	d10c      	bne.n	8000d2e <HAL_RCC_OscConfig+0x15a>
 8000d14:	4b6d      	ldr	r3, [pc, #436]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a6c      	ldr	r2, [pc, #432]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b6a      	ldr	r3, [pc, #424]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a69      	ldr	r2, [pc, #420]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	e00b      	b.n	8000d46 <HAL_RCC_OscConfig+0x172>
 8000d2e:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a66      	ldr	r2, [pc, #408]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	4b64      	ldr	r3, [pc, #400]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a63      	ldr	r2, [pc, #396]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d44:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d46:	4b61      	ldr	r3, [pc, #388]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	f023 020f 	bic.w	r2, r3, #15
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	495d      	ldr	r1, [pc, #372]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d059      	beq.n	8000e18 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fca6 	bl	80006b4 <HAL_GetTick>
 8000d68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6c:	e00a      	b.n	8000d84 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6e:	f7ff fca1 	bl	80006b4 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b64      	cmp	r3, #100	; 0x64
 8000d7c:	d902      	bls.n	8000d84 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	f000 be29 	b.w	80019d6 <HAL_RCC_OscConfig+0xe02>
 8000d84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d88:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d98:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9c:	fab3 f383 	clz	r3, r3
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d102      	bne.n	8000db6 <HAL_RCC_OscConfig+0x1e2>
 8000db0:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	e015      	b.n	8000de2 <HAL_RCC_OscConfig+0x20e>
 8000db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000dc2:	fa93 f3a3 	rbit	r3, r3
 8000dc6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000dd2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000dd6:	fa93 f3a3 	rbit	r3, r3
 8000dda:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000dde:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000de6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000dea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000dee:	fa92 f2a2 	rbit	r2, r2
 8000df2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000df6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	f042 0220 	orr.w	r2, r2, #32
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	f002 021f 	and.w	r2, r2, #31
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0ab      	beq.n	8000d6e <HAL_RCC_OscConfig+0x19a>
 8000e16:	e05c      	b.n	8000ed2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fc4c 	bl	80006b4 <HAL_GetTick>
 8000e1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e20:	e00a      	b.n	8000e38 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e22:	f7ff fc47 	bl	80006b4 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	2b64      	cmp	r3, #100	; 0x64
 8000e30:	d902      	bls.n	8000e38 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000e32:	2303      	movs	r3, #3
 8000e34:	f000 bdcf 	b.w	80019d6 <HAL_RCC_OscConfig+0xe02>
 8000e38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e40:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e44:	fa93 f3a3 	rbit	r3, r3
 8000e48:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d102      	bne.n	8000e6a <HAL_RCC_OscConfig+0x296>
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	e015      	b.n	8000e96 <HAL_RCC_OscConfig+0x2c2>
 8000e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e72:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e82:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e86:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e8a:	fa93 f3a3 	rbit	r3, r3
 8000e8e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_RCC_OscConfig+0x2f8>)
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e9a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e9e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ea2:	fa92 f2a2 	rbit	r2, r2
 8000ea6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000eaa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	f042 0220 	orr.w	r2, r2, #32
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	f002 021f 	and.w	r2, r2, #31
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1ab      	bne.n	8000e22 <HAL_RCC_OscConfig+0x24e>
 8000eca:	e002      	b.n	8000ed2 <HAL_RCC_OscConfig+0x2fe>
 8000ecc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 816f 	beq.w	80011c0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ee2:	4bd0      	ldr	r3, [pc, #832]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00b      	beq.n	8000f06 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eee:	4bcd      	ldr	r3, [pc, #820]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d16c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x400>
 8000efa:	4bca      	ldr	r3, [pc, #808]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d166      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x400>
 8000f06:	2302      	movs	r3, #2
 8000f08:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f10:	fa93 f3a3 	rbit	r3, r3
 8000f14:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f18:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f1c:	fab3 f383 	clz	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d102      	bne.n	8000f36 <HAL_RCC_OscConfig+0x362>
 8000f30:	4bbc      	ldr	r3, [pc, #752]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	e013      	b.n	8000f5e <HAL_RCC_OscConfig+0x38a>
 8000f36:	2302      	movs	r3, #2
 8000f38:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f52:	fa93 f3a3 	rbit	r3, r3
 8000f56:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f5a:	4bb2      	ldr	r3, [pc, #712]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f64:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f68:	fa92 f2a2 	rbit	r2, r2
 8000f6c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f70:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f74:	fab2 f282 	clz	r2, r2
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	f042 0220 	orr.w	r2, r2, #32
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	f002 021f 	and.w	r2, r2, #31
 8000f84:	2101      	movs	r1, #1
 8000f86:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d007      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x3cc>
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d002      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	f000 bd1b 	b.w	80019d6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa0:	4ba0      	ldr	r3, [pc, #640]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	21f8      	movs	r1, #248	; 0xf8
 8000fb0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000fb8:	fa91 f1a1 	rbit	r1, r1
 8000fbc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000fc0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000fc4:	fab1 f181 	clz	r1, r1
 8000fc8:	b2c9      	uxtb	r1, r1
 8000fca:	408b      	lsls	r3, r1
 8000fcc:	4995      	ldr	r1, [pc, #596]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd2:	e0f5      	b.n	80011c0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8085 	beq.w	80010ea <HAL_RCC_OscConfig+0x516>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000ff2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001000:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	461a      	mov	r2, r3
 8001008:	2301      	movs	r3, #1
 800100a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fb52 	bl	80006b4 <HAL_GetTick>
 8001010:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001014:	e00a      	b.n	800102c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001016:	f7ff fb4d 	bl	80006b4 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d902      	bls.n	800102c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	f000 bcd5 	b.w	80019d6 <HAL_RCC_OscConfig+0xe02>
 800102c:	2302      	movs	r3, #2
 800102e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001036:	fa93 f3a3 	rbit	r3, r3
 800103a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800103e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001042:	fab3 f383 	clz	r3, r3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	095b      	lsrs	r3, r3, #5
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d102      	bne.n	800105c <HAL_RCC_OscConfig+0x488>
 8001056:	4b73      	ldr	r3, [pc, #460]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	e013      	b.n	8001084 <HAL_RCC_OscConfig+0x4b0>
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800106e:	2302      	movs	r3, #2
 8001070:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001074:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001078:	fa93 f3a3 	rbit	r3, r3
 800107c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001080:	4b68      	ldr	r3, [pc, #416]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	2202      	movs	r2, #2
 8001086:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800108a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800108e:	fa92 f2a2 	rbit	r2, r2
 8001092:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001096:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800109a:	fab2 f282 	clz	r2, r2
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	f042 0220 	orr.w	r2, r2, #32
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	f002 021f 	and.w	r2, r2, #31
 80010aa:	2101      	movs	r1, #1
 80010ac:	fa01 f202 	lsl.w	r2, r1, r2
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0af      	beq.n	8001016 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b6:	4b5b      	ldr	r3, [pc, #364]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	21f8      	movs	r1, #248	; 0xf8
 80010c6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010ce:	fa91 f1a1 	rbit	r1, r1
 80010d2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80010d6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010da:	fab1 f181 	clz	r1, r1
 80010de:	b2c9      	uxtb	r1, r1
 80010e0:	408b      	lsls	r3, r1
 80010e2:	4950      	ldr	r1, [pc, #320]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	600b      	str	r3, [r1, #0]
 80010e8:	e06a      	b.n	80011c0 <HAL_RCC_OscConfig+0x5ec>
 80010ea:	2301      	movs	r3, #1
 80010ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010f4:	fa93 f3a3 	rbit	r3, r3
 80010f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80010fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001100:	fab3 f383 	clz	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800110a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	461a      	mov	r2, r3
 8001112:	2300      	movs	r3, #0
 8001114:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff facd 	bl	80006b4 <HAL_GetTick>
 800111a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	e00a      	b.n	8001136 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001120:	f7ff fac8 	bl	80006b4 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d902      	bls.n	8001136 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	f000 bc50 	b.w	80019d6 <HAL_RCC_OscConfig+0xe02>
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114c:	fab3 f383 	clz	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d102      	bne.n	8001166 <HAL_RCC_OscConfig+0x592>
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	e013      	b.n	800118e <HAL_RCC_OscConfig+0x5ba>
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800117e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800118a:	4b26      	ldr	r3, [pc, #152]	; (8001224 <HAL_RCC_OscConfig+0x650>)
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	2202      	movs	r2, #2
 8001190:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001194:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001198:	fa92 f2a2 	rbit	r2, r2
 800119c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80011a0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80011a4:	fab2 f282 	clz	r2, r2
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	f042 0220 	orr.w	r2, r2, #32
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	f002 021f 	and.w	r2, r2, #31
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1af      	bne.n	8001120 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 80da 	beq.w	8001384 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d069      	beq.n	80012ae <HAL_RCC_OscConfig+0x6da>
 80011da:	2301      	movs	r3, #1
 80011dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80011e4:	fa93 f3a3 	rbit	r3, r3
 80011e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80011ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <HAL_RCC_OscConfig+0x654>)
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	461a      	mov	r2, r3
 8001200:	2301      	movs	r3, #1
 8001202:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001204:	f7ff fa56 	bl	80006b4 <HAL_GetTick>
 8001208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800120c:	e00e      	b.n	800122c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800120e:	f7ff fa51 	bl	80006b4 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d906      	bls.n	800122c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e3d9      	b.n	80019d6 <HAL_RCC_OscConfig+0xe02>
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	10908120 	.word	0x10908120
 800122c:	2302      	movs	r3, #2
 800122e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001236:	fa93 f3a3 	rbit	r3, r3
 800123a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800123e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001242:	2202      	movs	r2, #2
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	fa93 f2a3 	rbit	r2, r3
 8001250:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800125a:	2202      	movs	r2, #2
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	fa93 f2a3 	rbit	r2, r3
 8001268:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800126c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	4ba5      	ldr	r3, [pc, #660]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001272:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001276:	2102      	movs	r1, #2
 8001278:	6019      	str	r1, [r3, #0]
 800127a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	fa93 f1a3 	rbit	r1, r3
 8001284:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001288:	6019      	str	r1, [r3, #0]
  return result;
 800128a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	fab3 f383 	clz	r3, r3
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0b0      	beq.n	800120e <HAL_RCC_OscConfig+0x63a>
 80012ac:	e06a      	b.n	8001384 <HAL_RCC_OscConfig+0x7b0>
 80012ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	fa93 f2a3 	rbit	r2, r3
 80012c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012c4:	601a      	str	r2, [r3, #0]
  return result;
 80012c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b8c      	ldr	r3, [pc, #560]	; (8001508 <HAL_RCC_OscConfig+0x934>)
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	461a      	mov	r2, r3
 80012dc:	2300      	movs	r3, #0
 80012de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e0:	f7ff f9e8 	bl	80006b4 <HAL_GetTick>
 80012e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	e009      	b.n	80012fe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ea:	f7ff f9e3 	bl	80006b4 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e36b      	b.n	80019d6 <HAL_RCC_OscConfig+0xe02>
 80012fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001302:	2202      	movs	r2, #2
 8001304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	fa93 f2a3 	rbit	r2, r3
 8001310:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800131a:	2202      	movs	r2, #2
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	fa93 f2a3 	rbit	r2, r3
 8001328:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001332:	2202      	movs	r2, #2
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	fa93 f2a3 	rbit	r2, r3
 8001340:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001344:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001346:	4b6f      	ldr	r3, [pc, #444]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800134a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800134e:	2102      	movs	r1, #2
 8001350:	6019      	str	r1, [r3, #0]
 8001352:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	fa93 f1a3 	rbit	r1, r3
 800135c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001360:	6019      	str	r1, [r3, #0]
  return result;
 8001362:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	2101      	movs	r1, #1
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1b2      	bne.n	80012ea <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8158 	beq.w	8001644 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800139a:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d112      	bne.n	80013cc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	4b57      	ldr	r3, [pc, #348]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	4a56      	ldr	r2, [pc, #344]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 80013ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b0:	61d3      	str	r3, [r2, #28]
 80013b2:	4b54      	ldr	r3, [pc, #336]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	4b4f      	ldr	r3, [pc, #316]	; (800150c <HAL_RCC_OscConfig+0x938>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d11a      	bne.n	800140e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d8:	4b4c      	ldr	r3, [pc, #304]	; (800150c <HAL_RCC_OscConfig+0x938>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a4b      	ldr	r2, [pc, #300]	; (800150c <HAL_RCC_OscConfig+0x938>)
 80013de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e4:	f7ff f966 	bl	80006b4 <HAL_GetTick>
 80013e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	e009      	b.n	8001402 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ee:	f7ff f961 	bl	80006b4 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e2e9      	b.n	80019d6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	4b42      	ldr	r3, [pc, #264]	; (800150c <HAL_RCC_OscConfig+0x938>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0ef      	beq.n	80013ee <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d106      	bne.n	8001426 <HAL_RCC_OscConfig+0x852>
 8001418:	4b3a      	ldr	r3, [pc, #232]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a39      	ldr	r2, [pc, #228]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	e02f      	b.n	8001486 <HAL_RCC_OscConfig+0x8b2>
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10c      	bne.n	800144a <HAL_RCC_OscConfig+0x876>
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4a33      	ldr	r2, [pc, #204]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	6213      	str	r3, [r2, #32]
 800143c:	4b31      	ldr	r3, [pc, #196]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4a30      	ldr	r2, [pc, #192]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6213      	str	r3, [r2, #32]
 8001448:	e01d      	b.n	8001486 <HAL_RCC_OscConfig+0x8b2>
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b05      	cmp	r3, #5
 8001452:	d10c      	bne.n	800146e <HAL_RCC_OscConfig+0x89a>
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a2a      	ldr	r2, [pc, #168]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6213      	str	r3, [r2, #32]
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a27      	ldr	r2, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	e00b      	b.n	8001486 <HAL_RCC_OscConfig+0x8b2>
 800146e:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4a24      	ldr	r2, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6213      	str	r3, [r2, #32]
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4a21      	ldr	r2, [pc, #132]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 8001480:	f023 0304 	bic.w	r3, r3, #4
 8001484:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d06b      	beq.n	8001568 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff f910 	bl	80006b4 <HAL_GetTick>
 8001494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001498:	e00b      	b.n	80014b2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff f90b 	bl	80006b4 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e291      	b.n	80019d6 <HAL_RCC_OscConfig+0xe02>
 80014b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014b6:	2202      	movs	r2, #2
 80014b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	fa93 f2a3 	rbit	r2, r3
 80014c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014ce:	2202      	movs	r2, #2
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	fa93 f2a3 	rbit	r2, r3
 80014dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014e0:	601a      	str	r2, [r3, #0]
  return result;
 80014e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80014e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e8:	fab3 f383 	clz	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d109      	bne.n	8001510 <HAL_RCC_OscConfig+0x93c>
 80014fc:	4b01      	ldr	r3, [pc, #4]	; (8001504 <HAL_RCC_OscConfig+0x930>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x958>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	10908120 	.word	0x10908120
 800150c:	40007000 	.word	0x40007000
 8001510:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001514:	2202      	movs	r2, #2
 8001516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fa93 f2a3 	rbit	r2, r3
 8001522:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	4bbb      	ldr	r3, [pc, #748]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001530:	2102      	movs	r1, #2
 8001532:	6011      	str	r1, [r2, #0]
 8001534:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001538:	6812      	ldr	r2, [r2, #0]
 800153a:	fa92 f1a2 	rbit	r1, r2
 800153e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001542:	6011      	str	r1, [r2, #0]
  return result;
 8001544:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	fab2 f282 	clz	r2, r2
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f002 021f 	and.w	r2, r2, #31
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d099      	beq.n	800149a <HAL_RCC_OscConfig+0x8c6>
 8001566:	e063      	b.n	8001630 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001568:	f7ff f8a4 	bl	80006b4 <HAL_GetTick>
 800156c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001570:	e00b      	b.n	800158a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff f89f 	bl	80006b4 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e225      	b.n	80019d6 <HAL_RCC_OscConfig+0xe02>
 800158a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800158e:	2202      	movs	r2, #2
 8001590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fa93 f2a3 	rbit	r2, r3
 800159c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015a6:	2202      	movs	r2, #2
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	fa93 f2a3 	rbit	r2, r3
 80015b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015b8:	601a      	str	r2, [r3, #0]
  return result;
 80015ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d102      	bne.n	80015da <HAL_RCC_OscConfig+0xa06>
 80015d4:	4b90      	ldr	r3, [pc, #576]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	e00d      	b.n	80015f6 <HAL_RCC_OscConfig+0xa22>
 80015da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015de:	2202      	movs	r2, #2
 80015e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	fa93 f2a3 	rbit	r2, r3
 80015ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	4b89      	ldr	r3, [pc, #548]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015fa:	2102      	movs	r1, #2
 80015fc:	6011      	str	r1, [r2, #0]
 80015fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	fa92 f1a2 	rbit	r1, r2
 8001608:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800160c:	6011      	str	r1, [r2, #0]
  return result;
 800160e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	fab2 f282 	clz	r2, r2
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	f002 021f 	and.w	r2, r2, #31
 8001624:	2101      	movs	r1, #1
 8001626:	fa01 f202 	lsl.w	r2, r1, r2
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1a0      	bne.n	8001572 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001630:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001634:	2b01      	cmp	r3, #1
 8001636:	d105      	bne.n	8001644 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001638:	4b77      	ldr	r3, [pc, #476]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	4a76      	ldr	r2, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 800163e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001642:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 81c2 	beq.w	80019d4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001650:	4b71      	ldr	r3, [pc, #452]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	f000 819c 	beq.w	8001996 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b02      	cmp	r3, #2
 8001666:	f040 8114 	bne.w	8001892 <HAL_RCC_OscConfig+0xcbe>
 800166a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800166e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001672:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001674:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	fa93 f2a3 	rbit	r2, r3
 800167e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001682:	601a      	str	r2, [r3, #0]
  return result;
 8001684:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001688:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001694:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	461a      	mov	r2, r3
 800169c:	2300      	movs	r3, #0
 800169e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff f808 	bl	80006b4 <HAL_GetTick>
 80016a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a8:	e009      	b.n	80016be <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff f803 	bl	80006b4 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e18b      	b.n	80019d6 <HAL_RCC_OscConfig+0xe02>
 80016be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	fa93 f2a3 	rbit	r2, r3
 80016d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016d6:	601a      	str	r2, [r3, #0]
  return result;
 80016d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80016dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	095b      	lsrs	r3, r3, #5
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_RCC_OscConfig+0xb24>
 80016f2:	4b49      	ldr	r3, [pc, #292]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e01b      	b.n	8001730 <HAL_RCC_OscConfig+0xb5c>
 80016f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	fa93 f2a3 	rbit	r2, r3
 800170c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001716:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	fa93 f2a3 	rbit	r2, r3
 8001726:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001734:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001738:	6011      	str	r1, [r2, #0]
 800173a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	fa92 f1a2 	rbit	r1, r2
 8001744:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001748:	6011      	str	r1, [r2, #0]
  return result;
 800174a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	fab2 f282 	clz	r2, r2
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	f042 0220 	orr.w	r2, r2, #32
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	f002 021f 	and.w	r2, r2, #31
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f202 	lsl.w	r2, r1, r2
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d19e      	bne.n	80016aa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	430b      	orrs	r3, r1
 8001782:	4925      	ldr	r1, [pc, #148]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
 8001788:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800178c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fa93 f2a3 	rbit	r2, r3
 800179c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a0:	601a      	str	r2, [r3, #0]
  return result;
 80017a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017a6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	461a      	mov	r2, r3
 80017ba:	2301      	movs	r3, #1
 80017bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7fe ff79 	bl	80006b4 <HAL_GetTick>
 80017c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c6:	e009      	b.n	80017dc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7fe ff74 	bl	80006b4 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e0fc      	b.n	80019d6 <HAL_RCC_OscConfig+0xe02>
 80017dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	fa93 f2a3 	rbit	r2, r3
 80017f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017f4:	601a      	str	r2, [r3, #0]
  return result;
 80017f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017fc:	fab3 f383 	clz	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_RCC_OscConfig+0xc48>
 8001810:	4b01      	ldr	r3, [pc, #4]	; (8001818 <HAL_RCC_OscConfig+0xc44>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e01e      	b.n	8001854 <HAL_RCC_OscConfig+0xc80>
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000
 800181c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800183a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	fa93 f2a3 	rbit	r2, r3
 800184a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <HAL_RCC_OscConfig+0xe0c>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001858:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800185c:	6011      	str	r1, [r2, #0]
 800185e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	fa92 f1a2 	rbit	r1, r2
 8001868:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800186c:	6011      	str	r1, [r2, #0]
  return result;
 800186e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	fab2 f282 	clz	r2, r2
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f042 0220 	orr.w	r2, r2, #32
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	f002 021f 	and.w	r2, r2, #31
 8001884:	2101      	movs	r1, #1
 8001886:	fa01 f202 	lsl.w	r2, r1, r2
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d09b      	beq.n	80017c8 <HAL_RCC_OscConfig+0xbf4>
 8001890:	e0a0      	b.n	80019d4 <HAL_RCC_OscConfig+0xe00>
 8001892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001896:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800189a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fa93 f2a3 	rbit	r2, r3
 80018a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018aa:	601a      	str	r2, [r3, #0]
  return result;
 80018ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	fab3 f383 	clz	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	461a      	mov	r2, r3
 80018c4:	2300      	movs	r3, #0
 80018c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7fe fef4 	bl	80006b4 <HAL_GetTick>
 80018cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	e009      	b.n	80018e6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7fe feef 	bl	80006b4 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e077      	b.n	80019d6 <HAL_RCC_OscConfig+0xe02>
 80018e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fe:	601a      	str	r2, [r3, #0]
  return result;
 8001900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001904:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	095b      	lsrs	r3, r3, #5
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d102      	bne.n	8001920 <HAL_RCC_OscConfig+0xd4c>
 800191a:	4b31      	ldr	r3, [pc, #196]	; (80019e0 <HAL_RCC_OscConfig+0xe0c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e01b      	b.n	8001958 <HAL_RCC_OscConfig+0xd84>
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f107 0320 	add.w	r3, r7, #32
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	fa93 f2a3 	rbit	r2, r3
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	f107 0318 	add.w	r3, r7, #24
 800193e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	f107 0318 	add.w	r3, r7, #24
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	fa93 f2a3 	rbit	r2, r3
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_RCC_OscConfig+0xe0c>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	f107 0210 	add.w	r2, r7, #16
 800195c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001960:	6011      	str	r1, [r2, #0]
 8001962:	f107 0210 	add.w	r2, r7, #16
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	fa92 f1a2 	rbit	r1, r2
 800196c:	f107 020c 	add.w	r2, r7, #12
 8001970:	6011      	str	r1, [r2, #0]
  return result;
 8001972:	f107 020c 	add.w	r2, r7, #12
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	fab2 f282 	clz	r2, r2
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	f002 021f 	and.w	r2, r2, #31
 8001988:	2101      	movs	r1, #1
 800198a:	fa01 f202 	lsl.w	r2, r1, r2
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d19e      	bne.n	80018d2 <HAL_RCC_OscConfig+0xcfe>
 8001994:	e01e      	b.n	80019d4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e018      	b.n	80019d6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_RCC_OscConfig+0xe0c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d108      	bne.n	80019d0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80019be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b09e      	sub	sp, #120	; 0x78
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e162      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b90      	ldr	r3, [pc, #576]	; (8001c40 <HAL_RCC_ClockConfig+0x25c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d910      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b8d      	ldr	r3, [pc, #564]	; (8001c40 <HAL_RCC_ClockConfig+0x25c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 0207 	bic.w	r2, r3, #7
 8001a12:	498b      	ldr	r1, [pc, #556]	; (8001c40 <HAL_RCC_ClockConfig+0x25c>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b89      	ldr	r3, [pc, #548]	; (8001c40 <HAL_RCC_ClockConfig+0x25c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e14a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a38:	4b82      	ldr	r3, [pc, #520]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	497f      	ldr	r1, [pc, #508]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80dc 	beq.w	8001c10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d13c      	bne.n	8001ada <HAL_RCC_ClockConfig+0xf6>
 8001a60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d102      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xa6>
 8001a84:	4b6f      	ldr	r3, [pc, #444]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	e00f      	b.n	8001aaa <HAL_RCC_ClockConfig+0xc6>
 8001a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	667b      	str	r3, [r7, #100]	; 0x64
 8001a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8001a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aa6:	4b67      	ldr	r3, [pc, #412]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aae:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ab0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ab2:	fa92 f2a2 	rbit	r2, r2
 8001ab6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001aba:	fab2 f282 	clz	r2, r2
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	f042 0220 	orr.w	r2, r2, #32
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	f002 021f 	and.w	r2, r2, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d17b      	bne.n	8001bce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0f3      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d13c      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x178>
 8001ae2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ae6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af2:	fab3 f383 	clz	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	095b      	lsrs	r3, r3, #5
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d102      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x128>
 8001b06:	4b4f      	ldr	r3, [pc, #316]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_ClockConfig+0x148>
 8001b0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	647b      	str	r3, [r7, #68]	; 0x44
 8001b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b1e:	643b      	str	r3, [r7, #64]	; 0x40
 8001b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b28:	4b46      	ldr	r3, [pc, #280]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b30:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b34:	fa92 f2a2 	rbit	r2, r2
 8001b38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b3c:	fab2 f282 	clz	r2, r2
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	f042 0220 	orr.w	r2, r2, #32
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f002 021f 	and.w	r2, r2, #31
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d13a      	bne.n	8001bce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0b2      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x2de>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	095b      	lsrs	r3, r3, #5
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d102      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x1a0>
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	e00d      	b.n	8001ba0 <HAL_RCC_ClockConfig+0x1bc>
 8001b84:	2302      	movs	r3, #2
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b90:	2302      	movs	r3, #2
 8001b92:	623b      	str	r3, [r7, #32]
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	61fb      	str	r3, [r7, #28]
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	61ba      	str	r2, [r7, #24]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	fa92 f2a2 	rbit	r2, r2
 8001baa:	617a      	str	r2, [r7, #20]
  return result;
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	fab2 f282 	clz	r2, r2
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	f042 0220 	orr.w	r2, r2, #32
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	f002 021f 	and.w	r2, r2, #31
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e079      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f023 0203 	bic.w	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	491a      	ldr	r1, [pc, #104]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be0:	f7fe fd68 	bl	80006b4 <HAL_GetTick>
 8001be4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be8:	f7fe fd64 	bl	80006b4 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e061      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_RCC_ClockConfig+0x260>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 020c 	and.w	r2, r3, #12
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d1eb      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_ClockConfig+0x25c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d214      	bcs.n	8001c48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_RCC_ClockConfig+0x25c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0207 	bic.w	r2, r3, #7
 8001c26:	4906      	ldr	r1, [pc, #24]	; (8001c40 <HAL_RCC_ClockConfig+0x25c>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HAL_RCC_ClockConfig+0x25c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e040      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x2de>
 8001c40:	40022000 	.word	0x40022000
 8001c44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_ClockConfig+0x2e8>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	491a      	ldr	r1, [pc, #104]	; (8001ccc <HAL_RCC_ClockConfig+0x2e8>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_RCC_ClockConfig+0x2e8>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4912      	ldr	r1, [pc, #72]	; (8001ccc <HAL_RCC_ClockConfig+0x2e8>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c86:	f000 f829 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_RCC_ClockConfig+0x2e8>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c94:	22f0      	movs	r2, #240	; 0xf0
 8001c96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	fa92 f2a2 	rbit	r2, r2
 8001c9e:	60fa      	str	r2, [r7, #12]
  return result;
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	fab2 f282 	clz	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	40d3      	lsrs	r3, r2
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x2ec>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	fa21 f303 	lsr.w	r3, r1, r3
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <HAL_RCC_ClockConfig+0x2f0>)
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_RCC_ClockConfig+0x2f4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fcb6 	bl	800062c <HAL_InitTick>
  
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3778      	adds	r7, #120	; 0x78
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	08003160 	.word	0x08003160
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d002      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x30>
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d003      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x36>
 8001d0a:	e03c      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d0e:	623b      	str	r3, [r7, #32]
      break;
 8001d10:	e03c      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	fa92 f2a2 	rbit	r2, r2
 8001d24:	607a      	str	r2, [r7, #4]
  return result;
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	fab2 f282 	clz	r2, r2
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	40d3      	lsrs	r3, r2
 8001d30:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	220f      	movs	r2, #15
 8001d40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	fa92 f2a2 	rbit	r2, r2
 8001d48:	60fa      	str	r2, [r7, #12]
  return result;
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	fab2 f282 	clz	r2, r2
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	40d3      	lsrs	r3, r2
 8001d54:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	e004      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	623b      	str	r3, [r7, #32]
      break;
 8001d84:	e002      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d88:	623b      	str	r3, [r7, #32]
      break;
 8001d8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	372c      	adds	r7, #44	; 0x2c
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	007a1200 	.word	0x007a1200
 8001da4:	08003178 	.word	0x08003178
 8001da8:	08003188 	.word	0x08003188
 8001dac:	003d0900 	.word	0x003d0900

08001db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001dce:	f7ff ffef 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001dd2:	4601      	mov	r1, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ddc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001de0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	fa92 f2a2 	rbit	r2, r2
 8001de8:	603a      	str	r2, [r7, #0]
  return result;
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	fab2 f282 	clz	r2, r2
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	40d3      	lsrs	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001df6:	5cd3      	ldrb	r3, [r2, r3]
 8001df8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08003170 	.word	0x08003170

08001e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001e12:	f7ff ffcd 	bl	8001db0 <HAL_RCC_GetHCLKFreq>
 8001e16:	4601      	mov	r1, r0
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001e20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001e24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	fa92 f2a2 	rbit	r2, r2
 8001e2c:	603a      	str	r2, [r7, #0]
  return result;
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	40d3      	lsrs	r3, r2
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8001e3a:	5cd3      	ldrb	r3, [r2, r3]
 8001e3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	08003170 	.word	0x08003170

08001e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b092      	sub	sp, #72	; 0x48
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80d4 	beq.w	800201c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e74:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10e      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e80:	4b4b      	ldr	r3, [pc, #300]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	4a4a      	ldr	r2, [pc, #296]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	61d3      	str	r3, [r2, #28]
 8001e8c:	4b48      	ldr	r3, [pc, #288]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b45      	ldr	r3, [pc, #276]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d118      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eaa:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a41      	ldr	r2, [pc, #260]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fbfd 	bl	80006b4 <HAL_GetTick>
 8001eba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebe:	f7fe fbf9 	bl	80006b4 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b64      	cmp	r3, #100	; 0x64
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e169      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0f0      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001edc:	4b34      	ldr	r3, [pc, #208]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f000 8084 	beq.w	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d07c      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001efc:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	461a      	mov	r2, r3
 8001f26:	2301      	movs	r3, #1
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	461a      	mov	r2, r3
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f4e:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f52:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d04b      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7fe fba9 	bl	80006b4 <HAL_GetTick>
 8001f62:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7fe fba5 	bl	80006b4 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e113      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	6a3b      	ldr	r3, [r7, #32]
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	61fb      	str	r3, [r7, #28]
  return result;
 8001f94:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d108      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001faa:	4b01      	ldr	r3, [pc, #4]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	e00d      	b.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40007000 	.word	0x40007000
 8001fb8:	10908100 	.word	0x10908100
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	4b78      	ldr	r3, [pc, #480]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	2202      	movs	r2, #2
 8001fce:	613a      	str	r2, [r7, #16]
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	fa92 f2a2 	rbit	r2, r2
 8001fd6:	60fa      	str	r2, [r7, #12]
  return result;
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	fab2 f282 	clz	r2, r2
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	f002 021f 	and.w	r2, r2, #31
 8001fea:	2101      	movs	r1, #1
 8001fec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0b7      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ff6:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	496a      	ldr	r1, [pc, #424]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002004:	4313      	orrs	r3, r2
 8002006:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002008:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800200c:	2b01      	cmp	r3, #1
 800200e:	d105      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002010:	4b66      	ldr	r3, [pc, #408]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	4a65      	ldr	r2, [pc, #404]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002028:	4b60      	ldr	r3, [pc, #384]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	f023 0203 	bic.w	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	495d      	ldr	r1, [pc, #372]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002036:	4313      	orrs	r3, r2
 8002038:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002046:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	4956      	ldr	r1, [pc, #344]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002054:	4313      	orrs	r3, r2
 8002056:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002064:	4b51      	ldr	r3, [pc, #324]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	494e      	ldr	r1, [pc, #312]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002072:	4313      	orrs	r3, r2
 8002074:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002082:	4b4a      	ldr	r3, [pc, #296]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f023 0210 	bic.w	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	4947      	ldr	r1, [pc, #284]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002090:	4313      	orrs	r3, r2
 8002092:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80020a0:	4b42      	ldr	r3, [pc, #264]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ac:	493f      	ldr	r1, [pc, #252]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d008      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020be:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f023 0220 	bic.w	r2, r3, #32
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4938      	ldr	r1, [pc, #224]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020dc:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	4930      	ldr	r1, [pc, #192]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d008      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	4929      	ldr	r1, [pc, #164]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002108:	4313      	orrs	r3, r2
 800210a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	4921      	ldr	r1, [pc, #132]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002126:	4313      	orrs	r3, r2
 8002128:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	491a      	ldr	r1, [pc, #104]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	4912      	ldr	r1, [pc, #72]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002162:	4313      	orrs	r3, r2
 8002164:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d008      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	490b      	ldr	r1, [pc, #44]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002180:	4313      	orrs	r3, r2
 8002182:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219c:	4903      	ldr	r1, [pc, #12]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3748      	adds	r7, #72	; 0x48
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000

080021b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e049      	b.n	8002256 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe f948 	bl	800046c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f000 f96a 	bl	80024c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	d001      	beq.n	8002278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e04a      	b.n	800230e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a21      	ldr	r2, [pc, #132]	; (800231c <HAL_TIM_Base_Start_IT+0xbc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d018      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x6c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a2:	d013      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x6c>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_TIM_Base_Start_IT+0xc0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00e      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x6c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <HAL_TIM_Base_Start_IT+0xc4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d009      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x6c>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <HAL_TIM_Base_Start_IT+0xc8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d004      	beq.n	80022cc <HAL_TIM_Base_Start_IT+0x6c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a19      	ldr	r2, [pc, #100]	; (800232c <HAL_TIM_Base_Start_IT+0xcc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d115      	bne.n	80022f8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_TIM_Base_Start_IT+0xd0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d015      	beq.n	800230a <HAL_TIM_Base_Start_IT+0xaa>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e4:	d011      	beq.n	800230a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f6:	e008      	b.n	800230a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e000      	b.n	800230c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40012c00 	.word	0x40012c00
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800
 8002328:	40013400 	.word	0x40013400
 800232c:	40014000 	.word	0x40014000
 8002330:	00010007 	.word	0x00010007

08002334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_TIM_ConfigClockSource+0x1c>
 800234c:	2302      	movs	r3, #2
 800234e:	e0b6      	b.n	80024be <HAL_TIM_ConfigClockSource+0x18a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800237a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800238c:	d03e      	beq.n	800240c <HAL_TIM_ConfigClockSource+0xd8>
 800238e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002392:	f200 8087 	bhi.w	80024a4 <HAL_TIM_ConfigClockSource+0x170>
 8002396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800239a:	f000 8086 	beq.w	80024aa <HAL_TIM_ConfigClockSource+0x176>
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	d87f      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x170>
 80023a4:	2b70      	cmp	r3, #112	; 0x70
 80023a6:	d01a      	beq.n	80023de <HAL_TIM_ConfigClockSource+0xaa>
 80023a8:	2b70      	cmp	r3, #112	; 0x70
 80023aa:	d87b      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x170>
 80023ac:	2b60      	cmp	r3, #96	; 0x60
 80023ae:	d050      	beq.n	8002452 <HAL_TIM_ConfigClockSource+0x11e>
 80023b0:	2b60      	cmp	r3, #96	; 0x60
 80023b2:	d877      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x170>
 80023b4:	2b50      	cmp	r3, #80	; 0x50
 80023b6:	d03c      	beq.n	8002432 <HAL_TIM_ConfigClockSource+0xfe>
 80023b8:	2b50      	cmp	r3, #80	; 0x50
 80023ba:	d873      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x170>
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	d058      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0x13e>
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d86f      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x170>
 80023c4:	2b30      	cmp	r3, #48	; 0x30
 80023c6:	d064      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x15e>
 80023c8:	2b30      	cmp	r3, #48	; 0x30
 80023ca:	d86b      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x170>
 80023cc:	2b20      	cmp	r3, #32
 80023ce:	d060      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x15e>
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d867      	bhi.n	80024a4 <HAL_TIM_ConfigClockSource+0x170>
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d05c      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x15e>
 80023d8:	2b10      	cmp	r3, #16
 80023da:	d05a      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x15e>
 80023dc:	e062      	b.n	80024a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f000 f975 	bl	80026dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002400:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	609a      	str	r2, [r3, #8]
      break;
 800240a:	e04f      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6899      	ldr	r1, [r3, #8]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f000 f95e 	bl	80026dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800242e:	609a      	str	r2, [r3, #8]
      break;
 8002430:	e03c      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	461a      	mov	r2, r3
 8002440:	f000 f8d2 	bl	80025e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2150      	movs	r1, #80	; 0x50
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f92b 	bl	80026a6 <TIM_ITRx_SetConfig>
      break;
 8002450:	e02c      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	461a      	mov	r2, r3
 8002460:	f000 f8f1 	bl	8002646 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2160      	movs	r1, #96	; 0x60
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f91b 	bl	80026a6 <TIM_ITRx_SetConfig>
      break;
 8002470:	e01c      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	461a      	mov	r2, r3
 8002480:	f000 f8b2 	bl	80025e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f90b 	bl	80026a6 <TIM_ITRx_SetConfig>
      break;
 8002490:	e00c      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4619      	mov	r1, r3
 800249c:	4610      	mov	r0, r2
 800249e:	f000 f902 	bl	80026a6 <TIM_ITRx_SetConfig>
      break;
 80024a2:	e003      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      break;
 80024a8:	e000      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 80024aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a3c      	ldr	r2, [pc, #240]	; (80025cc <TIM_Base_SetConfig+0x104>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00f      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e6:	d00b      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a39      	ldr	r2, [pc, #228]	; (80025d0 <TIM_Base_SetConfig+0x108>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a38      	ldr	r2, [pc, #224]	; (80025d4 <TIM_Base_SetConfig+0x10c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d003      	beq.n	8002500 <TIM_Base_SetConfig+0x38>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a37      	ldr	r2, [pc, #220]	; (80025d8 <TIM_Base_SetConfig+0x110>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d108      	bne.n	8002512 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a2d      	ldr	r2, [pc, #180]	; (80025cc <TIM_Base_SetConfig+0x104>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01b      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d017      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <TIM_Base_SetConfig+0x108>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <TIM_Base_SetConfig+0x10c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00f      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <TIM_Base_SetConfig+0x110>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00b      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a27      	ldr	r2, [pc, #156]	; (80025dc <TIM_Base_SetConfig+0x114>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <TIM_Base_SetConfig+0x118>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d003      	beq.n	8002552 <TIM_Base_SetConfig+0x8a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a25      	ldr	r2, [pc, #148]	; (80025e4 <TIM_Base_SetConfig+0x11c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d108      	bne.n	8002564 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <TIM_Base_SetConfig+0x104>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d00f      	beq.n	80025b0 <TIM_Base_SetConfig+0xe8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <TIM_Base_SetConfig+0x110>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00b      	beq.n	80025b0 <TIM_Base_SetConfig+0xe8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <TIM_Base_SetConfig+0x114>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d007      	beq.n	80025b0 <TIM_Base_SetConfig+0xe8>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <TIM_Base_SetConfig+0x118>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d003      	beq.n	80025b0 <TIM_Base_SetConfig+0xe8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <TIM_Base_SetConfig+0x11c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d103      	bne.n	80025b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	615a      	str	r2, [r3, #20]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40013400 	.word	0x40013400
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40014400 	.word	0x40014400
 80025e4:	40014800 	.word	0x40014800

080025e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f023 0201 	bic.w	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f023 030a 	bic.w	r3, r3, #10
 8002624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4313      	orrs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	621a      	str	r2, [r3, #32]
}
 800263a:	bf00      	nop
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002646:	b480      	push	{r7}
 8002648:	b087      	sub	sp, #28
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0210 	bic.w	r2, r3, #16
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	031b      	lsls	r3, r3, #12
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002682:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	621a      	str	r2, [r3, #32]
}
 800269a:	bf00      	nop
 800269c:	371c      	adds	r7, #28
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f043 0307 	orr.w	r3, r3, #7
 80026c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	609a      	str	r2, [r3, #8]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	021a      	lsls	r2, r3, #8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	431a      	orrs	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	609a      	str	r2, [r3, #8]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002730:	2302      	movs	r3, #2
 8002732:	e063      	b.n	80027fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2b      	ldr	r2, [pc, #172]	; (8002808 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2a      	ldr	r2, [pc, #168]	; (800280c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d108      	bne.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800276e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d018      	beq.n	80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d013      	beq.n	80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00e      	beq.n	80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a13      	ldr	r2, [pc, #76]	; (8002818 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d10c      	bne.n	80027ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	40012c00 	.word	0x40012c00
 800280c:	40013400 	.word	0x40013400
 8002810:	40000400 	.word	0x40000400
 8002814:	40000800 	.word	0x40000800
 8002818:	40014000 	.word	0x40014000

0800281c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e040      	b.n	80028b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002832:	2b00      	cmp	r3, #0
 8002834:	d106      	bne.n	8002844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fd fe34 	bl	80004ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2224      	movs	r2, #36	; 0x24
 8002848:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8c0 	bl	80029e0 <UART_SetConfig>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e022      	b.n	80028b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa88 	bl	8002d88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb0f 	bl	8002ecc <UART_CheckIdleState>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	f040 8082 	bne.w	80029d6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_UART_Transmit+0x26>
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e07a      	b.n	80029d8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_UART_Transmit+0x38>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e073      	b.n	80029d8 <HAL_UART_Transmit+0x120>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2221      	movs	r2, #33	; 0x21
 8002904:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002906:	f7fd fed5 	bl	80006b4 <HAL_GetTick>
 800290a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	88fa      	ldrh	r2, [r7, #6]
 8002910:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002924:	d108      	bne.n	8002938 <HAL_UART_Transmit+0x80>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d104      	bne.n	8002938 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e003      	b.n	8002940 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002948:	e02d      	b.n	80029a6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fb02 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e039      	b.n	80029d8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	881a      	ldrh	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002976:	b292      	uxth	r2, r2
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	3302      	adds	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	e008      	b.n	8002994 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	b292      	uxth	r2, r2
 800298c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3301      	adds	r3, #1
 8002992:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1cb      	bne.n	800294a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2140      	movs	r1, #64	; 0x40
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 face 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e005      	b.n	80029d8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002a0e:	f023 030c 	bic.w	r3, r3, #12
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	6979      	ldr	r1, [r7, #20]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4aae      	ldr	r2, [pc, #696]	; (8002d14 <UART_SetConfig+0x334>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d120      	bne.n	8002aa2 <UART_SetConfig+0xc2>
 8002a60:	4bad      	ldr	r3, [pc, #692]	; (8002d18 <UART_SetConfig+0x338>)
 8002a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d817      	bhi.n	8002a9c <UART_SetConfig+0xbc>
 8002a6c:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <UART_SetConfig+0x94>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002a85 	.word	0x08002a85
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002a97 	.word	0x08002a97
 8002a80:	08002a8b 	.word	0x08002a8b
 8002a84:	2301      	movs	r3, #1
 8002a86:	77fb      	strb	r3, [r7, #31]
 8002a88:	e0b5      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	77fb      	strb	r3, [r7, #31]
 8002a8e:	e0b2      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002a90:	2304      	movs	r3, #4
 8002a92:	77fb      	strb	r3, [r7, #31]
 8002a94:	e0af      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002a96:	2308      	movs	r3, #8
 8002a98:	77fb      	strb	r3, [r7, #31]
 8002a9a:	e0ac      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	77fb      	strb	r3, [r7, #31]
 8002aa0:	e0a9      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a9d      	ldr	r2, [pc, #628]	; (8002d1c <UART_SetConfig+0x33c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d124      	bne.n	8002af6 <UART_SetConfig+0x116>
 8002aac:	4b9a      	ldr	r3, [pc, #616]	; (8002d18 <UART_SetConfig+0x338>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ab8:	d011      	beq.n	8002ade <UART_SetConfig+0xfe>
 8002aba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002abe:	d817      	bhi.n	8002af0 <UART_SetConfig+0x110>
 8002ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ac4:	d011      	beq.n	8002aea <UART_SetConfig+0x10a>
 8002ac6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aca:	d811      	bhi.n	8002af0 <UART_SetConfig+0x110>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <UART_SetConfig+0xf8>
 8002ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad4:	d006      	beq.n	8002ae4 <UART_SetConfig+0x104>
 8002ad6:	e00b      	b.n	8002af0 <UART_SetConfig+0x110>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	77fb      	strb	r3, [r7, #31]
 8002adc:	e08b      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	77fb      	strb	r3, [r7, #31]
 8002ae2:	e088      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	77fb      	strb	r3, [r7, #31]
 8002ae8:	e085      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002aea:	2308      	movs	r3, #8
 8002aec:	77fb      	strb	r3, [r7, #31]
 8002aee:	e082      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002af0:	2310      	movs	r3, #16
 8002af2:	77fb      	strb	r3, [r7, #31]
 8002af4:	e07f      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a89      	ldr	r2, [pc, #548]	; (8002d20 <UART_SetConfig+0x340>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d124      	bne.n	8002b4a <UART_SetConfig+0x16a>
 8002b00:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <UART_SetConfig+0x338>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002b08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b0c:	d011      	beq.n	8002b32 <UART_SetConfig+0x152>
 8002b0e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b12:	d817      	bhi.n	8002b44 <UART_SetConfig+0x164>
 8002b14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b18:	d011      	beq.n	8002b3e <UART_SetConfig+0x15e>
 8002b1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b1e:	d811      	bhi.n	8002b44 <UART_SetConfig+0x164>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <UART_SetConfig+0x14c>
 8002b24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b28:	d006      	beq.n	8002b38 <UART_SetConfig+0x158>
 8002b2a:	e00b      	b.n	8002b44 <UART_SetConfig+0x164>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	77fb      	strb	r3, [r7, #31]
 8002b30:	e061      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002b32:	2302      	movs	r3, #2
 8002b34:	77fb      	strb	r3, [r7, #31]
 8002b36:	e05e      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	77fb      	strb	r3, [r7, #31]
 8002b3c:	e05b      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002b3e:	2308      	movs	r3, #8
 8002b40:	77fb      	strb	r3, [r7, #31]
 8002b42:	e058      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002b44:	2310      	movs	r3, #16
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	e055      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a75      	ldr	r2, [pc, #468]	; (8002d24 <UART_SetConfig+0x344>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d124      	bne.n	8002b9e <UART_SetConfig+0x1be>
 8002b54:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <UART_SetConfig+0x338>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b60:	d011      	beq.n	8002b86 <UART_SetConfig+0x1a6>
 8002b62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b66:	d817      	bhi.n	8002b98 <UART_SetConfig+0x1b8>
 8002b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b6c:	d011      	beq.n	8002b92 <UART_SetConfig+0x1b2>
 8002b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b72:	d811      	bhi.n	8002b98 <UART_SetConfig+0x1b8>
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <UART_SetConfig+0x1a0>
 8002b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b7c:	d006      	beq.n	8002b8c <UART_SetConfig+0x1ac>
 8002b7e:	e00b      	b.n	8002b98 <UART_SetConfig+0x1b8>
 8002b80:	2300      	movs	r3, #0
 8002b82:	77fb      	strb	r3, [r7, #31]
 8002b84:	e037      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002b86:	2302      	movs	r3, #2
 8002b88:	77fb      	strb	r3, [r7, #31]
 8002b8a:	e034      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	77fb      	strb	r3, [r7, #31]
 8002b90:	e031      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002b92:	2308      	movs	r3, #8
 8002b94:	77fb      	strb	r3, [r7, #31]
 8002b96:	e02e      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002b98:	2310      	movs	r3, #16
 8002b9a:	77fb      	strb	r3, [r7, #31]
 8002b9c:	e02b      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <UART_SetConfig+0x348>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d124      	bne.n	8002bf2 <UART_SetConfig+0x212>
 8002ba8:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <UART_SetConfig+0x338>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002bb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bb4:	d011      	beq.n	8002bda <UART_SetConfig+0x1fa>
 8002bb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bba:	d817      	bhi.n	8002bec <UART_SetConfig+0x20c>
 8002bbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bc0:	d011      	beq.n	8002be6 <UART_SetConfig+0x206>
 8002bc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bc6:	d811      	bhi.n	8002bec <UART_SetConfig+0x20c>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <UART_SetConfig+0x1f4>
 8002bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd0:	d006      	beq.n	8002be0 <UART_SetConfig+0x200>
 8002bd2:	e00b      	b.n	8002bec <UART_SetConfig+0x20c>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]
 8002bd8:	e00d      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	77fb      	strb	r3, [r7, #31]
 8002bde:	e00a      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002be0:	2304      	movs	r3, #4
 8002be2:	77fb      	strb	r3, [r7, #31]
 8002be4:	e007      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002be6:	2308      	movs	r3, #8
 8002be8:	77fb      	strb	r3, [r7, #31]
 8002bea:	e004      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002bec:	2310      	movs	r3, #16
 8002bee:	77fb      	strb	r3, [r7, #31]
 8002bf0:	e001      	b.n	8002bf6 <UART_SetConfig+0x216>
 8002bf2:	2310      	movs	r3, #16
 8002bf4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfe:	d15c      	bne.n	8002cba <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8002c00:	7ffb      	ldrb	r3, [r7, #31]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d827      	bhi.n	8002c56 <UART_SetConfig+0x276>
 8002c06:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <UART_SetConfig+0x22c>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c31 	.word	0x08002c31
 8002c10:	08002c39 	.word	0x08002c39
 8002c14:	08002c41 	.word	0x08002c41
 8002c18:	08002c57 	.word	0x08002c57
 8002c1c:	08002c47 	.word	0x08002c47
 8002c20:	08002c57 	.word	0x08002c57
 8002c24:	08002c57 	.word	0x08002c57
 8002c28:	08002c57 	.word	0x08002c57
 8002c2c:	08002c4f 	.word	0x08002c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c30:	f7ff f8ca 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 8002c34:	61b8      	str	r0, [r7, #24]
        break;
 8002c36:	e013      	b.n	8002c60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c38:	f7ff f8e8 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002c3c:	61b8      	str	r0, [r7, #24]
        break;
 8002c3e:	e00f      	b.n	8002c60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c40:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <UART_SetConfig+0x34c>)
 8002c42:	61bb      	str	r3, [r7, #24]
        break;
 8002c44:	e00c      	b.n	8002c60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c46:	f7ff f849 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8002c4a:	61b8      	str	r0, [r7, #24]
        break;
 8002c4c:	e008      	b.n	8002c60 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c52:	61bb      	str	r3, [r7, #24]
        break;
 8002c54:	e004      	b.n	8002c60 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	77bb      	strb	r3, [r7, #30]
        break;
 8002c5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8085 	beq.w	8002d72 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	005a      	lsls	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	441a      	add	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	d916      	bls.n	8002cb4 <UART_SetConfig+0x2d4>
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d212      	bcs.n	8002cb4 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	f023 030f 	bic.w	r3, r3, #15
 8002c96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	89fb      	ldrh	r3, [r7, #14]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	89fa      	ldrh	r2, [r7, #14]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	e05e      	b.n	8002d72 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	77bb      	strb	r3, [r7, #30]
 8002cb8:	e05b      	b.n	8002d72 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cba:	7ffb      	ldrb	r3, [r7, #31]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d837      	bhi.n	8002d30 <UART_SetConfig+0x350>
 8002cc0:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <UART_SetConfig+0x2e8>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002ced 	.word	0x08002ced
 8002ccc:	08002cf5 	.word	0x08002cf5
 8002cd0:	08002cfd 	.word	0x08002cfd
 8002cd4:	08002d31 	.word	0x08002d31
 8002cd8:	08002d03 	.word	0x08002d03
 8002cdc:	08002d31 	.word	0x08002d31
 8002ce0:	08002d31 	.word	0x08002d31
 8002ce4:	08002d31 	.word	0x08002d31
 8002ce8:	08002d0b 	.word	0x08002d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cec:	f7ff f86c 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 8002cf0:	61b8      	str	r0, [r7, #24]
        break;
 8002cf2:	e022      	b.n	8002d3a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cf4:	f7ff f88a 	bl	8001e0c <HAL_RCC_GetPCLK2Freq>
 8002cf8:	61b8      	str	r0, [r7, #24]
        break;
 8002cfa:	e01e      	b.n	8002d3a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <UART_SetConfig+0x34c>)
 8002cfe:	61bb      	str	r3, [r7, #24]
        break;
 8002d00:	e01b      	b.n	8002d3a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d02:	f7fe ffeb 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8002d06:	61b8      	str	r0, [r7, #24]
        break;
 8002d08:	e017      	b.n	8002d3a <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0e:	61bb      	str	r3, [r7, #24]
        break;
 8002d10:	e013      	b.n	8002d3a <UART_SetConfig+0x35a>
 8002d12:	bf00      	nop
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40004400 	.word	0x40004400
 8002d20:	40004800 	.word	0x40004800
 8002d24:	40004c00 	.word	0x40004c00
 8002d28:	40005000 	.word	0x40005000
 8002d2c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	77bb      	strb	r3, [r7, #30]
        break;
 8002d38:	bf00      	nop
    }

    if (pclk != 0U)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d018      	beq.n	8002d72 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	085a      	lsrs	r2, r3, #1
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	441a      	add	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b0f      	cmp	r3, #15
 8002d5a:	d908      	bls.n	8002d6e <UART_SetConfig+0x38e>
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d62:	d204      	bcs.n	8002d6e <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	e001      	b.n	8002d72 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002d7e:	7fbb      	ldrb	r3, [r7, #30]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	f003 0320 	and.w	r3, r3, #32
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01a      	beq.n	8002e9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e86:	d10a      	bne.n	8002e9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	605a      	str	r2, [r3, #4]
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002edc:	f7fd fbea 	bl	80006b4 <HAL_GetTick>
 8002ee0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d10e      	bne.n	8002f0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f82d 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e023      	b.n	8002f56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d10e      	bne.n	8002f3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f817 	bl	8002f5e <UART_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e00d      	b.n	8002f56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b09c      	sub	sp, #112	; 0x70
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f6e:	e0a5      	b.n	80030bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f76:	f000 80a1 	beq.w	80030bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fd fb9b 	bl	80006b4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x32>
 8002f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d13e      	bne.n	800300e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fa4:	667b      	str	r3, [r7, #100]	; 0x64
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fb6:	e841 2300 	strex	r3, r2, [r1]
 8002fba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1e6      	bne.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fcc:	e853 3f00 	ldrex	r3, [r3]
 8002fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3308      	adds	r3, #8
 8002fe0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fe2:	64ba      	str	r2, [r7, #72]	; 0x48
 8002fe4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fea:	e841 2300 	strex	r3, r2, [r1]
 8002fee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1e5      	bne.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e067      	b.n	80030de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d04f      	beq.n	80030bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800302a:	d147      	bne.n	80030bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003034:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	e853 3f00 	ldrex	r3, [r3]
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800304a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
 8003056:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800305a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e6      	bne.n	8003036 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3308      	adds	r3, #8
 800306e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	613b      	str	r3, [r7, #16]
   return(result);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3308      	adds	r3, #8
 8003086:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003088:	623a      	str	r2, [r7, #32]
 800308a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	69f9      	ldr	r1, [r7, #28]
 800308e:	6a3a      	ldr	r2, [r7, #32]
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	61bb      	str	r3, [r7, #24]
   return(result);
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e5      	bne.n	8003068 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e010      	b.n	80030de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69da      	ldr	r2, [r3, #28]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	f43f af4a 	beq.w	8002f70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3770      	adds	r7, #112	; 0x70
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <__libc_init_array>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	4d0d      	ldr	r5, [pc, #52]	; (8003120 <__libc_init_array+0x38>)
 80030ec:	4c0d      	ldr	r4, [pc, #52]	; (8003124 <__libc_init_array+0x3c>)
 80030ee:	1b64      	subs	r4, r4, r5
 80030f0:	10a4      	asrs	r4, r4, #2
 80030f2:	2600      	movs	r6, #0
 80030f4:	42a6      	cmp	r6, r4
 80030f6:	d109      	bne.n	800310c <__libc_init_array+0x24>
 80030f8:	4d0b      	ldr	r5, [pc, #44]	; (8003128 <__libc_init_array+0x40>)
 80030fa:	4c0c      	ldr	r4, [pc, #48]	; (800312c <__libc_init_array+0x44>)
 80030fc:	f000 f820 	bl	8003140 <_init>
 8003100:	1b64      	subs	r4, r4, r5
 8003102:	10a4      	asrs	r4, r4, #2
 8003104:	2600      	movs	r6, #0
 8003106:	42a6      	cmp	r6, r4
 8003108:	d105      	bne.n	8003116 <__libc_init_array+0x2e>
 800310a:	bd70      	pop	{r4, r5, r6, pc}
 800310c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003110:	4798      	blx	r3
 8003112:	3601      	adds	r6, #1
 8003114:	e7ee      	b.n	80030f4 <__libc_init_array+0xc>
 8003116:	f855 3b04 	ldr.w	r3, [r5], #4
 800311a:	4798      	blx	r3
 800311c:	3601      	adds	r6, #1
 800311e:	e7f2      	b.n	8003106 <__libc_init_array+0x1e>
 8003120:	08003198 	.word	0x08003198
 8003124:	08003198 	.word	0x08003198
 8003128:	08003198 	.word	0x08003198
 800312c:	0800319c 	.word	0x0800319c

08003130 <memset>:
 8003130:	4402      	add	r2, r0
 8003132:	4603      	mov	r3, r0
 8003134:	4293      	cmp	r3, r2
 8003136:	d100      	bne.n	800313a <memset+0xa>
 8003138:	4770      	bx	lr
 800313a:	f803 1b01 	strb.w	r1, [r3], #1
 800313e:	e7f9      	b.n	8003134 <memset+0x4>

08003140 <_init>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr

0800314c <_fini>:
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800314e:	bf00      	nop
 8003150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003152:	bc08      	pop	{r3}
 8003154:	469e      	mov	lr, r3
 8003156:	4770      	bx	lr
