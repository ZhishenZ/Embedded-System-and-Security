
dimming_LED_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003360  08003360  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003360  08003360  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003360  08003360  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003364  08003364  00013364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d51  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f6  00000000  00000000  00029d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  0002b488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d8  00000000  00000000  0002be18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c695  00000000  00000000  0002c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b458  00000000  00000000  00048d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae218  00000000  00000000  000541dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001023f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000278c  00000000  00000000  00102448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003318 	.word	0x08003318

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003318 	.word	0x08003318

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa42 	bl	8000654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80c 	bl	80001ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f90a 	bl	80003ec <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d8:	f000 f85a 	bl	8000290 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001dc:	2100      	movs	r1, #0
 80001de:	4802      	ldr	r0, [pc, #8]	; (80001e8 <main+0x20>)
 80001e0:	f002 f86c 	bl	80022bc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	e7fe      	b.n	80001e4 <main+0x1c>
 80001e6:	bf00      	nop
 80001e8:	20000028 	.word	0x20000028

080001ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b09e      	sub	sp, #120	; 0x78
 80001f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	2100      	movs	r1, #0
 80001fa:	4618      	mov	r0, r3
 80001fc:	f003 f884 	bl	8003308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000200:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000210:	463b      	mov	r3, r7
 8000212:	223c      	movs	r2, #60	; 0x3c
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 f876 	bl	8003308 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021c:	2302      	movs	r3, #2
 800021e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000224:	2310      	movs	r3, #16
 8000226:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000228:	2300      	movs	r3, #0
 800022a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000230:	4618      	mov	r0, r3
 8000232:	f000 fced 	bl	8000c10 <HAL_RCC_OscConfig>
 8000236:	4603      	mov	r3, r0
 8000238:	2b00      	cmp	r3, #0
 800023a:	d001      	beq.n	8000240 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800023c:	f000 f922 	bl	8000484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000240:	230f      	movs	r3, #15
 8000242:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000244:	2300      	movs	r3, #0
 8000246:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000254:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fbe0 	bl	8001a20 <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000266:	f000 f90d 	bl	8000484 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800026a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800026e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000270:	2300      	movs	r3, #0
 8000272:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000274:	463b      	mov	r3, r7
 8000276:	4618      	mov	r0, r3
 8000278:	f001 fdb8 	bl	8001dec <HAL_RCCEx_PeriphCLKConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000282:	f000 f8ff 	bl	8000484 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3778      	adds	r7, #120	; 0x78
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b09a      	sub	sp, #104	; 0x68
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000296:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
 80002c0:	615a      	str	r2, [r3, #20]
 80002c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	222c      	movs	r2, #44	; 0x2c
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f003 f81c 	bl	8003308 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002d0:	4b44      	ldr	r3, [pc, #272]	; (80003e4 <MX_TIM1_Init+0x154>)
 80002d2:	4a45      	ldr	r2, [pc, #276]	; (80003e8 <MX_TIM1_Init+0x158>)
 80002d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 80002d6:	4b43      	ldr	r3, [pc, #268]	; (80003e4 <MX_TIM1_Init+0x154>)
 80002d8:	2202      	movs	r2, #2
 80002da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002dc:	4b41      	ldr	r3, [pc, #260]	; (80003e4 <MX_TIM1_Init+0x154>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 512-1;
 80002e2:	4b40      	ldr	r3, [pc, #256]	; (80003e4 <MX_TIM1_Init+0x154>)
 80002e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80002e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ea:	4b3e      	ldr	r3, [pc, #248]	; (80003e4 <MX_TIM1_Init+0x154>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002f0:	4b3c      	ldr	r3, [pc, #240]	; (80003e4 <MX_TIM1_Init+0x154>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f6:	4b3b      	ldr	r3, [pc, #236]	; (80003e4 <MX_TIM1_Init+0x154>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002fc:	4839      	ldr	r0, [pc, #228]	; (80003e4 <MX_TIM1_Init+0x154>)
 80002fe:	f001 ff25 	bl	800214c <HAL_TIM_Base_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000308:	f000 f8bc 	bl	8000484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800030c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000310:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000312:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000316:	4619      	mov	r1, r3
 8000318:	4832      	ldr	r0, [pc, #200]	; (80003e4 <MX_TIM1_Init+0x154>)
 800031a:	f002 f9e3 	bl	80026e4 <HAL_TIM_ConfigClockSource>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000324:	f000 f8ae 	bl	8000484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000328:	482e      	ldr	r0, [pc, #184]	; (80003e4 <MX_TIM1_Init+0x154>)
 800032a:	f001 ff66 	bl	80021fa <HAL_TIM_PWM_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000334:	f000 f8a6 	bl	8000484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000338:	2300      	movs	r3, #0
 800033a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000344:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000348:	4619      	mov	r1, r3
 800034a:	4826      	ldr	r0, [pc, #152]	; (80003e4 <MX_TIM1_Init+0x154>)
 800034c:	f002 feba 	bl	80030c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000356:	f000 f895 	bl	8000484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800035a:	2360      	movs	r3, #96	; 0x60
 800035c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 16-1;
 800035e:	230f      	movs	r3, #15
 8000360:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000362:	2300      	movs	r3, #0
 8000364:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000366:	2300      	movs	r3, #0
 8000368:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800036a:	2300      	movs	r3, #0
 800036c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800036e:	2300      	movs	r3, #0
 8000370:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000372:	2300      	movs	r3, #0
 8000374:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800037a:	2200      	movs	r2, #0
 800037c:	4619      	mov	r1, r3
 800037e:	4819      	ldr	r0, [pc, #100]	; (80003e4 <MX_TIM1_Init+0x154>)
 8000380:	f002 f89c 	bl	80024bc <HAL_TIM_PWM_ConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800038a:	f000 f87b 	bl	8000484 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80003b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003b4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80003ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	4619      	mov	r1, r3
 80003c4:	4807      	ldr	r0, [pc, #28]	; (80003e4 <MX_TIM1_Init+0x154>)
 80003c6:	f002 fefd 	bl	80031c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80003d0:	f000 f858 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003d4:	4803      	ldr	r0, [pc, #12]	; (80003e4 <MX_TIM1_Init+0x154>)
 80003d6:	f000 f89f 	bl	8000518 <HAL_TIM_MspPostInit>

}
 80003da:	bf00      	nop
 80003dc:	3768      	adds	r7, #104	; 0x68
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000028 	.word	0x20000028
 80003e8:	40012c00 	.word	0x40012c00

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 030c 	add.w	r3, r7, #12
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
 8000400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000402:	4b1e      	ldr	r3, [pc, #120]	; (800047c <MX_GPIO_Init+0x90>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a1d      	ldr	r2, [pc, #116]	; (800047c <MX_GPIO_Init+0x90>)
 8000408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_GPIO_Init+0x90>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800041a:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_GPIO_Init+0x90>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a17      	ldr	r2, [pc, #92]	; (800047c <MX_GPIO_Init+0x90>)
 8000420:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_GPIO_Init+0x90>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000432:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_GPIO_Init+0x90>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a11      	ldr	r2, [pc, #68]	; (800047c <MX_GPIO_Init+0x90>)
 8000438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_GPIO_Init+0x90>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000450:	480b      	ldr	r0, [pc, #44]	; (8000480 <MX_GPIO_Init+0x94>)
 8000452:	f000 fbc5 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000460:	2301      	movs	r3, #1
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000468:	f107 030c 	add.w	r3, r7, #12
 800046c:	4619      	mov	r1, r3
 800046e:	4804      	ldr	r0, [pc, #16]	; (8000480 <MX_GPIO_Init+0x94>)
 8000470:	f000 fa3c 	bl	80008ec <HAL_GPIO_Init>

}
 8000474:	bf00      	nop
 8000476:	3720      	adds	r7, #32
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000
 8000480:	48001000 	.word	0x48001000

08000484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048c:	e7fe      	b.n	800048c <Error_Handler+0x8>
	...

08000490 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000496:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <HAL_MspInit+0x44>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_MspInit+0x44>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_MspInit+0x44>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <HAL_MspInit+0x44>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	4a08      	ldr	r2, [pc, #32]	; (80004d4 <HAL_MspInit+0x44>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b8:	61d3      	str	r3, [r2, #28]
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_MspInit+0x44>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0a      	ldr	r2, [pc, #40]	; (8000510 <HAL_TIM_Base_MspInit+0x38>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d10b      	bne.n	8000502 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <HAL_TIM_Base_MspInit+0x3c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a09      	ldr	r2, [pc, #36]	; (8000514 <HAL_TIM_Base_MspInit+0x3c>)
 80004f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <HAL_TIM_Base_MspInit+0x3c>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40012c00 	.word	0x40012c00
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a11      	ldr	r2, [pc, #68]	; (800057c <HAL_TIM_MspPostInit+0x64>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d11c      	bne.n	8000574 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_TIM_MspPostInit+0x68>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	4a10      	ldr	r2, [pc, #64]	; (8000580 <HAL_TIM_MspPostInit+0x68>)
 8000540:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <HAL_TIM_MspPostInit+0x68>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RED_Pin;
 8000552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000556:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	2302      	movs	r3, #2
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000564:	2302      	movs	r3, #2
 8000566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <HAL_TIM_MspPostInit+0x6c>)
 8000570:	f000 f9bc 	bl	80008ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40012c00 	.word	0x40012c00
 8000580:	40021000 	.word	0x40021000
 8000584:	48001000 	.word	0x48001000

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <MemManage_Handler+0x4>

0800059a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d4:	f000 f884 	bl	80006e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <SystemInit+0x20>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a05      	ldr	r2, [pc, #20]	; (80005fc <SystemInit+0x20>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000600:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000638 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <LoopForever+0x6>)
  ldr r1, =_edata
 8000606:	490e      	ldr	r1, [pc, #56]	; (8000640 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000608:	4a0e      	ldr	r2, [pc, #56]	; (8000644 <LoopForever+0xe>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <LoopForever+0x12>)
  ldr r4, =_ebss
 800061c:	4c0b      	ldr	r4, [pc, #44]	; (800064c <LoopForever+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800062a:	f7ff ffd7 	bl	80005dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800062e:	f002 fe47 	bl	80032c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000632:	f7ff fdc9 	bl	80001c8 <main>

08000636 <LoopForever>:

LoopForever:
    b LoopForever
 8000636:	e7fe      	b.n	8000636 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000638:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800063c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000640:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000644:	08003368 	.word	0x08003368
  ldr r2, =_sbss
 8000648:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800064c:	20000078 	.word	0x20000078

08000650 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000650:	e7fe      	b.n	8000650 <ADC1_2_IRQHandler>
	...

08000654 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_Init+0x28>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <HAL_Init+0x28>)
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000664:	2003      	movs	r0, #3
 8000666:	f000 f90d 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066a:	200f      	movs	r0, #15
 800066c:	f000 f808 	bl	8000680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000670:	f7ff ff0e 	bl	8000490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40022000 	.word	0x40022000

08000680 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0x54>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x58>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000696:	fbb3 f3f1 	udiv	r3, r3, r1
 800069a:	fbb2 f3f3 	udiv	r3, r2, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f917 	bl	80008d2 <HAL_SYSTICK_Config>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e00e      	b.n	80006cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b0f      	cmp	r3, #15
 80006b2:	d80a      	bhi.n	80006ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006bc:	f000 f8ed 	bl	800089a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c0:	4a06      	ldr	r2, [pc, #24]	; (80006dc <HAL_InitTick+0x5c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e000      	b.n	80006cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000008 	.word	0x20000008
 80006dc:	20000004 	.word	0x20000004

080006e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_IncTick+0x20>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_IncTick+0x24>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <HAL_IncTick+0x24>)
 80006f2:	6013      	str	r3, [r2, #0]
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000008 	.word	0x20000008
 8000704:	20000074 	.word	0x20000074

08000708 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;  
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <HAL_GetTick+0x14>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000074 	.word	0x20000074

08000720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <__NVIC_GetPriorityGrouping+0x18>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	f003 0307 	and.w	r3, r3, #7
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e00f      	b.n	8000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <SysTick_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000864:	f7ff ff8e 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SysTick_Config+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SysTick_Config+0x40>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff47 	bl	8000720 <__NVIC_SetPriorityGrouping>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ac:	f7ff ff5c 	bl	8000768 <__NVIC_GetPriorityGrouping>
 80008b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	6978      	ldr	r0, [r7, #20]
 80008b8:	f7ff ff8e 	bl	80007d8 <NVIC_EncodePriority>
 80008bc:	4602      	mov	r2, r0
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff5d 	bl	8000784 <__NVIC_SetPriority>
}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ffb0 	bl	8000840 <SysTick_Config>
 80008e0:	4603      	mov	r3, r0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fa:	e154      	b.n	8000ba6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 8146 	beq.w	8000ba0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 0303 	and.w	r3, r3, #3
 800091c:	2b01      	cmp	r3, #1
 800091e:	d005      	beq.n	800092c <HAL_GPIO_Init+0x40>
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f003 0303 	and.w	r3, r3, #3
 8000928:	2b02      	cmp	r3, #2
 800092a:	d130      	bne.n	800098e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	2203      	movs	r2, #3
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4013      	ands	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000962:	2201      	movs	r2, #1
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	f003 0201 	and.w	r2, r3, #1
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	2b03      	cmp	r3, #3
 8000998:	d017      	beq.n	80009ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d123      	bne.n	8000a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	08da      	lsrs	r2, r3, #3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3208      	adds	r2, #8
 80009de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	220f      	movs	r2, #15
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	43db      	mvns	r3, r3
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4013      	ands	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	691a      	ldr	r2, [r3, #16]
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	f003 0307 	and.w	r3, r3, #7
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	08da      	lsrs	r2, r3, #3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3208      	adds	r2, #8
 8000a18:	6939      	ldr	r1, [r7, #16]
 8000a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2203      	movs	r2, #3
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4013      	ands	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 0203 	and.w	r2, r3, #3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f000 80a0 	beq.w	8000ba0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a60:	4b58      	ldr	r3, [pc, #352]	; (8000bc4 <HAL_GPIO_Init+0x2d8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a57      	ldr	r2, [pc, #348]	; (8000bc4 <HAL_GPIO_Init+0x2d8>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b55      	ldr	r3, [pc, #340]	; (8000bc4 <HAL_GPIO_Init+0x2d8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a78:	4a53      	ldr	r2, [pc, #332]	; (8000bc8 <HAL_GPIO_Init+0x2dc>)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f003 0303 	and.w	r3, r3, #3
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	220f      	movs	r2, #15
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aa2:	d019      	beq.n	8000ad8 <HAL_GPIO_Init+0x1ec>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a49      	ldr	r2, [pc, #292]	; (8000bcc <HAL_GPIO_Init+0x2e0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d013      	beq.n	8000ad4 <HAL_GPIO_Init+0x1e8>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a48      	ldr	r2, [pc, #288]	; (8000bd0 <HAL_GPIO_Init+0x2e4>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d00d      	beq.n	8000ad0 <HAL_GPIO_Init+0x1e4>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a47      	ldr	r2, [pc, #284]	; (8000bd4 <HAL_GPIO_Init+0x2e8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d007      	beq.n	8000acc <HAL_GPIO_Init+0x1e0>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a46      	ldr	r2, [pc, #280]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d101      	bne.n	8000ac8 <HAL_GPIO_Init+0x1dc>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	e008      	b.n	8000ada <HAL_GPIO_Init+0x1ee>
 8000ac8:	2305      	movs	r3, #5
 8000aca:	e006      	b.n	8000ada <HAL_GPIO_Init+0x1ee>
 8000acc:	2303      	movs	r3, #3
 8000ace:	e004      	b.n	8000ada <HAL_GPIO_Init+0x1ee>
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	e002      	b.n	8000ada <HAL_GPIO_Init+0x1ee>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e000      	b.n	8000ada <HAL_GPIO_Init+0x1ee>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	f002 0203 	and.w	r2, r2, #3
 8000ae0:	0092      	lsls	r2, r2, #2
 8000ae2:	4093      	lsls	r3, r2
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aea:	4937      	ldr	r1, [pc, #220]	; (8000bc8 <HAL_GPIO_Init+0x2dc>)
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	089b      	lsrs	r3, r3, #2
 8000af0:	3302      	adds	r3, #2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af8:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <HAL_GPIO_Init+0x2f0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b1c:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <HAL_GPIO_Init+0x2f0>)
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b22:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <HAL_GPIO_Init+0x2f0>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	43db      	mvns	r3, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d003      	beq.n	8000b46 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b46:	4a25      	ldr	r2, [pc, #148]	; (8000bdc <HAL_GPIO_Init+0x2f0>)
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b4c:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <HAL_GPIO_Init+0x2f0>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b70:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <HAL_GPIO_Init+0x2f0>)
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_GPIO_Init+0x2f0>)
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b9a:	4a10      	ldr	r2, [pc, #64]	; (8000bdc <HAL_GPIO_Init+0x2f0>)
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f47f aea3 	bne.w	80008fc <HAL_GPIO_Init+0x10>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	371c      	adds	r7, #28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010000 	.word	0x40010000
 8000bcc:	48000400 	.word	0x48000400
 8000bd0:	48000800 	.word	0x48000800
 8000bd4:	48000c00 	.word	0x48000c00
 8000bd8:	48001000 	.word	0x48001000
 8000bdc:	40010400 	.word	0x40010400

08000be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
 8000bec:	4613      	mov	r3, r2
 8000bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bf0:	787b      	ldrb	r3, [r7, #1]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bf6:	887a      	ldrh	r2, [r7, #2]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bfc:	e002      	b.n	8000c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bfe:	887a      	ldrh	r2, [r7, #2]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f000 bef4 	b.w	8001a12 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f000 816a 	beq.w	8000f0e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c3a:	4bb3      	ldr	r3, [pc, #716]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d00c      	beq.n	8000c60 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c46:	4bb0      	ldr	r3, [pc, #704]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d159      	bne.n	8000d06 <HAL_RCC_OscConfig+0xf6>
 8000c52:	4bad      	ldr	r3, [pc, #692]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5e:	d152      	bne.n	8000d06 <HAL_RCC_OscConfig+0xf6>
 8000c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c64:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c68:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c6c:	fa93 f3a3 	rbit	r3, r3
 8000c70:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c74:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c78:	fab3 f383 	clz	r3, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d102      	bne.n	8000c92 <HAL_RCC_OscConfig+0x82>
 8000c8c:	4b9e      	ldr	r3, [pc, #632]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	e015      	b.n	8000cbe <HAL_RCC_OscConfig+0xae>
 8000c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c96:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c9a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c9e:	fa93 f3a3 	rbit	r3, r3
 8000ca2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000caa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000cae:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000cb2:	fa93 f3a3 	rbit	r3, r3
 8000cb6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000cba:	4b93      	ldr	r3, [pc, #588]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cc2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000cc6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000cca:	fa92 f2a2 	rbit	r2, r2
 8000cce:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000cd2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	f042 0220 	orr.w	r2, r2, #32
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	f002 021f 	and.w	r2, r2, #31
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	4013      	ands	r3, r2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f000 810c 	beq.w	8000f0c <HAL_RCC_OscConfig+0x2fc>
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f040 8106 	bne.w	8000f0c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f000 be86 	b.w	8001a12 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d10:	d106      	bne.n	8000d20 <HAL_RCC_OscConfig+0x110>
 8000d12:	4b7d      	ldr	r3, [pc, #500]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a7c      	ldr	r2, [pc, #496]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e030      	b.n	8000d82 <HAL_RCC_OscConfig+0x172>
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x134>
 8000d2a:	4b77      	ldr	r3, [pc, #476]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a76      	ldr	r2, [pc, #472]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	4b74      	ldr	r3, [pc, #464]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a73      	ldr	r2, [pc, #460]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e01e      	b.n	8000d82 <HAL_RCC_OscConfig+0x172>
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d4e:	d10c      	bne.n	8000d6a <HAL_RCC_OscConfig+0x15a>
 8000d50:	4b6d      	ldr	r3, [pc, #436]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a6c      	ldr	r2, [pc, #432]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a69      	ldr	r2, [pc, #420]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	e00b      	b.n	8000d82 <HAL_RCC_OscConfig+0x172>
 8000d6a:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a66      	ldr	r2, [pc, #408]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a63      	ldr	r2, [pc, #396]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d80:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d82:	4b61      	ldr	r3, [pc, #388]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d86:	f023 020f 	bic.w	r2, r3, #15
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	495d      	ldr	r1, [pc, #372]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000d92:	4313      	orrs	r3, r2
 8000d94:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d059      	beq.n	8000e54 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fcb2 	bl	8000708 <HAL_GetTick>
 8000da4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da8:	e00a      	b.n	8000dc0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000daa:	f7ff fcad 	bl	8000708 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	; 0x64
 8000db8:	d902      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	f000 be29 	b.w	8001a12 <HAL_RCC_OscConfig+0xe02>
 8000dc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dc4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000dcc:	fa93 f3a3 	rbit	r3, r3
 8000dd0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000dd4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd8:	fab3 f383 	clz	r3, r3
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d102      	bne.n	8000df2 <HAL_RCC_OscConfig+0x1e2>
 8000dec:	4b46      	ldr	r3, [pc, #280]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	e015      	b.n	8000e1e <HAL_RCC_OscConfig+0x20e>
 8000df2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e0a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000e0e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000e12:	fa93 f3a3 	rbit	r3, r3
 8000e16:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e22:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000e26:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000e2a:	fa92 f2a2 	rbit	r2, r2
 8000e2e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000e32:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000e36:	fab2 f282 	clz	r2, r2
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	f042 0220 	orr.w	r2, r2, #32
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	f002 021f 	and.w	r2, r2, #31
 8000e46:	2101      	movs	r1, #1
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0ab      	beq.n	8000daa <HAL_RCC_OscConfig+0x19a>
 8000e52:	e05c      	b.n	8000f0e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc58 	bl	8000708 <HAL_GetTick>
 8000e58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5c:	e00a      	b.n	8000e74 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fc53 	bl	8000708 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d902      	bls.n	8000e74 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	f000 bdcf 	b.w	8001a12 <HAL_RCC_OscConfig+0xe02>
 8000e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e78:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e80:	fa93 f3a3 	rbit	r3, r3
 8000e84:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e88:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8c:	fab3 f383 	clz	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d102      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x296>
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	e015      	b.n	8000ed2 <HAL_RCC_OscConfig+0x2c2>
 8000ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eaa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eae:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ec2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_RCC_OscConfig+0x2f8>)
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ed6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000eda:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ede:	fa92 f2a2 	rbit	r2, r2
 8000ee2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000ee6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000eea:	fab2 f282 	clz	r2, r2
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	f042 0220 	orr.w	r2, r2, #32
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	f002 021f 	and.w	r2, r2, #31
 8000efa:	2101      	movs	r1, #1
 8000efc:	fa01 f202 	lsl.w	r2, r1, r2
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1ab      	bne.n	8000e5e <HAL_RCC_OscConfig+0x24e>
 8000f06:	e002      	b.n	8000f0e <HAL_RCC_OscConfig+0x2fe>
 8000f08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 816f 	beq.w	80011fc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f1e:	4bd0      	ldr	r3, [pc, #832]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00b      	beq.n	8000f42 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f2a:	4bcd      	ldr	r3, [pc, #820]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d16c      	bne.n	8001010 <HAL_RCC_OscConfig+0x400>
 8000f36:	4bca      	ldr	r3, [pc, #808]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d166      	bne.n	8001010 <HAL_RCC_OscConfig+0x400>
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f48:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f4c:	fa93 f3a3 	rbit	r3, r3
 8000f50:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f54:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f58:	fab3 f383 	clz	r3, r3
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d102      	bne.n	8000f72 <HAL_RCC_OscConfig+0x362>
 8000f6c:	4bbc      	ldr	r3, [pc, #752]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	e013      	b.n	8000f9a <HAL_RCC_OscConfig+0x38a>
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f78:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f8e:	fa93 f3a3 	rbit	r3, r3
 8000f92:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f96:	4bb2      	ldr	r3, [pc, #712]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000fa0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000fa4:	fa92 f2a2 	rbit	r2, r2
 8000fa8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000fac:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000fb0:	fab2 f282 	clz	r2, r2
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	f042 0220 	orr.w	r2, r2, #32
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	f002 021f 	and.w	r2, r2, #31
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <HAL_RCC_OscConfig+0x3cc>
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d002      	beq.n	8000fdc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f000 bd1b 	b.w	8001a12 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fdc:	4ba0      	ldr	r3, [pc, #640]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	21f8      	movs	r1, #248	; 0xf8
 8000fec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000ff4:	fa91 f1a1 	rbit	r1, r1
 8000ff8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000ffc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001000:	fab1 f181 	clz	r1, r1
 8001004:	b2c9      	uxtb	r1, r1
 8001006:	408b      	lsls	r3, r1
 8001008:	4995      	ldr	r1, [pc, #596]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 800100a:	4313      	orrs	r3, r2
 800100c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100e:	e0f5      	b.n	80011fc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 8085 	beq.w	8001126 <HAL_RCC_OscConfig+0x516>
 800101c:	2301      	movs	r3, #1
 800101e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001022:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800102e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001032:	fab3 f383 	clz	r3, r3
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800103c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	461a      	mov	r2, r3
 8001044:	2301      	movs	r3, #1
 8001046:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fb5e 	bl	8000708 <HAL_GetTick>
 800104c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001050:	e00a      	b.n	8001068 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001052:	f7ff fb59 	bl	8000708 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d902      	bls.n	8001068 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	f000 bcd5 	b.w	8001a12 <HAL_RCC_OscConfig+0xe02>
 8001068:	2302      	movs	r3, #2
 800106a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001072:	fa93 f3a3 	rbit	r3, r3
 8001076:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800107a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	b2db      	uxtb	r3, r3
 8001084:	095b      	lsrs	r3, r3, #5
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b01      	cmp	r3, #1
 8001090:	d102      	bne.n	8001098 <HAL_RCC_OscConfig+0x488>
 8001092:	4b73      	ldr	r3, [pc, #460]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	e013      	b.n	80010c0 <HAL_RCC_OscConfig+0x4b0>
 8001098:	2302      	movs	r3, #2
 800109a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80010b0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80010bc:	4b68      	ldr	r3, [pc, #416]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	2202      	movs	r2, #2
 80010c2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80010c6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010ca:	fa92 f2a2 	rbit	r2, r2
 80010ce:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80010d2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80010d6:	fab2 f282 	clz	r2, r2
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	f042 0220 	orr.w	r2, r2, #32
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	f002 021f 	and.w	r2, r2, #31
 80010e6:	2101      	movs	r1, #1
 80010e8:	fa01 f202 	lsl.w	r2, r1, r2
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0af      	beq.n	8001052 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	21f8      	movs	r1, #248	; 0xf8
 8001102:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001106:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800110a:	fa91 f1a1 	rbit	r1, r1
 800110e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001112:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001116:	fab1 f181 	clz	r1, r1
 800111a:	b2c9      	uxtb	r1, r1
 800111c:	408b      	lsls	r3, r1
 800111e:	4950      	ldr	r1, [pc, #320]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 8001120:	4313      	orrs	r3, r2
 8001122:	600b      	str	r3, [r1, #0]
 8001124:	e06a      	b.n	80011fc <HAL_RCC_OscConfig+0x5ec>
 8001126:	2301      	movs	r3, #1
 8001128:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001138:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113c:	fab3 f383 	clz	r3, r3
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001146:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	461a      	mov	r2, r3
 800114e:	2300      	movs	r3, #0
 8001150:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fad9 	bl	8000708 <HAL_GetTick>
 8001156:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	e00a      	b.n	8001172 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115c:	f7ff fad4 	bl	8000708 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d902      	bls.n	8001172 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	f000 bc50 	b.w	8001a12 <HAL_RCC_OscConfig+0xe02>
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001178:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001188:	fab3 f383 	clz	r3, r3
 800118c:	b2db      	uxtb	r3, r3
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b01      	cmp	r3, #1
 800119a:	d102      	bne.n	80011a2 <HAL_RCC_OscConfig+0x592>
 800119c:	4b30      	ldr	r3, [pc, #192]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	e013      	b.n	80011ca <HAL_RCC_OscConfig+0x5ba>
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80011ac:	fa93 f3a3 	rbit	r3, r3
 80011b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80011b4:	2302      	movs	r3, #2
 80011b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80011ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011be:	fa93 f3a3 	rbit	r3, r3
 80011c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <HAL_RCC_OscConfig+0x650>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	2202      	movs	r2, #2
 80011cc:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80011d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011d4:	fa92 f2a2 	rbit	r2, r2
 80011d8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80011dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80011e0:	fab2 f282 	clz	r2, r2
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	f042 0220 	orr.w	r2, r2, #32
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f002 021f 	and.w	r2, r2, #31
 80011f0:	2101      	movs	r1, #1
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1af      	bne.n	800115c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80da 	beq.w	80013c0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d069      	beq.n	80012ea <HAL_RCC_OscConfig+0x6da>
 8001216:	2301      	movs	r3, #1
 8001218:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122c:	fab3 f383 	clz	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	461a      	mov	r2, r3
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_RCC_OscConfig+0x654>)
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	461a      	mov	r2, r3
 800123c:	2301      	movs	r3, #1
 800123e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001240:	f7ff fa62 	bl	8000708 <HAL_GetTick>
 8001244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001248:	e00e      	b.n	8001268 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124a:	f7ff fa5d 	bl	8000708 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d906      	bls.n	8001268 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e3d9      	b.n	8001a12 <HAL_RCC_OscConfig+0xe02>
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	10908120 	.word	0x10908120
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800127a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800127e:	2202      	movs	r2, #2
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	fa93 f2a3 	rbit	r2, r3
 800128c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001296:	2202      	movs	r2, #2
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	fa93 f2a3 	rbit	r2, r3
 80012a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80012a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	4ba5      	ldr	r3, [pc, #660]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 80012ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012b2:	2102      	movs	r1, #2
 80012b4:	6019      	str	r1, [r3, #0]
 80012b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	fa93 f1a3 	rbit	r1, r3
 80012c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012c4:	6019      	str	r1, [r3, #0]
  return result;
 80012c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	2101      	movs	r1, #1
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	4013      	ands	r3, r2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0b0      	beq.n	800124a <HAL_RCC_OscConfig+0x63a>
 80012e8:	e06a      	b.n	80013c0 <HAL_RCC_OscConfig+0x7b0>
 80012ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	fa93 f2a3 	rbit	r2, r3
 80012fc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001300:	601a      	str	r2, [r3, #0]
  return result;
 8001302:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001306:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001308:	fab3 f383 	clz	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
 8001310:	4b8c      	ldr	r3, [pc, #560]	; (8001544 <HAL_RCC_OscConfig+0x934>)
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	461a      	mov	r2, r3
 8001318:	2300      	movs	r3, #0
 800131a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131c:	f7ff f9f4 	bl	8000708 <HAL_GetTick>
 8001320:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001324:	e009      	b.n	800133a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001326:	f7ff f9ef 	bl	8000708 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e36b      	b.n	8001a12 <HAL_RCC_OscConfig+0xe02>
 800133a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800133e:	2202      	movs	r2, #2
 8001340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	fa93 f2a3 	rbit	r2, r3
 800134c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001356:	2202      	movs	r2, #2
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	fa93 f2a3 	rbit	r2, r3
 8001364:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800136e:	2202      	movs	r2, #2
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001380:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001382:	4b6f      	ldr	r3, [pc, #444]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 8001384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001386:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800138a:	2102      	movs	r1, #2
 800138c:	6019      	str	r1, [r3, #0]
 800138e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	fa93 f1a3 	rbit	r1, r3
 8001398:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800139c:	6019      	str	r1, [r3, #0]
  return result;
 800139e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1b2      	bne.n	8001326 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c0:	1d3b      	adds	r3, r7, #4
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8158 	beq.w	8001680 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d6:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d112      	bne.n	8001408 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b57      	ldr	r3, [pc, #348]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a56      	ldr	r2, [pc, #344]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 80013e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b54      	ldr	r3, [pc, #336]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001402:	2301      	movs	r3, #1
 8001404:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	4b4f      	ldr	r3, [pc, #316]	; (8001548 <HAL_RCC_OscConfig+0x938>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d11a      	bne.n	800144a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001414:	4b4c      	ldr	r3, [pc, #304]	; (8001548 <HAL_RCC_OscConfig+0x938>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a4b      	ldr	r2, [pc, #300]	; (8001548 <HAL_RCC_OscConfig+0x938>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001420:	f7ff f972 	bl	8000708 <HAL_GetTick>
 8001424:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	e009      	b.n	800143e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142a:	f7ff f96d 	bl	8000708 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e2e9      	b.n	8001a12 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b42      	ldr	r3, [pc, #264]	; (8001548 <HAL_RCC_OscConfig+0x938>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0ef      	beq.n	800142a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d106      	bne.n	8001462 <HAL_RCC_OscConfig+0x852>
 8001454:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a39      	ldr	r2, [pc, #228]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6213      	str	r3, [r2, #32]
 8001460:	e02f      	b.n	80014c2 <HAL_RCC_OscConfig+0x8b2>
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10c      	bne.n	8001486 <HAL_RCC_OscConfig+0x876>
 800146c:	4b34      	ldr	r3, [pc, #208]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4a33      	ldr	r2, [pc, #204]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	6213      	str	r3, [r2, #32]
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4a30      	ldr	r2, [pc, #192]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 800147e:	f023 0304 	bic.w	r3, r3, #4
 8001482:	6213      	str	r3, [r2, #32]
 8001484:	e01d      	b.n	80014c2 <HAL_RCC_OscConfig+0x8b2>
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d10c      	bne.n	80014aa <HAL_RCC_OscConfig+0x89a>
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4a2a      	ldr	r2, [pc, #168]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	6213      	str	r3, [r2, #32]
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4a27      	ldr	r2, [pc, #156]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6213      	str	r3, [r2, #32]
 80014a8:	e00b      	b.n	80014c2 <HAL_RCC_OscConfig+0x8b2>
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4a24      	ldr	r2, [pc, #144]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6213      	str	r3, [r2, #32]
 80014b6:	4b22      	ldr	r3, [pc, #136]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	4a21      	ldr	r2, [pc, #132]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d06b      	beq.n	80015a4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014cc:	f7ff f91c 	bl	8000708 <HAL_GetTick>
 80014d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d4:	e00b      	b.n	80014ee <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d6:	f7ff f917 	bl	8000708 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e291      	b.n	8001a12 <HAL_RCC_OscConfig+0xe02>
 80014ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014f2:	2202      	movs	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	fa93 f2a3 	rbit	r2, r3
 8001500:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800150a:	2202      	movs	r2, #2
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	fa93 f2a3 	rbit	r2, r3
 8001518:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800151c:	601a      	str	r2, [r3, #0]
  return result;
 800151e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001522:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d109      	bne.n	800154c <HAL_RCC_OscConfig+0x93c>
 8001538:	4b01      	ldr	r3, [pc, #4]	; (8001540 <HAL_RCC_OscConfig+0x930>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	e014      	b.n	8001568 <HAL_RCC_OscConfig+0x958>
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	10908120 	.word	0x10908120
 8001548:	40007000 	.word	0x40007000
 800154c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001550:	2202      	movs	r2, #2
 8001552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001554:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	4bbb      	ldr	r3, [pc, #748]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800156c:	2102      	movs	r1, #2
 800156e:	6011      	str	r1, [r2, #0]
 8001570:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	fa92 f1a2 	rbit	r1, r2
 800157a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800157e:	6011      	str	r1, [r2, #0]
  return result;
 8001580:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	fab2 f282 	clz	r2, r2
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	f002 021f 	and.w	r2, r2, #31
 8001596:	2101      	movs	r1, #1
 8001598:	fa01 f202 	lsl.w	r2, r1, r2
 800159c:	4013      	ands	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d099      	beq.n	80014d6 <HAL_RCC_OscConfig+0x8c6>
 80015a2:	e063      	b.n	800166c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff f8b0 	bl	8000708 <HAL_GetTick>
 80015a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	e00b      	b.n	80015c6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff f8ab 	bl	8000708 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e225      	b.n	8001a12 <HAL_RCC_OscConfig+0xe02>
 80015c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015ca:	2202      	movs	r2, #2
 80015cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	fa93 f2a3 	rbit	r2, r3
 80015d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015e2:	2202      	movs	r2, #2
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f2a3 	rbit	r2, r3
 80015f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015f4:	601a      	str	r2, [r3, #0]
  return result;
 80015f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f043 0302 	orr.w	r3, r3, #2
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d102      	bne.n	8001616 <HAL_RCC_OscConfig+0xa06>
 8001610:	4b90      	ldr	r3, [pc, #576]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	e00d      	b.n	8001632 <HAL_RCC_OscConfig+0xa22>
 8001616:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800161a:	2202      	movs	r2, #2
 800161c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	fa93 f2a3 	rbit	r2, r3
 8001628:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	4b89      	ldr	r3, [pc, #548]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001636:	2102      	movs	r1, #2
 8001638:	6011      	str	r1, [r2, #0]
 800163a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	fa92 f1a2 	rbit	r1, r2
 8001644:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001648:	6011      	str	r1, [r2, #0]
  return result;
 800164a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	fab2 f282 	clz	r2, r2
 8001654:	b2d2      	uxtb	r2, r2
 8001656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	f002 021f 	and.w	r2, r2, #31
 8001660:	2101      	movs	r1, #1
 8001662:	fa01 f202 	lsl.w	r2, r1, r2
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1a0      	bne.n	80015ae <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800166c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001674:	4b77      	ldr	r3, [pc, #476]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	4a76      	ldr	r2, [pc, #472]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 800167a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 81c2 	beq.w	8001a10 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168c:	4b71      	ldr	r3, [pc, #452]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 030c 	and.w	r3, r3, #12
 8001694:	2b08      	cmp	r3, #8
 8001696:	f000 819c 	beq.w	80019d2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	f040 8114 	bne.w	80018ce <HAL_RCC_OscConfig+0xcbe>
 80016a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	fa93 f2a3 	rbit	r2, r3
 80016ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016be:	601a      	str	r2, [r3, #0]
  return result;
 80016c0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	fab3 f383 	clz	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	461a      	mov	r2, r3
 80016d8:	2300      	movs	r3, #0
 80016da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff f814 	bl	8000708 <HAL_GetTick>
 80016e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e4:	e009      	b.n	80016fa <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff f80f 	bl	8000708 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e18b      	b.n	8001a12 <HAL_RCC_OscConfig+0xe02>
 80016fa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80016fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001702:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	fa93 f2a3 	rbit	r2, r3
 800170e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001712:	601a      	str	r2, [r3, #0]
  return result;
 8001714:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001718:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	095b      	lsrs	r3, r3, #5
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d102      	bne.n	8001734 <HAL_RCC_OscConfig+0xb24>
 800172e:	4b49      	ldr	r3, [pc, #292]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	e01b      	b.n	800176c <HAL_RCC_OscConfig+0xb5c>
 8001734:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001738:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800173c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	fa93 f2a3 	rbit	r2, r3
 8001748:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001752:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	fa93 f2a3 	rbit	r2, r3
 8001762:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001770:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001774:	6011      	str	r1, [r2, #0]
 8001776:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	fa92 f1a2 	rbit	r1, r2
 8001780:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001784:	6011      	str	r1, [r2, #0]
  return result;
 8001786:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	fab2 f282 	clz	r2, r2
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f042 0220 	orr.w	r2, r2, #32
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	f002 021f 	and.w	r2, r2, #31
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f202 	lsl.w	r2, r1, r2
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d19e      	bne.n	80016e6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	430b      	orrs	r3, r1
 80017be:	4925      	ldr	r1, [pc, #148]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f2a3 	rbit	r2, r3
 80017d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017dc:	601a      	str	r2, [r3, #0]
  return result;
 80017de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017e2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	461a      	mov	r2, r3
 80017f6:	2301      	movs	r3, #1
 80017f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fa:	f7fe ff85 	bl	8000708 <HAL_GetTick>
 80017fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001802:	e009      	b.n	8001818 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001804:	f7fe ff80 	bl	8000708 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0fc      	b.n	8001a12 <HAL_RCC_OscConfig+0xe02>
 8001818:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800181c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001820:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001830:	601a      	str	r2, [r3, #0]
  return result;
 8001832:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001836:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	095b      	lsrs	r3, r3, #5
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0xc48>
 800184c:	4b01      	ldr	r3, [pc, #4]	; (8001854 <HAL_RCC_OscConfig+0xc44>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	e01e      	b.n	8001890 <HAL_RCC_OscConfig+0xc80>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800185c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001862:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fa93 f2a3 	rbit	r2, r3
 800186c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	fa93 f2a3 	rbit	r2, r3
 8001886:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_OscConfig+0xe0c>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001894:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001898:	6011      	str	r1, [r2, #0]
 800189a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	fa92 f1a2 	rbit	r1, r2
 80018a4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018a8:	6011      	str	r1, [r2, #0]
  return result;
 80018aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	fab2 f282 	clz	r2, r2
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	f042 0220 	orr.w	r2, r2, #32
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	f002 021f 	and.w	r2, r2, #31
 80018c0:	2101      	movs	r1, #1
 80018c2:	fa01 f202 	lsl.w	r2, r1, r2
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d09b      	beq.n	8001804 <HAL_RCC_OscConfig+0xbf4>
 80018cc:	e0a0      	b.n	8001a10 <HAL_RCC_OscConfig+0xe00>
 80018ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e6:	601a      	str	r2, [r3, #0]
  return result;
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	461a      	mov	r2, r3
 8001900:	2300      	movs	r3, #0
 8001902:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7fe ff00 	bl	8000708 <HAL_GetTick>
 8001908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	e009      	b.n	8001922 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190e:	f7fe fefb 	bl	8000708 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e077      	b.n	8001a12 <HAL_RCC_OscConfig+0xe02>
 8001922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800192a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	fa93 f2a3 	rbit	r2, r3
 8001936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193a:	601a      	str	r2, [r3, #0]
  return result;
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	fab3 f383 	clz	r3, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	095b      	lsrs	r3, r3, #5
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <HAL_RCC_OscConfig+0xd4c>
 8001956:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <HAL_RCC_OscConfig+0xe0c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	e01b      	b.n	8001994 <HAL_RCC_OscConfig+0xd84>
 800195c:	f107 0320 	add.w	r3, r7, #32
 8001960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fa93 f2a3 	rbit	r2, r3
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	f107 0318 	add.w	r3, r7, #24
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	fa93 f2a3 	rbit	r2, r3
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_RCC_OscConfig+0xe0c>)
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	f107 0210 	add.w	r2, r7, #16
 8001998:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800199c:	6011      	str	r1, [r2, #0]
 800199e:	f107 0210 	add.w	r2, r7, #16
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	fa92 f1a2 	rbit	r1, r2
 80019a8:	f107 020c 	add.w	r2, r7, #12
 80019ac:	6011      	str	r1, [r2, #0]
  return result;
 80019ae:	f107 020c 	add.w	r2, r7, #12
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	fab2 f282 	clz	r2, r2
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	f042 0220 	orr.w	r2, r2, #32
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	f002 021f 	and.w	r2, r2, #31
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d19e      	bne.n	800190e <HAL_RCC_OscConfig+0xcfe>
 80019d0:	e01e      	b.n	8001a10 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e018      	b.n	8001a12 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_RCC_OscConfig+0xe0c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80019e8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d108      	bne.n	8001a0c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80019fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b09e      	sub	sp, #120	; 0x78
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e162      	b.n	8001cfe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a38:	4b90      	ldr	r3, [pc, #576]	; (8001c7c <HAL_RCC_ClockConfig+0x25c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d910      	bls.n	8001a68 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b8d      	ldr	r3, [pc, #564]	; (8001c7c <HAL_RCC_ClockConfig+0x25c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f023 0207 	bic.w	r2, r3, #7
 8001a4e:	498b      	ldr	r1, [pc, #556]	; (8001c7c <HAL_RCC_ClockConfig+0x25c>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a56:	4b89      	ldr	r3, [pc, #548]	; (8001c7c <HAL_RCC_ClockConfig+0x25c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d001      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e14a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a74:	4b82      	ldr	r3, [pc, #520]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	497f      	ldr	r1, [pc, #508]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80dc 	beq.w	8001c4c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d13c      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xf6>
 8001a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aa4:	fa93 f3a3 	rbit	r3, r3
 8001aa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d102      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xa6>
 8001ac0:	4b6f      	ldr	r3, [pc, #444]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	e00f      	b.n	8001ae6 <HAL_RCC_ClockConfig+0xc6>
 8001ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ad8:	663b      	str	r3, [r7, #96]	; 0x60
 8001ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ae2:	4b67      	ldr	r3, [pc, #412]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aea:	65ba      	str	r2, [r7, #88]	; 0x58
 8001aec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001aee:	fa92 f2a2 	rbit	r2, r2
 8001af2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001af4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001af6:	fab2 f282 	clz	r2, r2
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	f042 0220 	orr.w	r2, r2, #32
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f002 021f 	and.w	r2, r2, #31
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d17b      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0f3      	b.n	8001cfe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d13c      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x178>
 8001b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d102      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x128>
 8001b42:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	e00f      	b.n	8001b68 <HAL_RCC_ClockConfig+0x148>
 8001b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	647b      	str	r3, [r7, #68]	; 0x44
 8001b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8001b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b5e:	fa93 f3a3 	rbit	r3, r3
 8001b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b64:	4b46      	ldr	r3, [pc, #280]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001b6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b70:	fa92 f2a2 	rbit	r2, r2
 8001b74:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b78:	fab2 f282 	clz	r2, r2
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	f042 0220 	orr.w	r2, r2, #32
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	f002 021f 	and.w	r2, r2, #31
 8001b88:	2101      	movs	r1, #1
 8001b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d13a      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0b2      	b.n	8001cfe <HAL_RCC_ClockConfig+0x2de>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	095b      	lsrs	r3, r3, #5
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x1a0>
 8001bba:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	e00d      	b.n	8001bdc <HAL_RCC_ClockConfig+0x1bc>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
 8001bcc:	2302      	movs	r3, #2
 8001bce:	623b      	str	r3, [r7, #32]
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2202      	movs	r2, #2
 8001bde:	61ba      	str	r2, [r7, #24]
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	fa92 f2a2 	rbit	r2, r2
 8001be6:	617a      	str	r2, [r7, #20]
  return result;
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	fab2 f282 	clz	r2, r2
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	f042 0220 	orr.w	r2, r2, #32
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f002 021f 	and.w	r2, r2, #31
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e079      	b.n	8001cfe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f023 0203 	bic.w	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	491a      	ldr	r1, [pc, #104]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c1c:	f7fe fd74 	bl	8000708 <HAL_GetTick>
 8001c20:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c24:	f7fe fd70 	bl	8000708 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e061      	b.n	8001cfe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_RCC_ClockConfig+0x260>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 020c 	and.w	r2, r3, #12
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1eb      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_ClockConfig+0x25c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d214      	bcs.n	8001c84 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_RCC_ClockConfig+0x25c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 0207 	bic.w	r2, r3, #7
 8001c62:	4906      	ldr	r1, [pc, #24]	; (8001c7c <HAL_RCC_ClockConfig+0x25c>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <HAL_RCC_ClockConfig+0x25c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e040      	b.n	8001cfe <HAL_RCC_ClockConfig+0x2de>
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_RCC_ClockConfig+0x2e8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	491a      	ldr	r1, [pc, #104]	; (8001d08 <HAL_RCC_ClockConfig+0x2e8>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <HAL_RCC_ClockConfig+0x2e8>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4912      	ldr	r1, [pc, #72]	; (8001d08 <HAL_RCC_ClockConfig+0x2e8>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cc2:	f000 f829 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_RCC_ClockConfig+0x2e8>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cd0:	22f0      	movs	r2, #240	; 0xf0
 8001cd2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	fa92 f2a2 	rbit	r2, r2
 8001cda:	60fa      	str	r2, [r7, #12]
  return result;
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	fab2 f282 	clz	r2, r2
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	40d3      	lsrs	r3, r2
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <HAL_RCC_ClockConfig+0x2ec>)
 8001ce8:	5cd3      	ldrb	r3, [r2, r3]
 8001cea:	fa21 f303 	lsr.w	r3, r1, r3
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <HAL_RCC_ClockConfig+0x2f0>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_RCC_ClockConfig+0x2f4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fcc2 	bl	8000680 <HAL_InitTick>
  
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3778      	adds	r7, #120	; 0x78
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	08003330 	.word	0x08003330
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000004 	.word	0x20000004

08001d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b08b      	sub	sp, #44	; 0x2c
 8001d1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001d32:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 030c 	and.w	r3, r3, #12
 8001d3e:	2b04      	cmp	r3, #4
 8001d40:	d002      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x30>
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d003      	beq.n	8001d4e <HAL_RCC_GetSysClockFreq+0x36>
 8001d46:	e03c      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d48:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d4a:	623b      	str	r3, [r7, #32]
      break;
 8001d4c:	e03c      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001d54:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001d58:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	fa92 f2a2 	rbit	r2, r2
 8001d60:	607a      	str	r2, [r7, #4]
  return result;
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	fab2 f282 	clz	r2, r2
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	40d3      	lsrs	r3, r2
 8001d6c:	4a1c      	ldr	r2, [pc, #112]	; (8001de0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	fa92 f2a2 	rbit	r2, r2
 8001d84:	60fa      	str	r2, [r7, #12]
  return result;
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	fab2 f282 	clz	r2, r2
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	40d3      	lsrs	r3, r2
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001da0:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	e004      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	623b      	str	r3, [r7, #32]
      break;
 8001dc0:	e002      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dc4:	623b      	str	r3, [r7, #32]
      break;
 8001dc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	372c      	adds	r7, #44	; 0x2c
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	007a1200 	.word	0x007a1200
 8001de0:	08003340 	.word	0x08003340
 8001de4:	08003350 	.word	0x08003350
 8001de8:	003d0900 	.word	0x003d0900

08001dec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b092      	sub	sp, #72	; 0x48
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80d4 	beq.w	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e10:	4b4e      	ldr	r3, [pc, #312]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10e      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	4b4b      	ldr	r3, [pc, #300]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	4a4a      	ldr	r2, [pc, #296]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e26:	61d3      	str	r3, [r2, #28]
 8001e28:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3a:	4b45      	ldr	r3, [pc, #276]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d118      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e46:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a41      	ldr	r2, [pc, #260]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e52:	f7fe fc59 	bl	8000708 <HAL_GetTick>
 8001e56:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e58:	e008      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e5a:	f7fe fc55 	bl	8000708 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b64      	cmp	r3, #100	; 0x64
 8001e66:	d901      	bls.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e169      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e78:	4b34      	ldr	r3, [pc, #208]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e80:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8084 	beq.w	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d07c      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d04b      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7fe fc05 	bl	8000708 <HAL_GetTick>
 8001efe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7fe fc01 	bl	8000708 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e113      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	61fb      	str	r3, [r7, #28]
  return result;
 8001f30:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d108      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001f46:	4b01      	ldr	r3, [pc, #4]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	e00d      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	10908100 	.word	0x10908100
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	4b78      	ldr	r3, [pc, #480]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	2202      	movs	r2, #2
 8001f6a:	613a      	str	r2, [r7, #16]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	fa92 f2a2 	rbit	r2, r2
 8001f72:	60fa      	str	r2, [r7, #12]
  return result;
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	fab2 f282 	clz	r2, r2
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	f002 021f 	and.w	r2, r2, #31
 8001f86:	2101      	movs	r1, #1
 8001f88:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0b7      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001f92:	4b6d      	ldr	r3, [pc, #436]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	496a      	ldr	r1, [pc, #424]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fa4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fac:	4b66      	ldr	r3, [pc, #408]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4a65      	ldr	r2, [pc, #404]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc4:	4b60      	ldr	r3, [pc, #384]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	f023 0203 	bic.w	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	495d      	ldr	r1, [pc, #372]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe2:	4b59      	ldr	r3, [pc, #356]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4956      	ldr	r1, [pc, #344]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002000:	4b51      	ldr	r3, [pc, #324]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	494e      	ldr	r1, [pc, #312]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800200e:	4313      	orrs	r3, r2
 8002010:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800201e:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f023 0210 	bic.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4947      	ldr	r1, [pc, #284]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800202c:	4313      	orrs	r3, r2
 800202e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800203c:	4b42      	ldr	r3, [pc, #264]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002048:	493f      	ldr	r1, [pc, #252]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800205a:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f023 0220 	bic.w	r2, r3, #32
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4938      	ldr	r1, [pc, #224]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002068:	4313      	orrs	r3, r2
 800206a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002078:	4b33      	ldr	r3, [pc, #204]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	4930      	ldr	r1, [pc, #192]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002086:	4313      	orrs	r3, r2
 8002088:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002096:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4929      	ldr	r1, [pc, #164]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	4921      	ldr	r1, [pc, #132]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80020d2:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	491a      	ldr	r1, [pc, #104]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	4912      	ldr	r1, [pc, #72]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	490b      	ldr	r1, [pc, #44]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800211c:	4313      	orrs	r3, r2
 800211e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002138:	4903      	ldr	r1, [pc, #12]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800213a:	4313      	orrs	r3, r2
 800213c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3748      	adds	r7, #72	; 0x48
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e049      	b.n	80021f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7fe f9b0 	bl	80004d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3304      	adds	r3, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f000 fb74 	bl	8002878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e049      	b.n	80022a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d106      	bne.n	8002226 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f841 	bl	80022a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3304      	adds	r3, #4
 8002236:	4619      	mov	r1, r3
 8002238:	4610      	mov	r0, r2
 800223a:	f000 fb1d 	bl	8002878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_TIM_PWM_Start+0x24>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e03c      	b.n	800235a <HAL_TIM_PWM_Start+0x9e>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d109      	bne.n	80022fa <HAL_TIM_PWM_Start+0x3e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	bf14      	ite	ne
 80022f2:	2301      	movne	r3, #1
 80022f4:	2300      	moveq	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	e02f      	b.n	800235a <HAL_TIM_PWM_Start+0x9e>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d109      	bne.n	8002314 <HAL_TIM_PWM_Start+0x58>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	e022      	b.n	800235a <HAL_TIM_PWM_Start+0x9e>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b0c      	cmp	r3, #12
 8002318:	d109      	bne.n	800232e <HAL_TIM_PWM_Start+0x72>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b01      	cmp	r3, #1
 8002324:	bf14      	ite	ne
 8002326:	2301      	movne	r3, #1
 8002328:	2300      	moveq	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	e015      	b.n	800235a <HAL_TIM_PWM_Start+0x9e>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b10      	cmp	r3, #16
 8002332:	d109      	bne.n	8002348 <HAL_TIM_PWM_Start+0x8c>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e008      	b.n	800235a <HAL_TIM_PWM_Start+0x9e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e097      	b.n	8002492 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d104      	bne.n	8002372 <HAL_TIM_PWM_Start+0xb6>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002370:	e023      	b.n	80023ba <HAL_TIM_PWM_Start+0xfe>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b04      	cmp	r3, #4
 8002376:	d104      	bne.n	8002382 <HAL_TIM_PWM_Start+0xc6>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002380:	e01b      	b.n	80023ba <HAL_TIM_PWM_Start+0xfe>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d104      	bne.n	8002392 <HAL_TIM_PWM_Start+0xd6>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002390:	e013      	b.n	80023ba <HAL_TIM_PWM_Start+0xfe>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_PWM_Start+0xe6>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023a0:	e00b      	b.n	80023ba <HAL_TIM_PWM_Start+0xfe>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_PWM_Start+0xf6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b0:	e003      	b.n	80023ba <HAL_TIM_PWM_Start+0xfe>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	6839      	ldr	r1, [r7, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fe58 	bl	8003078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a33      	ldr	r2, [pc, #204]	; (800249c <HAL_TIM_PWM_Start+0x1e0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_TIM_PWM_Start+0x13e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a32      	ldr	r2, [pc, #200]	; (80024a0 <HAL_TIM_PWM_Start+0x1e4>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00e      	beq.n	80023fa <HAL_TIM_PWM_Start+0x13e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a30      	ldr	r2, [pc, #192]	; (80024a4 <HAL_TIM_PWM_Start+0x1e8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_TIM_PWM_Start+0x13e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a2f      	ldr	r2, [pc, #188]	; (80024a8 <HAL_TIM_PWM_Start+0x1ec>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_TIM_PWM_Start+0x13e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2d      	ldr	r2, [pc, #180]	; (80024ac <HAL_TIM_PWM_Start+0x1f0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d101      	bne.n	80023fe <HAL_TIM_PWM_Start+0x142>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <HAL_TIM_PWM_Start+0x144>
 80023fe:	2300      	movs	r3, #0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d007      	beq.n	8002414 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002412:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a20      	ldr	r2, [pc, #128]	; (800249c <HAL_TIM_PWM_Start+0x1e0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d018      	beq.n	8002450 <HAL_TIM_PWM_Start+0x194>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002426:	d013      	beq.n	8002450 <HAL_TIM_PWM_Start+0x194>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <HAL_TIM_PWM_Start+0x1f4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d00e      	beq.n	8002450 <HAL_TIM_PWM_Start+0x194>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1f      	ldr	r2, [pc, #124]	; (80024b4 <HAL_TIM_PWM_Start+0x1f8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d009      	beq.n	8002450 <HAL_TIM_PWM_Start+0x194>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a17      	ldr	r2, [pc, #92]	; (80024a0 <HAL_TIM_PWM_Start+0x1e4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d004      	beq.n	8002450 <HAL_TIM_PWM_Start+0x194>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_TIM_PWM_Start+0x1e8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d115      	bne.n	800247c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_TIM_PWM_Start+0x1fc>)
 8002458:	4013      	ands	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b06      	cmp	r3, #6
 8002460:	d015      	beq.n	800248e <HAL_TIM_PWM_Start+0x1d2>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002468:	d011      	beq.n	800248e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	e008      	b.n	800248e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e000      	b.n	8002490 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800248e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40013400 	.word	0x40013400
 80024a4:	40014000 	.word	0x40014000
 80024a8:	40014400 	.word	0x40014400
 80024ac:	40014800 	.word	0x40014800
 80024b0:	40000400 	.word	0x40000400
 80024b4:	40000800 	.word	0x40000800
 80024b8:	00010007 	.word	0x00010007

080024bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e0ff      	b.n	80026da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b14      	cmp	r3, #20
 80024e6:	f200 80f0 	bhi.w	80026ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80024ea:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f0:	08002545 	.word	0x08002545
 80024f4:	080026cb 	.word	0x080026cb
 80024f8:	080026cb 	.word	0x080026cb
 80024fc:	080026cb 	.word	0x080026cb
 8002500:	08002585 	.word	0x08002585
 8002504:	080026cb 	.word	0x080026cb
 8002508:	080026cb 	.word	0x080026cb
 800250c:	080026cb 	.word	0x080026cb
 8002510:	080025c7 	.word	0x080025c7
 8002514:	080026cb 	.word	0x080026cb
 8002518:	080026cb 	.word	0x080026cb
 800251c:	080026cb 	.word	0x080026cb
 8002520:	08002607 	.word	0x08002607
 8002524:	080026cb 	.word	0x080026cb
 8002528:	080026cb 	.word	0x080026cb
 800252c:	080026cb 	.word	0x080026cb
 8002530:	08002649 	.word	0x08002649
 8002534:	080026cb 	.word	0x080026cb
 8002538:	080026cb 	.word	0x080026cb
 800253c:	080026cb 	.word	0x080026cb
 8002540:	08002689 	.word	0x08002689
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fa24 	bl	8002998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0208 	orr.w	r2, r2, #8
 800255e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0204 	bic.w	r2, r2, #4
 800256e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	691a      	ldr	r2, [r3, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	619a      	str	r2, [r3, #24]
      break;
 8002582:	e0a5      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fa94 	bl	8002ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6999      	ldr	r1, [r3, #24]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	021a      	lsls	r2, r3, #8
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	619a      	str	r2, [r3, #24]
      break;
 80025c4:	e084      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fafd 	bl	8002bcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69da      	ldr	r2, [r3, #28]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0208 	orr.w	r2, r2, #8
 80025e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	69da      	ldr	r2, [r3, #28]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0204 	bic.w	r2, r2, #4
 80025f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69d9      	ldr	r1, [r3, #28]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	61da      	str	r2, [r3, #28]
      break;
 8002604:	e064      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68b9      	ldr	r1, [r7, #8]
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fb65 	bl	8002cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69da      	ldr	r2, [r3, #28]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69d9      	ldr	r1, [r3, #28]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	021a      	lsls	r2, r3, #8
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	61da      	str	r2, [r3, #28]
      break;
 8002646:	e043      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fbae 	bl	8002db0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0208 	orr.w	r2, r2, #8
 8002662:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002686:	e023      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fbf2 	bl	8002e78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	021a      	lsls	r2, r3, #8
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80026c8:	e002      	b.n	80026d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
      break;
 80026ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop

080026e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d101      	bne.n	8002700 <HAL_TIM_ConfigClockSource+0x1c>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e0b6      	b.n	800286e <HAL_TIM_ConfigClockSource+0x18a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800272a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273c:	d03e      	beq.n	80027bc <HAL_TIM_ConfigClockSource+0xd8>
 800273e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002742:	f200 8087 	bhi.w	8002854 <HAL_TIM_ConfigClockSource+0x170>
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274a:	f000 8086 	beq.w	800285a <HAL_TIM_ConfigClockSource+0x176>
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002752:	d87f      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x170>
 8002754:	2b70      	cmp	r3, #112	; 0x70
 8002756:	d01a      	beq.n	800278e <HAL_TIM_ConfigClockSource+0xaa>
 8002758:	2b70      	cmp	r3, #112	; 0x70
 800275a:	d87b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x170>
 800275c:	2b60      	cmp	r3, #96	; 0x60
 800275e:	d050      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x11e>
 8002760:	2b60      	cmp	r3, #96	; 0x60
 8002762:	d877      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x170>
 8002764:	2b50      	cmp	r3, #80	; 0x50
 8002766:	d03c      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0xfe>
 8002768:	2b50      	cmp	r3, #80	; 0x50
 800276a:	d873      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x170>
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	d058      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x13e>
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	d86f      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x170>
 8002774:	2b30      	cmp	r3, #48	; 0x30
 8002776:	d064      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15e>
 8002778:	2b30      	cmp	r3, #48	; 0x30
 800277a:	d86b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x170>
 800277c:	2b20      	cmp	r3, #32
 800277e:	d060      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15e>
 8002780:	2b20      	cmp	r3, #32
 8002782:	d867      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x170>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d05c      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15e>
 8002788:	2b10      	cmp	r3, #16
 800278a:	d05a      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15e>
 800278c:	e062      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6899      	ldr	r1, [r3, #8]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f000 fc4b 	bl	8003038 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	609a      	str	r2, [r3, #8]
      break;
 80027ba:	e04f      	b.n	800285c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f000 fc34 	bl	8003038 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027de:	609a      	str	r2, [r3, #8]
      break;
 80027e0:	e03c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 fba8 	bl	8002f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2150      	movs	r1, #80	; 0x50
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fc01 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002800:	e02c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	f000 fbc7 	bl	8002fa2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2160      	movs	r1, #96	; 0x60
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fbf1 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002820:	e01c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	461a      	mov	r2, r3
 8002830:	f000 fb88 	bl	8002f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2140      	movs	r1, #64	; 0x40
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fbe1 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002840:	e00c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f000 fbd8 	bl	8003002 <TIM_ITRx_SetConfig>
      break;
 8002852:	e003      	b.n	800285c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e000      	b.n	800285c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800285a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a3c      	ldr	r2, [pc, #240]	; (800297c <TIM_Base_SetConfig+0x104>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00f      	beq.n	80028b0 <TIM_Base_SetConfig+0x38>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002896:	d00b      	beq.n	80028b0 <TIM_Base_SetConfig+0x38>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a39      	ldr	r2, [pc, #228]	; (8002980 <TIM_Base_SetConfig+0x108>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d007      	beq.n	80028b0 <TIM_Base_SetConfig+0x38>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a38      	ldr	r2, [pc, #224]	; (8002984 <TIM_Base_SetConfig+0x10c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_Base_SetConfig+0x38>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a37      	ldr	r2, [pc, #220]	; (8002988 <TIM_Base_SetConfig+0x110>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d108      	bne.n	80028c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a2d      	ldr	r2, [pc, #180]	; (800297c <TIM_Base_SetConfig+0x104>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01b      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d0:	d017      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a2a      	ldr	r2, [pc, #168]	; (8002980 <TIM_Base_SetConfig+0x108>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a29      	ldr	r2, [pc, #164]	; (8002984 <TIM_Base_SetConfig+0x10c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00f      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a28      	ldr	r2, [pc, #160]	; (8002988 <TIM_Base_SetConfig+0x110>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00b      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a27      	ldr	r2, [pc, #156]	; (800298c <TIM_Base_SetConfig+0x114>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d007      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a26      	ldr	r2, [pc, #152]	; (8002990 <TIM_Base_SetConfig+0x118>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d003      	beq.n	8002902 <TIM_Base_SetConfig+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a25      	ldr	r2, [pc, #148]	; (8002994 <TIM_Base_SetConfig+0x11c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d108      	bne.n	8002914 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a10      	ldr	r2, [pc, #64]	; (800297c <TIM_Base_SetConfig+0x104>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d00f      	beq.n	8002960 <TIM_Base_SetConfig+0xe8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a11      	ldr	r2, [pc, #68]	; (8002988 <TIM_Base_SetConfig+0x110>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d00b      	beq.n	8002960 <TIM_Base_SetConfig+0xe8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a10      	ldr	r2, [pc, #64]	; (800298c <TIM_Base_SetConfig+0x114>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <TIM_Base_SetConfig+0xe8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <TIM_Base_SetConfig+0x118>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_Base_SetConfig+0xe8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <TIM_Base_SetConfig+0x11c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d103      	bne.n	8002968 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	615a      	str	r2, [r3, #20]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40013400 	.word	0x40013400
 800298c:	40014000 	.word	0x40014000
 8002990:	40014400 	.word	0x40014400
 8002994:	40014800 	.word	0x40014800

08002998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	f023 0201 	bic.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f023 0302 	bic.w	r3, r3, #2
 80029e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a2c      	ldr	r2, [pc, #176]	; (8002aa4 <TIM_OC1_SetConfig+0x10c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00f      	beq.n	8002a18 <TIM_OC1_SetConfig+0x80>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a2b      	ldr	r2, [pc, #172]	; (8002aa8 <TIM_OC1_SetConfig+0x110>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <TIM_OC1_SetConfig+0x80>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <TIM_OC1_SetConfig+0x114>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <TIM_OC1_SetConfig+0x80>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <TIM_OC1_SetConfig+0x118>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_OC1_SetConfig+0x80>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a28      	ldr	r2, [pc, #160]	; (8002ab4 <TIM_OC1_SetConfig+0x11c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d10c      	bne.n	8002a32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f023 0308 	bic.w	r3, r3, #8
 8002a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f023 0304 	bic.w	r3, r3, #4
 8002a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <TIM_OC1_SetConfig+0x10c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00f      	beq.n	8002a5a <TIM_OC1_SetConfig+0xc2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <TIM_OC1_SetConfig+0x110>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00b      	beq.n	8002a5a <TIM_OC1_SetConfig+0xc2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <TIM_OC1_SetConfig+0x114>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d007      	beq.n	8002a5a <TIM_OC1_SetConfig+0xc2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <TIM_OC1_SetConfig+0x118>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d003      	beq.n	8002a5a <TIM_OC1_SetConfig+0xc2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <TIM_OC1_SetConfig+0x11c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d111      	bne.n	8002a7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	621a      	str	r2, [r3, #32]
}
 8002a98:	bf00      	nop
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40013400 	.word	0x40013400
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	40014400 	.word	0x40014400
 8002ab4:	40014800 	.word	0x40014800

08002ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0210 	bic.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0320 	bic.w	r3, r3, #32
 8002b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <TIM_OC2_SetConfig+0x100>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d003      	beq.n	8002b24 <TIM_OC2_SetConfig+0x6c>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <TIM_OC2_SetConfig+0x104>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d10d      	bne.n	8002b40 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <TIM_OC2_SetConfig+0x100>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00f      	beq.n	8002b68 <TIM_OC2_SetConfig+0xb0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <TIM_OC2_SetConfig+0x104>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00b      	beq.n	8002b68 <TIM_OC2_SetConfig+0xb0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <TIM_OC2_SetConfig+0x108>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d007      	beq.n	8002b68 <TIM_OC2_SetConfig+0xb0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <TIM_OC2_SetConfig+0x10c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_OC2_SetConfig+0xb0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a19      	ldr	r2, [pc, #100]	; (8002bc8 <TIM_OC2_SetConfig+0x110>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d113      	bne.n	8002b90 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b6e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b76:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	621a      	str	r2, [r3, #32]
}
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40013400 	.word	0x40013400
 8002bc0:	40014000 	.word	0x40014000
 8002bc4:	40014400 	.word	0x40014400
 8002bc8:	40014800 	.word	0x40014800

08002bcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a27      	ldr	r2, [pc, #156]	; (8002cc8 <TIM_OC3_SetConfig+0xfc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d003      	beq.n	8002c36 <TIM_OC3_SetConfig+0x6a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a26      	ldr	r2, [pc, #152]	; (8002ccc <TIM_OC3_SetConfig+0x100>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10d      	bne.n	8002c52 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c50:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <TIM_OC3_SetConfig+0xfc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d00f      	beq.n	8002c7a <TIM_OC3_SetConfig+0xae>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <TIM_OC3_SetConfig+0x100>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00b      	beq.n	8002c7a <TIM_OC3_SetConfig+0xae>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <TIM_OC3_SetConfig+0x104>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <TIM_OC3_SetConfig+0xae>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a19      	ldr	r2, [pc, #100]	; (8002cd4 <TIM_OC3_SetConfig+0x108>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_OC3_SetConfig+0xae>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <TIM_OC3_SetConfig+0x10c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d113      	bne.n	8002ca2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	621a      	str	r2, [r3, #32]
}
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	40013400 	.word	0x40013400
 8002cd0:	40014000 	.word	0x40014000
 8002cd4:	40014400 	.word	0x40014400
 8002cd8:	40014800 	.word	0x40014800

08002cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	031b      	lsls	r3, r3, #12
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <TIM_OC4_SetConfig+0xc0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00f      	beq.n	8002d60 <TIM_OC4_SetConfig+0x84>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <TIM_OC4_SetConfig+0xc4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00b      	beq.n	8002d60 <TIM_OC4_SetConfig+0x84>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a16      	ldr	r2, [pc, #88]	; (8002da4 <TIM_OC4_SetConfig+0xc8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <TIM_OC4_SetConfig+0x84>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <TIM_OC4_SetConfig+0xcc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_OC4_SetConfig+0x84>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <TIM_OC4_SetConfig+0xd0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d109      	bne.n	8002d74 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	bf00      	nop
 8002d90:	371c      	adds	r7, #28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40013400 	.word	0x40013400
 8002da4:	40014000 	.word	0x40014000
 8002da8:	40014400 	.word	0x40014400
 8002dac:	40014800 	.word	0x40014800

08002db0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002df4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <TIM_OC5_SetConfig+0xb4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00f      	beq.n	8002e2a <TIM_OC5_SetConfig+0x7a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <TIM_OC5_SetConfig+0xb8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00b      	beq.n	8002e2a <TIM_OC5_SetConfig+0x7a>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <TIM_OC5_SetConfig+0xbc>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d007      	beq.n	8002e2a <TIM_OC5_SetConfig+0x7a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <TIM_OC5_SetConfig+0xc0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <TIM_OC5_SetConfig+0x7a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <TIM_OC5_SetConfig+0xc4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d109      	bne.n	8002e3e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	621a      	str	r2, [r3, #32]
}
 8002e58:	bf00      	nop
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40012c00 	.word	0x40012c00
 8002e68:	40013400 	.word	0x40013400
 8002e6c:	40014000 	.word	0x40014000
 8002e70:	40014400 	.word	0x40014400
 8002e74:	40014800 	.word	0x40014800

08002e78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	051b      	lsls	r3, r3, #20
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a18      	ldr	r2, [pc, #96]	; (8002f30 <TIM_OC6_SetConfig+0xb8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00f      	beq.n	8002ef4 <TIM_OC6_SetConfig+0x7c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a17      	ldr	r2, [pc, #92]	; (8002f34 <TIM_OC6_SetConfig+0xbc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_OC6_SetConfig+0x7c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <TIM_OC6_SetConfig+0xc0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <TIM_OC6_SetConfig+0x7c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <TIM_OC6_SetConfig+0xc4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_OC6_SetConfig+0x7c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <TIM_OC6_SetConfig+0xc8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d109      	bne.n	8002f08 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	029b      	lsls	r3, r3, #10
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40013400 	.word	0x40013400
 8002f38:	40014000 	.word	0x40014000
 8002f3c:	40014400 	.word	0x40014400
 8002f40:	40014800 	.word	0x40014800

08002f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	f023 0201 	bic.w	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f023 030a 	bic.w	r3, r3, #10
 8002f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	621a      	str	r2, [r3, #32]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b087      	sub	sp, #28
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0210 	bic.w	r2, r3, #16
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	031b      	lsls	r3, r3, #12
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	621a      	str	r2, [r3, #32]
}
 8002ff6:	bf00      	nop
 8002ff8:	371c      	adds	r7, #28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003002:	b480      	push	{r7}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4313      	orrs	r3, r2
 8003020:	f043 0307 	orr.w	r3, r3, #7
 8003024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	609a      	str	r2, [r3, #8]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	021a      	lsls	r2, r3, #8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	431a      	orrs	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4313      	orrs	r3, r2
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	609a      	str	r2, [r3, #8]
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2201      	movs	r2, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1a      	ldr	r2, [r3, #32]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	43db      	mvns	r3, r3
 800309a:	401a      	ands	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a1a      	ldr	r2, [r3, #32]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	431a      	orrs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	621a      	str	r2, [r3, #32]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d8:	2302      	movs	r3, #2
 80030da:	e063      	b.n	80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2202      	movs	r2, #2
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2b      	ldr	r2, [pc, #172]	; (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2a      	ldr	r2, [pc, #168]	; (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d108      	bne.n	8003122 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d018      	beq.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d013      	beq.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00e      	beq.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a17      	ldr	r2, [pc, #92]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d009      	beq.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d004      	beq.n	8003178 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a13      	ldr	r2, [pc, #76]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d10c      	bne.n	8003192 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800317e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	4313      	orrs	r3, r2
 8003188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	40013400 	.word	0x40013400
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40014000 	.word	0x40014000

080031c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80031dc:	2302      	movs	r3, #2
 80031de:	e065      	b.n	80032ac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	4313      	orrs	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d115      	bne.n	800329a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	051b      	lsls	r3, r3, #20
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40013400 	.word	0x40013400

080032c0 <__libc_init_array>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	4d0d      	ldr	r5, [pc, #52]	; (80032f8 <__libc_init_array+0x38>)
 80032c4:	4c0d      	ldr	r4, [pc, #52]	; (80032fc <__libc_init_array+0x3c>)
 80032c6:	1b64      	subs	r4, r4, r5
 80032c8:	10a4      	asrs	r4, r4, #2
 80032ca:	2600      	movs	r6, #0
 80032cc:	42a6      	cmp	r6, r4
 80032ce:	d109      	bne.n	80032e4 <__libc_init_array+0x24>
 80032d0:	4d0b      	ldr	r5, [pc, #44]	; (8003300 <__libc_init_array+0x40>)
 80032d2:	4c0c      	ldr	r4, [pc, #48]	; (8003304 <__libc_init_array+0x44>)
 80032d4:	f000 f820 	bl	8003318 <_init>
 80032d8:	1b64      	subs	r4, r4, r5
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	2600      	movs	r6, #0
 80032de:	42a6      	cmp	r6, r4
 80032e0:	d105      	bne.n	80032ee <__libc_init_array+0x2e>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e8:	4798      	blx	r3
 80032ea:	3601      	adds	r6, #1
 80032ec:	e7ee      	b.n	80032cc <__libc_init_array+0xc>
 80032ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f2:	4798      	blx	r3
 80032f4:	3601      	adds	r6, #1
 80032f6:	e7f2      	b.n	80032de <__libc_init_array+0x1e>
 80032f8:	08003360 	.word	0x08003360
 80032fc:	08003360 	.word	0x08003360
 8003300:	08003360 	.word	0x08003360
 8003304:	08003364 	.word	0x08003364

08003308 <memset>:
 8003308:	4402      	add	r2, r0
 800330a:	4603      	mov	r3, r0
 800330c:	4293      	cmp	r3, r2
 800330e:	d100      	bne.n	8003312 <memset+0xa>
 8003310:	4770      	bx	lr
 8003312:	f803 1b01 	strb.w	r1, [r3], #1
 8003316:	e7f9      	b.n	800330c <memset+0x4>

08003318 <_init>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr

08003324 <_fini>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	bf00      	nop
 8003328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332a:	bc08      	pop	{r3}
 800332c:	469e      	mov	lr, r3
 800332e:	4770      	bx	lr
